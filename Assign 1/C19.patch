Only in xv6-public: asm.h
Only in xv6-public: bio.c
Only in xv6-public: bio.d
Only in xv6-public: bio.o
Only in xv6-public: bootasm.d
Only in xv6-public: bootasm.o
Only in xv6-public: bootasm.S
Only in xv6-public: bootblock
Only in xv6-public: bootblock.asm
Only in xv6-public: bootblock.o
Only in xv6-public: bootblockother.o
Only in xv6-public: bootmain.c
Only in xv6-public: bootmain.d
Only in xv6-public: bootmain.o
Only in xv6-public: buf.h
Only in xv6-public: BUGS
Only in xv6-public: _cat
Only in xv6-public: cat.asm
Only in xv6-public: cat.c
Only in xv6-public: cat.d
Only in xv6-public: cat.o
Only in xv6-public: cat.sym
Only in xv6-public: console.c
Only in xv6-public: console.d
Only in xv6-public: console.o
Only in xv6-public: cuth
Only in xv6-public: .cvsignore
Only in xv6-public: date.h
Only in xv6-public: defs.h
Only in xv6-public: .dir-locals.el
Only in xv6-public: dot-bochsrc
Only in xv6-public: _echo
Only in xv6-public: echo.asm
Only in xv6-public: echo.c
Only in xv6-public: echo.d
Only in xv6-public: echo.o
Only in xv6-public: echo.sym
Only in xv6-public: elf.h
Only in xv6-public: entry.o
Only in xv6-public: entryother
Only in xv6-public: entryother.asm
Only in xv6-public: entryother.d
Only in xv6-public: entryother.o
Only in xv6-public: entryother.S
Only in xv6-public: entry.S
Only in xv6-public: exec.c
Only in xv6-public: exec.d
Only in xv6-public: exec.o
Only in xv6-public: fcntl.h
Only in xv6-public: file.c
Only in xv6-public: file.d
Only in xv6-public: file.h
Only in xv6-public: file.o
Only in xv6-public: _forktest
Only in xv6-public: forktest.asm
Only in xv6-public: forktest.c
Only in xv6-public: forktest.d
Only in xv6-public: forktest.o
Only in xv6-public: fs.c
Only in xv6-public: fs.d
Only in xv6-public: fs.h
Only in xv6-public: fs.img
Only in xv6-public: fs.o
Only in xv6-public: .gdbinit.tmpl
Only in xv6-public: gdbutil
Only in xv6-public: .git
Only in xv6-public: .gitignore
Only in xv6-public: _grep
Only in xv6-public: grep.asm
Only in xv6-public: grep.c
Only in xv6-public: grep.d
Only in xv6-public: grep.o
Only in xv6-public: grep.sym
Only in xv6-public: ide.c
Only in xv6-public: ide.d
Only in xv6-public: ide.o
Only in xv6-public: _init
Only in xv6-public: init.asm
Only in xv6-public: init.c
Only in xv6-public: initcode
Only in xv6-public: initcode.asm
Only in xv6-public: initcode.d
Only in xv6-public: initcode.o
Only in xv6-public: initcode.out
Only in xv6-public: initcode.S
Only in xv6-public: init.d
Only in xv6-public: init.o
Only in xv6-public: init.sym
Only in xv6-public: ioapic.c
Only in xv6-public: ioapic.d
Only in xv6-public: ioapic.o
Only in xv6-public: kalloc.c
Only in xv6-public: kalloc.d
Only in xv6-public: kalloc.o
Only in xv6-public: kbd.c
Only in xv6-public: kbd.d
Only in xv6-public: kbd.h
Only in xv6-public: kbd.o
Only in xv6-public: kernel
Only in xv6-public: kernel.asm
Only in xv6-public: kernel.ld
Only in xv6-public: kernel.sym
Only in xv6-public: _kill
Only in xv6-public: kill.asm
Only in xv6-public: kill.c
Only in xv6-public: kill.d
Only in xv6-public: kill.o
Only in xv6-public: kill.sym
Only in xv6-public: lapic.c
Only in xv6-public: lapic.d
Only in xv6-public: lapic.o
Only in xv6-public: LICENSE
Only in xv6-public: _ln
Only in xv6-public: ln.asm
Only in xv6-public: ln.c
Only in xv6-public: ln.d
Only in xv6-public: ln.o
Only in xv6-public: ln.sym
Only in xv6-public: log.c
Only in xv6-public: log.d
Only in xv6-public: log.o
Only in xv6-public: _ls
Only in xv6-public: ls.asm
Only in xv6-public: ls.c
Only in xv6-public: ls.d
Only in xv6-public: ls.o
Only in xv6-public: ls.sym
Only in xv6-public: main.c
Only in xv6-public: main.d
Only in xv6-public: main.o
Only in xv6-public: Makefile
Only in xv6-public: memide.c
Only in xv6-public: memlayout.h
Only in xv6-public: _mkdir
Only in xv6-public: mkdir.asm
Only in xv6-public: mkdir.c
Only in xv6-public: mkdir.d
Only in xv6-public: mkdir.o
Only in xv6-public: mkdir.sym
Only in xv6-public: mkfs
Only in xv6-public: mkfs.c
Only in xv6-public: mmu.h
Only in xv6-public: mp.c
Only in xv6-public: mp.d
Only in xv6-public: mp.h
Only in xv6-public: mp.o
Only in xv6-public: Notes
Only in xv6-public: param.h
Only in xv6-public: picirq.c
Only in xv6-public: picirq.d
Only in xv6-public: picirq.o
Only in xv6-public: pipe.c
Only in xv6-public: pipe.d
Only in xv6-public: pipe.o
Only in xv6-public: printf.c
Only in xv6-public: printf.d
Only in xv6-public: printf.o
Only in xv6-public: printpcs
Only in xv6-public: proc.c
Only in xv6-public: proc.d
Only in xv6-public: proc.h
Only in xv6-public: proc.o
Only in xv6-public: pr.pl
Only in xv6-public: README
Only in xv6-public: _rm
Only in xv6-public: rm.asm
Only in xv6-public: rm.c
Only in xv6-public: rm.d
Only in xv6-public: rm.o
Only in xv6-public: rm.sym
Only in xv6-public: runoff
Only in xv6-public: runoff1
Only in xv6-public: runoff.list
Only in xv6-public: runoff.spec
Only in xv6-public: _sh
Only in xv6-public: sh.asm
Only in xv6-public: sh.c
Only in xv6-public: sh.d
Only in xv6-public: sh.o
Only in xv6-public: show1
Only in xv6-public: sh.sym
Only in xv6-public: sign.pl
Only in xv6-public: sleep1.p
Only in xv6-public: sleeplock.c
Only in xv6-public: sleeplock.d
Only in xv6-public: sleeplock.h
Only in xv6-public: sleeplock.o
Only in xv6-public: spinlock.c
Only in xv6-public: spinlock.d
Only in xv6-public: spinlock.h
Only in xv6-public: spinlock.o
Only in xv6-public: spinp
Only in xv6-public: stat.h
Only in xv6-public: _stressfs
Only in xv6-public: stressfs.asm
Only in xv6-public: stressfs.c
Only in xv6-public: stressfs.d
Only in xv6-public: stressfs.o
Only in xv6-public: stressfs.sym
Only in xv6-public: string.c
Only in xv6-public: string.d
Only in xv6-public: string.o
Only in xv6-public: swtch.o
Only in xv6-public: swtch.S
Only in xv6-public: syscall.c
Only in xv6-public: syscall.d
Only in xv6-public: syscall.h
Only in xv6-public: syscall.o
Only in xv6-public: sysfile.c
Only in xv6-public: sysfile.d
Only in xv6-public: sysfile.o
Only in xv6-public: sysproc.c
Only in xv6-public: sysproc.d
Only in xv6-public: sysproc.o
Only in xv6-public: _thread
Only in xv6-public: thread.asm
Only in xv6-public: thread.c
Only in xv6-public: thread.d
Only in xv6-public: thread.o
Only in xv6-public: thread.sym
Only in xv6-public: toc.ftr
Only in xv6-public: toc.hdr
Only in xv6-public: trapasm.o
Only in xv6-public: trapasm.S
Only in xv6-public: trap.c
Only in xv6-public: trap.d
Only in xv6-public: trap.o
Only in xv6-public: traps.h
Only in xv6-public: TRICKS
Only in xv6-public: types.h
Only in xv6-public: uart.c
Only in xv6-public: uart.d
Only in xv6-public: uart.o
Only in xv6-public: ulib.c
Only in xv6-public: ulib.d
Only in xv6-public: ulib.o
Only in xv6-public: umalloc.c
Only in xv6-public: umalloc.d
Binary files xv6_old/umalloc.o and xv6-public/umalloc.o differ
diff -u xv6_old/user.h xv6-public/user.h
--- xv6_old/user.h	2022-09-05 22:39:14.277664407 +0530
+++ xv6-public/user.h	2022-09-04 16:36:29.506821727 +0530
@@ -23,6 +23,10 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*)(void*), void*, void*);
+int thread_join(void);
+void thread_exit(void);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
Only in xv6_old: _usertests
Only in xv6_old: usertests.asm
Only in xv6_old: usertests.c
Only in xv6_old: usertests.d
Only in xv6_old: usertests.o
Only in xv6_old: usertests.sym
Binary files xv6_old/usys.o and xv6-public/usys.o differ
diff -u xv6_old/usys.S xv6-public/usys.S
--- xv6_old/usys.S	2022-09-05 22:38:56.641546624 +0530
+++ xv6-public/usys.S	2022-09-04 16:45:41.786846642 +0530
@@ -29,3 +29,6 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(thread_create)
+SYSCALL(thread_join)
+SYSCALL(thread_exit)
\ No newline at end of file
Binary files xv6_old/vectors.o and xv6-public/vectors.o differ
Binary files xv6_old/vm.o and xv6-public/vm.o differ
Binary files xv6_old/_wc and xv6-public/_wc differ
diff -u xv6_old/wc.asm xv6-public/wc.asm
--- xv6_old/wc.asm	2022-09-05 22:38:34.509404643 +0530
+++ xv6-public/wc.asm	2022-09-05 21:37:13.816878722 +0530
@@ -11,28 +11,27 @@
 int
 main(int argc, char *argv[])
 {
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	be 01 00 00 00       	mov    $0x1,%esi
-  18:	53                   	push   %ebx
-  19:	51                   	push   %ecx
-  1a:	83 ec 18             	sub    $0x18,%esp
-  1d:	8b 01                	mov    (%ecx),%eax
-  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
-  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  25:	83 c3 04             	add    $0x4,%ebx
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
   int fd, i;
 
   if(argc <= 1){
-  28:	83 f8 01             	cmp    $0x1,%eax
-  2b:	7e 52                	jle    7f <main+0x7f>
-  2d:	8d 76 00             	lea    0x0(%esi),%esi
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     wc(0, "");
     exit();
   }
@@ -41,8 +40,8 @@
     if((fd = open(argv[i], 0)) < 0){
   30:	83 ec 08             	sub    $0x8,%esp
   33:	6a 00                	push   $0x0
-  35:	ff 33                	pushl  (%ebx)
-  37:	e8 f7 03 00 00       	call   433 <open>
+  35:	ff 33                	push   (%ebx)
+  37:	e8 d7 03 00 00       	call   413 <open>
   3c:	83 c4 10             	add    $0x10,%esp
   3f:	89 c7                	mov    %eax,%edi
   41:	85 c0                	test   %eax,%eax
@@ -52,7 +51,7 @@
     }
     wc(fd, argv[i]);
   45:	83 ec 08             	sub    $0x8,%esp
-  48:	ff 33                	pushl  (%ebx)
+  48:	ff 33                	push   (%ebx)
   for(i = 1; i < argc; i++){
   4a:	83 c6 01             	add    $0x1,%esi
   4d:	83 c3 04             	add    $0x4,%ebx
@@ -61,30 +60,30 @@
   51:	e8 4a 00 00 00       	call   a0 <wc>
     close(fd);
   56:	89 3c 24             	mov    %edi,(%esp)
-  59:	e8 bd 03 00 00       	call   41b <close>
+  59:	e8 9d 03 00 00       	call   3fb <close>
   for(i = 1; i < argc; i++){
   5e:	83 c4 10             	add    $0x10,%esp
   61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
   64:	75 ca                	jne    30 <main+0x30>
   }
   exit();
-  66:	e8 88 03 00 00       	call   3f3 <exit>
+  66:	e8 68 03 00 00       	call   3d3 <exit>
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
-  6c:	ff 33                	pushl  (%ebx)
-  6e:	68 db 08 00 00       	push   $0x8db
+  6c:	ff 33                	push   (%ebx)
+  6e:	68 8b 08 00 00       	push   $0x88b
   73:	6a 01                	push   $0x1
-  75:	e8 d6 04 00 00       	call   550 <printf>
+  75:	e8 c6 04 00 00       	call   540 <printf>
       exit();
-  7a:	e8 74 03 00 00       	call   3f3 <exit>
+  7a:	e8 54 03 00 00       	call   3d3 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 cd 08 00 00       	push   $0x8cd
+  81:	68 7d 08 00 00       	push   $0x87d
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
-  8d:	e8 61 03 00 00       	call   3f3 <exit>
+  8d:	e8 41 03 00 00       	call   3d3 <exit>
   92:	66 90                	xchg   %ax,%ax
   94:	66 90                	xchg   %ax,%ax
   96:	66 90                	xchg   %ax,%ax
@@ -95,1241 +94,1207 @@
 
 000000a0 <wc>:
 {
-  a0:	f3 0f 1e fb          	endbr32 
-  a4:	55                   	push   %ebp
-  a5:	89 e5                	mov    %esp,%ebp
-  a7:	57                   	push   %edi
-  a8:	56                   	push   %esi
-  a9:	53                   	push   %ebx
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
   l = w = c = 0;
-  aa:	31 db                	xor    %ebx,%ebx
+  a6:	31 db                	xor    %ebx,%ebx
 {
-  ac:	83 ec 1c             	sub    $0x1c,%esp
+  a8:	83 ec 1c             	sub    $0x1c,%esp
   inword = 0;
-  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   l = w = c = 0;
-  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
-  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
   while((n = read(fd, buf, sizeof(buf))) > 0){
-  c8:	83 ec 04             	sub    $0x4,%esp
-  cb:	68 00 02 00 00       	push   $0x200
-  d0:	68 00 0c 00 00       	push   $0xc00
-  d5:	ff 75 08             	pushl  0x8(%ebp)
-  d8:	e8 2e 03 00 00       	call   40b <read>
-  dd:	83 c4 10             	add    $0x10,%esp
-  e0:	89 c6                	mov    %eax,%esi
-  e2:	85 c0                	test   %eax,%eax
-  e4:	7e 62                	jle    148 <wc+0xa8>
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 00 0c 00 00       	push   $0xc00
+  cd:	ff 75 08             	push   0x8(%ebp)
+  d0:	e8 16 03 00 00       	call   3eb <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	89 c6                	mov    %eax,%esi
+  da:	85 c0                	test   %eax,%eax
+  dc:	7e 62                	jle    140 <wc+0xa0>
     for(i=0; i<n; i++){
-  e6:	31 ff                	xor    %edi,%edi
-  e8:	eb 14                	jmp    fe <wc+0x5e>
-  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  de:	31 ff                	xor    %edi,%edi
+  e0:	eb 14                	jmp    f6 <wc+0x56>
+  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         inword = 0;
-  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
     for(i=0; i<n; i++){
-  f7:	83 c7 01             	add    $0x1,%edi
-  fa:	39 fe                	cmp    %edi,%esi
-  fc:	74 42                	je     140 <wc+0xa0>
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
       if(buf[i] == '\n')
-  fe:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
         l++;
- 105:	31 c9                	xor    %ecx,%ecx
- 107:	3c 0a                	cmp    $0xa,%al
- 109:	0f 94 c1             	sete   %cl
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
       if(strchr(" \r\t\n\v", buf[i]))
- 10c:	83 ec 08             	sub    $0x8,%esp
- 10f:	50                   	push   %eax
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
         l++;
- 110:	01 cb                	add    %ecx,%ebx
+ 108:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 112:	68 b8 08 00 00       	push   $0x8b8
- 117:	e8 54 01 00 00       	call   270 <strchr>
- 11c:	83 c4 10             	add    $0x10,%esp
- 11f:	85 c0                	test   %eax,%eax
- 121:	75 cd                	jne    f0 <wc+0x50>
+ 10a:	68 68 08 00 00       	push   $0x868
+ 10f:	e8 4c 01 00 00       	call   260 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
       else if(!inword){
- 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
- 126:	85 d2                	test   %edx,%edx
- 128:	75 cd                	jne    f7 <wc+0x57>
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
     for(i=0; i<n; i++){
- 12a:	83 c7 01             	add    $0x1,%edi
+ 122:	83 c7 01             	add    $0x1,%edi
         w++;
- 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+ 125:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
         inword = 1;
- 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
     for(i=0; i<n; i++){
- 138:	39 fe                	cmp    %edi,%esi
- 13a:	75 c2                	jne    fe <wc+0x5e>
- 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 140:	01 75 dc             	add    %esi,-0x24(%ebp)
- 143:	eb 83                	jmp    c8 <wc+0x28>
- 145:	8d 76 00             	lea    0x0(%esi),%esi
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      c++;
+ 138:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
   if(n < 0){
- 148:	75 24                	jne    16e <wc+0xce>
+ 140:	75 24                	jne    166 <wc+0xc6>
   printf(1, "%d %d %d %s\n", l, w, c, name);
- 14a:	83 ec 08             	sub    $0x8,%esp
- 14d:	ff 75 0c             	pushl  0xc(%ebp)
- 150:	ff 75 dc             	pushl  -0x24(%ebp)
- 153:	ff 75 e0             	pushl  -0x20(%ebp)
- 156:	53                   	push   %ebx
- 157:	68 ce 08 00 00       	push   $0x8ce
- 15c:	6a 01                	push   $0x1
- 15e:	e8 ed 03 00 00       	call   550 <printf>
-}
- 163:	83 c4 20             	add    $0x20,%esp
- 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 169:	5b                   	pop    %ebx
- 16a:	5e                   	pop    %esi
- 16b:	5f                   	pop    %edi
- 16c:	5d                   	pop    %ebp
- 16d:	c3                   	ret    
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	push   0xc(%ebp)
+ 148:	ff 75 dc             	push   -0x24(%ebp)
+ 14b:	ff 75 e0             	push   -0x20(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 7e 08 00 00       	push   $0x87e
+ 154:	6a 01                	push   $0x1
+ 156:	e8 e5 03 00 00       	call   540 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
     printf(1, "wc: read error\n");
- 16e:	50                   	push   %eax
- 16f:	50                   	push   %eax
- 170:	68 be 08 00 00       	push   $0x8be
- 175:	6a 01                	push   $0x1
- 177:	e8 d4 03 00 00       	call   550 <printf>
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 6e 08 00 00       	push   $0x86e
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 cc 03 00 00       	call   540 <printf>
     exit();
- 17c:	e8 72 02 00 00       	call   3f3 <exit>
- 181:	66 90                	xchg   %ax,%ax
- 183:	66 90                	xchg   %ax,%ax
- 185:	66 90                	xchg   %ax,%ax
- 187:	66 90                	xchg   %ax,%ax
- 189:	66 90                	xchg   %ax,%ax
- 18b:	66 90                	xchg   %ax,%ax
- 18d:	66 90                	xchg   %ax,%ax
- 18f:	90                   	nop
+ 174:	e8 5a 02 00 00       	call   3d3 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
 
-00000190 <strcpy>:
+00000180 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
+ 180:	55                   	push   %ebp
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
- 195:	31 c0                	xor    %eax,%eax
+ 181:	31 c0                	xor    %eax,%eax
 {
- 197:	89 e5                	mov    %esp,%ebp
- 199:	53                   	push   %ebx
- 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 183:	89 e5                	mov    %esp,%ebp
+ 185:	53                   	push   %ebx
+ 186:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 189:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while((*s++ = *t++) != 0)
- 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 1a7:	83 c0 01             	add    $0x1,%eax
- 1aa:	84 d2                	test   %dl,%dl
- 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
+ 190:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 194:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 197:	83 c0 01             	add    $0x1,%eax
+ 19a:	84 d2                	test   %dl,%dl
+ 19c:	75 f2                	jne    190 <strcpy+0x10>
     ;
   return os;
 }
- 1ae:	89 c8                	mov    %ecx,%eax
- 1b0:	5b                   	pop    %ebx
- 1b1:	5d                   	pop    %ebp
- 1b2:	c3                   	ret    
- 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 19e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1a1:	89 c8                	mov    %ecx,%eax
+ 1a3:	c9                   	leave  
+ 1a4:	c3                   	ret    
+ 1a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000001c0 <strcmp>:
+000001b0 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
- 1c0:	f3 0f 1e fb          	endbr32 
- 1c4:	55                   	push   %ebp
- 1c5:	89 e5                	mov    %esp,%ebp
- 1c7:	53                   	push   %ebx
- 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
- 1ce:	0f b6 01             	movzbl (%ecx),%eax
- 1d1:	0f b6 1a             	movzbl (%edx),%ebx
- 1d4:	84 c0                	test   %al,%al
- 1d6:	75 19                	jne    1f1 <strcmp+0x31>
- 1d8:	eb 26                	jmp    200 <strcmp+0x40>
- 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 1ba:	0f b6 02             	movzbl (%edx),%eax
+ 1bd:	84 c0                	test   %al,%al
+ 1bf:	75 17                	jne    1d8 <strcmp+0x28>
+ 1c1:	eb 3a                	jmp    1fd <strcmp+0x4d>
+ 1c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1c7:	90                   	nop
+ 1c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
     p++, q++;
- 1e4:	83 c1 01             	add    $0x1,%ecx
- 1e7:	83 c2 01             	add    $0x1,%edx
+ 1cc:	83 c2 01             	add    $0x1,%edx
+ 1cf:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
- 1ea:	0f b6 1a             	movzbl (%edx),%ebx
- 1ed:	84 c0                	test   %al,%al
- 1ef:	74 0f                	je     200 <strcmp+0x40>
- 1f1:	38 d8                	cmp    %bl,%al
- 1f3:	74 eb                	je     1e0 <strcmp+0x20>
+ 1d2:	84 c0                	test   %al,%al
+ 1d4:	74 1a                	je     1f0 <strcmp+0x40>
+    p++, q++;
+ 1d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 1d8:	0f b6 19             	movzbl (%ecx),%ebx
+ 1db:	38 c3                	cmp    %al,%bl
+ 1dd:	74 e9                	je     1c8 <strcmp+0x18>
   return (uchar)*p - (uchar)*q;
- 1f5:	29 d8                	sub    %ebx,%eax
+ 1df:	29 d8                	sub    %ebx,%eax
 }
- 1f7:	5b                   	pop    %ebx
- 1f8:	5d                   	pop    %ebp
- 1f9:	c3                   	ret    
- 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 200:	31 c0                	xor    %eax,%eax
+ 1e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1e4:	c9                   	leave  
+ 1e5:	c3                   	ret    
+ 1e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
   return (uchar)*p - (uchar)*q;
- 202:	29 d8                	sub    %ebx,%eax
-}
- 204:	5b                   	pop    %ebx
- 205:	5d                   	pop    %ebp
- 206:	c3                   	ret    
- 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 20e:	66 90                	xchg   %ax,%ax
+ 1f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1f4:	31 c0                	xor    %eax,%eax
+ 1f6:	29 d8                	sub    %ebx,%eax
+}
+ 1f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1fb:	c9                   	leave  
+ 1fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 200:	31 c0                	xor    %eax,%eax
+ 202:	eb db                	jmp    1df <strcmp+0x2f>
+ 204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
 
 00000210 <strlen>:
 
 uint
 strlen(const char *s)
 {
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	8b 55 08             	mov    0x8(%ebp),%edx
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   for(n = 0; s[n]; n++)
- 21a:	80 3a 00             	cmpb   $0x0,(%edx)
- 21d:	74 21                	je     240 <strlen+0x30>
- 21f:	31 c0                	xor    %eax,%eax
- 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 228:	83 c0 01             	add    $0x1,%eax
- 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 22f:	89 c1                	mov    %eax,%ecx
- 231:	75 f5                	jne    228 <strlen+0x18>
+ 216:	80 3a 00             	cmpb   $0x0,(%edx)
+ 219:	74 15                	je     230 <strlen+0x20>
+ 21b:	31 c0                	xor    %eax,%eax
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+ 220:	83 c0 01             	add    $0x1,%eax
+ 223:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 227:	89 c1                	mov    %eax,%ecx
+ 229:	75 f5                	jne    220 <strlen+0x10>
     ;
   return n;
 }
- 233:	89 c8                	mov    %ecx,%eax
- 235:	5d                   	pop    %ebp
- 236:	c3                   	ret    
- 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 23e:	66 90                	xchg   %ax,%ax
+ 22b:	89 c8                	mov    %ecx,%eax
+ 22d:	5d                   	pop    %ebp
+ 22e:	c3                   	ret    
+ 22f:	90                   	nop
   for(n = 0; s[n]; n++)
- 240:	31 c9                	xor    %ecx,%ecx
+ 230:	31 c9                	xor    %ecx,%ecx
 }
- 242:	5d                   	pop    %ebp
- 243:	89 c8                	mov    %ecx,%eax
- 245:	c3                   	ret    
- 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 24d:	8d 76 00             	lea    0x0(%esi),%esi
+ 232:	5d                   	pop    %ebp
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	c3                   	ret    
+ 236:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000250 <memset>:
+00000240 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
- 250:	f3 0f 1e fb          	endbr32 
- 254:	55                   	push   %ebp
- 255:	89 e5                	mov    %esp,%ebp
- 257:	57                   	push   %edi
- 258:	8b 55 08             	mov    0x8(%ebp),%edx
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
- 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 261:	89 d7                	mov    %edx,%edi
- 263:	fc                   	cld    
- 264:	f3 aa                	rep stos %al,%es:(%edi)
+ 247:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 24a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 24d:	89 d7                	mov    %edx,%edi
+ 24f:	fc                   	cld    
+ 250:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
- 266:	89 d0                	mov    %edx,%eax
- 268:	5f                   	pop    %edi
- 269:	5d                   	pop    %ebp
- 26a:	c3                   	ret    
- 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 26f:	90                   	nop
+ 252:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 255:	89 d0                	mov    %edx,%eax
+ 257:	c9                   	leave  
+ 258:	c3                   	ret    
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000270 <strchr>:
+00000260 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	8b 45 08             	mov    0x8(%ebp),%eax
- 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
   for(; *s; s++)
- 27e:	0f b6 10             	movzbl (%eax),%edx
- 281:	84 d2                	test   %dl,%dl
- 283:	75 16                	jne    29b <strchr+0x2b>
- 285:	eb 21                	jmp    2a8 <strchr+0x38>
- 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 28e:	66 90                	xchg   %ax,%ax
- 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 294:	83 c0 01             	add    $0x1,%eax
- 297:	84 d2                	test   %dl,%dl
- 299:	74 0d                	je     2a8 <strchr+0x38>
+ 26a:	0f b6 10             	movzbl (%eax),%edx
+ 26d:	84 d2                	test   %dl,%dl
+ 26f:	75 12                	jne    283 <strchr+0x23>
+ 271:	eb 1d                	jmp    290 <strchr+0x30>
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 27c:	83 c0 01             	add    $0x1,%eax
+ 27f:	84 d2                	test   %dl,%dl
+ 281:	74 0d                	je     290 <strchr+0x30>
     if(*s == c)
- 29b:	38 d1                	cmp    %dl,%cl
- 29d:	75 f1                	jne    290 <strchr+0x20>
+ 283:	38 d1                	cmp    %dl,%cl
+ 285:	75 f1                	jne    278 <strchr+0x18>
       return (char*)s;
   return 0;
 }
- 29f:	5d                   	pop    %ebp
- 2a0:	c3                   	ret    
- 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 287:	5d                   	pop    %ebp
+ 288:	c3                   	ret    
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return 0;
- 2a8:	31 c0                	xor    %eax,%eax
+ 290:	31 c0                	xor    %eax,%eax
 }
- 2aa:	5d                   	pop    %ebp
- 2ab:	c3                   	ret    
- 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 292:	5d                   	pop    %ebp
+ 293:	c3                   	ret    
+ 294:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
 
-000002b0 <gets>:
+000002a0 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	57                   	push   %edi
- 2b8:	56                   	push   %esi
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
- 2b9:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 2a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 2a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 2a9:	31 db                	xor    %ebx,%ebx
 {
- 2bb:	53                   	push   %ebx
- 2bc:	89 f3                	mov    %esi,%ebx
- 2be:	83 ec 1c             	sub    $0x1c,%esp
- 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 2ab:	83 ec 1c             	sub    $0x1c,%esp
   for(i=0; i+1 < max; ){
- 2c4:	eb 33                	jmp    2f9 <gets+0x49>
- 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 2ae:	eb 27                	jmp    2d7 <gets+0x37>
     cc = read(0, &c, 1);
- 2d0:	83 ec 04             	sub    $0x4,%esp
- 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 2d6:	6a 01                	push   $0x1
- 2d8:	50                   	push   %eax
- 2d9:	6a 00                	push   $0x0
- 2db:	e8 2b 01 00 00       	call   40b <read>
+ 2b0:	83 ec 04             	sub    $0x4,%esp
+ 2b3:	6a 01                	push   $0x1
+ 2b5:	57                   	push   %edi
+ 2b6:	6a 00                	push   $0x0
+ 2b8:	e8 2e 01 00 00       	call   3eb <read>
     if(cc < 1)
- 2e0:	83 c4 10             	add    $0x10,%esp
- 2e3:	85 c0                	test   %eax,%eax
- 2e5:	7e 1c                	jle    303 <gets+0x53>
+ 2bd:	83 c4 10             	add    $0x10,%esp
+ 2c0:	85 c0                	test   %eax,%eax
+ 2c2:	7e 1d                	jle    2e1 <gets+0x41>
       break;
     buf[i++] = c;
- 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 2eb:	83 c7 01             	add    $0x1,%edi
- 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
+ 2c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 2f1:	3c 0a                	cmp    $0xa,%al
- 2f3:	74 23                	je     318 <gets+0x68>
- 2f5:	3c 0d                	cmp    $0xd,%al
- 2f7:	74 1f                	je     318 <gets+0x68>
+ 2cf:	3c 0a                	cmp    $0xa,%al
+ 2d1:	74 1d                	je     2f0 <gets+0x50>
+ 2d3:	3c 0d                	cmp    $0xd,%al
+ 2d5:	74 19                	je     2f0 <gets+0x50>
   for(i=0; i+1 < max; ){
- 2f9:	83 c3 01             	add    $0x1,%ebx
- 2fc:	89 fe                	mov    %edi,%esi
- 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 301:	7c cd                	jl     2d0 <gets+0x20>
- 303:	89 f3                	mov    %esi,%ebx
+ 2d7:	89 de                	mov    %ebx,%esi
+ 2d9:	83 c3 01             	add    $0x1,%ebx
+ 2dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2df:	7c cf                	jl     2b0 <gets+0x10>
       break;
   }
   buf[i] = '\0';
+ 2e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 305:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2eb:	5b                   	pop    %ebx
+ 2ec:	5e                   	pop    %esi
+ 2ed:	5f                   	pop    %edi
+ 2ee:	5d                   	pop    %ebp
+ 2ef:	c3                   	ret    
   buf[i] = '\0';
- 308:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 30e:	5b                   	pop    %ebx
- 30f:	5e                   	pop    %esi
- 310:	5f                   	pop    %edi
- 311:	5d                   	pop    %ebp
- 312:	c3                   	ret    
- 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 317:	90                   	nop
- 318:	8b 75 08             	mov    0x8(%ebp),%esi
- 31b:	8b 45 08             	mov    0x8(%ebp),%eax
- 31e:	01 de                	add    %ebx,%esi
- 320:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 322:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 328:	5b                   	pop    %ebx
- 329:	5e                   	pop    %esi
- 32a:	5f                   	pop    %edi
- 32b:	5d                   	pop    %ebp
- 32c:	c3                   	ret    
- 32d:	8d 76 00             	lea    0x0(%esi),%esi
+ 2f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f3:	89 de                	mov    %ebx,%esi
+ 2f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2fc:	5b                   	pop    %ebx
+ 2fd:	5e                   	pop    %esi
+ 2fe:	5f                   	pop    %edi
+ 2ff:	5d                   	pop    %ebp
+ 300:	c3                   	ret    
+ 301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30f:	90                   	nop
 
-00000330 <stat>:
+00000310 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 330:	f3 0f 1e fb          	endbr32 
- 334:	55                   	push   %ebp
- 335:	89 e5                	mov    %esp,%ebp
- 337:	56                   	push   %esi
- 338:	53                   	push   %ebx
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 339:	83 ec 08             	sub    $0x8,%esp
- 33c:	6a 00                	push   $0x0
- 33e:	ff 75 08             	pushl  0x8(%ebp)
- 341:	e8 ed 00 00 00       	call   433 <open>
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	push   0x8(%ebp)
+ 31d:	e8 f1 00 00 00       	call   413 <open>
   if(fd < 0)
- 346:	83 c4 10             	add    $0x10,%esp
- 349:	85 c0                	test   %eax,%eax
- 34b:	78 2b                	js     378 <stat+0x48>
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
     return -1;
   r = fstat(fd, st);
- 34d:	83 ec 08             	sub    $0x8,%esp
- 350:	ff 75 0c             	pushl  0xc(%ebp)
- 353:	89 c3                	mov    %eax,%ebx
- 355:	50                   	push   %eax
- 356:	e8 f0 00 00 00       	call   44b <fstat>
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	push   0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f4 00 00 00       	call   42b <fstat>
   close(fd);
- 35b:	89 1c 24             	mov    %ebx,(%esp)
+ 337:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 35e:	89 c6                	mov    %eax,%esi
+ 33a:	89 c6                	mov    %eax,%esi
   close(fd);
- 360:	e8 b6 00 00 00       	call   41b <close>
+ 33c:	e8 ba 00 00 00       	call   3fb <close>
   return r;
- 365:	83 c4 10             	add    $0x10,%esp
+ 341:	83 c4 10             	add    $0x10,%esp
 }
- 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 36b:	89 f0                	mov    %esi,%eax
- 36d:	5b                   	pop    %ebx
- 36e:	5e                   	pop    %esi
- 36f:	5d                   	pop    %ebp
- 370:	c3                   	ret    
- 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
- 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 37d:	eb e9                	jmp    368 <stat+0x38>
- 37f:	90                   	nop
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35e:	66 90                	xchg   %ax,%ax
 
-00000380 <atoi>:
+00000360 <atoi>:
 
 int
 atoi(const char *s)
 {
- 380:	f3 0f 1e fb          	endbr32 
- 384:	55                   	push   %ebp
- 385:	89 e5                	mov    %esp,%ebp
- 387:	53                   	push   %ebx
- 388:	8b 55 08             	mov    0x8(%ebp),%edx
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 38b:	0f be 02             	movsbl (%edx),%eax
- 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 391:	80 f9 09             	cmp    $0x9,%cl
+ 367:	0f be 02             	movsbl (%edx),%eax
+ 36a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 36d:	80 f9 09             	cmp    $0x9,%cl
   n = 0;
- 394:	b9 00 00 00 00       	mov    $0x0,%ecx
+ 370:	b9 00 00 00 00       	mov    $0x0,%ecx
   while('0' <= *s && *s <= '9')
- 399:	77 1a                	ja     3b5 <atoi+0x35>
- 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 39f:	90                   	nop
+ 375:	77 1e                	ja     395 <atoi+0x35>
+ 377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37e:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 3a0:	83 c2 01             	add    $0x1,%edx
- 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+ 380:	83 c2 01             	add    $0x1,%edx
+ 383:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 386:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
   while('0' <= *s && *s <= '9')
- 3aa:	0f be 02             	movsbl (%edx),%eax
- 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 3b0:	80 fb 09             	cmp    $0x9,%bl
- 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
+ 38a:	0f be 02             	movsbl (%edx),%eax
+ 38d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
   return n;
 }
- 3b5:	89 c8                	mov    %ecx,%eax
- 3b7:	5b                   	pop    %ebx
- 3b8:	5d                   	pop    %ebp
- 3b9:	c3                   	ret    
- 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 395:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 398:	89 c8                	mov    %ecx,%eax
+ 39a:	c9                   	leave  
+ 39b:	c3                   	ret    
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000003c0 <memmove>:
+000003a0 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 3c0:	f3 0f 1e fb          	endbr32 
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	57                   	push   %edi
- 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
- 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
- 3ce:	56                   	push   %esi
- 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3aa:	56                   	push   %esi
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 3d2:	85 c0                	test   %eax,%eax
- 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
- 3d6:	01 d0                	add    %edx,%eax
+ 3ae:	85 c0                	test   %eax,%eax
+ 3b0:	7e 13                	jle    3c5 <memmove+0x25>
+ 3b2:	01 d0                	add    %edx,%eax
   dst = vdst;
- 3d8:	89 d7                	mov    %edx,%edi
- 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b4:	89 d7                	mov    %edx,%edi
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
     *dst++ = *src++;
- 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+ 3c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
   while(n-- > 0)
- 3e1:	39 f8                	cmp    %edi,%eax
- 3e3:	75 fb                	jne    3e0 <memmove+0x20>
+ 3c1:	39 f8                	cmp    %edi,%eax
+ 3c3:	75 fb                	jne    3c0 <memmove+0x20>
   return vdst;
 }
- 3e5:	5e                   	pop    %esi
- 3e6:	89 d0                	mov    %edx,%eax
- 3e8:	5f                   	pop    %edi
- 3e9:	5d                   	pop    %ebp
- 3ea:	c3                   	ret    
+ 3c5:	5e                   	pop    %esi
+ 3c6:	89 d0                	mov    %edx,%eax
+ 3c8:	5f                   	pop    %edi
+ 3c9:	5d                   	pop    %ebp
+ 3ca:	c3                   	ret    
 
-000003eb <fork>:
+000003cb <fork>:
   name: \
     movl $SYS_ ## name, %eax; \
     int $T_SYSCALL; \
     ret
 
 SYSCALL(fork)
- 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <exit>:
+SYSCALL(exit)
+ 3d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <wait>:
+SYSCALL(wait)
+ 3db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <pipe>:
+SYSCALL(pipe)
+ 3e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <read>:
+SYSCALL(read)
+ 3eb:	b8 05 00 00 00       	mov    $0x5,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
 
-000003f3 <exit>:
-SYSCALL(exit)
- 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
+000003f3 <write>:
+SYSCALL(write)
+ 3f3:	b8 10 00 00 00       	mov    $0x10,%eax
  3f8:	cd 40                	int    $0x40
  3fa:	c3                   	ret    
 
-000003fb <wait>:
-SYSCALL(wait)
- 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
+000003fb <close>:
+SYSCALL(close)
+ 3fb:	b8 15 00 00 00       	mov    $0x15,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
 
-00000403 <pipe>:
-SYSCALL(pipe)
- 403:	b8 04 00 00 00       	mov    $0x4,%eax
+00000403 <kill>:
+SYSCALL(kill)
+ 403:	b8 06 00 00 00       	mov    $0x6,%eax
  408:	cd 40                	int    $0x40
  40a:	c3                   	ret    
 
-0000040b <read>:
-SYSCALL(read)
- 40b:	b8 05 00 00 00       	mov    $0x5,%eax
+0000040b <exec>:
+SYSCALL(exec)
+ 40b:	b8 07 00 00 00       	mov    $0x7,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
 
-00000413 <write>:
-SYSCALL(write)
- 413:	b8 10 00 00 00       	mov    $0x10,%eax
+00000413 <open>:
+SYSCALL(open)
+ 413:	b8 0f 00 00 00       	mov    $0xf,%eax
  418:	cd 40                	int    $0x40
  41a:	c3                   	ret    
 
-0000041b <close>:
-SYSCALL(close)
- 41b:	b8 15 00 00 00       	mov    $0x15,%eax
+0000041b <mknod>:
+SYSCALL(mknod)
+ 41b:	b8 11 00 00 00       	mov    $0x11,%eax
  420:	cd 40                	int    $0x40
  422:	c3                   	ret    
 
-00000423 <kill>:
-SYSCALL(kill)
- 423:	b8 06 00 00 00       	mov    $0x6,%eax
+00000423 <unlink>:
+SYSCALL(unlink)
+ 423:	b8 12 00 00 00       	mov    $0x12,%eax
  428:	cd 40                	int    $0x40
  42a:	c3                   	ret    
 
-0000042b <exec>:
-SYSCALL(exec)
- 42b:	b8 07 00 00 00       	mov    $0x7,%eax
+0000042b <fstat>:
+SYSCALL(fstat)
+ 42b:	b8 08 00 00 00       	mov    $0x8,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
 
-00000433 <open>:
-SYSCALL(open)
- 433:	b8 0f 00 00 00       	mov    $0xf,%eax
+00000433 <link>:
+SYSCALL(link)
+ 433:	b8 13 00 00 00       	mov    $0x13,%eax
  438:	cd 40                	int    $0x40
  43a:	c3                   	ret    
 
-0000043b <mknod>:
-SYSCALL(mknod)
- 43b:	b8 11 00 00 00       	mov    $0x11,%eax
+0000043b <mkdir>:
+SYSCALL(mkdir)
+ 43b:	b8 14 00 00 00       	mov    $0x14,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
 
-00000443 <unlink>:
-SYSCALL(unlink)
- 443:	b8 12 00 00 00       	mov    $0x12,%eax
+00000443 <chdir>:
+SYSCALL(chdir)
+ 443:	b8 09 00 00 00       	mov    $0x9,%eax
  448:	cd 40                	int    $0x40
  44a:	c3                   	ret    
 
-0000044b <fstat>:
-SYSCALL(fstat)
- 44b:	b8 08 00 00 00       	mov    $0x8,%eax
+0000044b <dup>:
+SYSCALL(dup)
+ 44b:	b8 0a 00 00 00       	mov    $0xa,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
 
-00000453 <link>:
-SYSCALL(link)
- 453:	b8 13 00 00 00       	mov    $0x13,%eax
+00000453 <getpid>:
+SYSCALL(getpid)
+ 453:	b8 0b 00 00 00       	mov    $0xb,%eax
  458:	cd 40                	int    $0x40
  45a:	c3                   	ret    
 
-0000045b <mkdir>:
-SYSCALL(mkdir)
- 45b:	b8 14 00 00 00       	mov    $0x14,%eax
+0000045b <sbrk>:
+SYSCALL(sbrk)
+ 45b:	b8 0c 00 00 00       	mov    $0xc,%eax
  460:	cd 40                	int    $0x40
  462:	c3                   	ret    
 
-00000463 <chdir>:
-SYSCALL(chdir)
- 463:	b8 09 00 00 00       	mov    $0x9,%eax
+00000463 <sleep>:
+SYSCALL(sleep)
+ 463:	b8 0d 00 00 00       	mov    $0xd,%eax
  468:	cd 40                	int    $0x40
  46a:	c3                   	ret    
 
-0000046b <dup>:
-SYSCALL(dup)
- 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
+0000046b <uptime>:
+SYSCALL(uptime)
+ 46b:	b8 0e 00 00 00       	mov    $0xe,%eax
  470:	cd 40                	int    $0x40
  472:	c3                   	ret    
 
-00000473 <getpid>:
-SYSCALL(getpid)
- 473:	b8 0b 00 00 00       	mov    $0xb,%eax
+00000473 <thread_create>:
+SYSCALL(thread_create)
+ 473:	b8 16 00 00 00       	mov    $0x16,%eax
  478:	cd 40                	int    $0x40
  47a:	c3                   	ret    
 
-0000047b <sbrk>:
-SYSCALL(sbrk)
- 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
+0000047b <thread_join>:
+SYSCALL(thread_join)
+ 47b:	b8 17 00 00 00       	mov    $0x17,%eax
  480:	cd 40                	int    $0x40
  482:	c3                   	ret    
 
-00000483 <sleep>:
-SYSCALL(sleep)
- 483:	b8 0d 00 00 00       	mov    $0xd,%eax
+00000483 <thread_exit>:
+ 483:	b8 18 00 00 00       	mov    $0x18,%eax
  488:	cd 40                	int    $0x40
  48a:	c3                   	ret    
+ 48b:	66 90                	xchg   %ax,%ax
+ 48d:	66 90                	xchg   %ax,%ax
+ 48f:	90                   	nop
 
-0000048b <uptime>:
-SYSCALL(uptime)
- 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 490:	cd 40                	int    $0x40
- 492:	c3                   	ret    
- 493:	66 90                	xchg   %ax,%ax
- 495:	66 90                	xchg   %ax,%ax
- 497:	66 90                	xchg   %ax,%ax
- 499:	66 90                	xchg   %ax,%ax
- 49b:	66 90                	xchg   %ax,%ax
- 49d:	66 90                	xchg   %ax,%ax
- 49f:	90                   	nop
-
-000004a0 <printint>:
+00000490 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 3c             	sub    $0x3c,%esp
- 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+ 496:	83 ec 3c             	sub    $0x3c,%esp
+ 499:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 4ac:	89 d1                	mov    %edx,%ecx
+ 49c:	89 d1                	mov    %edx,%ecx
 {
- 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 49e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 4b1:	85 d2                	test   %edx,%edx
- 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
- 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4bd:	74 79                	je     538 <printint+0x98>
+ 4a1:	85 d2                	test   %edx,%edx
+ 4a3:	0f 89 7f 00 00 00    	jns    528 <printint+0x98>
+ 4a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4ad:	74 79                	je     528 <printint+0x98>
     neg = 1;
- 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 4c6:	f7 d9                	neg    %ecx
+ 4b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 4c8:	31 db                	xor    %ebx,%ebx
- 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b8:	31 db                	xor    %ebx,%ebx
+ 4ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 4d0:	89 c8                	mov    %ecx,%eax
- 4d2:	31 d2                	xor    %edx,%edx
- 4d4:	89 cf                	mov    %ecx,%edi
- 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4d9:	0f b6 92 f8 08 00 00 	movzbl 0x8f8(%edx),%edx
- 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4e3:	89 d8                	mov    %ebx,%eax
- 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 4c0:	89 c8                	mov    %ecx,%eax
+ 4c2:	31 d2                	xor    %edx,%edx
+ 4c4:	89 cf                	mov    %ecx,%edi
+ 4c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4c9:	0f b6 92 00 09 00 00 	movzbl 0x900(%edx),%edx
+ 4d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4d3:	89 d8                	mov    %ebx,%eax
+ 4d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4f1:	76 dd                	jbe    4d0 <printint+0x30>
+ 4de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4e1:	76 dd                	jbe    4c0 <printint+0x30>
   if(neg)
- 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4f6:	85 c9                	test   %ecx,%ecx
- 4f8:	74 0c                	je     506 <printint+0x66>
+ 4e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4e6:	85 c9                	test   %ecx,%ecx
+ 4e8:	74 0c                	je     4f6 <printint+0x66>
     buf[i++] = '-';
- 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4ff:	89 d8                	mov    %ebx,%eax
+ 4ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 50d:	eb 07                	jmp    516 <printint+0x76>
- 50f:	90                   	nop
- 510:	0f b6 13             	movzbl (%ebx),%edx
- 513:	83 eb 01             	sub    $0x1,%ebx
+ 4f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4fd:	eb 07                	jmp    506 <printint+0x76>
+ 4ff:	90                   	nop
+    putc(fd, buf[i]);
+ 500:	0f b6 13             	movzbl (%ebx),%edx
+ 503:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 516:	83 ec 04             	sub    $0x4,%esp
- 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 51c:	6a 01                	push   $0x1
- 51e:	56                   	push   %esi
- 51f:	57                   	push   %edi
- 520:	e8 ee fe ff ff       	call   413 <write>
+ 506:	83 ec 04             	sub    $0x4,%esp
+ 509:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 50c:	6a 01                	push   $0x1
+ 50e:	56                   	push   %esi
+ 50f:	57                   	push   %edi
+ 510:	e8 de fe ff ff       	call   3f3 <write>
   while(--i >= 0)
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	39 de                	cmp    %ebx,%esi
- 52a:	75 e4                	jne    510 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 52f:	5b                   	pop    %ebx
- 530:	5e                   	pop    %esi
- 531:	5f                   	pop    %edi
- 532:	5d                   	pop    %ebp
- 533:	c3                   	ret    
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	39 de                	cmp    %ebx,%esi
+ 51a:	75 e4                	jne    500 <printint+0x70>
+}
+ 51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 51f:	5b                   	pop    %ebx
+ 520:	5e                   	pop    %esi
+ 521:	5f                   	pop    %edi
+ 522:	5d                   	pop    %ebp
+ 523:	c3                   	ret    
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 53f:	eb 87                	jmp    4c8 <printint+0x28>
- 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 528:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 52f:	eb 87                	jmp    4b8 <printint+0x28>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 538:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
 
-00000550 <printf>:
+00000540 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 550:	f3 0f 1e fb          	endbr32 
- 554:	55                   	push   %ebp
- 555:	89 e5                	mov    %esp,%ebp
- 557:	57                   	push   %edi
- 558:	56                   	push   %esi
- 559:	53                   	push   %ebx
- 55a:	83 ec 2c             	sub    $0x2c,%esp
+ 540:	55                   	push   %ebp
+ 541:	89 e5                	mov    %esp,%ebp
+ 543:	57                   	push   %edi
+ 544:	56                   	push   %esi
+ 545:	53                   	push   %ebx
+ 546:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 55d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 560:	0f b6 1e             	movzbl (%esi),%ebx
- 563:	84 db                	test   %bl,%bl
- 565:	0f 84 b4 00 00 00    	je     61f <printf+0xcf>
+ 549:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 54c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 54f:	0f b6 13             	movzbl (%ebx),%edx
+ 552:	84 d2                	test   %dl,%dl
+ 554:	74 6a                	je     5c0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 56b:	8d 45 10             	lea    0x10(%ebp),%eax
- 56e:	83 c6 01             	add    $0x1,%esi
+ 556:	8d 45 10             	lea    0x10(%ebp),%eax
+ 559:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 571:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 55c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 574:	31 d2                	xor    %edx,%edx
+ 55f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 576:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 579:	eb 33                	jmp    5ae <printf+0x5e>
- 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
- 580:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	eb 36                	jmp    59c <printf+0x5c>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 570:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 583:	ba 25 00 00 00       	mov    $0x25,%edx
+ 573:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 588:	83 f8 25             	cmp    $0x25,%eax
- 58b:	74 17                	je     5a4 <printf+0x54>
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	74 15                	je     592 <printf+0x52>
   write(fd, &c, 1);
- 58d:	83 ec 04             	sub    $0x4,%esp
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 593:	6a 01                	push   $0x1
- 595:	57                   	push   %edi
- 596:	ff 75 08             	pushl  0x8(%ebp)
- 599:	e8 75 fe ff ff       	call   413 <write>
- 59e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 57d:	83 ec 04             	sub    $0x4,%esp
+ 580:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	56                   	push   %esi
+ 587:	e8 67 fe ff ff       	call   3f3 <write>
+ 58c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 5a1:	83 c4 10             	add    $0x10,%esp
+ 58f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 5a4:	0f b6 1e             	movzbl (%esi),%ebx
- 5a7:	83 c6 01             	add    $0x1,%esi
- 5aa:	84 db                	test   %bl,%bl
- 5ac:	74 71                	je     61f <printf+0xcf>
+ 592:	0f b6 13             	movzbl (%ebx),%edx
+ 595:	83 c3 01             	add    $0x1,%ebx
+ 598:	84 d2                	test   %dl,%dl
+ 59a:	74 24                	je     5c0 <printf+0x80>
     c = fmt[i] & 0xff;
- 5ae:	0f be cb             	movsbl %bl,%ecx
- 5b1:	0f b6 c3             	movzbl %bl,%eax
+ 59c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 5b4:	85 d2                	test   %edx,%edx
- 5b6:	74 c8                	je     580 <printf+0x30>
+ 59f:	85 c9                	test   %ecx,%ecx
+ 5a1:	74 cd                	je     570 <printf+0x30>
       }
     } else if(state == '%'){
- 5b8:	83 fa 25             	cmp    $0x25,%edx
- 5bb:	75 e7                	jne    5a4 <printf+0x54>
+ 5a3:	83 f9 25             	cmp    $0x25,%ecx
+ 5a6:	75 ea                	jne    592 <printf+0x52>
       if(c == 'd'){
- 5bd:	83 f8 64             	cmp    $0x64,%eax
- 5c0:	0f 84 9a 00 00 00    	je     660 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 5c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 5cc:	83 f9 70             	cmp    $0x70,%ecx
- 5cf:	74 5f                	je     630 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 5d1:	83 f8 73             	cmp    $0x73,%eax
- 5d4:	0f 84 d6 00 00 00    	je     6b0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5da:	83 f8 63             	cmp    $0x63,%eax
- 5dd:	0f 84 8d 00 00 00    	je     670 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 5e3:	83 f8 25             	cmp    $0x25,%eax
- 5e6:	0f 84 b4 00 00 00    	je     6a0 <printf+0x150>
-  write(fd, &c, 1);
- 5ec:	83 ec 04             	sub    $0x4,%esp
- 5ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5f3:	6a 01                	push   $0x1
- 5f5:	57                   	push   %edi
- 5f6:	ff 75 08             	pushl  0x8(%ebp)
- 5f9:	e8 15 fe ff ff       	call   413 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 5fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 601:	83 c4 0c             	add    $0xc,%esp
- 604:	6a 01                	push   $0x1
- 606:	83 c6 01             	add    $0x1,%esi
- 609:	57                   	push   %edi
- 60a:	ff 75 08             	pushl  0x8(%ebp)
- 60d:	e8 01 fe ff ff       	call   413 <write>
-  for(i = 0; fmt[i]; i++){
- 612:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	0f 84 07 01 00 00    	je     6b8 <printf+0x178>
+ 5b1:	83 e8 63             	sub    $0x63,%eax
+ 5b4:	83 f8 15             	cmp    $0x15,%eax
+ 5b7:	77 17                	ja     5d0 <printf+0x90>
+ 5b9:	ff 24 85 a8 08 00 00 	jmp    *0x8a8(,%eax,4)
         putc(fd, c);
- 616:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 619:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 61b:	84 db                	test   %bl,%bl
- 61d:	75 8f                	jne    5ae <printf+0x5e>
     }
   }
 }
- 61f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 622:	5b                   	pop    %ebx
- 623:	5e                   	pop    %esi
- 624:	5f                   	pop    %edi
- 625:	5d                   	pop    %ebp
- 626:	c3                   	ret    
- 627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 62e:	66 90                	xchg   %ax,%ax
+ 5c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5c3:	5b                   	pop    %ebx
+ 5c4:	5e                   	pop    %esi
+ 5c5:	5f                   	pop    %edi
+ 5c6:	5d                   	pop    %ebp
+ 5c7:	c3                   	ret    
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+ 5d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5d6:	6a 01                	push   $0x1
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5de:	e8 10 fe ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 5e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 5e7:	83 c4 0c             	add    $0xc,%esp
+ 5ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5ed:	6a 01                	push   $0x1
+ 5ef:	57                   	push   %edi
+ 5f0:	56                   	push   %esi
+ 5f1:	e8 fd fd ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 5f6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f9:	31 c9                	xor    %ecx,%ecx
+ 5fb:	eb 95                	jmp    592 <printf+0x52>
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 630:	83 ec 0c             	sub    $0xc,%esp
- 633:	b9 10 00 00 00       	mov    $0x10,%ecx
- 638:	6a 00                	push   $0x0
- 63a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 63d:	8b 45 08             	mov    0x8(%ebp),%eax
- 640:	8b 13                	mov    (%ebx),%edx
- 642:	e8 59 fe ff ff       	call   4a0 <printint>
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 608:	6a 00                	push   $0x0
+ 60a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 60d:	8b 10                	mov    (%eax),%edx
+ 60f:	89 f0                	mov    %esi,%eax
+ 611:	e8 7a fe ff ff       	call   490 <printint>
         ap++;
- 647:	89 d8                	mov    %ebx,%eax
- 649:	83 c4 10             	add    $0x10,%esp
+ 616:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 61a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 64c:	31 d2                	xor    %edx,%edx
+ 61d:	31 c9                	xor    %ecx,%ecx
+ 61f:	e9 6e ff ff ff       	jmp    592 <printf+0x52>
+ 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 628:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 62b:	8b 10                	mov    (%eax),%edx
         ap++;
- 64e:	83 c0 04             	add    $0x4,%eax
- 651:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 654:	e9 4b ff ff ff       	jmp    5a4 <printf+0x54>
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	83 c0 04             	add    $0x4,%eax
+ 630:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 633:	85 d2                	test   %edx,%edx
+ 635:	0f 84 8d 00 00 00    	je     6c8 <printf+0x188>
+        while(*s != 0){
+ 63b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 63e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 640:	84 c0                	test   %al,%al
+ 642:	0f 84 4a ff ff ff    	je     592 <printf+0x52>
+ 648:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 64b:	89 d3                	mov    %edx,%ebx
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 653:	83 c3 01             	add    $0x1,%ebx
+ 656:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 659:	6a 01                	push   $0x1
+ 65b:	57                   	push   %edi
+ 65c:	56                   	push   %esi
+ 65d:	e8 91 fd ff ff       	call   3f3 <write>
+        while(*s != 0){
+ 662:	0f b6 03             	movzbl (%ebx),%eax
+ 665:	83 c4 10             	add    $0x10,%esp
+ 668:	84 c0                	test   %al,%al
+ 66a:	75 e4                	jne    650 <printf+0x110>
+      state = 0;
+ 66c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 66f:	31 c9                	xor    %ecx,%ecx
+ 671:	e9 1c ff ff ff       	jmp    592 <printf+0x52>
+ 676:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 660:	83 ec 0c             	sub    $0xc,%esp
- 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 668:	6a 01                	push   $0x1
- 66a:	eb ce                	jmp    63a <printf+0xea>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	e9 7b ff ff ff       	jmp    60a <printf+0xca>
+ 68f:	90                   	nop
         putc(fd, *ap);
- 670:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 690:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 673:	83 ec 04             	sub    $0x4,%esp
+ 693:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 676:	8b 03                	mov    (%ebx),%eax
+ 696:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 678:	6a 01                	push   $0x1
-        ap++;
- 67a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 67d:	57                   	push   %edi
- 67e:	ff 75 08             	pushl  0x8(%ebp)
+ 698:	6a 01                	push   $0x1
+ 69a:	57                   	push   %edi
+ 69b:	56                   	push   %esi
         putc(fd, *ap);
- 681:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 69c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 684:	e8 8a fd ff ff       	call   413 <write>
+ 69f:	e8 4f fd ff ff       	call   3f3 <write>
         ap++;
- 689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 68c:	83 c4 10             	add    $0x10,%esp
+ 6a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 6a8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 0e ff ff ff       	jmp    5a4 <printf+0x54>
- 696:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6ab:	31 c9                	xor    %ecx,%ecx
+ 6ad:	e9 e0 fe ff ff       	jmp    592 <printf+0x52>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 6a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 6a3:	83 ec 04             	sub    $0x4,%esp
- 6a6:	e9 59 ff ff ff       	jmp    604 <printf+0xb4>
- 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6af:	90                   	nop
-        s = (char*)*ap;
- 6b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 6b3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 6b5:	83 c0 04             	add    $0x4,%eax
- 6b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 6bb:	85 db                	test   %ebx,%ebx
- 6bd:	74 17                	je     6d6 <printf+0x186>
-        while(*s != 0){
- 6bf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 6c2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 6c4:	84 c0                	test   %al,%al
- 6c6:	0f 84 d8 fe ff ff    	je     5a4 <printf+0x54>
- 6cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6cf:	89 de                	mov    %ebx,%esi
- 6d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6d4:	eb 1a                	jmp    6f0 <printf+0x1a0>
+ 6bb:	83 ec 04             	sub    $0x4,%esp
+ 6be:	e9 2a ff ff ff       	jmp    5ed <printf+0xad>
+ 6c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c7:	90                   	nop
           s = "(null)";
- 6d6:	bb ef 08 00 00       	mov    $0x8ef,%ebx
-        while(*s != 0){
- 6db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6de:	b8 28 00 00 00       	mov    $0x28,%eax
- 6e3:	89 de                	mov    %ebx,%esi
- 6e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
-  write(fd, &c, 1);
- 6f0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 6f3:	83 c6 01             	add    $0x1,%esi
- 6f6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 6f9:	6a 01                	push   $0x1
- 6fb:	57                   	push   %edi
- 6fc:	53                   	push   %ebx
- 6fd:	e8 11 fd ff ff       	call   413 <write>
+ 6c8:	ba 9f 08 00 00       	mov    $0x89f,%edx
         while(*s != 0){
- 702:	0f b6 06             	movzbl (%esi),%eax
- 705:	83 c4 10             	add    $0x10,%esp
- 708:	84 c0                	test   %al,%al
- 70a:	75 e4                	jne    6f0 <printf+0x1a0>
- 70c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 70f:	31 d2                	xor    %edx,%edx
- 711:	e9 8e fe ff ff       	jmp    5a4 <printf+0x54>
- 716:	66 90                	xchg   %ax,%ax
- 718:	66 90                	xchg   %ax,%ax
- 71a:	66 90                	xchg   %ax,%ax
- 71c:	66 90                	xchg   %ax,%ax
- 71e:	66 90                	xchg   %ax,%ax
+ 6cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6d5:	89 d3                	mov    %edx,%ebx
+ 6d7:	e9 74 ff ff ff       	jmp    650 <printf+0x110>
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
 
-00000720 <free>:
+000006e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 720:	f3 0f 1e fb          	endbr32 
- 724:	55                   	push   %ebp
+ 6e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 725:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 6e1:	a1 00 0e 00 00       	mov    0xe00,%eax
 {
- 72a:	89 e5                	mov    %esp,%ebp
- 72c:	57                   	push   %edi
- 72d:	56                   	push   %esi
- 72e:	53                   	push   %ebx
- 72f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 732:	8b 10                	mov    (%eax),%edx
+ 6e6:	89 e5                	mov    %esp,%ebp
+ 6e8:	57                   	push   %edi
+ 6e9:	56                   	push   %esi
+ 6ea:	53                   	push   %ebx
+ 6eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 734:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 737:	39 c8                	cmp    %ecx,%eax
- 739:	73 15                	jae    750 <free+0x30>
- 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 73f:	90                   	nop
- 740:	39 d1                	cmp    %edx,%ecx
- 742:	72 14                	jb     758 <free+0x38>
+ 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6f8:	89 c2                	mov    %eax,%edx
+ 6fa:	8b 00                	mov    (%eax),%eax
+ 6fc:	39 ca                	cmp    %ecx,%edx
+ 6fe:	73 30                	jae    730 <free+0x50>
+ 700:	39 c1                	cmp    %eax,%ecx
+ 702:	72 04                	jb     708 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 744:	39 d0                	cmp    %edx,%eax
- 746:	73 10                	jae    758 <free+0x38>
-{
- 748:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 74a:	8b 10                	mov    (%eax),%edx
- 74c:	39 c8                	cmp    %ecx,%eax
- 74e:	72 f0                	jb     740 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 750:	39 d0                	cmp    %edx,%eax
- 752:	72 f4                	jb     748 <free+0x28>
- 754:	39 d1                	cmp    %edx,%ecx
- 756:	73 f0                	jae    748 <free+0x28>
+ 704:	39 c2                	cmp    %eax,%edx
+ 706:	72 f0                	jb     6f8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 758:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 75b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 75e:	39 fa                	cmp    %edi,%edx
- 760:	74 1e                	je     780 <free+0x60>
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 f8                	cmp    %edi,%eax
+ 710:	74 30                	je     742 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
+ 712:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
- 762:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 765:	8b 50 04             	mov    0x4(%eax),%edx
- 768:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 76b:	39 f1                	cmp    %esi,%ecx
- 76d:	74 28                	je     797 <free+0x77>
+ 715:	8b 42 04             	mov    0x4(%edx),%eax
+ 718:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 71b:	39 f1                	cmp    %esi,%ecx
+ 71d:	74 3a                	je     759 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
+ 71f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
- 76f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 771:	5b                   	pop    %ebx
+ 721:	5b                   	pop    %ebx
   freep = p;
- 772:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 722:	89 15 00 0e 00 00    	mov    %edx,0xe00
 }
- 777:	5e                   	pop    %esi
- 778:	5f                   	pop    %edi
- 779:	5d                   	pop    %ebp
- 77a:	c3                   	ret    
- 77b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 77f:	90                   	nop
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 730:	39 c2                	cmp    %eax,%edx
+ 732:	72 c4                	jb     6f8 <free+0x18>
+ 734:	39 c1                	cmp    %eax,%ecx
+ 736:	73 c0                	jae    6f8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 738:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 73b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 73e:	39 f8                	cmp    %edi,%eax
+ 740:	75 d0                	jne    712 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 780:	03 72 04             	add    0x4(%edx),%esi
- 783:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 742:	03 70 04             	add    0x4(%eax),%esi
+ 745:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 786:	8b 10                	mov    (%eax),%edx
- 788:	8b 12                	mov    (%edx),%edx
- 78a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 748:	8b 02                	mov    (%edx),%eax
+ 74a:	8b 00                	mov    (%eax),%eax
+ 74c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 78d:	8b 50 04             	mov    0x4(%eax),%edx
- 790:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 793:	39 f1                	cmp    %esi,%ecx
- 795:	75 d8                	jne    76f <free+0x4f>
+ 74f:	8b 42 04             	mov    0x4(%edx),%eax
+ 752:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 755:	39 f1                	cmp    %esi,%ecx
+ 757:	75 c6                	jne    71f <free+0x3f>
     p->s.size += bp->s.size;
- 797:	03 53 fc             	add    -0x4(%ebx),%edx
+ 759:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 79a:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 75c:	89 15 00 0e 00 00    	mov    %edx,0xe00
     p->s.size += bp->s.size;
- 79f:	89 50 04             	mov    %edx,0x4(%eax)
+ 762:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 7a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 7a5:	89 10                	mov    %edx,(%eax)
+ 765:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 768:	89 0a                	mov    %ecx,(%edx)
 }
- 7a7:	5b                   	pop    %ebx
- 7a8:	5e                   	pop    %esi
- 7a9:	5f                   	pop    %edi
- 7aa:	5d                   	pop    %ebp
- 7ab:	c3                   	ret    
- 7ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 76a:	5b                   	pop    %ebx
+ 76b:	5e                   	pop    %esi
+ 76c:	5f                   	pop    %edi
+ 76d:	5d                   	pop    %ebp
+ 76e:	c3                   	ret    
+ 76f:	90                   	nop
 
-000007b0 <malloc>:
+00000770 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7b0:	f3 0f 1e fb          	endbr32 
- 7b4:	55                   	push   %ebp
- 7b5:	89 e5                	mov    %esp,%ebp
- 7b7:	57                   	push   %edi
- 7b8:	56                   	push   %esi
- 7b9:	53                   	push   %ebx
- 7ba:	83 ec 1c             	sub    $0x1c,%esp
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	57                   	push   %edi
+ 774:	56                   	push   %esi
+ 775:	53                   	push   %ebx
+ 776:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 779:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 7c0:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 77c:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7c6:	8d 70 07             	lea    0x7(%eax),%esi
- 7c9:	c1 ee 03             	shr    $0x3,%esi
- 7cc:	83 c6 01             	add    $0x1,%esi
+ 782:	8d 70 07             	lea    0x7(%eax),%esi
+ 785:	c1 ee 03             	shr    $0x3,%esi
+ 788:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 7cf:	85 ff                	test   %edi,%edi
- 7d1:	0f 84 a9 00 00 00    	je     880 <malloc+0xd0>
+ 78b:	85 ff                	test   %edi,%edi
+ 78d:	0f 84 9d 00 00 00    	je     830 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d7:	8b 07                	mov    (%edi),%eax
+ 793:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 7d9:	8b 48 04             	mov    0x4(%eax),%ecx
- 7dc:	39 f1                	cmp    %esi,%ecx
- 7de:	73 6d                	jae    84d <malloc+0x9d>
- 7e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 7e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7eb:	0f 43 de             	cmovae %esi,%ebx
+ 795:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 798:	39 f1                	cmp    %esi,%ecx
+ 79a:	73 6a                	jae    806 <malloc+0x96>
+ 79c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7a1:	39 de                	cmp    %ebx,%esi
+ 7a3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 7ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7f8:	eb 17                	jmp    811 <malloc+0x61>
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7b0:	eb 17                	jmp    7c9 <malloc+0x59>
+ 7b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 800:	8b 10                	mov    (%eax),%edx
+ 7b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 802:	8b 4a 04             	mov    0x4(%edx),%ecx
- 805:	39 f1                	cmp    %esi,%ecx
- 807:	73 4f                	jae    858 <malloc+0xa8>
- 809:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
- 80f:	89 d0                	mov    %edx,%eax
+ 7ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bd:	39 f1                	cmp    %esi,%ecx
+ 7bf:	73 4f                	jae    810 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 811:	39 c7                	cmp    %eax,%edi
- 813:	75 eb                	jne    800 <malloc+0x50>
+ 7c1:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
+ 7c7:	89 c2                	mov    %eax,%edx
+ 7c9:	39 d7                	cmp    %edx,%edi
+ 7cb:	75 eb                	jne    7b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 815:	83 ec 0c             	sub    $0xc,%esp
- 818:	ff 75 e4             	pushl  -0x1c(%ebp)
- 81b:	e8 5b fc ff ff       	call   47b <sbrk>
+ 7cd:	83 ec 0c             	sub    $0xc,%esp
+ 7d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7d3:	e8 83 fc ff ff       	call   45b <sbrk>
   if(p == (char*)-1)
- 820:	83 c4 10             	add    $0x10,%esp
- 823:	83 f8 ff             	cmp    $0xffffffff,%eax
- 826:	74 1b                	je     843 <malloc+0x93>
+ 7d8:	83 c4 10             	add    $0x10,%esp
+ 7db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7de:	74 1c                	je     7fc <malloc+0x8c>
   hp->s.size = nu;
- 828:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7e0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 82b:	83 ec 0c             	sub    $0xc,%esp
- 82e:	83 c0 08             	add    $0x8,%eax
- 831:	50                   	push   %eax
- 832:	e8 e9 fe ff ff       	call   720 <free>
+ 7e3:	83 ec 0c             	sub    $0xc,%esp
+ 7e6:	83 c0 08             	add    $0x8,%eax
+ 7e9:	50                   	push   %eax
+ 7ea:	e8 f1 fe ff ff       	call   6e0 <free>
   return freep;
- 837:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 7ef:	8b 15 00 0e 00 00    	mov    0xe00,%edx
       if((p = morecore(nunits)) == 0)
- 83c:	83 c4 10             	add    $0x10,%esp
- 83f:	85 c0                	test   %eax,%eax
- 841:	75 bd                	jne    800 <malloc+0x50>
+ 7f5:	83 c4 10             	add    $0x10,%esp
+ 7f8:	85 d2                	test   %edx,%edx
+ 7fa:	75 bc                	jne    7b8 <malloc+0x48>
         return 0;
   }
 }
- 843:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 846:	31 c0                	xor    %eax,%eax
+ 7ff:	31 c0                	xor    %eax,%eax
 }
- 848:	5b                   	pop    %ebx
- 849:	5e                   	pop    %esi
- 84a:	5f                   	pop    %edi
- 84b:	5d                   	pop    %ebp
- 84c:	c3                   	ret    
+ 801:	5b                   	pop    %ebx
+ 802:	5e                   	pop    %esi
+ 803:	5f                   	pop    %edi
+ 804:	5d                   	pop    %ebp
+ 805:	c3                   	ret    
     if(p->s.size >= nunits){
- 84d:	89 c2                	mov    %eax,%edx
- 84f:	89 f8                	mov    %edi,%eax
- 851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 806:	89 d0                	mov    %edx,%eax
+ 808:	89 fa                	mov    %edi,%edx
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 858:	39 ce                	cmp    %ecx,%esi
- 85a:	74 54                	je     8b0 <malloc+0x100>
+ 810:	39 ce                	cmp    %ecx,%esi
+ 812:	74 4c                	je     860 <malloc+0xf0>
         p->s.size -= nunits;
- 85c:	29 f1                	sub    %esi,%ecx
- 85e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 814:	29 f1                	sub    %esi,%ecx
+ 816:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 861:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 819:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 864:	89 72 04             	mov    %esi,0x4(%edx)
+ 81c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 867:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 81f:	89 15 00 0e 00 00    	mov    %edx,0xe00
 }
- 86c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 825:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 86f:	8d 42 08             	lea    0x8(%edx),%eax
+ 828:	83 c0 08             	add    $0x8,%eax
 }
- 872:	5b                   	pop    %ebx
- 873:	5e                   	pop    %esi
- 874:	5f                   	pop    %edi
- 875:	5d                   	pop    %ebp
- 876:	c3                   	ret    
- 877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 87e:	66 90                	xchg   %ax,%ax
+ 82b:	5b                   	pop    %ebx
+ 82c:	5e                   	pop    %esi
+ 82d:	5f                   	pop    %edi
+ 82e:	5d                   	pop    %ebp
+ 82f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 880:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
- 887:	0b 00 00 
+ 830:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
+ 837:	0e 00 00 
     base.s.size = 0;
- 88a:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+ 83a:	bf 04 0e 00 00       	mov    $0xe04,%edi
     base.s.ptr = freep = prevp = &base;
- 88f:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
- 896:	0b 00 00 
+ 83f:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
+ 846:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 899:	89 f8                	mov    %edi,%eax
+ 849:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 89b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
- 8a2:	00 00 00 
+ 84b:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
+ 852:	00 00 00 
     if(p->s.size >= nunits){
- 8a5:	e9 36 ff ff ff       	jmp    7e0 <malloc+0x30>
- 8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 855:	e9 42 ff ff ff       	jmp    79c <malloc+0x2c>
+ 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 8b0:	8b 0a                	mov    (%edx),%ecx
- 8b2:	89 08                	mov    %ecx,(%eax)
- 8b4:	eb b1                	jmp    867 <malloc+0xb7>
+ 860:	8b 08                	mov    (%eax),%ecx
+ 862:	89 0a                	mov    %ecx,(%edx)
+ 864:	eb b9                	jmp    81f <malloc+0xaf>
Binary files xv6_old/wc.o and xv6-public/wc.o differ
diff -u xv6_old/wc.sym xv6-public/wc.sym
--- xv6_old/wc.sym	2022-09-05 22:38:25.885333199 +0530
+++ xv6-public/wc.sym	2022-09-05 21:37:13.820878722 +0530
@@ -1,59 +1,50 @@
-00000000 .text
-000008b8 .rodata
-0000090c .eh_frame
-00000be0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-000004a0 printint
-000008f8 digits.1085
+00000490 printint
+00000900 digits.0
 00000000 umalloc.c
-00000be0 freep
-00000be4 base
-00000190 strcpy
-00000550 printf
-000003c0 memmove
-0000043b mknod
-000002b0 gets
-00000473 getpid
-000007b0 malloc
-00000483 sleep
-00000403 pipe
-00000413 write
-0000044b fstat
-00000423 kill
-00000463 chdir
-0000042b exec
-000003fb wait
-0000040b read
-00000443 unlink
+00000e00 freep
+00000e04 base
+00000180 strcpy
+00000540 printf
+00000483 thread_exit
+000003a0 memmove
+0000041b mknod
+000002a0 gets
+00000453 getpid
+00000770 malloc
+00000463 sleep
+000003e3 pipe
+000003f3 write
+0000042b fstat
+00000403 kill
+00000443 chdir
+0000040b exec
+000003db wait
+000003eb read
+00000423 unlink
 000000a0 wc
-000003eb fork
-0000047b sbrk
-0000048b uptime
-00000be0 __bss_start
-00000250 memset
+000003cb fork
+0000045b sbrk
+0000046b uptime
+00000be8 __bss_start
+00000240 memset
 00000000 main
-000001c0 strcmp
-0000046b dup
+000001b0 strcmp
+0000044b dup
 00000c00 buf
-00000330 stat
-00000be0 _edata
-00000e00 _end
-00000453 link
-000003f3 exit
-00000380 atoi
+00000310 stat
+00000be8 _edata
+00000e0c _end
+00000433 link
+000003d3 exit
+00000360 atoi
 00000210 strlen
-00000433 open
-00000270 strchr
-0000045b mkdir
-0000041b close
-00000720 free
+00000413 open
+00000260 strchr
+00000473 thread_create
+0000043b mkdir
+000003fb close
+0000047b thread_join
+000006e0 free
Binary files xv6_old/xv6.img and xv6-public/xv6.img differ
Binary files xv6_old/_zombie and xv6-public/_zombie differ
diff -u xv6_old/zombie.asm xv6-public/zombie.asm
--- xv6_old/zombie.asm	2022-09-05 22:38:18.269269457 +0530
+++ xv6-public/zombie.asm	2022-09-05 21:37:13.860878724 +0530
@@ -11,25 +11,26 @@
 int
 main(void)
 {
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	51                   	push   %ecx
-  12:	83 ec 04             	sub    $0x4,%esp
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
   if(fork() > 0)
-  15:	e8 71 02 00 00       	call   28b <fork>
-  1a:	85 c0                	test   %eax,%eax
-  1c:	7e 0d                	jle    2b <main+0x2b>
+  11:	e8 65 02 00 00       	call   27b <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
     sleep(5);  // Let child exit before parent.
-  1e:	83 ec 0c             	sub    $0xc,%esp
-  21:	6a 05                	push   $0x5
-  23:	e8 fb 02 00 00       	call   323 <sleep>
-  28:	83 c4 10             	add    $0x10,%esp
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ef 02 00 00       	call   313 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
   exit();
-  2b:	e8 63 02 00 00       	call   293 <exit>
+  27:	e8 57 02 00 00       	call   283 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
 
 00000030 <strcpy>:
 #include "user.h"
@@ -38,18 +39,18 @@
 char*
 strcpy(char *s, const char *t)
 {
-  30:	f3 0f 1e fb          	endbr32 
-  34:	55                   	push   %ebp
+  30:	55                   	push   %ebp
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
-  35:	31 c0                	xor    %eax,%eax
+  31:	31 c0                	xor    %eax,%eax
 {
-  37:	89 e5                	mov    %esp,%ebp
-  39:	53                   	push   %ebx
-  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while((*s++ = *t++) != 0)
   40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
   44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
@@ -59,86 +60,93 @@
     ;
   return os;
 }
-  4e:	89 c8                	mov    %ecx,%eax
-  50:	5b                   	pop    %ebx
-  51:	5d                   	pop    %ebp
-  52:	c3                   	ret    
-  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  51:	89 c8                	mov    %ecx,%eax
+  53:	c9                   	leave  
+  54:	c3                   	ret    
+  55:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
 00000060 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-  60:	f3 0f 1e fb          	endbr32 
-  64:	55                   	push   %ebp
-  65:	89 e5                	mov    %esp,%ebp
-  67:	53                   	push   %ebx
-  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
-  6e:	0f b6 01             	movzbl (%ecx),%eax
-  71:	0f b6 1a             	movzbl (%edx),%ebx
-  74:	84 c0                	test   %al,%al
-  76:	75 19                	jne    91 <strcmp+0x31>
-  78:	eb 26                	jmp    a0 <strcmp+0x40>
-  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	84 c0                	test   %al,%al
+  6f:	75 17                	jne    88 <strcmp+0x28>
+  71:	eb 3a                	jmp    ad <strcmp+0x4d>
+  73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  77:	90                   	nop
+  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
     p++, q++;
-  84:	83 c1 01             	add    $0x1,%ecx
-  87:	83 c2 01             	add    $0x1,%edx
+  7c:	83 c2 01             	add    $0x1,%edx
+  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
-  8a:	0f b6 1a             	movzbl (%edx),%ebx
-  8d:	84 c0                	test   %al,%al
-  8f:	74 0f                	je     a0 <strcmp+0x40>
-  91:	38 d8                	cmp    %bl,%al
-  93:	74 eb                	je     80 <strcmp+0x20>
+  82:	84 c0                	test   %al,%al
+  84:	74 1a                	je     a0 <strcmp+0x40>
+    p++, q++;
+  86:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  88:	0f b6 19             	movzbl (%ecx),%ebx
+  8b:	38 c3                	cmp    %al,%bl
+  8d:	74 e9                	je     78 <strcmp+0x18>
   return (uchar)*p - (uchar)*q;
-  95:	29 d8                	sub    %ebx,%eax
+  8f:	29 d8                	sub    %ebx,%eax
 }
-  97:	5b                   	pop    %ebx
-  98:	5d                   	pop    %ebp
-  99:	c3                   	ret    
-  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  a0:	31 c0                	xor    %eax,%eax
+  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  94:	c9                   	leave  
+  95:	c3                   	ret    
+  96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
   return (uchar)*p - (uchar)*q;
-  a2:	29 d8                	sub    %ebx,%eax
-}
-  a4:	5b                   	pop    %ebx
-  a5:	5d                   	pop    %ebp
-  a6:	c3                   	ret    
-  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  ae:	66 90                	xchg   %ax,%ax
+  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  a4:	31 c0                	xor    %eax,%eax
+  a6:	29 d8                	sub    %ebx,%eax
+}
+  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  ab:	c9                   	leave  
+  ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	31 c0                	xor    %eax,%eax
+  b2:	eb db                	jmp    8f <strcmp+0x2f>
+  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bf:	90                   	nop
 
-000000b0 <strlen>:
+000000c0 <strlen>:
 
 uint
 strlen(const char *s)
 {
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  b5:	89 e5                	mov    %esp,%ebp
-  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   for(n = 0; s[n]; n++)
-  ba:	80 3a 00             	cmpb   $0x0,(%edx)
-  bd:	74 21                	je     e0 <strlen+0x30>
-  bf:	31 c0                	xor    %eax,%eax
-  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  c8:	83 c0 01             	add    $0x1,%eax
-  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-  cf:	89 c1                	mov    %eax,%ecx
-  d1:	75 f5                	jne    c8 <strlen+0x18>
+  c6:	80 3a 00             	cmpb   $0x0,(%edx)
+  c9:	74 15                	je     e0 <strlen+0x20>
+  cb:	31 c0                	xor    %eax,%eax
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  d7:	89 c1                	mov    %eax,%ecx
+  d9:	75 f5                	jne    d0 <strlen+0x10>
     ;
   return n;
 }
-  d3:	89 c8                	mov    %ecx,%eax
-  d5:	5d                   	pop    %ebp
-  d6:	c3                   	ret    
-  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  de:	66 90                	xchg   %ax,%ax
+  db:	89 c8                	mov    %ecx,%eax
+  dd:	5d                   	pop    %ebp
+  de:	c3                   	ret    
+  df:	90                   	nop
   for(n = 0; s[n]; n++)
   e0:	31 c9                	xor    %ecx,%ecx
 }
@@ -153,414 +161,418 @@
 void*
 memset(void *dst, int c, uint n)
 {
-  f0:	f3 0f 1e fb          	endbr32 
-  f4:	55                   	push   %ebp
-  f5:	89 e5                	mov    %esp,%ebp
-  f7:	57                   	push   %edi
-  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	57                   	push   %edi
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
-  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
- 101:	89 d7                	mov    %edx,%edi
- 103:	fc                   	cld    
- 104:	f3 aa                	rep stos %al,%es:(%edi)
+  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	89 d7                	mov    %edx,%edi
+  ff:	fc                   	cld    
+ 100:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
- 106:	89 d0                	mov    %edx,%eax
- 108:	5f                   	pop    %edi
- 109:	5d                   	pop    %ebp
- 10a:	c3                   	ret    
- 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 10f:	90                   	nop
+ 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 105:	89 d0                	mov    %edx,%eax
+ 107:	c9                   	leave  
+ 108:	c3                   	ret    
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
 00000110 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 110:	f3 0f 1e fb          	endbr32 
- 114:	55                   	push   %ebp
- 115:	89 e5                	mov    %esp,%ebp
- 117:	8b 45 08             	mov    0x8(%ebp),%eax
- 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 45 08             	mov    0x8(%ebp),%eax
+ 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
   for(; *s; s++)
- 11e:	0f b6 10             	movzbl (%eax),%edx
- 121:	84 d2                	test   %dl,%dl
- 123:	75 16                	jne    13b <strchr+0x2b>
- 125:	eb 21                	jmp    148 <strchr+0x38>
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
- 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 134:	83 c0 01             	add    $0x1,%eax
- 137:	84 d2                	test   %dl,%dl
- 139:	74 0d                	je     148 <strchr+0x38>
+ 11a:	0f b6 10             	movzbl (%eax),%edx
+ 11d:	84 d2                	test   %dl,%dl
+ 11f:	75 12                	jne    133 <strchr+0x23>
+ 121:	eb 1d                	jmp    140 <strchr+0x30>
+ 123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 127:	90                   	nop
+ 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 12c:	83 c0 01             	add    $0x1,%eax
+ 12f:	84 d2                	test   %dl,%dl
+ 131:	74 0d                	je     140 <strchr+0x30>
     if(*s == c)
- 13b:	38 d1                	cmp    %dl,%cl
- 13d:	75 f1                	jne    130 <strchr+0x20>
+ 133:	38 d1                	cmp    %dl,%cl
+ 135:	75 f1                	jne    128 <strchr+0x18>
       return (char*)s;
   return 0;
 }
- 13f:	5d                   	pop    %ebp
- 140:	c3                   	ret    
- 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return 0;
- 148:	31 c0                	xor    %eax,%eax
+ 140:	31 c0                	xor    %eax,%eax
 }
- 14a:	5d                   	pop    %ebp
- 14b:	c3                   	ret    
- 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
 
 00000150 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 150:	f3 0f 1e fb          	endbr32 
- 154:	55                   	push   %ebp
- 155:	89 e5                	mov    %esp,%ebp
- 157:	57                   	push   %edi
- 158:	56                   	push   %esi
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	57                   	push   %edi
+ 154:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
- 159:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 155:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 158:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 159:	31 db                	xor    %ebx,%ebx
 {
- 15b:	53                   	push   %ebx
- 15c:	89 f3                	mov    %esi,%ebx
- 15e:	83 ec 1c             	sub    $0x1c,%esp
- 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 15b:	83 ec 1c             	sub    $0x1c,%esp
   for(i=0; i+1 < max; ){
- 164:	eb 33                	jmp    199 <gets+0x49>
- 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16d:	8d 76 00             	lea    0x0(%esi),%esi
+ 15e:	eb 27                	jmp    187 <gets+0x37>
     cc = read(0, &c, 1);
- 170:	83 ec 04             	sub    $0x4,%esp
- 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 176:	6a 01                	push   $0x1
- 178:	50                   	push   %eax
- 179:	6a 00                	push   $0x0
- 17b:	e8 2b 01 00 00       	call   2ab <read>
+ 160:	83 ec 04             	sub    $0x4,%esp
+ 163:	6a 01                	push   $0x1
+ 165:	57                   	push   %edi
+ 166:	6a 00                	push   $0x0
+ 168:	e8 2e 01 00 00       	call   29b <read>
     if(cc < 1)
- 180:	83 c4 10             	add    $0x10,%esp
- 183:	85 c0                	test   %eax,%eax
- 185:	7e 1c                	jle    1a3 <gets+0x53>
+ 16d:	83 c4 10             	add    $0x10,%esp
+ 170:	85 c0                	test   %eax,%eax
+ 172:	7e 1d                	jle    191 <gets+0x41>
       break;
     buf[i++] = c;
- 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 18b:	83 c7 01             	add    $0x1,%edi
- 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+ 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 178:	8b 55 08             	mov    0x8(%ebp),%edx
+ 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 191:	3c 0a                	cmp    $0xa,%al
- 193:	74 23                	je     1b8 <gets+0x68>
- 195:	3c 0d                	cmp    $0xd,%al
- 197:	74 1f                	je     1b8 <gets+0x68>
+ 17f:	3c 0a                	cmp    $0xa,%al
+ 181:	74 1d                	je     1a0 <gets+0x50>
+ 183:	3c 0d                	cmp    $0xd,%al
+ 185:	74 19                	je     1a0 <gets+0x50>
   for(i=0; i+1 < max; ){
- 199:	83 c3 01             	add    $0x1,%ebx
- 19c:	89 fe                	mov    %edi,%esi
- 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1a1:	7c cd                	jl     170 <gets+0x20>
- 1a3:	89 f3                	mov    %esi,%ebx
+ 187:	89 de                	mov    %ebx,%esi
+ 189:	83 c3 01             	add    $0x1,%ebx
+ 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 18f:	7c cf                	jl     160 <gets+0x10>
       break;
   }
   buf[i] = '\0';
+ 191:	8b 45 08             	mov    0x8(%ebp),%eax
+ 194:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 198:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19b:	5b                   	pop    %ebx
+ 19c:	5e                   	pop    %esi
+ 19d:	5f                   	pop    %edi
+ 19e:	5d                   	pop    %ebp
+ 19f:	c3                   	ret    
   buf[i] = '\0';
- 1a8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ae:	5b                   	pop    %ebx
- 1af:	5e                   	pop    %esi
- 1b0:	5f                   	pop    %edi
- 1b1:	5d                   	pop    %ebp
- 1b2:	c3                   	ret    
- 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1b7:	90                   	nop
- 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
- 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
- 1be:	01 de                	add    %ebx,%esi
- 1c0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 1c2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1c8:	5b                   	pop    %ebx
- 1c9:	5e                   	pop    %esi
- 1ca:	5f                   	pop    %edi
- 1cb:	5d                   	pop    %ebp
- 1cc:	c3                   	ret    
- 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a3:	89 de                	mov    %ebx,%esi
+ 1a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ac:	5b                   	pop    %ebx
+ 1ad:	5e                   	pop    %esi
+ 1ae:	5f                   	pop    %edi
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
 
-000001d0 <stat>:
+000001c0 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	56                   	push   %esi
- 1d8:	53                   	push   %ebx
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 1d9:	83 ec 08             	sub    $0x8,%esp
- 1dc:	6a 00                	push   $0x0
- 1de:	ff 75 08             	pushl  0x8(%ebp)
- 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	push   0x8(%ebp)
+ 1cd:	e8 f1 00 00 00       	call   2c3 <open>
   if(fd < 0)
- 1e6:	83 c4 10             	add    $0x10,%esp
- 1e9:	85 c0                	test   %eax,%eax
- 1eb:	78 2b                	js     218 <stat+0x48>
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
     return -1;
   r = fstat(fd, st);
- 1ed:	83 ec 08             	sub    $0x8,%esp
- 1f0:	ff 75 0c             	pushl  0xc(%ebp)
- 1f3:	89 c3                	mov    %eax,%ebx
- 1f5:	50                   	push   %eax
- 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	push   0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f4 00 00 00       	call   2db <fstat>
   close(fd);
- 1fb:	89 1c 24             	mov    %ebx,(%esp)
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 1fe:	89 c6                	mov    %eax,%esi
+ 1ea:	89 c6                	mov    %eax,%esi
   close(fd);
- 200:	e8 b6 00 00 00       	call   2bb <close>
+ 1ec:	e8 ba 00 00 00       	call   2ab <close>
   return r;
- 205:	83 c4 10             	add    $0x10,%esp
+ 1f1:	83 c4 10             	add    $0x10,%esp
 }
- 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 20b:	89 f0                	mov    %esi,%eax
- 20d:	5b                   	pop    %ebx
- 20e:	5e                   	pop    %esi
- 20f:	5d                   	pop    %ebp
- 210:	c3                   	ret    
- 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
- 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 21d:	eb e9                	jmp    208 <stat+0x38>
- 21f:	90                   	nop
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
 
-00000220 <atoi>:
+00000210 <atoi>:
 
 int
 atoi(const char *s)
 {
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	53                   	push   %ebx
- 228:	8b 55 08             	mov    0x8(%ebp),%edx
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 22b:	0f be 02             	movsbl (%edx),%eax
- 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 231:	80 f9 09             	cmp    $0x9,%cl
+ 217:	0f be 02             	movsbl (%edx),%eax
+ 21a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 21d:	80 f9 09             	cmp    $0x9,%cl
   n = 0;
- 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+ 220:	b9 00 00 00 00       	mov    $0x0,%ecx
   while('0' <= *s && *s <= '9')
- 239:	77 1a                	ja     255 <atoi+0x35>
- 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 23f:	90                   	nop
+ 225:	77 1e                	ja     245 <atoi+0x35>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 240:	83 c2 01             	add    $0x1,%edx
- 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+ 230:	83 c2 01             	add    $0x1,%edx
+ 233:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 236:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
   while('0' <= *s && *s <= '9')
- 24a:	0f be 02             	movsbl (%edx),%eax
- 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 250:	80 fb 09             	cmp    $0x9,%bl
- 253:	76 eb                	jbe    240 <atoi+0x20>
+ 23a:	0f be 02             	movsbl (%edx),%eax
+ 23d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
   return n;
 }
- 255:	89 c8                	mov    %ecx,%eax
- 257:	5b                   	pop    %ebx
- 258:	5d                   	pop    %ebp
- 259:	c3                   	ret    
- 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 248:	89 c8                	mov    %ecx,%eax
+ 24a:	c9                   	leave  
+ 24b:	c3                   	ret    
+ 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000260 <memmove>:
+00000250 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	57                   	push   %edi
- 268:	8b 45 10             	mov    0x10(%ebp),%eax
- 26b:	8b 55 08             	mov    0x8(%ebp),%edx
- 26e:	56                   	push   %esi
- 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 45 10             	mov    0x10(%ebp),%eax
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 272:	85 c0                	test   %eax,%eax
- 274:	7e 0f                	jle    285 <memmove+0x25>
- 276:	01 d0                	add    %edx,%eax
+ 25e:	85 c0                	test   %eax,%eax
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 d0                	add    %edx,%eax
   dst = vdst;
- 278:	89 d7                	mov    %edx,%edi
- 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 264:	89 d7                	mov    %edx,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
     *dst++ = *src++;
- 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
   while(n-- > 0)
- 281:	39 f8                	cmp    %edi,%eax
- 283:	75 fb                	jne    280 <memmove+0x20>
+ 271:	39 f8                	cmp    %edi,%eax
+ 273:	75 fb                	jne    270 <memmove+0x20>
   return vdst;
 }
- 285:	5e                   	pop    %esi
- 286:	89 d0                	mov    %edx,%eax
- 288:	5f                   	pop    %edi
- 289:	5d                   	pop    %ebp
- 28a:	c3                   	ret    
+ 275:	5e                   	pop    %esi
+ 276:	89 d0                	mov    %edx,%eax
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
 
-0000028b <fork>:
+0000027b <fork>:
   name: \
     movl $SYS_ ## name, %eax; \
     int $T_SYSCALL; \
     ret
 
 SYSCALL(fork)
- 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
  290:	cd 40                	int    $0x40
  292:	c3                   	ret    
 
-00000293 <exit>:
-SYSCALL(exit)
- 293:	b8 02 00 00 00       	mov    $0x2,%eax
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
  298:	cd 40                	int    $0x40
  29a:	c3                   	ret    
 
-0000029b <wait>:
-SYSCALL(wait)
- 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
  2a0:	cd 40                	int    $0x40
  2a2:	c3                   	ret    
 
-000002a3 <pipe>:
-SYSCALL(pipe)
- 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
  2a8:	cd 40                	int    $0x40
  2aa:	c3                   	ret    
 
-000002ab <read>:
-SYSCALL(read)
- 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
  2b0:	cd 40                	int    $0x40
  2b2:	c3                   	ret    
 
-000002b3 <write>:
-SYSCALL(write)
- 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
  2b8:	cd 40                	int    $0x40
  2ba:	c3                   	ret    
 
-000002bb <close>:
-SYSCALL(close)
- 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
  2c0:	cd 40                	int    $0x40
  2c2:	c3                   	ret    
 
-000002c3 <kill>:
-SYSCALL(kill)
- 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
  2c8:	cd 40                	int    $0x40
  2ca:	c3                   	ret    
 
-000002cb <exec>:
-SYSCALL(exec)
- 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
  2d0:	cd 40                	int    $0x40
  2d2:	c3                   	ret    
 
-000002d3 <open>:
-SYSCALL(open)
- 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
  2d8:	cd 40                	int    $0x40
  2da:	c3                   	ret    
 
-000002db <mknod>:
-SYSCALL(mknod)
- 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
-000002e3 <unlink>:
-SYSCALL(unlink)
- 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
-000002eb <fstat>:
-SYSCALL(fstat)
- 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
-000002f3 <link>:
-SYSCALL(link)
- 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
-000002fb <mkdir>:
-SYSCALL(mkdir)
- 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
-00000303 <chdir>:
-SYSCALL(chdir)
- 303:	b8 09 00 00 00       	mov    $0x9,%eax
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
-0000030b <dup>:
-SYSCALL(dup)
- 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
-00000313 <getpid>:
-SYSCALL(getpid)
- 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
-0000031b <sbrk>:
-SYSCALL(sbrk)
- 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
-00000323 <sleep>:
-SYSCALL(sleep)
- 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+00000323 <thread_create>:
+SYSCALL(thread_create)
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
-0000032b <uptime>:
-SYSCALL(uptime)
- 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+0000032b <thread_join>:
+SYSCALL(thread_join)
+ 32b:	b8 17 00 00 00       	mov    $0x17,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
- 333:	66 90                	xchg   %ax,%ax
- 335:	66 90                	xchg   %ax,%ax
- 337:	66 90                	xchg   %ax,%ax
- 339:	66 90                	xchg   %ax,%ax
+
+00000333 <thread_exit>:
+ 333:	b8 18 00 00 00       	mov    $0x18,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
  33b:	66 90                	xchg   %ax,%ax
  33d:	66 90                	xchg   %ax,%ax
  33f:	90                   	nop
@@ -611,7 +623,7 @@
  372:	31 d2                	xor    %edx,%edx
  374:	89 cf                	mov    %ecx,%edi
  376:	f7 75 c4             	divl   -0x3c(%ebp)
- 379:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
+ 379:	0f b6 92 78 07 00 00 	movzbl 0x778(%edx),%edx
  380:	89 45 c0             	mov    %eax,-0x40(%ebp)
  383:	89 d8                	mov    %ebx,%eax
  385:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -638,6 +650,7 @@
  3a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
  3ad:	eb 07                	jmp    3b6 <printint+0x76>
  3af:	90                   	nop
+    putc(fd, buf[i]);
  3b0:	0f b6 13             	movzbl (%ebx),%edx
  3b3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
@@ -646,12 +659,11 @@
  3bc:	6a 01                	push   $0x1
  3be:	56                   	push   %esi
  3bf:	57                   	push   %edi
- 3c0:	e8 ee fe ff ff       	call   2b3 <write>
+ 3c0:	e8 de fe ff ff       	call   2a3 <write>
   while(--i >= 0)
  3c5:	83 c4 10             	add    $0x10,%esp
  3c8:	39 de                	cmp    %ebx,%esi
  3ca:	75 e4                	jne    3b0 <printint+0x70>
-    putc(fd, buf[i]);
 }
  3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  3cf:	5b                   	pop    %ebx
@@ -673,493 +685,453 @@
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	f3 0f 1e fb          	endbr32 
- 3f4:	55                   	push   %ebp
- 3f5:	89 e5                	mov    %esp,%ebp
- 3f7:	57                   	push   %edi
- 3f8:	56                   	push   %esi
- 3f9:	53                   	push   %ebx
- 3fa:	83 ec 2c             	sub    $0x2c,%esp
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 400:	0f b6 1e             	movzbl (%esi),%ebx
- 403:	84 db                	test   %bl,%bl
- 405:	0f 84 b4 00 00 00    	je     4bf <printf+0xcf>
+ 3f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 3fc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 3ff:	0f b6 13             	movzbl (%ebx),%edx
+ 402:	84 d2                	test   %dl,%dl
+ 404:	74 6a                	je     470 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 40b:	8d 45 10             	lea    0x10(%ebp),%eax
- 40e:	83 c6 01             	add    $0x1,%esi
+ 406:	8d 45 10             	lea    0x10(%ebp),%eax
+ 409:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 411:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 40c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 414:	31 d2                	xor    %edx,%edx
+ 40f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 416:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 419:	eb 33                	jmp    44e <printf+0x5e>
- 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
- 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 411:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 414:	eb 36                	jmp    44c <printf+0x5c>
+ 416:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+ 420:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 423:	ba 25 00 00 00       	mov    $0x25,%edx
+ 423:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
  428:	83 f8 25             	cmp    $0x25,%eax
- 42b:	74 17                	je     444 <printf+0x54>
+ 42b:	74 15                	je     442 <printf+0x52>
   write(fd, &c, 1);
  42d:	83 ec 04             	sub    $0x4,%esp
- 430:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 430:	88 55 e7             	mov    %dl,-0x19(%ebp)
  433:	6a 01                	push   $0x1
  435:	57                   	push   %edi
- 436:	ff 75 08             	pushl  0x8(%ebp)
- 439:	e8 75 fe ff ff       	call   2b3 <write>
- 43e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 436:	56                   	push   %esi
+ 437:	e8 67 fe ff ff       	call   2a3 <write>
+ 43c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 441:	83 c4 10             	add    $0x10,%esp
+ 43f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 444:	0f b6 1e             	movzbl (%esi),%ebx
- 447:	83 c6 01             	add    $0x1,%esi
- 44a:	84 db                	test   %bl,%bl
- 44c:	74 71                	je     4bf <printf+0xcf>
+ 442:	0f b6 13             	movzbl (%ebx),%edx
+ 445:	83 c3 01             	add    $0x1,%ebx
+ 448:	84 d2                	test   %dl,%dl
+ 44a:	74 24                	je     470 <printf+0x80>
     c = fmt[i] & 0xff;
- 44e:	0f be cb             	movsbl %bl,%ecx
- 451:	0f b6 c3             	movzbl %bl,%eax
+ 44c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 454:	85 d2                	test   %edx,%edx
- 456:	74 c8                	je     420 <printf+0x30>
+ 44f:	85 c9                	test   %ecx,%ecx
+ 451:	74 cd                	je     420 <printf+0x30>
       }
     } else if(state == '%'){
- 458:	83 fa 25             	cmp    $0x25,%edx
- 45b:	75 e7                	jne    444 <printf+0x54>
+ 453:	83 f9 25             	cmp    $0x25,%ecx
+ 456:	75 ea                	jne    442 <printf+0x52>
       if(c == 'd'){
- 45d:	83 f8 64             	cmp    $0x64,%eax
- 460:	0f 84 9a 00 00 00    	je     500 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 466:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 46c:	83 f9 70             	cmp    $0x70,%ecx
- 46f:	74 5f                	je     4d0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 471:	83 f8 73             	cmp    $0x73,%eax
- 474:	0f 84 d6 00 00 00    	je     550 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 47a:	83 f8 63             	cmp    $0x63,%eax
- 47d:	0f 84 8d 00 00 00    	je     510 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 483:	83 f8 25             	cmp    $0x25,%eax
- 486:	0f 84 b4 00 00 00    	je     540 <printf+0x150>
-  write(fd, &c, 1);
- 48c:	83 ec 04             	sub    $0x4,%esp
- 48f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	ff 75 08             	pushl  0x8(%ebp)
- 499:	e8 15 fe ff ff       	call   2b3 <write>
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	0f 84 07 01 00 00    	je     568 <printf+0x178>
+ 461:	83 e8 63             	sub    $0x63,%eax
+ 464:	83 f8 15             	cmp    $0x15,%eax
+ 467:	77 17                	ja     480 <printf+0x90>
+ 469:	ff 24 85 20 07 00 00 	jmp    *0x720(,%eax,4)
         putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 49e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 4a1:	83 c4 0c             	add    $0xc,%esp
- 4a4:	6a 01                	push   $0x1
- 4a6:	83 c6 01             	add    $0x1,%esi
- 4a9:	57                   	push   %edi
- 4aa:	ff 75 08             	pushl  0x8(%ebp)
- 4ad:	e8 01 fe ff ff       	call   2b3 <write>
-  for(i = 0; fmt[i]; i++){
- 4b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 4b6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4b9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 4bb:	84 db                	test   %bl,%bl
- 4bd:	75 8f                	jne    44e <printf+0x5e>
     }
   }
 }
- 4bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4c2:	5b                   	pop    %ebx
- 4c3:	5e                   	pop    %esi
- 4c4:	5f                   	pop    %edi
- 4c5:	5d                   	pop    %ebp
- 4c6:	c3                   	ret    
- 4c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ce:	66 90                	xchg   %ax,%ax
+ 470:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 473:	5b                   	pop    %ebx
+ 474:	5e                   	pop    %esi
+ 475:	5f                   	pop    %edi
+ 476:	5d                   	pop    %ebp
+ 477:	c3                   	ret    
+ 478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+  write(fd, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 486:	6a 01                	push   $0x1
+ 488:	57                   	push   %edi
+ 489:	56                   	push   %esi
+ 48a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 48e:	e8 10 fe ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 493:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 497:	83 c4 0c             	add    $0xc,%esp
+ 49a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 49d:	6a 01                	push   $0x1
+ 49f:	57                   	push   %edi
+ 4a0:	56                   	push   %esi
+ 4a1:	e8 fd fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4a6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4a9:	31 c9                	xor    %ecx,%ecx
+ 4ab:	eb 95                	jmp    442 <printf+0x52>
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4d0:	83 ec 0c             	sub    $0xc,%esp
- 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4d8:	6a 00                	push   $0x0
- 4da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4dd:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e0:	8b 13                	mov    (%ebx),%edx
- 4e2:	e8 59 fe ff ff       	call   340 <printint>
+ 4b0:	83 ec 0c             	sub    $0xc,%esp
+ 4b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4b8:	6a 00                	push   $0x0
+ 4ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4bd:	8b 10                	mov    (%eax),%edx
+ 4bf:	89 f0                	mov    %esi,%eax
+ 4c1:	e8 7a fe ff ff       	call   340 <printint>
         ap++;
- 4e7:	89 d8                	mov    %ebx,%eax
- 4e9:	83 c4 10             	add    $0x10,%esp
+ 4c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4ca:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4ec:	31 d2                	xor    %edx,%edx
+ 4cd:	31 c9                	xor    %ecx,%ecx
+ 4cf:	e9 6e ff ff ff       	jmp    442 <printf+0x52>
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4db:	8b 10                	mov    (%eax),%edx
         ap++;
- 4ee:	83 c0 04             	add    $0x4,%eax
- 4f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f4:	e9 4b ff ff ff       	jmp    444 <printf+0x54>
- 4f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4dd:	83 c0 04             	add    $0x4,%eax
+ 4e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 4e3:	85 d2                	test   %edx,%edx
+ 4e5:	0f 84 8d 00 00 00    	je     578 <printf+0x188>
+        while(*s != 0){
+ 4eb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 4ee:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 4f0:	84 c0                	test   %al,%al
+ 4f2:	0f 84 4a ff ff ff    	je     442 <printf+0x52>
+ 4f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 4fb:	89 d3                	mov    %edx,%ebx
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 500:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 503:	83 c3 01             	add    $0x1,%ebx
+ 506:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 509:	6a 01                	push   $0x1
+ 50b:	57                   	push   %edi
+ 50c:	56                   	push   %esi
+ 50d:	e8 91 fd ff ff       	call   2a3 <write>
+        while(*s != 0){
+ 512:	0f b6 03             	movzbl (%ebx),%eax
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	84 c0                	test   %al,%al
+ 51a:	75 e4                	jne    500 <printf+0x110>
+      state = 0;
+ 51c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 51f:	31 c9                	xor    %ecx,%ecx
+ 521:	e9 1c ff ff ff       	jmp    442 <printf+0x52>
+ 526:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 508:	6a 01                	push   $0x1
- 50a:	eb ce                	jmp    4da <printf+0xea>
- 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	e9 7b ff ff ff       	jmp    4ba <printf+0xca>
+ 53f:	90                   	nop
         putc(fd, *ap);
- 510:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 540:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 513:	83 ec 04             	sub    $0x4,%esp
+ 543:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 516:	8b 03                	mov    (%ebx),%eax
+ 546:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 518:	6a 01                	push   $0x1
-        ap++;
- 51a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 51d:	57                   	push   %edi
- 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 548:	6a 01                	push   $0x1
+ 54a:	57                   	push   %edi
+ 54b:	56                   	push   %esi
         putc(fd, *ap);
- 521:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 54c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 524:	e8 8a fd ff ff       	call   2b3 <write>
+ 54f:	e8 4f fd ff ff       	call   2a3 <write>
         ap++;
- 529:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 52c:	83 c4 10             	add    $0x10,%esp
+ 554:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 558:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52f:	31 d2                	xor    %edx,%edx
- 531:	e9 0e ff ff ff       	jmp    444 <printf+0x54>
- 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 55b:	31 c9                	xor    %ecx,%ecx
+ 55d:	e9 e0 fe ff ff       	jmp    442 <printf+0x52>
+ 562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 568:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 543:	83 ec 04             	sub    $0x4,%esp
- 546:	e9 59 ff ff ff       	jmp    4a4 <printf+0xb4>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
-        s = (char*)*ap;
- 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 553:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 555:	83 c0 04             	add    $0x4,%eax
- 558:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 55b:	85 db                	test   %ebx,%ebx
- 55d:	74 17                	je     576 <printf+0x186>
-        while(*s != 0){
- 55f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 562:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 564:	84 c0                	test   %al,%al
- 566:	0f 84 d8 fe ff ff    	je     444 <printf+0x54>
- 56c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 56f:	89 de                	mov    %ebx,%esi
- 571:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 574:	eb 1a                	jmp    590 <printf+0x1a0>
+ 56b:	83 ec 04             	sub    $0x4,%esp
+ 56e:	e9 2a ff ff ff       	jmp    49d <printf+0xad>
+ 573:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 577:	90                   	nop
           s = "(null)";
- 576:	bb 58 07 00 00       	mov    $0x758,%ebx
+ 578:	ba 18 07 00 00       	mov    $0x718,%edx
         while(*s != 0){
- 57b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 57e:	b8 28 00 00 00       	mov    $0x28,%eax
- 583:	89 de                	mov    %ebx,%esi
- 585:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58f:	90                   	nop
-  write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 593:	83 c6 01             	add    $0x1,%esi
- 596:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 599:	6a 01                	push   $0x1
- 59b:	57                   	push   %edi
- 59c:	53                   	push   %ebx
- 59d:	e8 11 fd ff ff       	call   2b3 <write>
-        while(*s != 0){
- 5a2:	0f b6 06             	movzbl (%esi),%eax
- 5a5:	83 c4 10             	add    $0x10,%esp
- 5a8:	84 c0                	test   %al,%al
- 5aa:	75 e4                	jne    590 <printf+0x1a0>
- 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 8e fe ff ff       	jmp    444 <printf+0x54>
- 5b6:	66 90                	xchg   %ax,%ax
- 5b8:	66 90                	xchg   %ax,%ax
- 5ba:	66 90                	xchg   %ax,%ax
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 57d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 580:	b8 28 00 00 00       	mov    $0x28,%eax
+ 585:	89 d3                	mov    %edx,%ebx
+ 587:	e9 74 ff ff ff       	jmp    500 <printf+0x110>
+ 58c:	66 90                	xchg   %ax,%ax
+ 58e:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+00000590 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	f3 0f 1e fb          	endbr32 
- 5c4:	55                   	push   %ebp
+ 590:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c5:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 591:	a1 20 0a 00 00       	mov    0xa20,%eax
 {
- 5ca:	89 e5                	mov    %esp,%ebp
- 5cc:	57                   	push   %edi
- 5cd:	56                   	push   %esi
- 5ce:	53                   	push   %ebx
- 5cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d2:	8b 10                	mov    (%eax),%edx
+ 596:	89 e5                	mov    %esp,%ebp
+ 598:	57                   	push   %edi
+ 599:	56                   	push   %esi
+ 59a:	53                   	push   %ebx
+ 59b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 59e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d7:	39 c8                	cmp    %ecx,%eax
- 5d9:	73 15                	jae    5f0 <free+0x30>
- 5db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
- 5e0:	39 d1                	cmp    %edx,%ecx
- 5e2:	72 14                	jb     5f8 <free+0x38>
+ 5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5a8:	89 c2                	mov    %eax,%edx
+ 5aa:	8b 00                	mov    (%eax),%eax
+ 5ac:	39 ca                	cmp    %ecx,%edx
+ 5ae:	73 30                	jae    5e0 <free+0x50>
+ 5b0:	39 c1                	cmp    %eax,%ecx
+ 5b2:	72 04                	jb     5b8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e4:	39 d0                	cmp    %edx,%eax
- 5e6:	73 10                	jae    5f8 <free+0x38>
-{
- 5e8:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5ea:	8b 10                	mov    (%eax),%edx
- 5ec:	39 c8                	cmp    %ecx,%eax
- 5ee:	72 f0                	jb     5e0 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 d0                	cmp    %edx,%eax
- 5f2:	72 f4                	jb     5e8 <free+0x28>
- 5f4:	39 d1                	cmp    %edx,%ecx
- 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 5b4:	39 c2                	cmp    %eax,%edx
+ 5b6:	72 f0                	jb     5a8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 fa                	cmp    %edi,%edx
- 600:	74 1e                	je     620 <free+0x60>
+ 5b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5be:	39 f8                	cmp    %edi,%eax
+ 5c0:	74 30                	je     5f2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
+ 5c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
- 602:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 605:	8b 50 04             	mov    0x4(%eax),%edx
- 608:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 28                	je     637 <free+0x77>
+ 5c5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5cb:	39 f1                	cmp    %esi,%ecx
+ 5cd:	74 3a                	je     609 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
+ 5cf:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
- 60f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 5d1:	5b                   	pop    %ebx
   freep = p;
- 612:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 5d2:	89 15 20 0a 00 00    	mov    %edx,0xa20
 }
- 617:	5e                   	pop    %esi
- 618:	5f                   	pop    %edi
- 619:	5d                   	pop    %ebp
- 61a:	c3                   	ret    
- 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 61f:	90                   	nop
+ 5d8:	5e                   	pop    %esi
+ 5d9:	5f                   	pop    %edi
+ 5da:	5d                   	pop    %ebp
+ 5db:	c3                   	ret    
+ 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e0:	39 c2                	cmp    %eax,%edx
+ 5e2:	72 c4                	jb     5a8 <free+0x18>
+ 5e4:	39 c1                	cmp    %eax,%ecx
+ 5e6:	73 c0                	jae    5a8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 5e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ee:	39 f8                	cmp    %edi,%eax
+ 5f0:	75 d0                	jne    5c2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 620:	03 72 04             	add    0x4(%edx),%esi
- 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 5f2:	03 70 04             	add    0x4(%eax),%esi
+ 5f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 626:	8b 10                	mov    (%eax),%edx
- 628:	8b 12                	mov    (%edx),%edx
- 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 5f8:	8b 02                	mov    (%edx),%eax
+ 5fa:	8b 00                	mov    (%eax),%eax
+ 5fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62d:	8b 50 04             	mov    0x4(%eax),%edx
- 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 633:	39 f1                	cmp    %esi,%ecx
- 635:	75 d8                	jne    60f <free+0x4f>
+ 5ff:	8b 42 04             	mov    0x4(%edx),%eax
+ 602:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 605:	39 f1                	cmp    %esi,%ecx
+ 607:	75 c6                	jne    5cf <free+0x3f>
     p->s.size += bp->s.size;
- 637:	03 53 fc             	add    -0x4(%ebx),%edx
+ 609:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 63a:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 60c:	89 15 20 0a 00 00    	mov    %edx,0xa20
     p->s.size += bp->s.size;
- 63f:	89 50 04             	mov    %edx,0x4(%eax)
+ 612:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 645:	89 10                	mov    %edx,(%eax)
+ 615:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 618:	89 0a                	mov    %ecx,(%edx)
 }
- 647:	5b                   	pop    %ebx
- 648:	5e                   	pop    %esi
- 649:	5f                   	pop    %edi
- 64a:	5d                   	pop    %ebp
- 64b:	c3                   	ret    
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61a:	5b                   	pop    %ebx
+ 61b:	5e                   	pop    %esi
+ 61c:	5f                   	pop    %edi
+ 61d:	5d                   	pop    %ebp
+ 61e:	c3                   	ret    
+ 61f:	90                   	nop
 
-00000650 <malloc>:
+00000620 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	f3 0f 1e fb          	endbr32 
- 654:	55                   	push   %ebp
- 655:	89 e5                	mov    %esp,%ebp
- 657:	57                   	push   %edi
- 658:	56                   	push   %esi
- 659:	53                   	push   %ebx
- 65a:	83 ec 1c             	sub    $0x1c,%esp
+ 620:	55                   	push   %ebp
+ 621:	89 e5                	mov    %esp,%ebp
+ 623:	57                   	push   %edi
+ 624:	56                   	push   %esi
+ 625:	53                   	push   %ebx
+ 626:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 65d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 629:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 660:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 62c:	8b 3d 20 0a 00 00    	mov    0xa20,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 666:	8d 70 07             	lea    0x7(%eax),%esi
- 669:	c1 ee 03             	shr    $0x3,%esi
- 66c:	83 c6 01             	add    $0x1,%esi
+ 632:	8d 70 07             	lea    0x7(%eax),%esi
+ 635:	c1 ee 03             	shr    $0x3,%esi
+ 638:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 66f:	85 ff                	test   %edi,%edi
- 671:	0f 84 a9 00 00 00    	je     720 <malloc+0xd0>
+ 63b:	85 ff                	test   %edi,%edi
+ 63d:	0f 84 9d 00 00 00    	je     6e0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 677:	8b 07                	mov    (%edi),%eax
+ 643:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 679:	8b 48 04             	mov    0x4(%eax),%ecx
- 67c:	39 f1                	cmp    %esi,%ecx
- 67e:	73 6d                	jae    6ed <malloc+0x9d>
- 680:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 686:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 68b:	0f 43 de             	cmovae %esi,%ebx
+ 645:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 648:	39 f1                	cmp    %esi,%ecx
+ 64a:	73 6a                	jae    6b6 <malloc+0x96>
+ 64c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 651:	39 de                	cmp    %ebx,%esi
+ 653:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 68e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 695:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 698:	eb 17                	jmp    6b1 <malloc+0x61>
- 69a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 656:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 65d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 660:	eb 17                	jmp    679 <malloc+0x59>
+ 662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a0:	8b 10                	mov    (%eax),%edx
+ 668:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6a2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6a5:	39 f1                	cmp    %esi,%ecx
- 6a7:	73 4f                	jae    6f8 <malloc+0xa8>
- 6a9:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
- 6af:	89 d0                	mov    %edx,%eax
+ 66a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 66d:	39 f1                	cmp    %esi,%ecx
+ 66f:	73 4f                	jae    6c0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	39 c7                	cmp    %eax,%edi
- 6b3:	75 eb                	jne    6a0 <malloc+0x50>
+ 671:	8b 3d 20 0a 00 00    	mov    0xa20,%edi
+ 677:	89 c2                	mov    %eax,%edx
+ 679:	39 d7                	cmp    %edx,%edi
+ 67b:	75 eb                	jne    668 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6b5:	83 ec 0c             	sub    $0xc,%esp
- 6b8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6bb:	e8 5b fc ff ff       	call   31b <sbrk>
+ 67d:	83 ec 0c             	sub    $0xc,%esp
+ 680:	ff 75 e4             	push   -0x1c(%ebp)
+ 683:	e8 83 fc ff ff       	call   30b <sbrk>
   if(p == (char*)-1)
- 6c0:	83 c4 10             	add    $0x10,%esp
- 6c3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6c6:	74 1b                	je     6e3 <malloc+0x93>
+ 688:	83 c4 10             	add    $0x10,%esp
+ 68b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 68e:	74 1c                	je     6ac <malloc+0x8c>
   hp->s.size = nu;
- 6c8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 690:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6cb:	83 ec 0c             	sub    $0xc,%esp
- 6ce:	83 c0 08             	add    $0x8,%eax
- 6d1:	50                   	push   %eax
- 6d2:	e8 e9 fe ff ff       	call   5c0 <free>
+ 693:	83 ec 0c             	sub    $0xc,%esp
+ 696:	83 c0 08             	add    $0x8,%eax
+ 699:	50                   	push   %eax
+ 69a:	e8 f1 fe ff ff       	call   590 <free>
   return freep;
- 6d7:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 69f:	8b 15 20 0a 00 00    	mov    0xa20,%edx
       if((p = morecore(nunits)) == 0)
- 6dc:	83 c4 10             	add    $0x10,%esp
- 6df:	85 c0                	test   %eax,%eax
- 6e1:	75 bd                	jne    6a0 <malloc+0x50>
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	85 d2                	test   %edx,%edx
+ 6aa:	75 bc                	jne    668 <malloc+0x48>
         return 0;
   }
 }
- 6e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6e6:	31 c0                	xor    %eax,%eax
+ 6af:	31 c0                	xor    %eax,%eax
 }
- 6e8:	5b                   	pop    %ebx
- 6e9:	5e                   	pop    %esi
- 6ea:	5f                   	pop    %edi
- 6eb:	5d                   	pop    %ebp
- 6ec:	c3                   	ret    
+ 6b1:	5b                   	pop    %ebx
+ 6b2:	5e                   	pop    %esi
+ 6b3:	5f                   	pop    %edi
+ 6b4:	5d                   	pop    %ebp
+ 6b5:	c3                   	ret    
     if(p->s.size >= nunits){
- 6ed:	89 c2                	mov    %eax,%edx
- 6ef:	89 f8                	mov    %edi,%eax
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6b6:	89 d0                	mov    %edx,%eax
+ 6b8:	89 fa                	mov    %edi,%edx
+ 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6f8:	39 ce                	cmp    %ecx,%esi
- 6fa:	74 54                	je     750 <malloc+0x100>
+ 6c0:	39 ce                	cmp    %ecx,%esi
+ 6c2:	74 4c                	je     710 <malloc+0xf0>
         p->s.size -= nunits;
- 6fc:	29 f1                	sub    %esi,%ecx
- 6fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 6c4:	29 f1                	sub    %esi,%ecx
+ 6c6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 701:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 6c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 704:	89 72 04             	mov    %esi,0x4(%edx)
+ 6cc:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 707:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 6cf:	89 15 20 0a 00 00    	mov    %edx,0xa20
 }
- 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 70f:	8d 42 08             	lea    0x8(%edx),%eax
+ 6d8:	83 c0 08             	add    $0x8,%eax
 }
- 712:	5b                   	pop    %ebx
- 713:	5e                   	pop    %esi
- 714:	5f                   	pop    %edi
- 715:	5d                   	pop    %ebp
- 716:	c3                   	ret    
- 717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71e:	66 90                	xchg   %ax,%ax
+ 6db:	5b                   	pop    %ebx
+ 6dc:	5e                   	pop    %esi
+ 6dd:	5f                   	pop    %edi
+ 6de:	5d                   	pop    %ebp
+ 6df:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
- 727:	0a 00 00 
+ 6e0:	c7 05 20 0a 00 00 24 	movl   $0xa24,0xa20
+ 6e7:	0a 00 00 
     base.s.size = 0;
- 72a:	bf 0c 0a 00 00       	mov    $0xa0c,%edi
+ 6ea:	bf 24 0a 00 00       	mov    $0xa24,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
- 736:	0a 00 00 
+ 6ef:	c7 05 24 0a 00 00 24 	movl   $0xa24,0xa24
+ 6f6:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 f8                	mov    %edi,%eax
+ 6f9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 73b:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
- 742:	00 00 00 
+ 6fb:	c7 05 28 0a 00 00 00 	movl   $0x0,0xa28
+ 702:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 36 ff ff ff       	jmp    680 <malloc+0x30>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 705:	e9 42 ff ff ff       	jmp    64c <malloc+0x2c>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 0a                	mov    (%edx),%ecx
- 752:	89 08                	mov    %ecx,(%eax)
- 754:	eb b1                	jmp    707 <malloc+0xb7>
+ 710:	8b 08                	mov    (%eax),%ecx
+ 712:	89 0a                	mov    %ecx,(%edx)
+ 714:	eb b9                	jmp    6cf <malloc+0xaf>
Binary files xv6_old/zombie.o and xv6-public/zombie.o differ
diff -u xv6_old/zombie.sym xv6-public/zombie.sym
--- xv6_old/zombie.sym	2022-09-05 22:38:03.905146937 +0530
+++ xv6-public/zombie.sym	2022-09-05 21:37:13.864878724 +0530
@@ -1,57 +1,48 @@
-00000000 .text
-00000758 .rodata
-00000774 .eh_frame
-00000a08 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
 00000340 printint
-00000760 digits.1085
+00000778 digits.0
 00000000 umalloc.c
-00000a08 freep
-00000a0c base
+00000a20 freep
+00000a24 base
 00000030 strcpy
 000003f0 printf
-00000260 memmove
-000002db mknod
+00000333 thread_exit
+00000250 memmove
+000002cb mknod
 00000150 gets
-00000313 getpid
-00000650 malloc
-00000323 sleep
-000002a3 pipe
-000002b3 write
-000002eb fstat
-000002c3 kill
-00000303 chdir
-000002cb exec
-0000029b wait
-000002ab read
-000002e3 unlink
-0000028b fork
-0000031b sbrk
-0000032b uptime
-00000a08 __bss_start
+00000303 getpid
+00000620 malloc
+00000313 sleep
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000a20 __bss_start
 000000f0 memset
 00000000 main
 00000060 strcmp
-0000030b dup
-000001d0 stat
-00000a08 _edata
-00000a14 _end
-000002f3 link
-00000293 exit
-00000220 atoi
-000000b0 strlen
-000002d3 open
+000002fb dup
+000001c0 stat
+00000a20 _edata
+00000a2c _end
+000002e3 link
+00000283 exit
+00000210 atoi
+000000c0 strlen
+000002c3 open
 00000110 strchr
-000002fb mkdir
-000002bb close
-000005c0 free
+00000323 thread_create
+000002eb mkdir
+000002ab close
+0000032b thread_join
+00000590 free
