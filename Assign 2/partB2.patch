Binary files xv6-public/bio.o and xv6-public-hybrid/bio.o differ
Binary files xv6-public/bootasm.o and xv6-public-hybrid/bootasm.o differ
Binary files xv6-public/bootblock.o and xv6-public-hybrid/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public-hybrid/bootblockother.o differ
Binary files xv6-public/bootmain.o and xv6-public-hybrid/bootmain.o differ
Binary files xv6-public/_cat and xv6-public-hybrid/_cat differ
diff -u xv6-public/cat.asm xv6-public-hybrid/cat.asm
--- xv6-public/cat.asm	2022-10-07 20:01:00.733968712 +0530
+++ xv6-public-hybrid/cat.asm	2022-10-07 18:39:46.856543000 +0530
@@ -71,9 +71,9 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	pushl  (%ebx)
-  6c:	68 5b 08 00 00       	push   $0x85b
+  6c:	68 8b 08 00 00       	push   $0x88b
   71:	6a 01                	push   $0x1
-  73:	e8 58 04 00 00       	call   4d0 <printf>
+  73:	e8 88 04 00 00       	call   500 <printf>
       exit();
   78:	e8 f6 02 00 00       	call   373 <exit>
     cat(0);
@@ -99,7 +99,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 80 0b 00 00       	push   $0xb80
+  a4:	68 c0 0b 00 00       	push   $0xbc0
   a9:	6a 01                	push   $0x1
   ab:	e8 e3 02 00 00       	call   393 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -108,7 +108,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 80 0b 00 00       	push   $0xb80
+  bf:	68 c0 0b 00 00       	push   $0xbc0
   c4:	56                   	push   %esi
   c5:	e8 c1 02 00 00       	call   38b <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -125,17 +125,17 @@
   db:	c3                   	ret    
       printf(1, "cat: write error\n");
   dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 38 08 00 00       	push   $0x838
+  df:	68 68 08 00 00       	push   $0x868
   e4:	6a 01                	push   $0x1
-  e6:	e8 e5 03 00 00       	call   4d0 <printf>
+  e6:	e8 15 04 00 00       	call   500 <printf>
       exit();
   eb:	e8 83 02 00 00       	call   373 <exit>
     printf(1, "cat: read error\n");
   f0:	50                   	push   %eax
   f1:	50                   	push   %eax
-  f2:	68 4a 08 00 00       	push   $0x84a
+  f2:	68 7a 08 00 00       	push   $0x87a
   f7:	6a 01                	push   $0x1
-  f9:	e8 d2 03 00 00       	call   4d0 <printf>
+  f9:	e8 02 04 00 00       	call   500 <printf>
     exit();
   fe:	e8 70 02 00 00       	call   373 <exit>
  103:	66 90                	xchg   %ax,%ax
@@ -672,609 +672,645 @@
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
- 413:	66 90                	xchg   %ax,%ax
- 415:	66 90                	xchg   %ax,%ax
- 417:	66 90                	xchg   %ax,%ax
- 419:	66 90                	xchg   %ax,%ax
- 41b:	66 90                	xchg   %ax,%ax
- 41d:	66 90                	xchg   %ax,%ax
- 41f:	90                   	nop
 
-00000420 <printint>:
+00000413 <wolfie>:
+SYSCALL(wolfie)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <getNumProc>:
+SYSCALL(getNumProc)
+ 41b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 423:	b8 17 00 00 00       	mov    $0x17,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 42b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 433:	b8 19 00 00 00       	mov    $0x19,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 43b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+ 443:	66 90                	xchg   %ax,%ax
+ 445:	66 90                	xchg   %ax,%ax
+ 447:	66 90                	xchg   %ax,%ax
+ 449:	66 90                	xchg   %ax,%ax
+ 44b:	66 90                	xchg   %ax,%ax
+ 44d:	66 90                	xchg   %ax,%ax
+ 44f:	90                   	nop
+
+00000450 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 3c             	sub    $0x3c,%esp
- 429:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 3c             	sub    $0x3c,%esp
+ 459:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 42c:	89 d1                	mov    %edx,%ecx
+ 45c:	89 d1                	mov    %edx,%ecx
 {
- 42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 45e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 431:	85 d2                	test   %edx,%edx
- 433:	0f 89 7f 00 00 00    	jns    4b8 <printint+0x98>
- 439:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 43d:	74 79                	je     4b8 <printint+0x98>
+ 461:	85 d2                	test   %edx,%edx
+ 463:	0f 89 7f 00 00 00    	jns    4e8 <printint+0x98>
+ 469:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 46d:	74 79                	je     4e8 <printint+0x98>
     neg = 1;
- 43f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 46f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 446:	f7 d9                	neg    %ecx
+ 476:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 448:	31 db                	xor    %ebx,%ebx
- 44a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
+ 478:	31 db                	xor    %ebx,%ebx
+ 47a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 450:	89 c8                	mov    %ecx,%eax
- 452:	31 d2                	xor    %edx,%edx
- 454:	89 cf                	mov    %ecx,%edi
- 456:	f7 75 c4             	divl   -0x3c(%ebp)
- 459:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
- 460:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 463:	89 d8                	mov    %ebx,%eax
- 465:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 480:	89 c8                	mov    %ecx,%eax
+ 482:	31 d2                	xor    %edx,%edx
+ 484:	89 cf                	mov    %ecx,%edi
+ 486:	f7 75 c4             	divl   -0x3c(%ebp)
+ 489:	0f b6 92 a8 08 00 00 	movzbl 0x8a8(%edx),%edx
+ 490:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 493:	89 d8                	mov    %ebx,%eax
+ 495:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 468:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 498:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 46b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 49b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 46e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 471:	76 dd                	jbe    450 <printint+0x30>
+ 49e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4a1:	76 dd                	jbe    480 <printint+0x30>
   if(neg)
- 473:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 476:	85 c9                	test   %ecx,%ecx
- 478:	74 0c                	je     486 <printint+0x66>
+ 4a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4a6:	85 c9                	test   %ecx,%ecx
+ 4a8:	74 0c                	je     4b6 <printint+0x66>
     buf[i++] = '-';
- 47a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 47f:	89 d8                	mov    %ebx,%eax
+ 4af:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 481:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 486:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 489:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 48d:	eb 07                	jmp    496 <printint+0x76>
- 48f:	90                   	nop
- 490:	0f b6 13             	movzbl (%ebx),%edx
- 493:	83 eb 01             	sub    $0x1,%ebx
+ 4b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4bd:	eb 07                	jmp    4c6 <printint+0x76>
+ 4bf:	90                   	nop
+ 4c0:	0f b6 13             	movzbl (%ebx),%edx
+ 4c3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 496:	83 ec 04             	sub    $0x4,%esp
- 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 49c:	6a 01                	push   $0x1
- 49e:	56                   	push   %esi
- 49f:	57                   	push   %edi
- 4a0:	e8 ee fe ff ff       	call   393 <write>
+ 4c6:	83 ec 04             	sub    $0x4,%esp
+ 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4cc:	6a 01                	push   $0x1
+ 4ce:	56                   	push   %esi
+ 4cf:	57                   	push   %edi
+ 4d0:	e8 be fe ff ff       	call   393 <write>
   while(--i >= 0)
- 4a5:	83 c4 10             	add    $0x10,%esp
- 4a8:	39 de                	cmp    %ebx,%esi
- 4aa:	75 e4                	jne    490 <printint+0x70>
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	39 de                	cmp    %ebx,%esi
+ 4da:	75 e4                	jne    4c0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4af:	5b                   	pop    %ebx
- 4b0:	5e                   	pop    %esi
- 4b1:	5f                   	pop    %edi
- 4b2:	5d                   	pop    %ebp
- 4b3:	c3                   	ret    
- 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4df:	5b                   	pop    %ebx
+ 4e0:	5e                   	pop    %esi
+ 4e1:	5f                   	pop    %edi
+ 4e2:	5d                   	pop    %ebp
+ 4e3:	c3                   	ret    
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4bf:	eb 87                	jmp    448 <printint+0x28>
- 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cf:	90                   	nop
+ 4e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ef:	eb 87                	jmp    478 <printint+0x28>
+ 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
 
-000004d0 <printf>:
+00000500 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4d0:	f3 0f 1e fb          	endbr32 
- 4d4:	55                   	push   %ebp
- 4d5:	89 e5                	mov    %esp,%ebp
- 4d7:	57                   	push   %edi
- 4d8:	56                   	push   %esi
- 4d9:	53                   	push   %ebx
- 4da:	83 ec 2c             	sub    $0x2c,%esp
+ 500:	f3 0f 1e fb          	endbr32 
+ 504:	55                   	push   %ebp
+ 505:	89 e5                	mov    %esp,%ebp
+ 507:	57                   	push   %edi
+ 508:	56                   	push   %esi
+ 509:	53                   	push   %ebx
+ 50a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4dd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4e0:	0f b6 1e             	movzbl (%esi),%ebx
- 4e3:	84 db                	test   %bl,%bl
- 4e5:	0f 84 b4 00 00 00    	je     59f <printf+0xcf>
+ 50d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 510:	0f b6 1e             	movzbl (%esi),%ebx
+ 513:	84 db                	test   %bl,%bl
+ 515:	0f 84 b4 00 00 00    	je     5cf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 4eb:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ee:	83 c6 01             	add    $0x1,%esi
+ 51b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 51e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 4f1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 521:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4f4:	31 d2                	xor    %edx,%edx
+ 524:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f9:	eb 33                	jmp    52e <printf+0x5e>
- 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4ff:	90                   	nop
- 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 526:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 529:	eb 33                	jmp    55e <printf+0x5e>
+ 52b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+ 530:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 503:	ba 25 00 00 00       	mov    $0x25,%edx
+ 533:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 508:	83 f8 25             	cmp    $0x25,%eax
- 50b:	74 17                	je     524 <printf+0x54>
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	74 17                	je     554 <printf+0x54>
   write(fd, &c, 1);
- 50d:	83 ec 04             	sub    $0x4,%esp
- 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 513:	6a 01                	push   $0x1
- 515:	57                   	push   %edi
- 516:	ff 75 08             	pushl  0x8(%ebp)
- 519:	e8 75 fe ff ff       	call   393 <write>
- 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 53d:	83 ec 04             	sub    $0x4,%esp
+ 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 543:	6a 01                	push   $0x1
+ 545:	57                   	push   %edi
+ 546:	ff 75 08             	pushl  0x8(%ebp)
+ 549:	e8 45 fe ff ff       	call   393 <write>
+ 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 521:	83 c4 10             	add    $0x10,%esp
+ 551:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 524:	0f b6 1e             	movzbl (%esi),%ebx
- 527:	83 c6 01             	add    $0x1,%esi
- 52a:	84 db                	test   %bl,%bl
- 52c:	74 71                	je     59f <printf+0xcf>
+ 554:	0f b6 1e             	movzbl (%esi),%ebx
+ 557:	83 c6 01             	add    $0x1,%esi
+ 55a:	84 db                	test   %bl,%bl
+ 55c:	74 71                	je     5cf <printf+0xcf>
     c = fmt[i] & 0xff;
- 52e:	0f be cb             	movsbl %bl,%ecx
- 531:	0f b6 c3             	movzbl %bl,%eax
+ 55e:	0f be cb             	movsbl %bl,%ecx
+ 561:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 534:	85 d2                	test   %edx,%edx
- 536:	74 c8                	je     500 <printf+0x30>
+ 564:	85 d2                	test   %edx,%edx
+ 566:	74 c8                	je     530 <printf+0x30>
       }
     } else if(state == '%'){
- 538:	83 fa 25             	cmp    $0x25,%edx
- 53b:	75 e7                	jne    524 <printf+0x54>
+ 568:	83 fa 25             	cmp    $0x25,%edx
+ 56b:	75 e7                	jne    554 <printf+0x54>
       if(c == 'd'){
- 53d:	83 f8 64             	cmp    $0x64,%eax
- 540:	0f 84 9a 00 00 00    	je     5e0 <printf+0x110>
+ 56d:	83 f8 64             	cmp    $0x64,%eax
+ 570:	0f 84 9a 00 00 00    	je     610 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 546:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 54c:	83 f9 70             	cmp    $0x70,%ecx
- 54f:	74 5f                	je     5b0 <printf+0xe0>
+ 576:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 57c:	83 f9 70             	cmp    $0x70,%ecx
+ 57f:	74 5f                	je     5e0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 551:	83 f8 73             	cmp    $0x73,%eax
- 554:	0f 84 d6 00 00 00    	je     630 <printf+0x160>
+ 581:	83 f8 73             	cmp    $0x73,%eax
+ 584:	0f 84 d6 00 00 00    	je     660 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 55a:	83 f8 63             	cmp    $0x63,%eax
- 55d:	0f 84 8d 00 00 00    	je     5f0 <printf+0x120>
+ 58a:	83 f8 63             	cmp    $0x63,%eax
+ 58d:	0f 84 8d 00 00 00    	je     620 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 563:	83 f8 25             	cmp    $0x25,%eax
- 566:	0f 84 b4 00 00 00    	je     620 <printf+0x150>
+ 593:	83 f8 25             	cmp    $0x25,%eax
+ 596:	0f 84 b4 00 00 00    	je     650 <printf+0x150>
   write(fd, &c, 1);
- 56c:	83 ec 04             	sub    $0x4,%esp
- 56f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 573:	6a 01                	push   $0x1
- 575:	57                   	push   %edi
- 576:	ff 75 08             	pushl  0x8(%ebp)
- 579:	e8 15 fe ff ff       	call   393 <write>
+ 59c:	83 ec 04             	sub    $0x4,%esp
+ 59f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5a3:	6a 01                	push   $0x1
+ 5a5:	57                   	push   %edi
+ 5a6:	ff 75 08             	pushl  0x8(%ebp)
+ 5a9:	e8 e5 fd ff ff       	call   393 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 57e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 581:	83 c4 0c             	add    $0xc,%esp
- 584:	6a 01                	push   $0x1
- 586:	83 c6 01             	add    $0x1,%esi
- 589:	57                   	push   %edi
- 58a:	ff 75 08             	pushl  0x8(%ebp)
- 58d:	e8 01 fe ff ff       	call   393 <write>
+ 5b1:	83 c4 0c             	add    $0xc,%esp
+ 5b4:	6a 01                	push   $0x1
+ 5b6:	83 c6 01             	add    $0x1,%esi
+ 5b9:	57                   	push   %edi
+ 5ba:	ff 75 08             	pushl  0x8(%ebp)
+ 5bd:	e8 d1 fd ff ff       	call   393 <write>
   for(i = 0; fmt[i]; i++){
- 592:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 596:	83 c4 10             	add    $0x10,%esp
+ 5c6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 599:	31 d2                	xor    %edx,%edx
+ 5c9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 59b:	84 db                	test   %bl,%bl
- 59d:	75 8f                	jne    52e <printf+0x5e>
+ 5cb:	84 db                	test   %bl,%bl
+ 5cd:	75 8f                	jne    55e <printf+0x5e>
     }
   }
 }
- 59f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5a2:	5b                   	pop    %ebx
- 5a3:	5e                   	pop    %esi
- 5a4:	5f                   	pop    %edi
- 5a5:	5d                   	pop    %ebp
- 5a6:	c3                   	ret    
- 5a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ae:	66 90                	xchg   %ax,%ax
+ 5cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5d2:	5b                   	pop    %ebx
+ 5d3:	5e                   	pop    %esi
+ 5d4:	5f                   	pop    %edi
+ 5d5:	5d                   	pop    %ebp
+ 5d6:	c3                   	ret    
+ 5d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5b8:	6a 00                	push   $0x0
- 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c0:	8b 13                	mov    (%ebx),%edx
- 5c2:	e8 59 fe ff ff       	call   420 <printint>
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5e8:	6a 00                	push   $0x0
+ 5ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5f0:	8b 13                	mov    (%ebx),%edx
+ 5f2:	e8 59 fe ff ff       	call   450 <printint>
         ap++;
- 5c7:	89 d8                	mov    %ebx,%eax
- 5c9:	83 c4 10             	add    $0x10,%esp
+ 5f7:	89 d8                	mov    %ebx,%eax
+ 5f9:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5cc:	31 d2                	xor    %edx,%edx
+ 5fc:	31 d2                	xor    %edx,%edx
         ap++;
- 5ce:	83 c0 04             	add    $0x4,%eax
- 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
- 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fe:	83 c0 04             	add    $0x4,%eax
+ 601:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 604:	e9 4b ff ff ff       	jmp    554 <printf+0x54>
+ 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5e8:	6a 01                	push   $0x1
- 5ea:	eb ce                	jmp    5ba <printf+0xea>
- 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 618:	6a 01                	push   $0x1
+ 61a:	eb ce                	jmp    5ea <printf+0xea>
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 5f3:	83 ec 04             	sub    $0x4,%esp
+ 623:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5f6:	8b 03                	mov    (%ebx),%eax
+ 626:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 5f8:	6a 01                	push   $0x1
+ 628:	6a 01                	push   $0x1
         ap++;
- 5fa:	83 c3 04             	add    $0x4,%ebx
+ 62a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 5fd:	57                   	push   %edi
- 5fe:	ff 75 08             	pushl  0x8(%ebp)
+ 62d:	57                   	push   %edi
+ 62e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 601:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 631:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 604:	e8 8a fd ff ff       	call   393 <write>
+ 634:	e8 5a fd ff ff       	call   393 <write>
         ap++;
- 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 60c:	83 c4 10             	add    $0x10,%esp
+ 639:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 63c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 60f:	31 d2                	xor    %edx,%edx
- 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
- 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 61d:	8d 76 00             	lea    0x0(%esi),%esi
+ 63f:	31 d2                	xor    %edx,%edx
+ 641:	e9 0e ff ff ff       	jmp    554 <printf+0x54>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 650:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 623:	83 ec 04             	sub    $0x4,%esp
- 626:	e9 59 ff ff ff       	jmp    584 <printf+0xb4>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
+ 653:	83 ec 04             	sub    $0x4,%esp
+ 656:	e9 59 ff ff ff       	jmp    5b4 <printf+0xb4>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
         s = (char*)*ap;
- 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 633:	8b 18                	mov    (%eax),%ebx
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 663:	8b 18                	mov    (%eax),%ebx
         ap++;
- 635:	83 c0 04             	add    $0x4,%eax
- 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 665:	83 c0 04             	add    $0x4,%eax
+ 668:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 63b:	85 db                	test   %ebx,%ebx
- 63d:	74 17                	je     656 <printf+0x186>
+ 66b:	85 db                	test   %ebx,%ebx
+ 66d:	74 17                	je     686 <printf+0x186>
         while(*s != 0){
- 63f:	0f b6 03             	movzbl (%ebx),%eax
+ 66f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 642:	31 d2                	xor    %edx,%edx
+ 672:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 644:	84 c0                	test   %al,%al
- 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
- 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 64f:	89 de                	mov    %ebx,%esi
- 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 654:	eb 1a                	jmp    670 <printf+0x1a0>
+ 674:	84 c0                	test   %al,%al
+ 676:	0f 84 d8 fe ff ff    	je     554 <printf+0x54>
+ 67c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67f:	89 de                	mov    %ebx,%esi
+ 681:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 684:	eb 1a                	jmp    6a0 <printf+0x1a0>
           s = "(null)";
- 656:	bb 70 08 00 00       	mov    $0x870,%ebx
+ 686:	bb a0 08 00 00       	mov    $0x8a0,%ebx
         while(*s != 0){
- 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 65e:	b8 28 00 00 00       	mov    $0x28,%eax
- 663:	89 de                	mov    %ebx,%esi
- 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 693:	89 de                	mov    %ebx,%esi
+ 695:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 698:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
   write(fd, &c, 1);
- 670:	83 ec 04             	sub    $0x4,%esp
+ 6a0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 673:	83 c6 01             	add    $0x1,%esi
- 676:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6a3:	83 c6 01             	add    $0x1,%esi
+ 6a6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 679:	6a 01                	push   $0x1
- 67b:	57                   	push   %edi
- 67c:	53                   	push   %ebx
- 67d:	e8 11 fd ff ff       	call   393 <write>
+ 6a9:	6a 01                	push   $0x1
+ 6ab:	57                   	push   %edi
+ 6ac:	53                   	push   %ebx
+ 6ad:	e8 e1 fc ff ff       	call   393 <write>
         while(*s != 0){
- 682:	0f b6 06             	movzbl (%esi),%eax
- 685:	83 c4 10             	add    $0x10,%esp
- 688:	84 c0                	test   %al,%al
- 68a:	75 e4                	jne    670 <printf+0x1a0>
- 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 6b2:	0f b6 06             	movzbl (%esi),%eax
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	84 c0                	test   %al,%al
+ 6ba:	75 e4                	jne    6a0 <printf+0x1a0>
+ 6bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
- 696:	66 90                	xchg   %ax,%ax
- 698:	66 90                	xchg   %ax,%ax
- 69a:	66 90                	xchg   %ax,%ax
- 69c:	66 90                	xchg   %ax,%ax
- 69e:	66 90                	xchg   %ax,%ax
+ 6bf:	31 d2                	xor    %edx,%edx
+ 6c1:	e9 8e fe ff ff       	jmp    554 <printf+0x54>
+ 6c6:	66 90                	xchg   %ax,%ax
+ 6c8:	66 90                	xchg   %ax,%ax
+ 6ca:	66 90                	xchg   %ax,%ax
+ 6cc:	66 90                	xchg   %ax,%ax
+ 6ce:	66 90                	xchg   %ax,%ax
 
-000006a0 <free>:
+000006d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a5:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 6d5:	a1 a0 0b 00 00       	mov    0xba0,%eax
 {
- 6aa:	89 e5                	mov    %esp,%ebp
- 6ac:	57                   	push   %edi
- 6ad:	56                   	push   %esi
- 6ae:	53                   	push   %ebx
- 6af:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6b2:	8b 10                	mov    (%eax),%edx
+ 6da:	89 e5                	mov    %esp,%ebp
+ 6dc:	57                   	push   %edi
+ 6dd:	56                   	push   %esi
+ 6de:	53                   	push   %ebx
+ 6df:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6e2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 6b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b7:	39 c8                	cmp    %ecx,%eax
- 6b9:	73 15                	jae    6d0 <free+0x30>
- 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6bf:	90                   	nop
- 6c0:	39 d1                	cmp    %edx,%ecx
- 6c2:	72 14                	jb     6d8 <free+0x38>
+ 6e7:	39 c8                	cmp    %ecx,%eax
+ 6e9:	73 15                	jae    700 <free+0x30>
+ 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
+ 6f0:	39 d1                	cmp    %edx,%ecx
+ 6f2:	72 14                	jb     708 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c4:	39 d0                	cmp    %edx,%eax
- 6c6:	73 10                	jae    6d8 <free+0x38>
+ 6f4:	39 d0                	cmp    %edx,%eax
+ 6f6:	73 10                	jae    708 <free+0x38>
 {
- 6c8:	89 d0                	mov    %edx,%eax
+ 6f8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ca:	8b 10                	mov    (%eax),%edx
- 6cc:	39 c8                	cmp    %ecx,%eax
- 6ce:	72 f0                	jb     6c0 <free+0x20>
+ 6fa:	8b 10                	mov    (%eax),%edx
+ 6fc:	39 c8                	cmp    %ecx,%eax
+ 6fe:	72 f0                	jb     6f0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d0:	39 d0                	cmp    %edx,%eax
- 6d2:	72 f4                	jb     6c8 <free+0x28>
- 6d4:	39 d1                	cmp    %edx,%ecx
- 6d6:	73 f0                	jae    6c8 <free+0x28>
+ 700:	39 d0                	cmp    %edx,%eax
+ 702:	72 f4                	jb     6f8 <free+0x28>
+ 704:	39 d1                	cmp    %edx,%ecx
+ 706:	73 f0                	jae    6f8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6de:	39 fa                	cmp    %edi,%edx
- 6e0:	74 1e                	je     700 <free+0x60>
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 fa                	cmp    %edi,%edx
+ 710:	74 1e                	je     730 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 712:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6e5:	8b 50 04             	mov    0x4(%eax),%edx
- 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6eb:	39 f1                	cmp    %esi,%ecx
- 6ed:	74 28                	je     717 <free+0x77>
+ 715:	8b 50 04             	mov    0x4(%eax),%edx
+ 718:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 71b:	39 f1                	cmp    %esi,%ecx
+ 71d:	74 28                	je     747 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6ef:	89 08                	mov    %ecx,(%eax)
+ 71f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 6f1:	5b                   	pop    %ebx
+ 721:	5b                   	pop    %ebx
   freep = p;
- 6f2:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 722:	a3 a0 0b 00 00       	mov    %eax,0xba0
 }
- 6f7:	5e                   	pop    %esi
- 6f8:	5f                   	pop    %edi
- 6f9:	5d                   	pop    %ebp
- 6fa:	c3                   	ret    
- 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 727:	5e                   	pop    %esi
+ 728:	5f                   	pop    %edi
+ 729:	5d                   	pop    %ebp
+ 72a:	c3                   	ret    
+ 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 700:	03 72 04             	add    0x4(%edx),%esi
- 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 730:	03 72 04             	add    0x4(%edx),%esi
+ 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 706:	8b 10                	mov    (%eax),%edx
- 708:	8b 12                	mov    (%edx),%edx
- 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 736:	8b 10                	mov    (%eax),%edx
+ 738:	8b 12                	mov    (%edx),%edx
+ 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 70d:	8b 50 04             	mov    0x4(%eax),%edx
- 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 713:	39 f1                	cmp    %esi,%ecx
- 715:	75 d8                	jne    6ef <free+0x4f>
+ 73d:	8b 50 04             	mov    0x4(%eax),%edx
+ 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 743:	39 f1                	cmp    %esi,%ecx
+ 745:	75 d8                	jne    71f <free+0x4f>
     p->s.size += bp->s.size;
- 717:	03 53 fc             	add    -0x4(%ebx),%edx
+ 747:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 74a:	a3 a0 0b 00 00       	mov    %eax,0xba0
     p->s.size += bp->s.size;
- 71f:	89 50 04             	mov    %edx,0x4(%eax)
+ 74f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 725:	89 10                	mov    %edx,(%eax)
+ 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 755:	89 10                	mov    %edx,(%eax)
 }
- 727:	5b                   	pop    %ebx
- 728:	5e                   	pop    %esi
- 729:	5f                   	pop    %edi
- 72a:	5d                   	pop    %ebp
- 72b:	c3                   	ret    
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 757:	5b                   	pop    %ebx
+ 758:	5e                   	pop    %esi
+ 759:	5f                   	pop    %edi
+ 75a:	5d                   	pop    %ebp
+ 75b:	c3                   	ret    
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000730 <malloc>:
+00000760 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 730:	f3 0f 1e fb          	endbr32 
- 734:	55                   	push   %ebp
- 735:	89 e5                	mov    %esp,%ebp
- 737:	57                   	push   %edi
- 738:	56                   	push   %esi
- 739:	53                   	push   %ebx
- 73a:	83 ec 1c             	sub    $0x1c,%esp
+ 760:	f3 0f 1e fb          	endbr32 
+ 764:	55                   	push   %ebp
+ 765:	89 e5                	mov    %esp,%ebp
+ 767:	57                   	push   %edi
+ 768:	56                   	push   %esi
+ 769:	53                   	push   %ebx
+ 76a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 73d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 76d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 740:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+ 770:	8b 3d a0 0b 00 00    	mov    0xba0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 746:	8d 70 07             	lea    0x7(%eax),%esi
- 749:	c1 ee 03             	shr    $0x3,%esi
- 74c:	83 c6 01             	add    $0x1,%esi
+ 776:	8d 70 07             	lea    0x7(%eax),%esi
+ 779:	c1 ee 03             	shr    $0x3,%esi
+ 77c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 74f:	85 ff                	test   %edi,%edi
- 751:	0f 84 a9 00 00 00    	je     800 <malloc+0xd0>
+ 77f:	85 ff                	test   %edi,%edi
+ 781:	0f 84 a9 00 00 00    	je     830 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 757:	8b 07                	mov    (%edi),%eax
+ 787:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 759:	8b 48 04             	mov    0x4(%eax),%ecx
- 75c:	39 f1                	cmp    %esi,%ecx
- 75e:	73 6d                	jae    7cd <malloc+0x9d>
- 760:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 766:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 76b:	0f 43 de             	cmovae %esi,%ebx
+ 789:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78c:	39 f1                	cmp    %esi,%ecx
+ 78e:	73 6d                	jae    7fd <malloc+0x9d>
+ 790:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 796:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 79b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 76e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 775:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 778:	eb 17                	jmp    791 <malloc+0x61>
- 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 79e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7a8:	eb 17                	jmp    7c1 <malloc+0x61>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 780:	8b 10                	mov    (%eax),%edx
+ 7b0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 782:	8b 4a 04             	mov    0x4(%edx),%ecx
- 785:	39 f1                	cmp    %esi,%ecx
- 787:	73 4f                	jae    7d8 <malloc+0xa8>
- 789:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
- 78f:	89 d0                	mov    %edx,%eax
+ 7b2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7b5:	39 f1                	cmp    %esi,%ecx
+ 7b7:	73 4f                	jae    808 <malloc+0xa8>
+ 7b9:	8b 3d a0 0b 00 00    	mov    0xba0,%edi
+ 7bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 791:	39 c7                	cmp    %eax,%edi
- 793:	75 eb                	jne    780 <malloc+0x50>
+ 7c1:	39 c7                	cmp    %eax,%edi
+ 7c3:	75 eb                	jne    7b0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 795:	83 ec 0c             	sub    $0xc,%esp
- 798:	ff 75 e4             	pushl  -0x1c(%ebp)
- 79b:	e8 5b fc ff ff       	call   3fb <sbrk>
+ 7c5:	83 ec 0c             	sub    $0xc,%esp
+ 7c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7cb:	e8 2b fc ff ff       	call   3fb <sbrk>
   if(p == (char*)-1)
- 7a0:	83 c4 10             	add    $0x10,%esp
- 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7a6:	74 1b                	je     7c3 <malloc+0x93>
+ 7d0:	83 c4 10             	add    $0x10,%esp
+ 7d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7d6:	74 1b                	je     7f3 <malloc+0x93>
   hp->s.size = nu;
- 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7d8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7ab:	83 ec 0c             	sub    $0xc,%esp
- 7ae:	83 c0 08             	add    $0x8,%eax
- 7b1:	50                   	push   %eax
- 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
+ 7db:	83 ec 0c             	sub    $0xc,%esp
+ 7de:	83 c0 08             	add    $0x8,%eax
+ 7e1:	50                   	push   %eax
+ 7e2:	e8 e9 fe ff ff       	call   6d0 <free>
   return freep;
- 7b7:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 7e7:	a1 a0 0b 00 00       	mov    0xba0,%eax
       if((p = morecore(nunits)) == 0)
- 7bc:	83 c4 10             	add    $0x10,%esp
- 7bf:	85 c0                	test   %eax,%eax
- 7c1:	75 bd                	jne    780 <malloc+0x50>
+ 7ec:	83 c4 10             	add    $0x10,%esp
+ 7ef:	85 c0                	test   %eax,%eax
+ 7f1:	75 bd                	jne    7b0 <malloc+0x50>
         return 0;
   }
 }
- 7c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7c6:	31 c0                	xor    %eax,%eax
+ 7f6:	31 c0                	xor    %eax,%eax
 }
- 7c8:	5b                   	pop    %ebx
- 7c9:	5e                   	pop    %esi
- 7ca:	5f                   	pop    %edi
- 7cb:	5d                   	pop    %ebp
- 7cc:	c3                   	ret    
+ 7f8:	5b                   	pop    %ebx
+ 7f9:	5e                   	pop    %esi
+ 7fa:	5f                   	pop    %edi
+ 7fb:	5d                   	pop    %ebp
+ 7fc:	c3                   	ret    
     if(p->s.size >= nunits){
- 7cd:	89 c2                	mov    %eax,%edx
- 7cf:	89 f8                	mov    %edi,%eax
- 7d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fd:	89 c2                	mov    %eax,%edx
+ 7ff:	89 f8                	mov    %edi,%eax
+ 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7d8:	39 ce                	cmp    %ecx,%esi
- 7da:	74 54                	je     830 <malloc+0x100>
+ 808:	39 ce                	cmp    %ecx,%esi
+ 80a:	74 54                	je     860 <malloc+0x100>
         p->s.size -= nunits;
- 7dc:	29 f1                	sub    %esi,%ecx
- 7de:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 80c:	29 f1                	sub    %esi,%ecx
+ 80e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 7e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 811:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 7e4:	89 72 04             	mov    %esi,0x4(%edx)
+ 814:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7e7:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 817:	a3 a0 0b 00 00       	mov    %eax,0xba0
 }
- 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 81c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7ef:	8d 42 08             	lea    0x8(%edx),%eax
+ 81f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 7f2:	5b                   	pop    %ebx
- 7f3:	5e                   	pop    %esi
- 7f4:	5f                   	pop    %edi
- 7f5:	5d                   	pop    %ebp
- 7f6:	c3                   	ret    
- 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7fe:	66 90                	xchg   %ax,%ax
+ 822:	5b                   	pop    %ebx
+ 823:	5e                   	pop    %esi
+ 824:	5f                   	pop    %edi
+ 825:	5d                   	pop    %ebp
+ 826:	c3                   	ret    
+ 827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 800:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
- 807:	0b 00 00 
+ 830:	c7 05 a0 0b 00 00 a4 	movl   $0xba4,0xba0
+ 837:	0b 00 00 
     base.s.size = 0;
- 80a:	bf 64 0b 00 00       	mov    $0xb64,%edi
+ 83a:	bf a4 0b 00 00       	mov    $0xba4,%edi
     base.s.ptr = freep = prevp = &base;
- 80f:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
- 816:	0b 00 00 
+ 83f:	c7 05 a4 0b 00 00 a4 	movl   $0xba4,0xba4
+ 846:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 819:	89 f8                	mov    %edi,%eax
+ 849:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 81b:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
- 822:	00 00 00 
+ 84b:	c7 05 a8 0b 00 00 00 	movl   $0x0,0xba8
+ 852:	00 00 00 
     if(p->s.size >= nunits){
- 825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
- 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 855:	e9 36 ff ff ff       	jmp    790 <malloc+0x30>
+ 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 830:	8b 0a                	mov    (%edx),%ecx
- 832:	89 08                	mov    %ecx,(%eax)
- 834:	eb b1                	jmp    7e7 <malloc+0xb7>
+ 860:	8b 0a                	mov    (%edx),%ecx
+ 862:	89 08                	mov    %ecx,(%eax)
+ 864:	eb b1                	jmp    817 <malloc+0xb7>
Binary files xv6-public/cat.o and xv6-public-hybrid/cat.o differ
diff -u xv6-public/cat.sym xv6-public-hybrid/cat.sym
--- xv6-public/cat.sym	2022-10-07 20:01:00.749970878 +0530
+++ xv6-public-hybrid/cat.sym	2022-10-07 18:39:46.860545000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000838 .rodata
-0000088c .eh_frame
-00000b60 .bss
+00000868 .rodata
+000008bc .eh_frame
+00000ba0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,20 +13,22 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000420 printint
-00000878 digits.1085
+00000450 printint
+000008a8 digits.1100
 00000000 umalloc.c
-00000b60 freep
-00000b64 base
+00000ba0 freep
+00000ba4 base
 00000110 strcpy
-000004d0 printf
+00000500 printf
 00000340 memmove
 000003bb mknod
+00000413 wolfie
 00000230 gets
 000003f3 getpid
 00000090 cat
-00000730 malloc
+00000760 malloc
 00000403 sleep
+00000433 get_burst_time
 00000383 pipe
 00000393 write
 000003cb fstat
@@ -39,15 +41,19 @@
 0000036b fork
 000003fb sbrk
 0000040b uptime
-00000b5c __bss_start
+00000b8c __bss_start
 000001d0 memset
 00000000 main
+0000043b set_burst_time
 00000140 strcmp
 000003eb dup
-00000b80 buf
+00000423 getMaxPid
+00000bc0 buf
+0000041b getNumProc
+0000042b getProcInfo
 000002b0 stat
-00000b5c _edata
-00000d80 _end
+00000b8c _edata
+00000dc0 _end
 000003d3 link
 00000373 exit
 00000300 atoi
@@ -56,4 +62,4 @@
 000001f0 strchr
 000003db mkdir
 0000039b close
-000006a0 free
+000006d0 free
Binary files xv6-public/console.o and xv6-public-hybrid/console.o differ
diff -u xv6-public/defs.h xv6-public-hybrid/defs.h
--- xv6-public/defs.h	2022-10-07 20:00:17.163374639 +0530
+++ xv6-public-hybrid/defs.h	2022-10-07 08:31:25.082710000 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,12 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int		 wolfie(void*, uint);
+int 		 getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo();
+int             get_burst_time(void);
+int             set_burst_time(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
Binary files xv6-public/_echo and xv6-public-hybrid/_echo differ
diff -u xv6-public/echo.asm xv6-public-hybrid/echo.asm
--- xv6-public/echo.asm	2022-10-07 20:01:00.809978998 +0530
+++ xv6-public-hybrid/echo.asm	2022-10-07 18:39:46.904565000 +0530
@@ -36,23 +36,23 @@
   2d:	39 f3                	cmp    %esi,%ebx
   2f:	74 26                	je     57 <main+0x57>
   31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  38:	68 a8 07 00 00       	push   $0x7a8
+  38:	68 d8 07 00 00       	push   $0x7d8
   3d:	83 c3 04             	add    $0x4,%ebx
   40:	50                   	push   %eax
-  41:	68 aa 07 00 00       	push   $0x7aa
+  41:	68 da 07 00 00       	push   $0x7da
   46:	6a 01                	push   $0x1
-  48:	e8 f3 03 00 00       	call   440 <printf>
+  48:	e8 23 04 00 00       	call   470 <printf>
   for(i = 1; i < argc; i++)
   4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
   50:	83 c4 10             	add    $0x10,%esp
   53:	39 f3                	cmp    %esi,%ebx
   55:	75 e1                	jne    38 <main+0x38>
-  57:	68 af 07 00 00       	push   $0x7af
+  57:	68 df 07 00 00       	push   $0x7df
   5c:	50                   	push   %eax
-  5d:	68 aa 07 00 00       	push   $0x7aa
+  5d:	68 da 07 00 00       	push   $0x7da
   62:	6a 01                	push   $0x1
-  64:	e8 d7 03 00 00       	call   440 <printf>
+  64:	e8 07 04 00 00       	call   470 <printf>
   69:	83 c4 10             	add    $0x10,%esp
   exit();
   6c:	e8 72 02 00 00       	call   2e3 <exit>
@@ -591,609 +591,645 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <wolfie>:
+SYSCALL(wolfie)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getNumProc>:
+SYSCALL(getNumProc)
+ 38b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 393:	b8 17 00 00 00       	mov    $0x17,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 39b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3ab:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+ 3b3:	66 90                	xchg   %ax,%ax
+ 3b5:	66 90                	xchg   %ax,%ax
+ 3b7:	66 90                	xchg   %ax,%ax
+ 3b9:	66 90                	xchg   %ax,%ax
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3cc:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3e6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 e8 07 00 00 	movzbl 0x7e8(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 41f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
 
-00000440 <printf>:
+00000470 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 494:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4c1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 536:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 539:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 56c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 596:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 598:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 59a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5e2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb b1 07 00 00       	mov    $0x7b1,%ebx
+ 5f6:	bb e1 07 00 00       	mov    $0x7e1,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 610:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000640 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 645:	a1 98 0a 00 00       	mov    0xa98,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 668:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 68f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 691:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 692:	a3 98 0a 00 00       	mov    %eax,0xa98
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 6ba:	a3 98 0a 00 00       	mov    %eax,0xa98
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006d0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+ 6e0:	8b 3d 98 0a 00 00    	mov    0xa98,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6f7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 720:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d 98 0a 00 00    	mov    0xa98,%edi
+ 72f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
   return freep;
- 727:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 757:	a1 98 0a 00 00       	mov    0xa98,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 766:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 787:	a3 98 0a 00 00       	mov    %eax,0xa98
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 68 0a 00 00 6c 	movl   $0xa6c,0xa68
- 777:	0a 00 00 
+ 7a0:	c7 05 98 0a 00 00 9c 	movl   $0xa9c,0xa98
+ 7a7:	0a 00 00 
     base.s.size = 0;
- 77a:	bf 6c 0a 00 00       	mov    $0xa6c,%edi
+ 7aa:	bf 9c 0a 00 00       	mov    $0xa9c,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 6c 0a 00 00 6c 	movl   $0xa6c,0xa6c
- 786:	0a 00 00 
+ 7af:	c7 05 9c 0a 00 00 9c 	movl   $0xa9c,0xa9c
+ 7b6:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 7b9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 70 0a 00 00 00 	movl   $0x0,0xa70
- 792:	00 00 00 
+ 7bb:	c7 05 a0 0a 00 00 00 	movl   $0x0,0xaa0
+ 7c2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
Binary files xv6-public/echo.o and xv6-public-hybrid/echo.o differ
diff -u xv6-public/echo.sym xv6-public-hybrid/echo.sym
--- xv6-public/echo.sym	2022-10-07 20:01:00.821980622 +0530
+++ xv6-public-hybrid/echo.sym	2022-10-07 18:39:46.908567000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007cc .eh_frame
-00000a68 .bss
+000007d8 .rodata
+000007fc .eh_frame
+00000a98 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007b8 digits.1085
+000003c0 printint
+000007e8 digits.1100
 00000000 umalloc.c
-00000a68 freep
-00000a6c base
+00000a98 freep
+00000a9c base
 00000080 strcpy
-00000440 printf
+00000470 printf
 000002b0 memmove
 0000032b mknod
+00000383 wolfie
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006d0 malloc
 00000373 sleep
+000003a3 get_burst_time
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,14 +40,18 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a68 __bss_start
+00000a98 __bss_start
 00000140 memset
 00000000 main
+000003ab set_burst_time
 000000b0 strcmp
 0000035b dup
+00000393 getMaxPid
+0000038b getNumProc
+0000039b getProcInfo
 00000220 stat
-00000a68 _edata
-00000a74 _end
+00000a98 _edata
+00000aa4 _end
 00000343 link
 000002e3 exit
 00000270 atoi
@@ -54,4 +60,4 @@
 00000160 strchr
 0000034b mkdir
 0000030b close
-00000610 free
+00000640 free
Binary files xv6-public/entry.o and xv6-public-hybrid/entry.o differ
Binary files xv6-public/entryother.o and xv6-public-hybrid/entryother.o differ
Binary files xv6-public/exec.o and xv6-public-hybrid/exec.o differ
Only in xv6-public-hybrid: filename.patch
Binary files xv6-public/file.o and xv6-public-hybrid/file.o differ
Binary files xv6-public/_forktest and xv6-public-hybrid/_forktest differ
diff -u xv6-public/forktest.asm xv6-public-hybrid/forktest.asm
--- xv6-public/forktest.asm	2022-10-07 20:01:00.893990366 +0530
+++ xv6-public-hybrid/forktest.asm	2022-10-07 18:39:46.964593000 +0530
@@ -60,11 +60,11 @@
 {
   5a:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  5d:	68 54 04 00 00       	push   $0x454
+  5d:	68 84 04 00 00       	push   $0x484
   62:	e8 69 01 00 00       	call   1d0 <strlen>
   67:	83 c4 0c             	add    $0xc,%esp
   6a:	50                   	push   %eax
-  6b:	68 54 04 00 00       	push   $0x454
+  6b:	68 84 04 00 00       	push   $0x484
   70:	6a 01                	push   $0x1
   72:	e8 5c 03 00 00       	call   3d3 <write>
   77:	83 c4 10             	add    $0x10,%esp
@@ -98,11 +98,11 @@
   b6:	75 49                	jne    101 <forktest+0xb1>
   write(fd, s, strlen(s));
   b8:	83 ec 0c             	sub    $0xc,%esp
-  bb:	68 86 04 00 00       	push   $0x486
+  bb:	68 b6 04 00 00       	push   $0x4b6
   c0:	e8 0b 01 00 00       	call   1d0 <strlen>
   c5:	83 c4 0c             	add    $0xc,%esp
   c8:	50                   	push   %eax
-  c9:	68 86 04 00 00       	push   $0x486
+  c9:	68 b6 04 00 00       	push   $0x4b6
   ce:	6a 01                	push   $0x1
   d0:	e8 fe 02 00 00       	call   3d3 <write>
 }
@@ -113,33 +113,33 @@
   da:	e8 d4 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
   df:	83 ec 0c             	sub    $0xc,%esp
-  e2:	68 5f 04 00 00       	push   $0x45f
+  e2:	68 8f 04 00 00       	push   $0x48f
   e7:	e8 e4 00 00 00       	call   1d0 <strlen>
   ec:	83 c4 0c             	add    $0xc,%esp
   ef:	50                   	push   %eax
-  f0:	68 5f 04 00 00       	push   $0x45f
+  f0:	68 8f 04 00 00       	push   $0x48f
   f5:	6a 01                	push   $0x1
   f7:	e8 d7 02 00 00       	call   3d3 <write>
       exit();
   fc:	e8 b2 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  101:	83 ec 0c             	sub    $0xc,%esp
- 104:	68 73 04 00 00       	push   $0x473
+ 104:	68 a3 04 00 00       	push   $0x4a3
  109:	e8 c2 00 00 00       	call   1d0 <strlen>
  10e:	83 c4 0c             	add    $0xc,%esp
  111:	50                   	push   %eax
- 112:	68 73 04 00 00       	push   $0x473
+ 112:	68 a3 04 00 00       	push   $0x4a3
  117:	6a 01                	push   $0x1
  119:	e8 b5 02 00 00       	call   3d3 <write>
     exit();
  11e:	e8 90 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  123:	83 ec 0c             	sub    $0xc,%esp
- 126:	68 94 04 00 00       	push   $0x494
+ 126:	68 c4 04 00 00       	push   $0x4c4
  12b:	e8 a0 00 00 00       	call   1d0 <strlen>
  130:	83 c4 0c             	add    $0xc,%esp
  133:	50                   	push   %eax
- 134:	68 94 04 00 00       	push   $0x494
+ 134:	68 c4 04 00 00       	push   $0x4c4
  139:	6a 01                	push   $0x1
  13b:	e8 93 02 00 00       	call   3d3 <write>
     exit();
@@ -677,3 +677,39 @@
  44b:	b8 0e 00 00 00       	mov    $0xe,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
+
+00000453 <wolfie>:
+SYSCALL(wolfie)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getNumProc>:
+SYSCALL(getNumProc)
+ 45b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 463:	b8 17 00 00 00       	mov    $0x17,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 46b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 473:	b8 19 00 00 00       	mov    $0x19,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 47b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
Binary files xv6-public/forktest.o and xv6-public-hybrid/forktest.o differ
Binary files xv6-public/fs.img and xv6-public-hybrid/fs.img differ
Binary files xv6-public/fs.o and xv6-public-hybrid/fs.o differ
Only in xv6-public-hybrid: _getSetBTime
Only in xv6-public-hybrid: getSetBTime.c
Common subdirectories: xv6-public/.git and xv6-public-hybrid/.git
Binary files xv6-public/_grep and xv6-public-hybrid/_grep differ
diff -u xv6-public/grep.asm xv6-public-hybrid/grep.asm
--- xv6-public/grep.asm	2022-10-07 20:01:01.026008214 +0530
+++ xv6-public-hybrid/grep.asm	2022-10-07 18:39:47.044630000 +0530
@@ -85,9 +85,9 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	50                   	push   %eax
   78:	ff 33                	pushl  (%ebx)
-  7a:	68 88 0a 00 00       	push   $0xa88
+  7a:	68 b8 0a 00 00       	push   $0xab8
   7f:	6a 01                	push   $0x1
-  81:	e8 7a 06 00 00       	call   700 <printf>
+  81:	e8 aa 06 00 00       	call   730 <printf>
       exit();
   86:	e8 18 05 00 00       	call   5a3 <exit>
   }
@@ -96,9 +96,9 @@
     printf(2, "usage: grep pattern [file ...]\n");
   90:	51                   	push   %ecx
   91:	51                   	push   %ecx
-  92:	68 68 0a 00 00       	push   $0xa68
+  92:	68 98 0a 00 00       	push   $0xa98
   97:	6a 02                	push   $0x2
-  99:	e8 62 06 00 00       	call   700 <printf>
+  99:	e8 92 06 00 00       	call   730 <printf>
     exit();
   9e:	e8 00 05 00 00       	call   5a3 <exit>
     grep(pattern, 0);
@@ -332,7 +332,7 @@
  258:	83 ec 04             	sub    $0x4,%esp
  25b:	29 c8                	sub    %ecx,%eax
  25d:	50                   	push   %eax
- 25e:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 25e:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
  264:	50                   	push   %eax
  265:	ff 75 0c             	pushl  0xc(%ebp)
  268:	e8 4e 03 00 00       	call   5bb <read>
@@ -343,9 +343,9 @@
  278:	01 45 e4             	add    %eax,-0x1c(%ebp)
  27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
     p = buf;
- 27e:	bb 80 0e 00 00       	mov    $0xe80,%ebx
+ 27e:	bb a0 0e 00 00       	mov    $0xea0,%ebx
     buf[m] = '\0';
- 283:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+ 283:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
     while((q = strchr(p, '\n')) != 0){
  28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  290:	83 ec 08             	sub    $0x8,%esp
@@ -390,7 +390,7 @@
  2dc:	89 d3                	mov    %edx,%ebx
  2de:	eb b0                	jmp    290 <grep+0x60>
     if(p == buf)
- 2e0:	81 fb 80 0e 00 00    	cmp    $0xe80,%ebx
+ 2e0:	81 fb a0 0e 00 00    	cmp    $0xea0,%ebx
  2e6:	74 38                	je     320 <grep+0xf0>
     if(m > 0){
  2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
@@ -401,12 +401,12 @@
       memmove(buf, p, m);
  2f5:	83 ec 04             	sub    $0x4,%esp
       m -= p - buf;
- 2f8:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2f8:	2d a0 0e 00 00       	sub    $0xea0,%eax
  2fd:	29 c1                	sub    %eax,%ecx
       memmove(buf, p, m);
  2ff:	51                   	push   %ecx
  300:	53                   	push   %ebx
- 301:	68 80 0e 00 00       	push   $0xe80
+ 301:	68 a0 0e 00 00       	push   $0xea0
       m -= p - buf;
  306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
       memmove(buf, p, m);
@@ -957,609 +957,645 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
- 643:	66 90                	xchg   %ax,%ax
- 645:	66 90                	xchg   %ax,%ax
- 647:	66 90                	xchg   %ax,%ax
- 649:	66 90                	xchg   %ax,%ax
- 64b:	66 90                	xchg   %ax,%ax
- 64d:	66 90                	xchg   %ax,%ax
- 64f:	90                   	nop
 
-00000650 <printint>:
+00000643 <wolfie>:
+SYSCALL(wolfie)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getNumProc>:
+SYSCALL(getNumProc)
+ 64b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 653:	b8 17 00 00 00       	mov    $0x17,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 65b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 663:	b8 19 00 00 00       	mov    $0x19,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 66b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+ 673:	66 90                	xchg   %ax,%ax
+ 675:	66 90                	xchg   %ax,%ax
+ 677:	66 90                	xchg   %ax,%ax
+ 679:	66 90                	xchg   %ax,%ax
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
- 659:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 3c             	sub    $0x3c,%esp
+ 689:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 65c:	89 d1                	mov    %edx,%ecx
+ 68c:	89 d1                	mov    %edx,%ecx
 {
- 65e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 661:	85 d2                	test   %edx,%edx
- 663:	0f 89 7f 00 00 00    	jns    6e8 <printint+0x98>
- 669:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 66d:	74 79                	je     6e8 <printint+0x98>
+ 691:	85 d2                	test   %edx,%edx
+ 693:	0f 89 7f 00 00 00    	jns    718 <printint+0x98>
+ 699:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 69d:	74 79                	je     718 <printint+0x98>
     neg = 1;
- 66f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 69f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 676:	f7 d9                	neg    %ecx
+ 6a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 678:	31 db                	xor    %ebx,%ebx
- 67a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 67d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6a8:	31 db                	xor    %ebx,%ebx
+ 6aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 c8                	mov    %ecx,%eax
- 682:	31 d2                	xor    %edx,%edx
- 684:	89 cf                	mov    %ecx,%edi
- 686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
- 690:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 693:	89 d8                	mov    %ebx,%eax
- 695:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 6b0:	89 c8                	mov    %ecx,%eax
+ 6b2:	31 d2                	xor    %edx,%edx
+ 6b4:	89 cf                	mov    %ecx,%edi
+ 6b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6b9:	0f b6 92 d8 0a 00 00 	movzbl 0xad8(%edx),%edx
+ 6c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6c3:	89 d8                	mov    %ebx,%eax
+ 6c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 698:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 69b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 69e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6a1:	76 dd                	jbe    680 <printint+0x30>
+ 6ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6d1:	76 dd                	jbe    6b0 <printint+0x30>
   if(neg)
- 6a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6a6:	85 c9                	test   %ecx,%ecx
- 6a8:	74 0c                	je     6b6 <printint+0x66>
+ 6d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6d6:	85 c9                	test   %ecx,%ecx
+ 6d8:	74 0c                	je     6e6 <printint+0x66>
     buf[i++] = '-';
- 6aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6af:	89 d8                	mov    %ebx,%eax
+ 6df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6bd:	eb 07                	jmp    6c6 <printint+0x76>
- 6bf:	90                   	nop
- 6c0:	0f b6 13             	movzbl (%ebx),%edx
- 6c3:	83 eb 01             	sub    $0x1,%ebx
+ 6e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ed:	eb 07                	jmp    6f6 <printint+0x76>
+ 6ef:	90                   	nop
+ 6f0:	0f b6 13             	movzbl (%ebx),%edx
+ 6f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6c6:	83 ec 04             	sub    $0x4,%esp
- 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6cc:	6a 01                	push   $0x1
- 6ce:	56                   	push   %esi
- 6cf:	57                   	push   %edi
- 6d0:	e8 ee fe ff ff       	call   5c3 <write>
+ 6f6:	83 ec 04             	sub    $0x4,%esp
+ 6f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6fc:	6a 01                	push   $0x1
+ 6fe:	56                   	push   %esi
+ 6ff:	57                   	push   %edi
+ 700:	e8 be fe ff ff       	call   5c3 <write>
   while(--i >= 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	39 de                	cmp    %ebx,%esi
- 6da:	75 e4                	jne    6c0 <printint+0x70>
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	39 de                	cmp    %ebx,%esi
+ 70a:	75 e4                	jne    6f0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6df:	5b                   	pop    %ebx
- 6e0:	5e                   	pop    %esi
- 6e1:	5f                   	pop    %edi
- 6e2:	5d                   	pop    %ebp
- 6e3:	c3                   	ret    
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6ef:	eb 87                	jmp    678 <printint+0x28>
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 718:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 71f:	eb 87                	jmp    6a8 <printint+0x28>
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
 
-00000700 <printf>:
+00000730 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 700:	f3 0f 1e fb          	endbr32 
- 704:	55                   	push   %ebp
- 705:	89 e5                	mov    %esp,%ebp
- 707:	57                   	push   %edi
- 708:	56                   	push   %esi
- 709:	53                   	push   %ebx
- 70a:	83 ec 2c             	sub    $0x2c,%esp
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 70d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 710:	0f b6 1e             	movzbl (%esi),%ebx
- 713:	84 db                	test   %bl,%bl
- 715:	0f 84 b4 00 00 00    	je     7cf <printf+0xcf>
+ 73d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 740:	0f b6 1e             	movzbl (%esi),%ebx
+ 743:	84 db                	test   %bl,%bl
+ 745:	0f 84 b4 00 00 00    	je     7ff <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 71b:	8d 45 10             	lea    0x10(%ebp),%eax
- 71e:	83 c6 01             	add    $0x1,%esi
+ 74b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 74e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 721:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 751:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 724:	31 d2                	xor    %edx,%edx
+ 754:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 726:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 729:	eb 33                	jmp    75e <printf+0x5e>
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
- 730:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 756:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 759:	eb 33                	jmp    78e <printf+0x5e>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 733:	ba 25 00 00 00       	mov    $0x25,%edx
+ 763:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 738:	83 f8 25             	cmp    $0x25,%eax
- 73b:	74 17                	je     754 <printf+0x54>
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	74 17                	je     784 <printf+0x54>
   write(fd, &c, 1);
- 73d:	83 ec 04             	sub    $0x4,%esp
- 740:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 743:	6a 01                	push   $0x1
- 745:	57                   	push   %edi
- 746:	ff 75 08             	pushl  0x8(%ebp)
- 749:	e8 75 fe ff ff       	call   5c3 <write>
- 74e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 76d:	83 ec 04             	sub    $0x4,%esp
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	6a 01                	push   $0x1
+ 775:	57                   	push   %edi
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 45 fe ff ff       	call   5c3 <write>
+ 77e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 751:	83 c4 10             	add    $0x10,%esp
+ 781:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 754:	0f b6 1e             	movzbl (%esi),%ebx
- 757:	83 c6 01             	add    $0x1,%esi
- 75a:	84 db                	test   %bl,%bl
- 75c:	74 71                	je     7cf <printf+0xcf>
+ 784:	0f b6 1e             	movzbl (%esi),%ebx
+ 787:	83 c6 01             	add    $0x1,%esi
+ 78a:	84 db                	test   %bl,%bl
+ 78c:	74 71                	je     7ff <printf+0xcf>
     c = fmt[i] & 0xff;
- 75e:	0f be cb             	movsbl %bl,%ecx
- 761:	0f b6 c3             	movzbl %bl,%eax
+ 78e:	0f be cb             	movsbl %bl,%ecx
+ 791:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 764:	85 d2                	test   %edx,%edx
- 766:	74 c8                	je     730 <printf+0x30>
+ 794:	85 d2                	test   %edx,%edx
+ 796:	74 c8                	je     760 <printf+0x30>
       }
     } else if(state == '%'){
- 768:	83 fa 25             	cmp    $0x25,%edx
- 76b:	75 e7                	jne    754 <printf+0x54>
+ 798:	83 fa 25             	cmp    $0x25,%edx
+ 79b:	75 e7                	jne    784 <printf+0x54>
       if(c == 'd'){
- 76d:	83 f8 64             	cmp    $0x64,%eax
- 770:	0f 84 9a 00 00 00    	je     810 <printf+0x110>
+ 79d:	83 f8 64             	cmp    $0x64,%eax
+ 7a0:	0f 84 9a 00 00 00    	je     840 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 776:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 77c:	83 f9 70             	cmp    $0x70,%ecx
- 77f:	74 5f                	je     7e0 <printf+0xe0>
+ 7a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7ac:	83 f9 70             	cmp    $0x70,%ecx
+ 7af:	74 5f                	je     810 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 781:	83 f8 73             	cmp    $0x73,%eax
- 784:	0f 84 d6 00 00 00    	je     860 <printf+0x160>
+ 7b1:	83 f8 73             	cmp    $0x73,%eax
+ 7b4:	0f 84 d6 00 00 00    	je     890 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 78a:	83 f8 63             	cmp    $0x63,%eax
- 78d:	0f 84 8d 00 00 00    	je     820 <printf+0x120>
+ 7ba:	83 f8 63             	cmp    $0x63,%eax
+ 7bd:	0f 84 8d 00 00 00    	je     850 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 793:	83 f8 25             	cmp    $0x25,%eax
- 796:	0f 84 b4 00 00 00    	je     850 <printf+0x150>
+ 7c3:	83 f8 25             	cmp    $0x25,%eax
+ 7c6:	0f 84 b4 00 00 00    	je     880 <printf+0x150>
   write(fd, &c, 1);
- 79c:	83 ec 04             	sub    $0x4,%esp
- 79f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7a3:	6a 01                	push   $0x1
- 7a5:	57                   	push   %edi
- 7a6:	ff 75 08             	pushl  0x8(%ebp)
- 7a9:	e8 15 fe ff ff       	call   5c3 <write>
+ 7cc:	83 ec 04             	sub    $0x4,%esp
+ 7cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7d3:	6a 01                	push   $0x1
+ 7d5:	57                   	push   %edi
+ 7d6:	ff 75 08             	pushl  0x8(%ebp)
+ 7d9:	e8 e5 fd ff ff       	call   5c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 7ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 7de:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 7b1:	83 c4 0c             	add    $0xc,%esp
- 7b4:	6a 01                	push   $0x1
- 7b6:	83 c6 01             	add    $0x1,%esi
- 7b9:	57                   	push   %edi
- 7ba:	ff 75 08             	pushl  0x8(%ebp)
- 7bd:	e8 01 fe ff ff       	call   5c3 <write>
+ 7e1:	83 c4 0c             	add    $0xc,%esp
+ 7e4:	6a 01                	push   $0x1
+ 7e6:	83 c6 01             	add    $0x1,%esi
+ 7e9:	57                   	push   %edi
+ 7ea:	ff 75 08             	pushl  0x8(%ebp)
+ 7ed:	e8 d1 fd ff ff       	call   5c3 <write>
   for(i = 0; fmt[i]; i++){
- 7c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 7f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 7c6:	83 c4 10             	add    $0x10,%esp
+ 7f6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 7c9:	31 d2                	xor    %edx,%edx
+ 7f9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 7cb:	84 db                	test   %bl,%bl
- 7cd:	75 8f                	jne    75e <printf+0x5e>
+ 7fb:	84 db                	test   %bl,%bl
+ 7fd:	75 8f                	jne    78e <printf+0x5e>
     }
   }
 }
- 7cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 7e0:	83 ec 0c             	sub    $0xc,%esp
- 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e8:	6a 00                	push   $0x0
- 7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 7f0:	8b 13                	mov    (%ebx),%edx
- 7f2:	e8 59 fe ff ff       	call   650 <printint>
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 818:	6a 00                	push   $0x0
+ 81a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 81d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 820:	8b 13                	mov    (%ebx),%edx
+ 822:	e8 59 fe ff ff       	call   680 <printint>
         ap++;
- 7f7:	89 d8                	mov    %ebx,%eax
- 7f9:	83 c4 10             	add    $0x10,%esp
+ 827:	89 d8                	mov    %ebx,%eax
+ 829:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7fc:	31 d2                	xor    %edx,%edx
+ 82c:	31 d2                	xor    %edx,%edx
         ap++;
- 7fe:	83 c0 04             	add    $0x4,%eax
- 801:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 804:	e9 4b ff ff ff       	jmp    754 <printf+0x54>
- 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82e:	83 c0 04             	add    $0x4,%eax
+ 831:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 834:	e9 4b ff ff ff       	jmp    784 <printf+0x54>
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 810:	83 ec 0c             	sub    $0xc,%esp
- 813:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 818:	6a 01                	push   $0x1
- 81a:	eb ce                	jmp    7ea <printf+0xea>
- 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	eb ce                	jmp    81a <printf+0xea>
+ 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 850:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 823:	83 ec 04             	sub    $0x4,%esp
+ 853:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 826:	8b 03                	mov    (%ebx),%eax
+ 856:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 828:	6a 01                	push   $0x1
+ 858:	6a 01                	push   $0x1
         ap++;
- 82a:	83 c3 04             	add    $0x4,%ebx
+ 85a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 82d:	57                   	push   %edi
- 82e:	ff 75 08             	pushl  0x8(%ebp)
+ 85d:	57                   	push   %edi
+ 85e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 831:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 861:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 834:	e8 8a fd ff ff       	call   5c3 <write>
+ 864:	e8 5a fd ff ff       	call   5c3 <write>
         ap++;
- 839:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 83c:	83 c4 10             	add    $0x10,%esp
+ 869:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 86c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 83f:	31 d2                	xor    %edx,%edx
- 841:	e9 0e ff ff ff       	jmp    754 <printf+0x54>
- 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 86f:	31 d2                	xor    %edx,%edx
+ 871:	e9 0e ff ff ff       	jmp    784 <printf+0x54>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 850:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 880:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 853:	83 ec 04             	sub    $0x4,%esp
- 856:	e9 59 ff ff ff       	jmp    7b4 <printf+0xb4>
- 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 85f:	90                   	nop
+ 883:	83 ec 04             	sub    $0x4,%esp
+ 886:	e9 59 ff ff ff       	jmp    7e4 <printf+0xb4>
+ 88b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 88f:	90                   	nop
         s = (char*)*ap;
- 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 863:	8b 18                	mov    (%eax),%ebx
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 893:	8b 18                	mov    (%eax),%ebx
         ap++;
- 865:	83 c0 04             	add    $0x4,%eax
- 868:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 895:	83 c0 04             	add    $0x4,%eax
+ 898:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 86b:	85 db                	test   %ebx,%ebx
- 86d:	74 17                	je     886 <printf+0x186>
+ 89b:	85 db                	test   %ebx,%ebx
+ 89d:	74 17                	je     8b6 <printf+0x186>
         while(*s != 0){
- 86f:	0f b6 03             	movzbl (%ebx),%eax
+ 89f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 872:	31 d2                	xor    %edx,%edx
+ 8a2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 874:	84 c0                	test   %al,%al
- 876:	0f 84 d8 fe ff ff    	je     754 <printf+0x54>
- 87c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 87f:	89 de                	mov    %ebx,%esi
- 881:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 884:	eb 1a                	jmp    8a0 <printf+0x1a0>
+ 8a4:	84 c0                	test   %al,%al
+ 8a6:	0f 84 d8 fe ff ff    	je     784 <printf+0x54>
+ 8ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8af:	89 de                	mov    %ebx,%esi
+ 8b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b4:	eb 1a                	jmp    8d0 <printf+0x1a0>
           s = "(null)";
- 886:	bb 9e 0a 00 00       	mov    $0xa9e,%ebx
+ 8b6:	bb ce 0a 00 00       	mov    $0xace,%ebx
         while(*s != 0){
- 88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 88e:	b8 28 00 00 00       	mov    $0x28,%eax
- 893:	89 de                	mov    %ebx,%esi
- 895:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 89f:	90                   	nop
+ 8bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8c3:	89 de                	mov    %ebx,%esi
+ 8c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
   write(fd, &c, 1);
- 8a0:	83 ec 04             	sub    $0x4,%esp
+ 8d0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 8a3:	83 c6 01             	add    $0x1,%esi
- 8a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 8d3:	83 c6 01             	add    $0x1,%esi
+ 8d6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 8a9:	6a 01                	push   $0x1
- 8ab:	57                   	push   %edi
- 8ac:	53                   	push   %ebx
- 8ad:	e8 11 fd ff ff       	call   5c3 <write>
+ 8d9:	6a 01                	push   $0x1
+ 8db:	57                   	push   %edi
+ 8dc:	53                   	push   %ebx
+ 8dd:	e8 e1 fc ff ff       	call   5c3 <write>
         while(*s != 0){
- 8b2:	0f b6 06             	movzbl (%esi),%eax
- 8b5:	83 c4 10             	add    $0x10,%esp
- 8b8:	84 c0                	test   %al,%al
- 8ba:	75 e4                	jne    8a0 <printf+0x1a0>
- 8bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 8e2:	0f b6 06             	movzbl (%esi),%eax
+ 8e5:	83 c4 10             	add    $0x10,%esp
+ 8e8:	84 c0                	test   %al,%al
+ 8ea:	75 e4                	jne    8d0 <printf+0x1a0>
+ 8ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 8bf:	31 d2                	xor    %edx,%edx
- 8c1:	e9 8e fe ff ff       	jmp    754 <printf+0x54>
- 8c6:	66 90                	xchg   %ax,%ax
- 8c8:	66 90                	xchg   %ax,%ax
- 8ca:	66 90                	xchg   %ax,%ax
- 8cc:	66 90                	xchg   %ax,%ax
- 8ce:	66 90                	xchg   %ax,%ax
+ 8ef:	31 d2                	xor    %edx,%edx
+ 8f1:	e9 8e fe ff ff       	jmp    784 <printf+0x54>
+ 8f6:	66 90                	xchg   %ax,%ax
+ 8f8:	66 90                	xchg   %ax,%ax
+ 8fa:	66 90                	xchg   %ax,%ax
+ 8fc:	66 90                	xchg   %ax,%ax
+ 8fe:	66 90                	xchg   %ax,%ax
 
-000008d0 <free>:
+00000900 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8d0:	f3 0f 1e fb          	endbr32 
- 8d4:	55                   	push   %ebp
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 905:	a1 80 0e 00 00       	mov    0xe80,%eax
 {
- 8da:	89 e5                	mov    %esp,%ebp
- 8dc:	57                   	push   %edi
- 8dd:	56                   	push   %esi
- 8de:	53                   	push   %ebx
- 8df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8e2:	8b 10                	mov    (%eax),%edx
+ 90a:	89 e5                	mov    %esp,%ebp
+ 90c:	57                   	push   %edi
+ 90d:	56                   	push   %esi
+ 90e:	53                   	push   %ebx
+ 90f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 912:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 8e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 914:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e7:	39 c8                	cmp    %ecx,%eax
- 8e9:	73 15                	jae    900 <free+0x30>
- 8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8ef:	90                   	nop
- 8f0:	39 d1                	cmp    %edx,%ecx
- 8f2:	72 14                	jb     908 <free+0x38>
+ 917:	39 c8                	cmp    %ecx,%eax
+ 919:	73 15                	jae    930 <free+0x30>
+ 91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 91f:	90                   	nop
+ 920:	39 d1                	cmp    %edx,%ecx
+ 922:	72 14                	jb     938 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8f4:	39 d0                	cmp    %edx,%eax
- 8f6:	73 10                	jae    908 <free+0x38>
+ 924:	39 d0                	cmp    %edx,%eax
+ 926:	73 10                	jae    938 <free+0x38>
 {
- 8f8:	89 d0                	mov    %edx,%eax
+ 928:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8fa:	8b 10                	mov    (%eax),%edx
- 8fc:	39 c8                	cmp    %ecx,%eax
- 8fe:	72 f0                	jb     8f0 <free+0x20>
+ 92a:	8b 10                	mov    (%eax),%edx
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 900:	39 d0                	cmp    %edx,%eax
- 902:	72 f4                	jb     8f8 <free+0x28>
- 904:	39 d1                	cmp    %edx,%ecx
- 906:	73 f0                	jae    8f8 <free+0x28>
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 f4                	jb     928 <free+0x28>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	73 f0                	jae    928 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 fa                	cmp    %edi,%edx
- 910:	74 1e                	je     930 <free+0x60>
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 fa                	cmp    %edi,%edx
+ 940:	74 1e                	je     960 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 912:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 942:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 915:	8b 50 04             	mov    0x4(%eax),%edx
- 918:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 91b:	39 f1                	cmp    %esi,%ecx
- 91d:	74 28                	je     947 <free+0x77>
+ 945:	8b 50 04             	mov    0x4(%eax),%edx
+ 948:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 28                	je     977 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 91f:	89 08                	mov    %ecx,(%eax)
+ 94f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 921:	5b                   	pop    %ebx
+ 951:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 952:	a3 80 0e 00 00       	mov    %eax,0xe80
 }
- 927:	5e                   	pop    %esi
- 928:	5f                   	pop    %edi
- 929:	5d                   	pop    %ebp
- 92a:	c3                   	ret    
- 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 92f:	90                   	nop
+ 957:	5e                   	pop    %esi
+ 958:	5f                   	pop    %edi
+ 959:	5d                   	pop    %ebp
+ 95a:	c3                   	ret    
+ 95b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 930:	03 72 04             	add    0x4(%edx),%esi
- 933:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 960:	03 72 04             	add    0x4(%edx),%esi
+ 963:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 936:	8b 10                	mov    (%eax),%edx
- 938:	8b 12                	mov    (%edx),%edx
- 93a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 966:	8b 10                	mov    (%eax),%edx
+ 968:	8b 12                	mov    (%edx),%edx
+ 96a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 93d:	8b 50 04             	mov    0x4(%eax),%edx
- 940:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 943:	39 f1                	cmp    %esi,%ecx
- 945:	75 d8                	jne    91f <free+0x4f>
+ 96d:	8b 50 04             	mov    0x4(%eax),%edx
+ 970:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 973:	39 f1                	cmp    %esi,%ecx
+ 975:	75 d8                	jne    94f <free+0x4f>
     p->s.size += bp->s.size;
- 947:	03 53 fc             	add    -0x4(%ebx),%edx
+ 977:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 97a:	a3 80 0e 00 00       	mov    %eax,0xe80
     p->s.size += bp->s.size;
- 94f:	89 50 04             	mov    %edx,0x4(%eax)
+ 97f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 952:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 955:	89 10                	mov    %edx,(%eax)
+ 982:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 985:	89 10                	mov    %edx,(%eax)
 }
- 957:	5b                   	pop    %ebx
- 958:	5e                   	pop    %esi
- 959:	5f                   	pop    %edi
- 95a:	5d                   	pop    %ebp
- 95b:	c3                   	ret    
- 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 987:	5b                   	pop    %ebx
+ 988:	5e                   	pop    %esi
+ 989:	5f                   	pop    %edi
+ 98a:	5d                   	pop    %ebp
+ 98b:	c3                   	ret    
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000960 <malloc>:
+00000990 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 960:	f3 0f 1e fb          	endbr32 
- 964:	55                   	push   %ebp
- 965:	89 e5                	mov    %esp,%ebp
- 967:	57                   	push   %edi
- 968:	56                   	push   %esi
- 969:	53                   	push   %ebx
- 96a:	83 ec 1c             	sub    $0x1c,%esp
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 96d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 99d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 9a0:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 976:	8d 70 07             	lea    0x7(%eax),%esi
- 979:	c1 ee 03             	shr    $0x3,%esi
- 97c:	83 c6 01             	add    $0x1,%esi
+ 9a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9a9:	c1 ee 03             	shr    $0x3,%esi
+ 9ac:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 97f:	85 ff                	test   %edi,%edi
- 981:	0f 84 a9 00 00 00    	je     a30 <malloc+0xd0>
+ 9af:	85 ff                	test   %edi,%edi
+ 9b1:	0f 84 a9 00 00 00    	je     a60 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 987:	8b 07                	mov    (%edi),%eax
+ 9b7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 989:	8b 48 04             	mov    0x4(%eax),%ecx
- 98c:	39 f1                	cmp    %esi,%ecx
- 98e:	73 6d                	jae    9fd <malloc+0x9d>
- 990:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 996:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 99b:	0f 43 de             	cmovae %esi,%ebx
+ 9b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bc:	39 f1                	cmp    %esi,%ecx
+ 9be:	73 6d                	jae    a2d <malloc+0x9d>
+ 9c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9cb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 99e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9a8:	eb 17                	jmp    9c1 <malloc+0x61>
- 9aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9d8:	eb 17                	jmp    9f1 <malloc+0x61>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b0:	8b 10                	mov    (%eax),%edx
+ 9e0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9b5:	39 f1                	cmp    %esi,%ecx
- 9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
- 9bf:	89 d0                	mov    %edx,%eax
+ 9e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9e5:	39 f1                	cmp    %esi,%ecx
+ 9e7:	73 4f                	jae    a38 <malloc+0xa8>
+ 9e9:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+ 9ef:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9c1:	39 c7                	cmp    %eax,%edi
- 9c3:	75 eb                	jne    9b0 <malloc+0x50>
+ 9f1:	39 c7                	cmp    %eax,%edi
+ 9f3:	75 eb                	jne    9e0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 9c5:	83 ec 0c             	sub    $0xc,%esp
- 9c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9cb:	e8 5b fc ff ff       	call   62b <sbrk>
+ 9f5:	83 ec 0c             	sub    $0xc,%esp
+ 9f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9fb:	e8 2b fc ff ff       	call   62b <sbrk>
   if(p == (char*)-1)
- 9d0:	83 c4 10             	add    $0x10,%esp
- 9d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9d6:	74 1b                	je     9f3 <malloc+0x93>
+ a00:	83 c4 10             	add    $0x10,%esp
+ a03:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a06:	74 1b                	je     a23 <malloc+0x93>
   hp->s.size = nu;
- 9d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ a08:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9db:	83 ec 0c             	sub    $0xc,%esp
- 9de:	83 c0 08             	add    $0x8,%eax
- 9e1:	50                   	push   %eax
- 9e2:	e8 e9 fe ff ff       	call   8d0 <free>
+ a0b:	83 ec 0c             	sub    $0xc,%esp
+ a0e:	83 c0 08             	add    $0x8,%eax
+ a11:	50                   	push   %eax
+ a12:	e8 e9 fe ff ff       	call   900 <free>
   return freep;
- 9e7:	a1 60 0e 00 00       	mov    0xe60,%eax
+ a17:	a1 80 0e 00 00       	mov    0xe80,%eax
       if((p = morecore(nunits)) == 0)
- 9ec:	83 c4 10             	add    $0x10,%esp
- 9ef:	85 c0                	test   %eax,%eax
- 9f1:	75 bd                	jne    9b0 <malloc+0x50>
+ a1c:	83 c4 10             	add    $0x10,%esp
+ a1f:	85 c0                	test   %eax,%eax
+ a21:	75 bd                	jne    9e0 <malloc+0x50>
         return 0;
   }
 }
- 9f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9f6:	31 c0                	xor    %eax,%eax
+ a26:	31 c0                	xor    %eax,%eax
 }
- 9f8:	5b                   	pop    %ebx
- 9f9:	5e                   	pop    %esi
- 9fa:	5f                   	pop    %edi
- 9fb:	5d                   	pop    %ebp
- 9fc:	c3                   	ret    
+ a28:	5b                   	pop    %ebx
+ a29:	5e                   	pop    %esi
+ a2a:	5f                   	pop    %edi
+ a2b:	5d                   	pop    %ebp
+ a2c:	c3                   	ret    
     if(p->s.size >= nunits){
- 9fd:	89 c2                	mov    %eax,%edx
- 9ff:	89 f8                	mov    %edi,%eax
- a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a2d:	89 c2                	mov    %eax,%edx
+ a2f:	89 f8                	mov    %edi,%eax
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- a08:	39 ce                	cmp    %ecx,%esi
- a0a:	74 54                	je     a60 <malloc+0x100>
+ a38:	39 ce                	cmp    %ecx,%esi
+ a3a:	74 54                	je     a90 <malloc+0x100>
         p->s.size -= nunits;
- a0c:	29 f1                	sub    %esi,%ecx
- a0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ a3c:	29 f1                	sub    %esi,%ecx
+ a3e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- a11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ a41:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- a14:	89 72 04             	mov    %esi,0x4(%edx)
+ a44:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 60 0e 00 00       	mov    %eax,0xe60
+ a47:	a3 80 0e 00 00       	mov    %eax,0xe80
 }
- a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a1f:	8d 42 08             	lea    0x8(%edx),%eax
+ a4f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- a22:	5b                   	pop    %ebx
- a23:	5e                   	pop    %esi
- a24:	5f                   	pop    %edi
- a25:	5d                   	pop    %ebp
- a26:	c3                   	ret    
- a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a2e:	66 90                	xchg   %ax,%ax
+ a52:	5b                   	pop    %ebx
+ a53:	5e                   	pop    %esi
+ a54:	5f                   	pop    %edi
+ a55:	5d                   	pop    %ebp
+ a56:	c3                   	ret    
+ a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
- a37:	0e 00 00 
+ a60:	c7 05 80 0e 00 00 84 	movl   $0xe84,0xe80
+ a67:	0e 00 00 
     base.s.size = 0;
- a3a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+ a6a:	bf 84 0e 00 00       	mov    $0xe84,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
- a46:	0e 00 00 
+ a6f:	c7 05 84 0e 00 00 84 	movl   $0xe84,0xe84
+ a76:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a49:	89 f8                	mov    %edi,%eax
+ a79:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
- a52:	00 00 00 
+ a7b:	c7 05 88 0e 00 00 00 	movl   $0x0,0xe88
+ a82:	00 00 00 
     if(p->s.size >= nunits){
- a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
- a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a85:	e9 36 ff ff ff       	jmp    9c0 <malloc+0x30>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a60:	8b 0a                	mov    (%edx),%ecx
- a62:	89 08                	mov    %ecx,(%eax)
- a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a90:	8b 0a                	mov    (%edx),%ecx
+ a92:	89 08                	mov    %ecx,(%eax)
+ a94:	eb b1                	jmp    a47 <malloc+0xb7>
Binary files xv6-public/grep.o and xv6-public-hybrid/grep.o differ
diff -u xv6-public/grep.sym xv6-public-hybrid/grep.sym
--- xv6-public/grep.sym	2022-10-07 20:01:01.038009830 +0530
+++ xv6-public-hybrid/grep.sym	2022-10-07 18:39:47.048632000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000a68 .rodata
-00000abc .eh_frame
-00000e60 .bss
+00000a98 .rodata
+00000aec .eh_frame
+00000e80 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,21 +13,23 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000aa8 digits.1085
+00000680 printint
+00000ad8 digits.1100
 00000000 umalloc.c
-00000e60 freep
-00000e64 base
+00000e80 freep
+00000e84 base
 00000340 strcpy
-00000700 printf
+00000730 printf
 00000570 memmove
 00000120 matchhere
 000005eb mknod
+00000643 wolfie
 00000460 gets
 00000623 getpid
 00000230 grep
-00000960 malloc
+00000990 malloc
 00000633 sleep
+00000663 get_burst_time
 000005b3 pipe
 000005c3 write
 000005fb fstat
@@ -40,16 +42,20 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000e44 __bss_start
+00000e74 __bss_start
 00000400 memset
 00000000 main
+0000066b set_burst_time
 000000c0 matchstar
 00000370 strcmp
 0000061b dup
-00000e80 buf
+00000653 getMaxPid
+00000ea0 buf
+0000064b getNumProc
+0000065b getProcInfo
 000004e0 stat
-00000e44 _edata
-00001280 _end
+00000e74 _edata
+000012a0 _end
 000001c0 match
 00000603 link
 000005a3 exit
@@ -59,4 +65,4 @@
 00000420 strchr
 0000060b mkdir
 000005cb close
-000008d0 free
+00000900 free
Binary files xv6-public/ide.o and xv6-public-hybrid/ide.o differ
Binary files xv6-public/_init and xv6-public-hybrid/_init differ
diff -u xv6-public/init.asm xv6-public-hybrid/init.asm
--- xv6-public/init.asm	2022-10-07 20:01:01.114020062 +0530
+++ xv6-public-hybrid/init.asm	2022-10-07 18:39:47.096654000 +0530
@@ -24,7 +24,7 @@
   if(open("console", O_RDWR) < 0){
   13:	83 ec 08             	sub    $0x8,%esp
   16:	6a 02                	push   $0x2
-  18:	68 18 08 00 00       	push   $0x818
+  18:	68 48 08 00 00       	push   $0x848
   1d:	e8 71 03 00 00       	call   393 <open>
   22:	83 c4 10             	add    $0x10,%esp
   25:	85 c0                	test   %eax,%eax
@@ -46,9 +46,9 @@
   for(;;){
     printf(1, "init: starting sh\n");
   50:	83 ec 08             	sub    $0x8,%esp
-  53:	68 20 08 00 00       	push   $0x820
+  53:	68 50 08 00 00       	push   $0x850
   58:	6a 01                	push   $0x1
-  5a:	e8 51 04 00 00       	call   4b0 <printf>
+  5a:	e8 81 04 00 00       	call   4e0 <printf>
     pid = fork();
   5f:	e8 e7 02 00 00       	call   34b <fork>
     if(pid < 0){
@@ -76,44 +76,44 @@
   7b:	74 d3                	je     50 <main+0x50>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 5f 08 00 00       	push   $0x85f
+  80:	68 8f 08 00 00       	push   $0x88f
   85:	6a 01                	push   $0x1
-  87:	e8 24 04 00 00       	call   4b0 <printf>
+  87:	e8 54 04 00 00       	call   4e0 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
   8f:	eb df                	jmp    70 <main+0x70>
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 33 08 00 00       	push   $0x833
+  93:	68 63 08 00 00       	push   $0x863
   98:	6a 01                	push   $0x1
-  9a:	e8 11 04 00 00       	call   4b0 <printf>
+  9a:	e8 41 04 00 00       	call   4e0 <printf>
       exit();
   9f:	e8 af 02 00 00       	call   353 <exit>
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 1c 0b 00 00       	push   $0xb1c
-  ab:	68 46 08 00 00       	push   $0x846
+  a6:	68 4c 0b 00 00       	push   $0xb4c
+  ab:	68 76 08 00 00       	push   $0x876
   b0:	e8 d6 02 00 00       	call   38b <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 49 08 00 00       	push   $0x849
+  b7:	68 79 08 00 00       	push   $0x879
   bc:	6a 01                	push   $0x1
-  be:	e8 ed 03 00 00       	call   4b0 <printf>
+  be:	e8 1d 04 00 00       	call   4e0 <printf>
       exit();
   c3:	e8 8b 02 00 00       	call   353 <exit>
     mknod("console", 1, 1);
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 18 08 00 00       	push   $0x818
+  cd:	68 48 08 00 00       	push   $0x848
   d2:	e8 c4 02 00 00       	call   39b <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 18 08 00 00       	push   $0x818
+  db:	68 48 08 00 00       	push   $0x848
   e0:	e8 ae 02 00 00       	call   393 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
@@ -646,609 +646,645 @@
  3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
- 3f3:	66 90                	xchg   %ax,%ax
- 3f5:	66 90                	xchg   %ax,%ax
- 3f7:	66 90                	xchg   %ax,%ax
- 3f9:	66 90                	xchg   %ax,%ax
- 3fb:	66 90                	xchg   %ax,%ax
- 3fd:	66 90                	xchg   %ax,%ax
- 3ff:	90                   	nop
 
-00000400 <printint>:
+000003f3 <wolfie>:
+SYSCALL(wolfie)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <getNumProc>:
+SYSCALL(getNumProc)
+ 3fb:	b8 16 00 00 00       	mov    $0x16,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 403:	b8 17 00 00 00       	mov    $0x17,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 40b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 413:	b8 19 00 00 00       	mov    $0x19,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 41b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+ 423:	66 90                	xchg   %ax,%ax
+ 425:	66 90                	xchg   %ax,%ax
+ 427:	66 90                	xchg   %ax,%ax
+ 429:	66 90                	xchg   %ax,%ax
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 400:	55                   	push   %ebp
- 401:	89 e5                	mov    %esp,%ebp
- 403:	57                   	push   %edi
- 404:	56                   	push   %esi
- 405:	53                   	push   %ebx
- 406:	83 ec 3c             	sub    $0x3c,%esp
- 409:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 40c:	89 d1                	mov    %edx,%ecx
+ 43c:	89 d1                	mov    %edx,%ecx
 {
- 40e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 411:	85 d2                	test   %edx,%edx
- 413:	0f 89 7f 00 00 00    	jns    498 <printint+0x98>
- 419:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 41d:	74 79                	je     498 <printint+0x98>
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
     neg = 1;
- 41f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 426:	f7 d9                	neg    %ecx
+ 456:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 428:	31 db                	xor    %ebx,%ebx
- 42a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 42d:	8d 76 00             	lea    0x0(%esi),%esi
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 430:	89 c8                	mov    %ecx,%eax
- 432:	31 d2                	xor    %edx,%edx
- 434:	89 cf                	mov    %ecx,%edi
- 436:	f7 75 c4             	divl   -0x3c(%ebp)
- 439:	0f b6 92 70 08 00 00 	movzbl 0x870(%edx),%edx
- 440:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 443:	89 d8                	mov    %ebx,%eax
- 445:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 a0 08 00 00 	movzbl 0x8a0(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 448:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 44b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 44e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 451:	76 dd                	jbe    430 <printint+0x30>
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
   if(neg)
- 453:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 456:	85 c9                	test   %ecx,%ecx
- 458:	74 0c                	je     466 <printint+0x66>
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
     buf[i++] = '-';
- 45a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 45f:	89 d8                	mov    %ebx,%eax
+ 48f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 461:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 466:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 469:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 46d:	eb 07                	jmp    476 <printint+0x76>
- 46f:	90                   	nop
- 470:	0f b6 13             	movzbl (%ebx),%edx
- 473:	83 eb 01             	sub    $0x1,%ebx
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 476:	83 ec 04             	sub    $0x4,%esp
- 479:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 47c:	6a 01                	push   $0x1
- 47e:	56                   	push   %esi
- 47f:	57                   	push   %edi
- 480:	e8 ee fe ff ff       	call   373 <write>
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 be fe ff ff       	call   373 <write>
   while(--i >= 0)
- 485:	83 c4 10             	add    $0x10,%esp
- 488:	39 de                	cmp    %ebx,%esi
- 48a:	75 e4                	jne    470 <printint+0x70>
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 48f:	5b                   	pop    %ebx
- 490:	5e                   	pop    %esi
- 491:	5f                   	pop    %edi
- 492:	5d                   	pop    %ebp
- 493:	c3                   	ret    
- 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 498:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 49f:	eb 87                	jmp    428 <printint+0x28>
- 4a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4af:	90                   	nop
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
 
-000004b0 <printf>:
+000004e0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4b0:	f3 0f 1e fb          	endbr32 
- 4b4:	55                   	push   %ebp
- 4b5:	89 e5                	mov    %esp,%ebp
- 4b7:	57                   	push   %edi
- 4b8:	56                   	push   %esi
- 4b9:	53                   	push   %ebx
- 4ba:	83 ec 2c             	sub    $0x2c,%esp
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	57                   	push   %edi
+ 4e8:	56                   	push   %esi
+ 4e9:	53                   	push   %ebx
+ 4ea:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4bd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4c0:	0f b6 1e             	movzbl (%esi),%ebx
- 4c3:	84 db                	test   %bl,%bl
- 4c5:	0f 84 b4 00 00 00    	je     57f <printf+0xcf>
+ 4ed:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4f0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4f3:	84 db                	test   %bl,%bl
+ 4f5:	0f 84 b4 00 00 00    	je     5af <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 4cb:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ce:	83 c6 01             	add    $0x1,%esi
+ 4fb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4fe:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 4d1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 501:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4d4:	31 d2                	xor    %edx,%edx
+ 504:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 4d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4d9:	eb 33                	jmp    50e <printf+0x5e>
- 4db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4df:	90                   	nop
- 4e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 506:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 509:	eb 33                	jmp    53e <printf+0x5e>
+ 50b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+ 510:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 4e3:	ba 25 00 00 00       	mov    $0x25,%edx
+ 513:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 4e8:	83 f8 25             	cmp    $0x25,%eax
- 4eb:	74 17                	je     504 <printf+0x54>
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 17                	je     534 <printf+0x54>
   write(fd, &c, 1);
- 4ed:	83 ec 04             	sub    $0x4,%esp
- 4f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4f3:	6a 01                	push   $0x1
- 4f5:	57                   	push   %edi
- 4f6:	ff 75 08             	pushl  0x8(%ebp)
- 4f9:	e8 75 fe ff ff       	call   373 <write>
- 4fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	ff 75 08             	pushl  0x8(%ebp)
+ 529:	e8 45 fe ff ff       	call   373 <write>
+ 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 501:	83 c4 10             	add    $0x10,%esp
+ 531:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 504:	0f b6 1e             	movzbl (%esi),%ebx
- 507:	83 c6 01             	add    $0x1,%esi
- 50a:	84 db                	test   %bl,%bl
- 50c:	74 71                	je     57f <printf+0xcf>
+ 534:	0f b6 1e             	movzbl (%esi),%ebx
+ 537:	83 c6 01             	add    $0x1,%esi
+ 53a:	84 db                	test   %bl,%bl
+ 53c:	74 71                	je     5af <printf+0xcf>
     c = fmt[i] & 0xff;
- 50e:	0f be cb             	movsbl %bl,%ecx
- 511:	0f b6 c3             	movzbl %bl,%eax
+ 53e:	0f be cb             	movsbl %bl,%ecx
+ 541:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 514:	85 d2                	test   %edx,%edx
- 516:	74 c8                	je     4e0 <printf+0x30>
+ 544:	85 d2                	test   %edx,%edx
+ 546:	74 c8                	je     510 <printf+0x30>
       }
     } else if(state == '%'){
- 518:	83 fa 25             	cmp    $0x25,%edx
- 51b:	75 e7                	jne    504 <printf+0x54>
+ 548:	83 fa 25             	cmp    $0x25,%edx
+ 54b:	75 e7                	jne    534 <printf+0x54>
       if(c == 'd'){
- 51d:	83 f8 64             	cmp    $0x64,%eax
- 520:	0f 84 9a 00 00 00    	je     5c0 <printf+0x110>
+ 54d:	83 f8 64             	cmp    $0x64,%eax
+ 550:	0f 84 9a 00 00 00    	je     5f0 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 526:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 52c:	83 f9 70             	cmp    $0x70,%ecx
- 52f:	74 5f                	je     590 <printf+0xe0>
+ 556:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 55c:	83 f9 70             	cmp    $0x70,%ecx
+ 55f:	74 5f                	je     5c0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 531:	83 f8 73             	cmp    $0x73,%eax
- 534:	0f 84 d6 00 00 00    	je     610 <printf+0x160>
+ 561:	83 f8 73             	cmp    $0x73,%eax
+ 564:	0f 84 d6 00 00 00    	je     640 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 53a:	83 f8 63             	cmp    $0x63,%eax
- 53d:	0f 84 8d 00 00 00    	je     5d0 <printf+0x120>
+ 56a:	83 f8 63             	cmp    $0x63,%eax
+ 56d:	0f 84 8d 00 00 00    	je     600 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 543:	83 f8 25             	cmp    $0x25,%eax
- 546:	0f 84 b4 00 00 00    	je     600 <printf+0x150>
+ 573:	83 f8 25             	cmp    $0x25,%eax
+ 576:	0f 84 b4 00 00 00    	je     630 <printf+0x150>
   write(fd, &c, 1);
- 54c:	83 ec 04             	sub    $0x4,%esp
- 54f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 553:	6a 01                	push   $0x1
- 555:	57                   	push   %edi
- 556:	ff 75 08             	pushl  0x8(%ebp)
- 559:	e8 15 fe ff ff       	call   373 <write>
+ 57c:	83 ec 04             	sub    $0x4,%esp
+ 57f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 e5 fd ff ff       	call   373 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 55e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 58e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 561:	83 c4 0c             	add    $0xc,%esp
- 564:	6a 01                	push   $0x1
- 566:	83 c6 01             	add    $0x1,%esi
- 569:	57                   	push   %edi
- 56a:	ff 75 08             	pushl  0x8(%ebp)
- 56d:	e8 01 fe ff ff       	call   373 <write>
+ 591:	83 c4 0c             	add    $0xc,%esp
+ 594:	6a 01                	push   $0x1
+ 596:	83 c6 01             	add    $0x1,%esi
+ 599:	57                   	push   %edi
+ 59a:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	e8 d1 fd ff ff       	call   373 <write>
   for(i = 0; fmt[i]; i++){
- 572:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 576:	83 c4 10             	add    $0x10,%esp
+ 5a6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 579:	31 d2                	xor    %edx,%edx
+ 5a9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 57b:	84 db                	test   %bl,%bl
- 57d:	75 8f                	jne    50e <printf+0x5e>
+ 5ab:	84 db                	test   %bl,%bl
+ 5ad:	75 8f                	jne    53e <printf+0x5e>
     }
   }
 }
- 57f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 582:	5b                   	pop    %ebx
- 583:	5e                   	pop    %esi
- 584:	5f                   	pop    %edi
- 585:	5d                   	pop    %ebp
- 586:	c3                   	ret    
- 587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58e:	66 90                	xchg   %ax,%ax
+ 5af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b2:	5b                   	pop    %ebx
+ 5b3:	5e                   	pop    %esi
+ 5b4:	5f                   	pop    %edi
+ 5b5:	5d                   	pop    %ebp
+ 5b6:	c3                   	ret    
+ 5b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5be:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 10 00 00 00       	mov    $0x10,%ecx
- 598:	6a 00                	push   $0x0
- 59a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 59d:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a0:	8b 13                	mov    (%ebx),%edx
- 5a2:	e8 59 fe ff ff       	call   400 <printint>
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5cd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d0:	8b 13                	mov    (%ebx),%edx
+ 5d2:	e8 59 fe ff ff       	call   430 <printint>
         ap++;
- 5a7:	89 d8                	mov    %ebx,%eax
- 5a9:	83 c4 10             	add    $0x10,%esp
+ 5d7:	89 d8                	mov    %ebx,%eax
+ 5d9:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ac:	31 d2                	xor    %edx,%edx
+ 5dc:	31 d2                	xor    %edx,%edx
         ap++;
- 5ae:	83 c0 04             	add    $0x4,%eax
- 5b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5b4:	e9 4b ff ff ff       	jmp    504 <printf+0x54>
- 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	83 c0 04             	add    $0x4,%eax
+ 5e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e4:	e9 4b ff ff ff       	jmp    534 <printf+0x54>
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 5c0:	83 ec 0c             	sub    $0xc,%esp
- 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5c8:	6a 01                	push   $0x1
- 5ca:	eb ce                	jmp    59a <printf+0xea>
- 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	eb ce                	jmp    5ca <printf+0xea>
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 5d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 600:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 5d3:	83 ec 04             	sub    $0x4,%esp
+ 603:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5d6:	8b 03                	mov    (%ebx),%eax
+ 606:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
+ 608:	6a 01                	push   $0x1
         ap++;
- 5da:	83 c3 04             	add    $0x4,%ebx
+ 60a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 5dd:	57                   	push   %edi
- 5de:	ff 75 08             	pushl  0x8(%ebp)
+ 60d:	57                   	push   %edi
+ 60e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 5e1:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 611:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e4:	e8 8a fd ff ff       	call   373 <write>
+ 614:	e8 5a fd ff ff       	call   373 <write>
         ap++;
- 5e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5ec:	83 c4 10             	add    $0x10,%esp
+ 619:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 61c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ef:	31 d2                	xor    %edx,%edx
- 5f1:	e9 0e ff ff ff       	jmp    504 <printf+0x54>
- 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 0e ff ff ff       	jmp    534 <printf+0x54>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 600:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 630:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 603:	83 ec 04             	sub    $0x4,%esp
- 606:	e9 59 ff ff ff       	jmp    564 <printf+0xb4>
- 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 60f:	90                   	nop
+ 633:	83 ec 04             	sub    $0x4,%esp
+ 636:	e9 59 ff ff ff       	jmp    594 <printf+0xb4>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
         s = (char*)*ap;
- 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 613:	8b 18                	mov    (%eax),%ebx
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 643:	8b 18                	mov    (%eax),%ebx
         ap++;
- 615:	83 c0 04             	add    $0x4,%eax
- 618:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 645:	83 c0 04             	add    $0x4,%eax
+ 648:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 61b:	85 db                	test   %ebx,%ebx
- 61d:	74 17                	je     636 <printf+0x186>
+ 64b:	85 db                	test   %ebx,%ebx
+ 64d:	74 17                	je     666 <printf+0x186>
         while(*s != 0){
- 61f:	0f b6 03             	movzbl (%ebx),%eax
+ 64f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 622:	31 d2                	xor    %edx,%edx
+ 652:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 624:	84 c0                	test   %al,%al
- 626:	0f 84 d8 fe ff ff    	je     504 <printf+0x54>
- 62c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 62f:	89 de                	mov    %ebx,%esi
- 631:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 634:	eb 1a                	jmp    650 <printf+0x1a0>
+ 654:	84 c0                	test   %al,%al
+ 656:	0f 84 d8 fe ff ff    	je     534 <printf+0x54>
+ 65c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65f:	89 de                	mov    %ebx,%esi
+ 661:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 664:	eb 1a                	jmp    680 <printf+0x1a0>
           s = "(null)";
- 636:	bb 68 08 00 00       	mov    $0x868,%ebx
+ 666:	bb 98 08 00 00       	mov    $0x898,%ebx
         while(*s != 0){
- 63b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 63e:	b8 28 00 00 00       	mov    $0x28,%eax
- 643:	89 de                	mov    %ebx,%esi
- 645:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
+ 66b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	89 de                	mov    %ebx,%esi
+ 675:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
   write(fd, &c, 1);
- 650:	83 ec 04             	sub    $0x4,%esp
+ 680:	83 ec 04             	sub    $0x4,%esp
           s++;
- 653:	83 c6 01             	add    $0x1,%esi
- 656:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 683:	83 c6 01             	add    $0x1,%esi
+ 686:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 659:	6a 01                	push   $0x1
- 65b:	57                   	push   %edi
- 65c:	53                   	push   %ebx
- 65d:	e8 11 fd ff ff       	call   373 <write>
+ 689:	6a 01                	push   $0x1
+ 68b:	57                   	push   %edi
+ 68c:	53                   	push   %ebx
+ 68d:	e8 e1 fc ff ff       	call   373 <write>
         while(*s != 0){
- 662:	0f b6 06             	movzbl (%esi),%eax
- 665:	83 c4 10             	add    $0x10,%esp
- 668:	84 c0                	test   %al,%al
- 66a:	75 e4                	jne    650 <printf+0x1a0>
- 66c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 692:	0f b6 06             	movzbl (%esi),%eax
+ 695:	83 c4 10             	add    $0x10,%esp
+ 698:	84 c0                	test   %al,%al
+ 69a:	75 e4                	jne    680 <printf+0x1a0>
+ 69c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 66f:	31 d2                	xor    %edx,%edx
- 671:	e9 8e fe ff ff       	jmp    504 <printf+0x54>
- 676:	66 90                	xchg   %ax,%ax
- 678:	66 90                	xchg   %ax,%ax
- 67a:	66 90                	xchg   %ax,%ax
- 67c:	66 90                	xchg   %ax,%ax
- 67e:	66 90                	xchg   %ax,%ax
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 8e fe ff ff       	jmp    534 <printf+0x54>
+ 6a6:	66 90                	xchg   %ax,%ax
+ 6a8:	66 90                	xchg   %ax,%ax
+ 6aa:	66 90                	xchg   %ax,%ax
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
 
-00000680 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 680:	f3 0f 1e fb          	endbr32 
- 684:	55                   	push   %ebp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 685:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 6b5:	a1 54 0b 00 00       	mov    0xb54,%eax
 {
- 68a:	89 e5                	mov    %esp,%ebp
- 68c:	57                   	push   %edi
- 68d:	56                   	push   %esi
- 68e:	53                   	push   %ebx
- 68f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 692:	8b 10                	mov    (%eax),%edx
+ 6ba:	89 e5                	mov    %esp,%ebp
+ 6bc:	57                   	push   %edi
+ 6bd:	56                   	push   %esi
+ 6be:	53                   	push   %ebx
+ 6bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 694:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 697:	39 c8                	cmp    %ecx,%eax
- 699:	73 15                	jae    6b0 <free+0x30>
- 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 69f:	90                   	nop
- 6a0:	39 d1                	cmp    %edx,%ecx
- 6a2:	72 14                	jb     6b8 <free+0x38>
+ 6c7:	39 c8                	cmp    %ecx,%eax
+ 6c9:	73 15                	jae    6e0 <free+0x30>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+ 6d0:	39 d1                	cmp    %edx,%ecx
+ 6d2:	72 14                	jb     6e8 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6a4:	39 d0                	cmp    %edx,%eax
- 6a6:	73 10                	jae    6b8 <free+0x38>
+ 6d4:	39 d0                	cmp    %edx,%eax
+ 6d6:	73 10                	jae    6e8 <free+0x38>
 {
- 6a8:	89 d0                	mov    %edx,%eax
+ 6d8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6aa:	8b 10                	mov    (%eax),%edx
- 6ac:	39 c8                	cmp    %ecx,%eax
- 6ae:	72 f0                	jb     6a0 <free+0x20>
+ 6da:	8b 10                	mov    (%eax),%edx
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b0:	39 d0                	cmp    %edx,%eax
- 6b2:	72 f4                	jb     6a8 <free+0x28>
- 6b4:	39 d1                	cmp    %edx,%ecx
- 6b6:	73 f0                	jae    6a8 <free+0x28>
+ 6e0:	39 d0                	cmp    %edx,%eax
+ 6e2:	72 f4                	jb     6d8 <free+0x28>
+ 6e4:	39 d1                	cmp    %edx,%ecx
+ 6e6:	73 f0                	jae    6d8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6be:	39 fa                	cmp    %edi,%edx
- 6c0:	74 1e                	je     6e0 <free+0x60>
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 fa                	cmp    %edi,%edx
+ 6f0:	74 1e                	je     710 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6c2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6c5:	8b 50 04             	mov    0x4(%eax),%edx
- 6c8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6cb:	39 f1                	cmp    %esi,%ecx
- 6cd:	74 28                	je     6f7 <free+0x77>
+ 6f5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6fb:	39 f1                	cmp    %esi,%ecx
+ 6fd:	74 28                	je     727 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6cf:	89 08                	mov    %ecx,(%eax)
+ 6ff:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 6d1:	5b                   	pop    %ebx
+ 701:	5b                   	pop    %ebx
   freep = p;
- 6d2:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 702:	a3 54 0b 00 00       	mov    %eax,0xb54
 }
- 6d7:	5e                   	pop    %esi
- 6d8:	5f                   	pop    %edi
- 6d9:	5d                   	pop    %ebp
- 6da:	c3                   	ret    
- 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6df:	90                   	nop
+ 707:	5e                   	pop    %esi
+ 708:	5f                   	pop    %edi
+ 709:	5d                   	pop    %ebp
+ 70a:	c3                   	ret    
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 6e0:	03 72 04             	add    0x4(%edx),%esi
- 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 710:	03 72 04             	add    0x4(%edx),%esi
+ 713:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e6:	8b 10                	mov    (%eax),%edx
- 6e8:	8b 12                	mov    (%edx),%edx
- 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 716:	8b 10                	mov    (%eax),%edx
+ 718:	8b 12                	mov    (%edx),%edx
+ 71a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6ed:	8b 50 04             	mov    0x4(%eax),%edx
- 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6f3:	39 f1                	cmp    %esi,%ecx
- 6f5:	75 d8                	jne    6cf <free+0x4f>
+ 71d:	8b 50 04             	mov    0x4(%eax),%edx
+ 720:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 723:	39 f1                	cmp    %esi,%ecx
+ 725:	75 d8                	jne    6ff <free+0x4f>
     p->s.size += bp->s.size;
- 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+ 727:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 6fa:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 72a:	a3 54 0b 00 00       	mov    %eax,0xb54
     p->s.size += bp->s.size;
- 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+ 72f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 705:	89 10                	mov    %edx,(%eax)
+ 732:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 735:	89 10                	mov    %edx,(%eax)
 }
- 707:	5b                   	pop    %ebx
- 708:	5e                   	pop    %esi
- 709:	5f                   	pop    %edi
- 70a:	5d                   	pop    %ebp
- 70b:	c3                   	ret    
- 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 737:	5b                   	pop    %ebx
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000710 <malloc>:
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 710:	f3 0f 1e fb          	endbr32 
- 714:	55                   	push   %ebp
- 715:	89 e5                	mov    %esp,%ebp
- 717:	57                   	push   %edi
- 718:	56                   	push   %esi
- 719:	53                   	push   %ebx
- 71a:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+ 745:	89 e5                	mov    %esp,%ebp
+ 747:	57                   	push   %edi
+ 748:	56                   	push   %esi
+ 749:	53                   	push   %ebx
+ 74a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 71d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 74d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 720:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+ 750:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 726:	8d 70 07             	lea    0x7(%eax),%esi
- 729:	c1 ee 03             	shr    $0x3,%esi
- 72c:	83 c6 01             	add    $0x1,%esi
+ 756:	8d 70 07             	lea    0x7(%eax),%esi
+ 759:	c1 ee 03             	shr    $0x3,%esi
+ 75c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 72f:	85 ff                	test   %edi,%edi
- 731:	0f 84 a9 00 00 00    	je     7e0 <malloc+0xd0>
+ 75f:	85 ff                	test   %edi,%edi
+ 761:	0f 84 a9 00 00 00    	je     810 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 737:	8b 07                	mov    (%edi),%eax
+ 767:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 739:	8b 48 04             	mov    0x4(%eax),%ecx
- 73c:	39 f1                	cmp    %esi,%ecx
- 73e:	73 6d                	jae    7ad <malloc+0x9d>
- 740:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 746:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 74b:	0f 43 de             	cmovae %esi,%ebx
+ 769:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76c:	39 f1                	cmp    %esi,%ecx
+ 76e:	73 6d                	jae    7dd <malloc+0x9d>
+ 770:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 776:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 77b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 74e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 755:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 758:	eb 17                	jmp    771 <malloc+0x61>
- 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 77e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 785:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 788:	eb 17                	jmp    7a1 <malloc+0x61>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 760:	8b 10                	mov    (%eax),%edx
+ 790:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 762:	8b 4a 04             	mov    0x4(%edx),%ecx
- 765:	39 f1                	cmp    %esi,%ecx
- 767:	73 4f                	jae    7b8 <malloc+0xa8>
- 769:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
- 76f:	89 d0                	mov    %edx,%eax
+ 792:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 795:	39 f1                	cmp    %esi,%ecx
+ 797:	73 4f                	jae    7e8 <malloc+0xa8>
+ 799:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+ 79f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 771:	39 c7                	cmp    %eax,%edi
- 773:	75 eb                	jne    760 <malloc+0x50>
+ 7a1:	39 c7                	cmp    %eax,%edi
+ 7a3:	75 eb                	jne    790 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 775:	83 ec 0c             	sub    $0xc,%esp
- 778:	ff 75 e4             	pushl  -0x1c(%ebp)
- 77b:	e8 5b fc ff ff       	call   3db <sbrk>
+ 7a5:	83 ec 0c             	sub    $0xc,%esp
+ 7a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7ab:	e8 2b fc ff ff       	call   3db <sbrk>
   if(p == (char*)-1)
- 780:	83 c4 10             	add    $0x10,%esp
- 783:	83 f8 ff             	cmp    $0xffffffff,%eax
- 786:	74 1b                	je     7a3 <malloc+0x93>
+ 7b0:	83 c4 10             	add    $0x10,%esp
+ 7b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b6:	74 1b                	je     7d3 <malloc+0x93>
   hp->s.size = nu;
- 788:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7b8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 78b:	83 ec 0c             	sub    $0xc,%esp
- 78e:	83 c0 08             	add    $0x8,%eax
- 791:	50                   	push   %eax
- 792:	e8 e9 fe ff ff       	call   680 <free>
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	83 c0 08             	add    $0x8,%eax
+ 7c1:	50                   	push   %eax
+ 7c2:	e8 e9 fe ff ff       	call   6b0 <free>
   return freep;
- 797:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 7c7:	a1 54 0b 00 00       	mov    0xb54,%eax
       if((p = morecore(nunits)) == 0)
- 79c:	83 c4 10             	add    $0x10,%esp
- 79f:	85 c0                	test   %eax,%eax
- 7a1:	75 bd                	jne    760 <malloc+0x50>
+ 7cc:	83 c4 10             	add    $0x10,%esp
+ 7cf:	85 c0                	test   %eax,%eax
+ 7d1:	75 bd                	jne    790 <malloc+0x50>
         return 0;
   }
 }
- 7a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7a6:	31 c0                	xor    %eax,%eax
+ 7d6:	31 c0                	xor    %eax,%eax
 }
- 7a8:	5b                   	pop    %ebx
- 7a9:	5e                   	pop    %esi
- 7aa:	5f                   	pop    %edi
- 7ab:	5d                   	pop    %ebp
- 7ac:	c3                   	ret    
+ 7d8:	5b                   	pop    %ebx
+ 7d9:	5e                   	pop    %esi
+ 7da:	5f                   	pop    %edi
+ 7db:	5d                   	pop    %ebp
+ 7dc:	c3                   	ret    
     if(p->s.size >= nunits){
- 7ad:	89 c2                	mov    %eax,%edx
- 7af:	89 f8                	mov    %edi,%eax
- 7b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7dd:	89 c2                	mov    %eax,%edx
+ 7df:	89 f8                	mov    %edi,%eax
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7b8:	39 ce                	cmp    %ecx,%esi
- 7ba:	74 54                	je     810 <malloc+0x100>
+ 7e8:	39 ce                	cmp    %ecx,%esi
+ 7ea:	74 54                	je     840 <malloc+0x100>
         p->s.size -= nunits;
- 7bc:	29 f1                	sub    %esi,%ecx
- 7be:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 7ec:	29 f1                	sub    %esi,%ecx
+ 7ee:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 7c1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 7f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 7c4:	89 72 04             	mov    %esi,0x4(%edx)
+ 7f4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7c7:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 7f7:	a3 54 0b 00 00       	mov    %eax,0xb54
 }
- 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7cf:	8d 42 08             	lea    0x8(%edx),%eax
+ 7ff:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 7e0:	c7 05 24 0b 00 00 28 	movl   $0xb28,0xb24
- 7e7:	0b 00 00 
+ 810:	c7 05 54 0b 00 00 58 	movl   $0xb58,0xb54
+ 817:	0b 00 00 
     base.s.size = 0;
- 7ea:	bf 28 0b 00 00       	mov    $0xb28,%edi
+ 81a:	bf 58 0b 00 00       	mov    $0xb58,%edi
     base.s.ptr = freep = prevp = &base;
- 7ef:	c7 05 28 0b 00 00 28 	movl   $0xb28,0xb28
- 7f6:	0b 00 00 
+ 81f:	c7 05 58 0b 00 00 58 	movl   $0xb58,0xb58
+ 826:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f9:	89 f8                	mov    %edi,%eax
+ 829:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 7fb:	c7 05 2c 0b 00 00 00 	movl   $0x0,0xb2c
- 802:	00 00 00 
+ 82b:	c7 05 5c 0b 00 00 00 	movl   $0x0,0xb5c
+ 832:	00 00 00 
     if(p->s.size >= nunits){
- 805:	e9 36 ff ff ff       	jmp    740 <malloc+0x30>
- 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 835:	e9 36 ff ff ff       	jmp    770 <malloc+0x30>
+ 83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 810:	8b 0a                	mov    (%edx),%ecx
- 812:	89 08                	mov    %ecx,(%eax)
- 814:	eb b1                	jmp    7c7 <malloc+0xb7>
+ 840:	8b 0a                	mov    (%edx),%ecx
+ 842:	89 08                	mov    %ecx,(%eax)
+ 844:	eb b1                	jmp    7f7 <malloc+0xb7>
Binary files xv6-public/initcode.o and xv6-public-hybrid/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public-hybrid/initcode.out differ
Binary files xv6-public/init.o and xv6-public-hybrid/init.o differ
diff -u xv6-public/init.sym xv6-public-hybrid/init.sym
--- xv6-public/init.sym	2022-10-07 20:01:01.118020601 +0530
+++ xv6-public-hybrid/init.sym	2022-10-07 18:39:47.108660000 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00000818 .rodata
-00000884 .eh_frame
-00000b1c .data
-00000b24 .bss
+00000848 .rodata
+000008b4 .eh_frame
+00000b4c .data
+00000b54 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,20 +14,22 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-00000400 printint
-00000870 digits.1085
+00000430 printint
+000008a0 digits.1100
 00000000 umalloc.c
-00000b24 freep
-00000b28 base
+00000b54 freep
+00000b58 base
 000000f0 strcpy
-000004b0 printf
-00000b1c argv
+000004e0 printf
+00000b4c argv
 00000320 memmove
 0000039b mknod
+000003f3 wolfie
 00000210 gets
 000003d3 getpid
-00000710 malloc
+00000740 malloc
 000003e3 sleep
+00000413 get_burst_time
 00000363 pipe
 00000373 write
 000003ab fstat
@@ -40,14 +42,18 @@
 0000034b fork
 000003db sbrk
 000003eb uptime
-00000b24 __bss_start
+00000b54 __bss_start
 000001b0 memset
 00000000 main
+0000041b set_burst_time
 00000120 strcmp
 000003cb dup
+00000403 getMaxPid
+000003fb getNumProc
+0000040b getProcInfo
 00000290 stat
-00000b24 _edata
-00000b30 _end
+00000b54 _edata
+00000b60 _end
 000003b3 link
 00000353 exit
 000002e0 atoi
@@ -56,4 +62,4 @@
 000001d0 strchr
 000003bb mkdir
 0000037b close
-00000680 free
+000006b0 free
Binary files xv6-public/ioapic.o and xv6-public-hybrid/ioapic.o differ
Binary files xv6-public/kalloc.o and xv6-public-hybrid/kalloc.o differ
Binary files xv6-public/kbd.o and xv6-public-hybrid/kbd.o differ
Binary files xv6-public/kernel and xv6-public-hybrid/kernel differ
diff -u xv6-public/kernel.asm xv6-public-hybrid/kernel.asm
--- xv6-public/kernel.asm	2022-10-07 20:00:55.081193456 +0530
+++ xv6-public-hybrid/kernel.asm	2022-10-07 18:39:42.634557000 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+80100028:	bc e0 c5 10 80       	mov    $0x8010c5e0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -71,22 +71,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100048:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+80100048:	bb 14 c6 10 80       	mov    $0x8010c614,%ebx
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 e0 70 10 80       	push   $0x801070e0
-80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
+80100050:	68 a0 7e 10 80       	push   $0x80107ea0
+80100055:	68 e0 c5 10 80       	push   $0x8010c5e0
+8010005a:	e8 61 4f 00 00       	call   80104fc0 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
-80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
+80100062:	b8 dc 0c 11 80       	mov    $0x80110cdc,%eax
   bcache.head.prev = &bcache.head;
-80100067:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
-8010006e:	fc 10 80 
+80100067:	c7 05 2c 0d 11 80 dc 	movl   $0x80110cdc,0x80110d2c
+8010006e:	0c 11 80 
   bcache.head.next = &bcache.head;
-80100071:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
-80100078:	fc 10 80 
+80100071:	c7 05 30 0d 11 80 dc 	movl   $0x80110cdc,0x80110d30
+80100078:	0c 11 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 8010007b:	eb 05                	jmp    80100082 <binit+0x42>
 8010007d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -98,13 +98,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010008b:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 e7 70 10 80       	push   $0x801070e7
+80100092:	68 a7 7e 10 80       	push   $0x80107ea7
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 e3 4d 00 00       	call   80104e80 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+8010009d:	a1 30 0d 11 80       	mov    0x80110d30,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -112,9 +112,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+801000b0:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb 60 fa 10 80    	cmp    $0x8010fa60,%ebx
+801000b6:	81 fb 80 0a 11 80    	cmp    $0x80110a80,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -141,16 +141,16 @@
 801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
-801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
+801000e3:	68 e0 c5 10 80       	push   $0x8010c5e0
+801000e8:	e8 53 50 00 00       	call   80105140 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ed:	8b 1d 30 0d 11 80    	mov    0x80110d30,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
-801000f6:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f6:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 801000fc:	75 0d                	jne    8010010b <bread+0x3b>
 801000fe:	eb 20                	jmp    80100120 <bread+0x50>
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100103:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
@@ -164,12 +164,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
-80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100120:	8b 1d 2c 0d 11 80    	mov    0x80110d2c,%ebx
+80100126:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100133:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100139:	74 65                	je     801001a0 <bread+0xd0>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -187,12 +187,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
+8010015d:	68 e0 c5 10 80       	push   $0x8010c5e0
+80100162:	e8 99 50 00 00       	call   80105200 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 4e 4d 00 00       	call   80104ec0 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -229,7 +229,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 ee 70 10 80       	push   $0x801070ee
+801001a3:	68 ae 7e 10 80       	push   $0x80107eae
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +248,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
+801001c2:	e8 99 4d 00 00       	call   80104f60 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -264,7 +264,7 @@
 801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 ff 70 10 80       	push   $0x801070ff
+801001e0:	68 bf 7e 10 80       	push   $0x80107ebf
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +285,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
+80100203:	e8 58 4d 00 00       	call   80104f60 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +294,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
+80100213:	e8 08 4d 00 00       	call   80104f20 <releasesleep>
 
   acquire(&bcache.lock);
-80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
+80100218:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
+8010021f:	e8 1c 4f 00 00       	call   80105140 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -319,30 +319,30 @@
 80100240:	8b 53 54             	mov    0x54(%ebx),%edx
 80100243:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100246:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100246:	a1 30 0d 11 80       	mov    0x80110d30,%eax
     b->prev = &bcache.head;
-8010024b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010024b:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     b->next = bcache.head.next;
 80100252:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100255:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100255:	a1 30 0d 11 80       	mov    0x80110d30,%eax
 8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-8010025d:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+8010025d:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   }
   
   release(&bcache.lock);
-80100263:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+80100263:	c7 45 08 e0 c5 10 80 	movl   $0x8010c5e0,0x8(%ebp)
 }
 8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8010026d:	5b                   	pop    %ebx
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
+80100270:	e9 8b 4f 00 00       	jmp    80105200 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 06 71 10 80       	push   $0x80107106
+80100278:	68 c6 7e 10 80       	push   $0x80107ec6
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -378,8 +378,8 @@
   iunlock(ip);
 801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
+801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+801002b1:	e8 8a 4e 00 00       	call   80105140 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -395,30 +395,30 @@
 801002be:	85 db                	test   %ebx,%ebx
 801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
     while(input.r == input.w){
-801002c6:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-801002cb:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002c6:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
+801002cb:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 801002d1:	74 27                	je     801002fa <consoleread+0x6a>
 801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
 801002d5:	8d 76 00             	lea    0x0(%esi),%esi
       sleep(&input.r, &cons.lock);
 801002d8:	83 ec 08             	sub    $0x8,%esp
-801002db:	68 20 a5 10 80       	push   $0x8010a520
-801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
+801002db:	68 20 b5 10 80       	push   $0x8010b520
+801002e0:	68 c0 0f 11 80       	push   $0x80110fc0
+801002e5:	e8 36 44 00 00       	call   80104720 <sleep>
     while(input.r == input.w){
-801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002ea:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
 801002ef:	83 c4 10             	add    $0x10,%esp
-801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002f2:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
-801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
+801002fa:	e8 71 3d 00 00       	call   80104070 <myproc>
 801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
-80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 0d 43 00 00       	call   80104620 <release>
+80100309:	68 20 b5 10 80       	push   $0x8010b520
+8010030e:	e8 ed 4e 00 00       	call   80105200 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
@@ -443,10 +443,10 @@
 8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100330:	8d 50 01             	lea    0x1(%eax),%edx
-80100333:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100333:	89 15 c0 0f 11 80    	mov    %edx,0x80110fc0
 80100339:	89 c2                	mov    %eax,%edx
 8010033b:	83 e2 7f             	and    $0x7f,%edx
-8010033e:	0f be 8a 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%ecx
+8010033e:	0f be 8a 40 0f 11 80 	movsbl -0x7feef0c0(%edx),%ecx
     if(c == C('D')){  // EOF
 80100345:	80 f9 04             	cmp    $0x4,%cl
 80100348:	74 38                	je     80100382 <consoleread+0xf2>
@@ -462,8 +462,8 @@
 80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
-80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 b6 42 00 00       	call   80104620 <release>
+80100360:	68 20 b5 10 80       	push   $0x8010b520
+80100365:	e8 96 4e 00 00       	call   80105200 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
@@ -485,7 +485,7 @@
 80100382:	39 f3                	cmp    %esi,%ebx
 80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
         input.r--;
-80100386:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100386:	a3 c0 0f 11 80       	mov    %eax,0x80110fc0
 8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
 8010038d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -505,7 +505,7 @@
   asm volatile("cli");
 8010039c:	fa                   	cli    
   cons.locking = 0;
-8010039d:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
 801003a4:	00 00 00 
   getcallerpcs(&s, pcs);
 801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
@@ -514,14 +514,14 @@
 801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003b6:	68 cd 7e 10 80       	push   $0x80107ecd
 801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
 801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003c9:	c7 04 24 8b 88 10 80 	movl   $0x8010888b,(%esp)
 801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -529,21 +529,21 @@
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
+801003dc:	e8 ff 4b 00 00       	call   80104fe0 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 21 71 10 80       	push   $0x80107121
+801003ec:	68 e1 7e 10 80       	push   $0x80107ee1
 801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
 801003f9:	39 f3                	cmp    %esi,%ebx
 801003fb:	75 e7                	jne    801003e4 <panic+0x54>
   panicked = 1; // freeze other CPU
-801003fd:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
 80100404:	00 00 00 
   for(;;)
 80100407:	eb fe                	jmp    80100407 <panic+0x77>
@@ -564,7 +564,7 @@
     uartputc(c);
 80100426:	83 ec 0c             	sub    $0xc,%esp
 80100429:	50                   	push   %eax
-8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042a:	e8 71 66 00 00       	call   80106aa0 <uartputc>
 8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -657,11 +657,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100510:	83 ec 0c             	sub    $0xc,%esp
 80100513:	6a 08                	push   $0x8
-80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+80100515:	e8 86 65 00 00       	call   80106aa0 <uartputc>
 8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100521:	e8 7a 65 00 00       	call   80106aa0 <uartputc>
 80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+8010052d:	e8 6e 65 00 00       	call   80106aa0 <uartputc>
 80100532:	83 c4 10             	add    $0x10,%esp
 80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
 8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -676,7 +676,7 @@
 80100552:	68 60 0e 00 00       	push   $0xe60
 80100557:	68 a0 80 0b 80       	push   $0x800b80a0
 8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+80100561:	e8 8a 4d 00 00       	call   801052f0 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100566:	b8 80 07 00 00       	mov    $0x780,%eax
 8010056b:	83 c4 0c             	add    $0xc,%esp
@@ -685,13 +685,13 @@
 80100572:	50                   	push   %eax
 80100573:	6a 00                	push   $0x0
 80100575:	56                   	push   %esi
-80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+80100576:	e8 d5 4c 00 00       	call   80105250 <memset>
 8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010057e:	83 c4 10             	add    $0x10,%esp
 80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
 80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 25 71 10 80       	push   $0x80107125
+80100589:	68 e5 7e 10 80       	push   $0x80107ee5
 8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
 80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -722,7 +722,7 @@
 801005c2:	31 d2                	xor    %edx,%edx
 801005c4:	89 ce                	mov    %ecx,%esi
 801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005c9:	0f b6 92 10 7f 10 80 	movzbl -0x7fef80f0(%edx),%edx
 801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 801005d3:	89 d8                	mov    %ebx,%eax
 801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -749,7 +749,7 @@
 801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
 80100600:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100603:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100603:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100609:	85 d2                	test   %edx,%edx
 8010060b:	74 03                	je     80100610 <printint+0x70>
   asm volatile("cli");
@@ -800,8 +800,8 @@
   iunlock(ip);
 80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
+80100658:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010065f:	e8 dc 4a 00 00       	call   80105140 <acquire>
   for(i = 0; i < n; i++)
 80100664:	83 c4 10             	add    $0x10,%esp
 80100667:	85 db                	test   %ebx,%ebx
@@ -809,7 +809,7 @@
 8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
 8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
   if(panicked){
-80100671:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100671:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100677:	85 d2                	test   %edx,%edx
 80100679:	74 05                	je     80100680 <consolewrite+0x40>
 8010067b:	fa                   	cli    
@@ -825,8 +825,8 @@
 8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
   release(&cons.lock);
 8010068f:	83 ec 0c             	sub    $0xc,%esp
-80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 84 3f 00 00       	call   80104620 <release>
+80100692:	68 20 b5 10 80       	push   $0x8010b520
+80100697:	e8 64 4b 00 00       	call   80105200 <release>
   ilock(ip);
 8010069c:	58                   	pop    %eax
 8010069d:	ff 75 08             	pushl  0x8(%ebp)
@@ -853,7 +853,7 @@
 801006b9:	53                   	push   %ebx
 801006ba:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006bd:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+801006bd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
 801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
   if(locking)
 801006c5:	85 c0                	test   %eax,%eax
@@ -875,7 +875,7 @@
 801006e7:	83 f8 25             	cmp    $0x25,%eax
 801006ea:	74 44                	je     80100730 <cprintf+0x80>
   if(panicked){
-801006ec:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801006ec:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801006f2:	85 c9                	test   %ecx,%ecx
 801006f4:	74 0f                	je     80100705 <cprintf+0x55>
 801006f6:	fa                   	cli    
@@ -936,11 +936,11 @@
 80100779:	85 db                	test   %ebx,%ebx
 8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
+8010077d:	bb f8 7e 10 80       	mov    $0x80107ef8,%ebx
       for(; *s; s++)
 80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
-80100787:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100787:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 8010078d:	85 d2                	test   %edx,%edx
 8010078f:	74 39                	je     801007ca <cprintf+0x11a>
 80100791:	fa                   	cli    
@@ -961,8 +961,8 @@
 801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
     acquire(&cons.lock);
 801007b5:	83 ec 0c             	sub    $0xc,%esp
-801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007b8:	68 20 b5 10 80       	push   $0x8010b520
+801007bd:	e8 7e 49 00 00       	call   80105140 <acquire>
 801007c2:	83 c4 10             	add    $0x10,%esp
 801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
 801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
@@ -975,7 +975,7 @@
 801007d9:	89 fb                	mov    %edi,%ebx
 801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
   if(panicked){
-801007e0:	8b 3d 58 a5 10 80    	mov    0x8010a558,%edi
+801007e0:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
 801007e6:	85 ff                	test   %edi,%edi
 801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
 801007ee:	fa                   	cli    
@@ -983,7 +983,7 @@
 801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
 801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(panicked){
-801007f8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801007f8:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801007fe:	85 c9                	test   %ecx,%ecx
 80100800:	74 06                	je     80100808 <cprintf+0x158>
 80100802:	fa                   	cli    
@@ -993,7 +993,7 @@
 80100808:	b8 25 00 00 00       	mov    $0x25,%eax
 8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
   if(panicked){
-80100812:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100812:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100818:	85 d2                	test   %edx,%edx
 8010081a:	74 2c                	je     80100848 <cprintf+0x198>
 8010081c:	fa                   	cli    
@@ -1002,14 +1002,14 @@
 8010081f:	90                   	nop
     release(&cons.lock);
 80100820:	83 ec 0c             	sub    $0xc,%esp
-80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+80100823:	68 20 b5 10 80       	push   $0x8010b520
+80100828:	e8 d3 49 00 00       	call   80105200 <release>
 8010082d:	83 c4 10             	add    $0x10,%esp
 }
 80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
 80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 3f 71 10 80       	push   $0x8010713f
+80100838:	68 ff 7e 10 80       	push   $0x80107eff
 8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
 80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100848:	89 f8                	mov    %edi,%eax
@@ -1033,8 +1033,8 @@
 8010086c:	83 ec 18             	sub    $0x18,%esp
 8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
+80100872:	68 20 b5 10 80       	push   $0x8010b520
+80100877:	e8 c4 48 00 00       	call   80105140 <acquire>
   while((c = getc()) >= 0){
 8010087c:	83 c4 10             	add    $0x10,%esp
 8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
@@ -1056,22 +1056,22 @@
 801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
 801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-801008b4:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008b4:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
 801008b9:	89 c2                	mov    %eax,%edx
-801008bb:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008bb:	2b 15 c0 0f 11 80    	sub    0x80110fc0,%edx
 801008c1:	83 fa 7f             	cmp    $0x7f,%edx
 801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
         c = (c == '\r') ? '\n' : c;
 801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
-801008c9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801008c9:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 801008cf:	83 e0 7f             	and    $0x7f,%eax
         input.buf[input.e++ % INPUT_BUF] = c;
-801008d2:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
+801008d2:	89 0d c8 0f 11 80    	mov    %ecx,0x80110fc8
         c = (c == '\r') ? '\n' : c;
 801008d8:	83 fb 0d             	cmp    $0xd,%ebx
 801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
         input.buf[input.e++ % INPUT_BUF] = c;
-801008e1:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
+801008e1:	88 98 40 0f 11 80    	mov    %bl,-0x7feef0c0(%eax)
   if(panicked){
 801008e7:	85 d2                	test   %edx,%edx
 801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
@@ -1082,27 +1082,27 @@
 801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
 801008ff:	83 fb 04             	cmp    $0x4,%ebx
 80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
-80100908:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+80100908:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
 8010090d:	83 e8 80             	sub    $0xffffff80,%eax
-80100910:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+80100910:	39 05 c8 0f 11 80    	cmp    %eax,0x80110fc8
 80100916:	75 80                	jne    80100898 <consoleintr+0x38>
 80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
 8010091d:	8d 76 00             	lea    0x0(%esi),%esi
       while(input.e != input.w &&
-80100920:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100925:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100920:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100925:	39 05 c4 0f 11 80    	cmp    %eax,0x80110fc4
 8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100931:	83 e8 01             	sub    $0x1,%eax
 80100934:	89 c2                	mov    %eax,%edx
 80100936:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100939:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+80100939:	80 ba 40 0f 11 80 0a 	cmpb   $0xa,-0x7feef0c0(%edx)
 80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
   if(panicked){
-80100946:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100946:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
         input.e--;
-8010094c:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+8010094c:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
   if(panicked){
 80100951:	85 d2                	test   %edx,%edx
 80100953:	74 0b                	je     80100960 <consoleintr+0x100>
@@ -1114,20 +1114,20 @@
 80100960:	b8 00 01 00 00       	mov    $0x100,%eax
 80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
       while(input.e != input.w &&
-8010096a:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-8010096f:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010096a:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+8010096f:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
 80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
 8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(input.e != input.w){
-80100980:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100985:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100980:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100985:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
         input.e--;
 80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+80100994:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
   if(panicked){
-80100999:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+80100999:	a1 58 b5 10 80       	mov    0x8010b558,%eax
 8010099e:	85 c0                	test   %eax,%eax
 801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
 801009a2:	fa                   	cli    
@@ -1144,8 +1144,8 @@
 801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
   release(&cons.lock);
 801009c7:	83 ec 0c             	sub    $0xc,%esp
-801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
+801009ca:	68 20 b5 10 80       	push   $0x8010b520
+801009cf:	e8 2c 48 00 00       	call   80105200 <release>
   if(doprocdump) {
 801009d4:	83 c4 10             	add    $0x10,%esp
 801009d7:	85 f6                	test   %esi,%esi
@@ -1158,7 +1158,7 @@
 801009e1:	5d                   	pop    %ebp
 801009e2:	c3                   	ret    
         input.buf[input.e++ % INPUT_BUF] = c;
-801009e3:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+801009e3:	c6 80 40 0f 11 80 0a 	movb   $0xa,-0x7feef0c0(%eax)
   if(panicked){
 801009ea:	85 d2                	test   %edx,%edx
 801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
@@ -1173,18 +1173,18 @@
 801009fd:	5f                   	pop    %edi
 801009fe:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
+801009ff:	e9 ec 3f 00 00       	jmp    801049f0 <procdump>
 80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-80100a0e:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100a0e:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
           wakeup(&input.r);
 80100a13:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+80100a16:	a3 c4 0f 11 80       	mov    %eax,0x80110fc4
           wakeup(&input.r);
-80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
+80100a1b:	68 c0 0f 11 80       	push   $0x80110fc0
+80100a20:	e8 bb 3e 00 00       	call   801048e0 <wakeup>
 80100a25:	83 c4 10             	add    $0x10,%esp
 80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
 80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1199,9 +1199,9 @@
 80100a35:	89 e5                	mov    %esp,%ebp
 80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a3a:	68 48 71 10 80       	push   $0x80107148
-80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
+80100a3a:	68 08 7f 10 80       	push   $0x80107f08
+80100a3f:	68 20 b5 10 80       	push   $0x8010b520
+80100a44:	e8 77 45 00 00       	call   80104fc0 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1213,13 +1213,13 @@
 80100a4b:	6a 00                	push   $0x0
 80100a4d:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-80100a4f:	c7 05 6c 09 11 80 40 	movl   $0x80100640,0x8011096c
+80100a4f:	c7 05 8c 19 11 80 40 	movl   $0x80100640,0x8011198c
 80100a56:	06 10 80 
   devsw[CONSOLE].read = consoleread;
-80100a59:	c7 05 68 09 11 80 90 	movl   $0x80100290,0x80110968
+80100a59:	c7 05 88 19 11 80 90 	movl   $0x80100290,0x80111988
 80100a60:	02 10 80 
   cons.locking = 1;
-80100a63:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+80100a63:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
 80100a6a:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
@@ -1253,7 +1253,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
+80100a90:	e8 db 35 00 00       	call   80104070 <myproc>
 80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1317,7 +1317,7 @@
 80100b07:	45 4c 46 
 80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b0c:	e8 ff 70 00 00       	call   80107c10 <setupkvm>
 80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b17:	85 c0                	test   %eax,%eax
 80100b19:	74 bf                	je     80100ada <exec+0x5a>
@@ -1347,7 +1347,7 @@
 80100b66:	50                   	push   %eax
 80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
 80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b73:	e8 b8 6e 00 00       	call   80107a30 <allocuvm>
 80100b78:	83 c4 10             	add    $0x10,%esp
 80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100b81:	85 c0                	test   %eax,%eax
@@ -1363,7 +1363,7 @@
 80100ba1:	53                   	push   %ebx
 80100ba2:	50                   	push   %eax
 80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100ba9:	e8 b2 6d 00 00       	call   80107960 <loaduvm>
 80100bae:	83 c4 20             	add    $0x20,%esp
 80100bb1:	85 c0                	test   %eax,%eax
 80100bb3:	78 2d                	js     80100be2 <exec+0x162>
@@ -1386,7 +1386,7 @@
     freevm(pgdir);
 80100be2:	83 ec 0c             	sub    $0xc,%esp
 80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
+80100beb:	e8 a0 6f 00 00       	call   80107b90 <freevm>
   if(ip){
 80100bf0:	83 c4 10             	add    $0x10,%esp
 80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
@@ -1408,7 +1408,7 @@
 80100c2a:	57                   	push   %edi
 80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c31:	57                   	push   %edi
-80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c32:	e8 f9 6d 00 00       	call   80107a30 <allocuvm>
 80100c37:	83 c4 10             	add    $0x10,%esp
 80100c3a:	89 c6                	mov    %eax,%esi
 80100c3c:	85 c0                	test   %eax,%eax
@@ -1424,7 +1424,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
+80100c53:	e8 58 70 00 00       	call   80107cb0 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c5b:	83 c4 10             	add    $0x10,%esp
@@ -1453,7 +1453,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c9f:	83 ec 0c             	sub    $0xc,%esp
 80100ca2:	50                   	push   %eax
-80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca3:	e8 a8 47 00 00       	call   80105450 <strlen>
 80100ca8:	f7 d0                	not    %eax
 80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1463,14 +1463,14 @@
 80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cb6:	e8 95 47 00 00       	call   80105450 <strlen>
 80100cbb:	83 c0 01             	add    $0x1,%eax
 80100cbe:	50                   	push   %eax
 80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100cc5:	53                   	push   %ebx
 80100cc6:	56                   	push   %esi
-80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100cc7:	e8 44 71 00 00       	call   80107e10 <copyout>
 80100ccc:	83 c4 20             	add    $0x20,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
@@ -1479,7 +1479,7 @@
     freevm(pgdir);
 80100cd8:	83 ec 0c             	sub    $0xc,%esp
 80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce1:	e8 aa 6e 00 00       	call   80107b90 <freevm>
 80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1510,7 +1510,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d33:	e8 d8 70 00 00       	call   80107e10 <copyout>
 80100d38:	83 c4 10             	add    $0x10,%esp
 80100d3b:	85 c0                	test   %eax,%eax
 80100d3d:	78 99                	js     80100cd8 <exec+0x258>
@@ -1540,7 +1540,7 @@
 80100d6c:	52                   	push   %edx
 80100d6d:	83 c0 6c             	add    $0x6c,%eax
 80100d70:	50                   	push   %eax
-80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
+80100d71:	e8 9a 46 00 00       	call   80105410 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1560,10 +1560,10 @@
 80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
+80100d9d:	e8 2e 6a 00 00       	call   801077d0 <switchuvm>
   freevm(oldpgdir);
 80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
+80100da5:	e8 e6 6d 00 00       	call   80107b90 <freevm>
   return 0;
 80100daa:	83 c4 10             	add    $0x10,%esp
 80100dad:	31 c0                	xor    %eax,%eax
@@ -1572,7 +1572,7 @@
 80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
     cprintf("exec: fail\n");
 80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dbc:	68 21 7f 10 80       	push   $0x80107f21
 80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
     return -1;
 80100dc6:	83 c4 10             	add    $0x10,%esp
@@ -1596,9 +1596,9 @@
 80100de5:	89 e5                	mov    %esp,%ebp
 80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100dea:	68 6d 71 10 80       	push   $0x8010716d
-80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+80100dea:	68 2d 7f 10 80       	push   $0x80107f2d
+80100def:	68 e0 0f 11 80       	push   $0x80110fe0
+80100df4:	e8 c7 41 00 00       	call   80104fc0 <initlock>
 }
 80100df9:	83 c4 10             	add    $0x10,%esp
 80100dfc:	c9                   	leave  
@@ -1619,18 +1619,18 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e08:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+80100e08:	bb 14 10 11 80       	mov    $0x80111014,%ebx
 {
 80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e10:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e15:	e8 26 43 00 00       	call   80105140 <acquire>
 80100e1a:	83 c4 10             	add    $0x10,%esp
 80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
 80100e1f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100e20:	83 c3 18             	add    $0x18,%ebx
-80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100e23:	81 fb 74 19 11 80    	cmp    $0x80111974,%ebx
 80100e29:	74 25                	je     80100e50 <filealloc+0x50>
     if(f->ref == 0){
 80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1642,8 +1642,8 @@
       f->ref = 1;
 80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 da 37 00 00       	call   80104620 <release>
+80100e3c:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e41:	e8 ba 43 00 00       	call   80105200 <release>
       return f;
     }
   }
@@ -1662,8 +1662,8 @@
   return 0;
 80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
+80100e55:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e5a:	e8 a1 43 00 00       	call   80105200 <release>
 }
 80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1687,8 +1687,8 @@
 80100e78:	83 ec 10             	sub    $0x10,%esp
 80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
+80100e7e:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e83:	e8 b8 42 00 00       	call   80105140 <acquire>
   if(f->ref < 1)
 80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e8b:	83 c4 10             	add    $0x10,%esp
@@ -1702,8 +1702,8 @@
   f->ref++;
 80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
+80100e9b:	68 e0 0f 11 80       	push   $0x80110fe0
+80100ea0:	e8 5b 43 00 00       	call   80105200 <release>
   return f;
 }
 80100ea5:	89 d8                	mov    %ebx,%eax
@@ -1712,7 +1712,7 @@
 80100eab:	c3                   	ret    
     panic("filedup");
 80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eaf:	68 34 7f 10 80       	push   $0x80107f34
 80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
 80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1733,8 +1733,8 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
+80100ed0:	68 e0 0f 11 80       	push   $0x80110fe0
+80100ed5:	e8 66 42 00 00       	call   80105140 <acquire>
   if(f->ref < 1)
 80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
 80100edd:	83 c4 10             	add    $0x10,%esp
@@ -1763,11 +1763,11 @@
 80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100f08:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100f08:	68 e0 0f 11 80       	push   $0x80110fe0
   ff = *f;
 80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f10:	e8 0b 37 00 00       	call   80104620 <release>
+80100f10:	e8 eb 42 00 00       	call   80105200 <release>
 
   if(ff.type == FD_PIPE)
 80100f15:	83 c4 10             	add    $0x10,%esp
@@ -1790,7 +1790,7 @@
 80100f29:	c3                   	ret    
 80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+80100f30:	c7 45 08 e0 0f 11 80 	movl   $0x80110fe0,0x8(%ebp)
 }
 80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100f3a:	5b                   	pop    %ebx
@@ -1798,7 +1798,7 @@
 80100f3c:	5f                   	pop    %edi
 80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f3e:	e9 bd 42 00 00       	jmp    80105200 <release>
 80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f47:	90                   	nop
     begin_op();
@@ -1835,7 +1835,7 @@
 80100f88:	c3                   	ret    
     panic("fileclose");
 80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f8c:	68 3c 7f 10 80       	push   $0x80107f3c
 80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
 80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1969,7 +1969,7 @@
 80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
 80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107a:	68 46 7f 10 80       	push   $0x80107f46
 8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
 80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2093,7 +2093,7 @@
 8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
 80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101163:	68 4f 7f 10 80       	push   $0x80107f4f
 80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
 8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
@@ -2124,7 +2124,7 @@
 80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
   panic("filewrite");
 80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 95 71 10 80       	push   $0x80107195
+80101199:	68 55 7f 10 80       	push   $0x80107f55
 8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
 801011a3:	66 90                	xchg   %ax,%ax
 801011a5:	66 90                	xchg   %ax,%ax
@@ -2149,7 +2149,7 @@
   bp = bread(dev, BBLOCK(b, sb));
 801011b3:	89 d0                	mov    %edx,%eax
 801011b5:	c1 e8 0c             	shr    $0xc,%eax
-801011b8:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011b8:	03 05 f8 19 11 80    	add    0x801119f8,%eax
 {
 801011be:	89 e5                	mov    %esp,%ebp
 801011c0:	56                   	push   %esi
@@ -2201,7 +2201,7 @@
 80101213:	c3                   	ret    
     panic("freeing free block");
 80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 9f 71 10 80       	push   $0x8010719f
+80101217:	68 5f 7f 10 80       	push   $0x80107f5f
 8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
 80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2216,7 +2216,7 @@
 80101235:	53                   	push   %ebx
 80101236:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101239:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+80101239:	8b 0d e0 19 11 80    	mov    0x801119e0,%ecx
 {
 8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2228,14 +2228,14 @@
 80101254:	83 ec 08             	sub    $0x8,%esp
 80101257:	89 f0                	mov    %esi,%eax
 80101259:	c1 f8 0c             	sar    $0xc,%eax
-8010125c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+8010125c:	03 05 f8 19 11 80    	add    0x801119f8,%eax
 80101262:	50                   	push   %eax
 80101263:	ff 75 d8             	pushl  -0x28(%ebp)
 80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
 8010126b:	83 c4 10             	add    $0x10,%esp
 8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101271:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+80101271:	a1 e0 19 11 80       	mov    0x801119e0,%eax
 80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80101279:	31 c0                	xor    %eax,%eax
 8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
@@ -2270,11 +2270,11 @@
 801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 801012c3:	83 c4 10             	add    $0x10,%esp
 801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012c9:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+801012c9:	39 05 e0 19 11 80    	cmp    %eax,0x801119e0
 801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
 801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d4:	68 72 7f 10 80       	push   $0x80107f72
 801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
 801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2305,7 +2305,7 @@
 8010130d:	68 00 02 00 00       	push   $0x200
 80101312:	6a 00                	push   $0x0
 80101314:	50                   	push   %eax
-80101315:	e8 56 33 00 00       	call   80104670 <memset>
+80101315:	e8 36 3f 00 00       	call   80105250 <memset>
   log_write(bp);
 8010131a:	89 1c 24             	mov    %ebx,(%esp)
 8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
@@ -2346,13 +2346,13 @@
 {
 80101349:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010134a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+8010134a:	bb 34 1a 11 80       	mov    $0x80111a34,%ebx
 {
 8010134f:	83 ec 28             	sub    $0x28,%esp
 80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
+80101355:	68 00 1a 11 80       	push   $0x80111a00
+8010135a:	e8 e1 3d 00 00       	call   80105140 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2365,7 +2365,7 @@
 80101372:	74 6c                	je     801013e0 <iget+0xa0>
 80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010137a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010137a:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 80101380:	73 26                	jae    801013a8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2384,7 +2384,7 @@
 80101397:	75 6e                	jne    80101407 <iget+0xc7>
 80101399:	89 c6                	mov    %eax,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010139b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010139b:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 801013a1:	72 df                	jb     80101382 <iget+0x42>
 801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801013a7:	90                   	nop
@@ -2411,8 +2411,8 @@
   ip->valid = 0;
 801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 54 32 00 00       	call   80104620 <release>
+801013c2:	68 00 1a 11 80       	push   $0x80111a00
+801013c7:	e8 34 3e 00 00       	call   80105200 <release>
 
   return ip;
 801013cc:	83 c4 10             	add    $0x10,%esp
@@ -2435,11 +2435,11 @@
       return ip;
 801013eb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-801013ed:	68 e0 09 11 80       	push   $0x801109e0
+801013ed:	68 00 1a 11 80       	push   $0x80111a00
       ip->ref++;
 801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801013f5:	e8 26 32 00 00       	call   80104620 <release>
+801013f5:	e8 06 3e 00 00       	call   80105200 <release>
       return ip;
 801013fa:	83 c4 10             	add    $0x10,%esp
 }
@@ -2451,7 +2451,7 @@
 80101405:	5d                   	pop    %ebp
 80101406:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101407:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101407:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 8010140d:	73 10                	jae    8010141f <iget+0xdf>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2460,7 +2460,7 @@
 8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
 8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101422:	68 88 7f 10 80       	push   $0x80107f88
 80101427:	e8 64 ef ff ff       	call   80100390 <panic>
 8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2581,7 +2581,7 @@
 801014e7:	c3                   	ret    
   panic("bmap: out of range");
 801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014eb:	68 98 7f 10 80       	push   $0x80107f98
 801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
 801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2608,7 +2608,7 @@
 80101521:	6a 1c                	push   $0x1c
 80101523:	50                   	push   %eax
 80101524:	56                   	push   %esi
-80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
+80101525:	e8 c6 3d 00 00       	call   801052f0 <memmove>
   brelse(bp);
 8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010152d:	83 c4 10             	add    $0x10,%esp
@@ -2628,39 +2628,39 @@
 80101544:	55                   	push   %ebp
 80101545:	89 e5                	mov    %esp,%ebp
 80101547:	53                   	push   %ebx
-80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101548:	bb 40 1a 11 80       	mov    $0x80111a40,%ebx
 8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101550:	68 eb 71 10 80       	push   $0x801071eb
-80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
+80101550:	68 ab 7f 10 80       	push   $0x80107fab
+80101555:	68 00 1a 11 80       	push   $0x80111a00
+8010155a:	e8 61 3a 00 00       	call   80104fc0 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010155f:	83 c4 10             	add    $0x10,%esp
 80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
 80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 f2 71 10 80       	push   $0x801071f2
+8010156b:	68 b2 7f 10 80       	push   $0x80107fb2
 80101570:	53                   	push   %ebx
 80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
+80101577:	e8 04 39 00 00       	call   80104e80 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 8010157c:	83 c4 10             	add    $0x10,%esp
-8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+8010157f:	81 fb 60 36 11 80    	cmp    $0x80113660,%ebx
 80101585:	75 e1                	jne    80101568 <iinit+0x28>
   readsb(dev, &sb);
 80101587:	83 ec 08             	sub    $0x8,%esp
-8010158a:	68 c0 09 11 80       	push   $0x801109c0
+8010158a:	68 e0 19 11 80       	push   $0x801119e0
 8010158f:	ff 75 08             	pushl  0x8(%ebp)
 80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101597:	ff 35 d8 09 11 80    	pushl  0x801109d8
-8010159d:	ff 35 d4 09 11 80    	pushl  0x801109d4
-801015a3:	ff 35 d0 09 11 80    	pushl  0x801109d0
-801015a9:	ff 35 cc 09 11 80    	pushl  0x801109cc
-801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
-801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
-801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 58 72 10 80       	push   $0x80107258
+80101597:	ff 35 f8 19 11 80    	pushl  0x801119f8
+8010159d:	ff 35 f4 19 11 80    	pushl  0x801119f4
+801015a3:	ff 35 f0 19 11 80    	pushl  0x801119f0
+801015a9:	ff 35 ec 19 11 80    	pushl  0x801119ec
+801015af:	ff 35 e8 19 11 80    	pushl  0x801119e8
+801015b5:	ff 35 e4 19 11 80    	pushl  0x801119e4
+801015bb:	ff 35 e0 19 11 80    	pushl  0x801119e0
+801015c1:	68 18 80 10 80       	push   $0x80108018
 801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
 }
 801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2681,7 +2681,7 @@
 801015ea:	83 ec 1c             	sub    $0x1c,%esp
 801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-801015f0:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+801015f0:	83 3d e8 19 11 80 01 	cmpl   $0x1,0x801119e8
 {
 801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
 801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -2699,13 +2699,13 @@
 80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010161c:	83 c4 10             	add    $0x10,%esp
-8010161f:	3b 3d c8 09 11 80    	cmp    0x801109c8,%edi
+8010161f:	3b 3d e8 19 11 80    	cmp    0x801119e8,%edi
 80101625:	73 69                	jae    80101690 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101627:	89 f8                	mov    %edi,%eax
 80101629:	83 ec 08             	sub    $0x8,%esp
 8010162c:	c1 e8 03             	shr    $0x3,%eax
-8010162f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010162f:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 80101635:	50                   	push   %eax
 80101636:	56                   	push   %esi
 80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
@@ -2727,7 +2727,7 @@
 80101659:	6a 40                	push   $0x40
 8010165b:	6a 00                	push   $0x0
 8010165d:	51                   	push   %ecx
-8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
+8010165e:	e8 ed 3b 00 00       	call   80105250 <memset>
       dip->type = type;
 80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2756,7 +2756,7 @@
 8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
 80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101693:	68 b8 7f 10 80       	push   $0x80107fb8
 80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
 8010169d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2775,7 +2775,7 @@
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801016b2:	83 ec 08             	sub    $0x8,%esp
 801016b5:	c1 e8 03             	shr    $0x3,%eax
-801016b8:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016b8:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801016be:	50                   	push   %eax
 801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
 801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
@@ -2811,7 +2811,7 @@
 80101701:	6a 34                	push   $0x34
 80101703:	53                   	push   %ebx
 80101704:	50                   	push   %eax
-80101705:	e8 06 30 00 00       	call   80104710 <memmove>
+80101705:	e8 e6 3b 00 00       	call   801052f0 <memmove>
   log_write(bp);
 8010170a:	89 34 24             	mov    %esi,(%esp)
 8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
@@ -2837,13 +2837,13 @@
 80101738:	83 ec 10             	sub    $0x10,%esp
 8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
+8010173e:	68 00 1a 11 80       	push   $0x80111a00
+80101743:	e8 f8 39 00 00       	call   80105140 <acquire>
   ip->ref++;
 80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 c8 2e 00 00       	call   80104620 <release>
+8010174c:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101753:	e8 a8 3a 00 00       	call   80105200 <release>
 }
 80101758:	89 d8                	mov    %ebx,%eax
 8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2869,7 +2869,7 @@
 8010177f:	83 ec 0c             	sub    $0xc,%esp
 80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
 80101785:	50                   	push   %eax
-80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
+80101786:	e8 35 37 00 00       	call   80104ec0 <acquiresleep>
   if(ip->valid == 0){
 8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
 8010178e:	83 c4 10             	add    $0x10,%esp
@@ -2886,7 +2886,7 @@
 801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
 801017a3:	83 ec 08             	sub    $0x8,%esp
 801017a6:	c1 e8 03             	shr    $0x3,%eax
-801017a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801017a9:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801017af:	50                   	push   %eax
 801017b0:	ff 33                	pushl  (%ebx)
 801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
@@ -2922,7 +2922,7 @@
 801017f3:	50                   	push   %eax
 801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
 801017f7:	50                   	push   %eax
-801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
+801017f8:	e8 f3 3a 00 00       	call   801052f0 <memmove>
     brelse(bp);
 801017fd:	89 34 24             	mov    %esi,(%esp)
 80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
@@ -2935,11 +2935,11 @@
 80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
 8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 10 72 10 80       	push   $0x80107210
+8010181d:	68 d0 7f 10 80       	push   $0x80107fd0
 80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
 80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182a:	68 ca 7f 10 80       	push   $0x80107fca
 8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
 80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2959,7 +2959,7 @@
 80101850:	83 ec 0c             	sub    $0xc,%esp
 80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101856:	56                   	push   %esi
-80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+80101857:	e8 04 37 00 00       	call   80104f60 <holdingsleep>
 8010185c:	83 c4 10             	add    $0x10,%esp
 8010185f:	85 c0                	test   %eax,%eax
 80101861:	74 15                	je     80101878 <iunlock+0x38>
@@ -2974,10 +2974,10 @@
 80101871:	5e                   	pop    %esi
 80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
+80101873:	e9 a8 36 00 00       	jmp    80104f20 <releasesleep>
     panic("iunlock");
 80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 1f 72 10 80       	push   $0x8010721f
+8010187b:	68 df 7f 10 80       	push   $0x80107fdf
 80101880:	e8 0b eb ff ff       	call   80100390 <panic>
 80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2995,7 +2995,7 @@
   acquiresleep(&ip->lock);
 801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018a3:	57                   	push   %edi
-801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
+801018a4:	e8 17 36 00 00       	call   80104ec0 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018ac:	83 c4 10             	add    $0x10,%esp
@@ -3006,15 +3006,15 @@
   releasesleep(&ip->lock);
 801018ba:	83 ec 0c             	sub    $0xc,%esp
 801018bd:	57                   	push   %edi
-801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
+801018be:	e8 5d 36 00 00       	call   80104f20 <releasesleep>
   acquire(&icache.lock);
-801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
+801018c3:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+801018ca:	e8 71 38 00 00       	call   80105140 <acquire>
   ip->ref--;
 801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801018d3:	83 c4 10             	add    $0x10,%esp
-801018d6:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+801018d6:	c7 45 08 00 1a 11 80 	movl   $0x80111a00,0x8(%ebp)
 }
 801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801018e0:	5b                   	pop    %ebx
@@ -3022,17 +3022,17 @@
 801018e2:	5f                   	pop    %edi
 801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e4:	e9 17 39 00 00       	jmp    80105200 <release>
 801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
 801018f0:	83 ec 0c             	sub    $0xc,%esp
-801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
+801018f3:	68 00 1a 11 80       	push   $0x80111a00
+801018f8:	e8 43 38 00 00       	call   80105140 <acquire>
     int r = ip->ref;
 801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 14 2d 00 00       	call   80104620 <release>
+80101900:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101907:	e8 f4 38 00 00       	call   80105200 <release>
     if(r == 1){
 8010190c:	83 c4 10             	add    $0x10,%esp
 8010190f:	83 fe 01             	cmp    $0x1,%esi
@@ -3287,7 +3287,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b03:	50                   	push   %eax
 80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
+80101b07:	e8 e4 37 00 00       	call   801052f0 <memmove>
     brelse(bp);
 80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b0f:	89 14 24             	mov    %edx,(%esp)
@@ -3312,7 +3312,7 @@
 80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b34:	66 83 f8 09          	cmp    $0x9,%ax
 80101b38:	77 17                	ja     80101b51 <readi+0xf1>
-80101b3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101b3a:	8b 04 c5 80 19 11 80 	mov    -0x7feee680(,%eax,8),%eax
 80101b41:	85 c0                	test   %eax,%eax
 80101b43:	74 0c                	je     80101b51 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3417,7 +3417,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
 80101c02:	50                   	push   %eax
-80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
+80101c03:	e8 e8 36 00 00       	call   801052f0 <memmove>
     log_write(bp);
 80101c08:	89 3c 24             	mov    %edi,(%esp)
 80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
@@ -3454,7 +3454,7 @@
 80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101c44:	66 83 f8 09          	cmp    $0x9,%ax
 80101c48:	77 32                	ja     80101c7c <writei+0x11c>
-80101c4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101c4a:	8b 04 c5 84 19 11 80 	mov    -0x7feee67c(,%eax,8),%eax
 80101c51:	85 c0                	test   %eax,%eax
 80101c53:	74 27                	je     80101c7c <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
@@ -3500,7 +3500,7 @@
 80101c9a:	6a 0e                	push   $0xe
 80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
 80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+80101ca2:	e8 b9 36 00 00       	call   80105360 <strncmp>
 }
 80101ca7:	c9                   	leave  
 80101ca8:	c3                   	ret    
@@ -3556,7 +3556,7 @@
 80101cff:	6a 0e                	push   $0xe
 80101d01:	50                   	push   %eax
 80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
+80101d05:	e8 56 36 00 00       	call   80105360 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d0a:	83 c4 10             	add    $0x10,%esp
@@ -3604,11 +3604,11 @@
 80101d46:	c3                   	ret    
       panic("dirlookup read");
 80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4a:	68 f9 7f 10 80       	push   $0x80107ff9
 80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d57:	68 e7 7f 10 80       	push   $0x80107fe7
 80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
 80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3640,20 +3640,20 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
+80101d8a:	e8 e1 22 00 00       	call   80104070 <myproc>
   acquire(&icache.lock);
 80101d8f:	83 ec 0c             	sub    $0xc,%esp
 80101d92:	89 df                	mov    %ebx,%edi
     ip = idup(myproc()->cwd);
 80101d94:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
+80101d97:	68 00 1a 11 80       	push   $0x80111a00
+80101d9c:	e8 9f 33 00 00       	call   80105140 <acquire>
   ip->ref++;
 80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101da5:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101dac:	e8 4f 34 00 00       	call   80105200 <release>
 80101db1:	83 c4 10             	add    $0x10,%esp
 80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
 80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3698,7 +3698,7 @@
 80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
 80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e17:	e8 d4 34 00 00       	call   801052f0 <memmove>
 80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
@@ -3764,7 +3764,7 @@
 80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
 80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
+80101ea3:	e8 48 34 00 00       	call   801052f0 <memmove>
     name[len] = 0;
 80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80101eab:	83 c4 10             	add    $0x10,%esp
@@ -3910,7 +3910,7 @@
 80101fcf:	6a 0e                	push   $0xe
 80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
 80101fd4:	50                   	push   %eax
-80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
+80101fd5:	e8 d6 33 00 00       	call   801053b0 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80101fda:	6a 10                	push   $0x10
   de.inum = inum;
@@ -3945,11 +3945,11 @@
 8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
 80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 48 72 10 80       	push   $0x80107248
+80102013:	68 08 80 10 80       	push   $0x80108008
 80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
 8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102020:	68 72 86 10 80       	push   $0x80108672
 80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
 8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4100,11 +4100,11 @@
 80102127:	c3                   	ret    
     panic("incorrect blockno");
 80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 b4 72 10 80       	push   $0x801072b4
+8010212b:	68 74 80 10 80       	push   $0x80108074
 80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
 80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 ab 72 10 80       	push   $0x801072ab
+80102138:	68 6b 80 10 80       	push   $0x8010806b
 8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
 80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4116,12 +4116,12 @@
 80102155:	89 e5                	mov    %esp,%ebp
 80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-8010215a:	68 c6 72 10 80       	push   $0x801072c6
-8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
+8010215a:	68 86 80 10 80       	push   $0x80108086
+8010215f:	68 80 b5 10 80       	push   $0x8010b580
+80102164:	e8 57 2e 00 00       	call   80104fc0 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102169:	58                   	pop    %eax
-8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+8010216a:	a1 50 38 11 80       	mov    0x80113850,%eax
 8010216f:	5a                   	pop    %edx
 80102170:	83 e8 01             	sub    $0x1,%eax
 80102173:	50                   	push   %eax
@@ -4155,7 +4155,7 @@
 801021b6:	84 c0                	test   %al,%al
 801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
       havedisk1 = 1;
-801021ba:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+801021ba:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
 801021c1:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4185,11 +4185,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
+801021ed:	68 80 b5 10 80       	push   $0x8010b580
+801021f2:	e8 49 2f 00 00       	call   80105140 <acquire>
 
   if((b = idequeue) == 0){
-801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+801021f7:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
 801021fd:	83 c4 10             	add    $0x10,%esp
 80102200:	85 db                	test   %ebx,%ebx
 80102202:	74 5f                	je     80102263 <ideintr+0x83>
@@ -4198,7 +4198,7 @@
   }
   idequeue = b->qnext;
 80102204:	8b 43 58             	mov    0x58(%ebx),%eax
-80102207:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+80102207:	a3 64 b5 10 80       	mov    %eax,0x8010b564
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4238,11 +4238,11 @@
 8010224a:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 8010224c:	53                   	push   %ebx
-8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
+8010224d:	e8 8e 26 00 00       	call   801048e0 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-80102252:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+80102252:	a1 64 b5 10 80       	mov    0x8010b564,%eax
 80102257:	83 c4 10             	add    $0x10,%esp
 8010225a:	85 c0                	test   %eax,%eax
 8010225c:	74 05                	je     80102263 <ideintr+0x83>
@@ -4250,8 +4250,8 @@
 8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
     release(&idelock);
 80102263:	83 ec 0c             	sub    $0xc,%esp
-80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 b0 23 00 00       	call   80104620 <release>
+80102266:	68 80 b5 10 80       	push   $0x8010b580
+8010226b:	e8 90 2f 00 00       	call   80105200 <release>
 
   release(&idelock);
 }
@@ -4282,7 +4282,7 @@
   if(!holdingsleep(&b->lock))
 8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
 80102291:	50                   	push   %eax
-80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102292:	e8 c9 2c 00 00       	call   80104f60 <holdingsleep>
 80102297:	83 c4 10             	add    $0x10,%esp
 8010229a:	85 c0                	test   %eax,%eax
 8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
@@ -4297,20 +4297,20 @@
 801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
 801022b3:	85 d2                	test   %edx,%edx
 801022b5:	74 0d                	je     801022c4 <iderw+0x44>
-801022b7:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+801022b7:	a1 60 b5 10 80       	mov    0x8010b560,%eax
 801022bc:	85 c0                	test   %eax,%eax
 801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 801022c4:	83 ec 0c             	sub    $0xc,%esp
-801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
+801022c7:	68 80 b5 10 80       	push   $0x8010b580
+801022cc:	e8 6f 2e 00 00       	call   80105140 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801022d1:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801022d1:	a1 64 b5 10 80       	mov    0x8010b564,%eax
   b->qnext = 0;
 801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
@@ -4329,7 +4329,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-801022f6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+801022f6:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
 801022fc:	74 42                	je     80102340 <iderw+0xc0>
     idestart(b);
 
@@ -4343,9 +4343,9 @@
 8010230f:	90                   	nop
     sleep(b, &idelock);
 80102310:	83 ec 08             	sub    $0x8,%esp
-80102313:	68 80 a5 10 80       	push   $0x8010a580
+80102313:	68 80 b5 10 80       	push   $0x8010b580
 80102318:	53                   	push   %ebx
-80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
+80102319:	e8 02 24 00 00       	call   80104720 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010231e:	8b 03                	mov    (%ebx),%eax
 80102320:	83 c4 10             	add    $0x10,%esp
@@ -4356,12 +4356,12 @@
 
 
   release(&idelock);
-8010232b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+8010232b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
 }
 80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102335:	c9                   	leave  
   release(&idelock);
-80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+80102336:	e9 c5 2e 00 00       	jmp    80105200 <release>
 8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010233f:	90                   	nop
     idestart(b);
@@ -4370,19 +4370,19 @@
 80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
 80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102350:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+80102350:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
 80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
 80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235a:	68 b5 80 10 80       	push   $0x801080b5
 8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
 80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 e0 72 10 80       	push   $0x801072e0
+80102367:	68 a0 80 10 80       	push   $0x801080a0
 8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102374:	68 8a 80 10 80       	push   $0x8010808a
 80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
 8010237e:	66 90                	xchg   %ax,%ax
 
@@ -4398,7 +4398,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-80102385:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+80102385:	c7 05 54 36 11 80 00 	movl   $0xfec00000,0x80113654
 8010238c:	00 c0 fe 
 {
 8010238f:	89 e5                	mov    %esp,%ebp
@@ -4408,16 +4408,16 @@
 80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 8010239a:	00 00 00 
   return ioapic->data;
-8010239d:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+8010239d:	8b 15 54 36 11 80    	mov    0x80113654,%edx
 801023a3:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
 801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-801023ac:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023ac:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-801023b2:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+801023b2:	0f b6 15 80 37 11 80 	movzbl 0x80113780,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 801023b9:	c1 ee 10             	shr    $0x10,%esi
 801023bc:	89 f0                	mov    %esi,%eax
@@ -4431,9 +4431,9 @@
 801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 14 73 10 80       	push   $0x80107314
+801023ce:	68 d4 80 10 80       	push   $0x801080d4
 801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
-801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023d8:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 801023de:	83 c4 10             	add    $0x10,%esp
 801023e1:	83 c6 21             	add    $0x21,%esi
 {
@@ -4449,7 +4449,7 @@
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023f2:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-801023f4:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023f4:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 801023fa:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
@@ -4460,7 +4460,7 @@
 80102409:	83 c2 02             	add    $0x2,%edx
 8010240c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-8010240e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010240e:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 8010241b:	39 f0                	cmp    %esi,%eax
@@ -4484,7 +4484,7 @@
 80102430:	f3 0f 1e fb          	endbr32 
 80102434:	55                   	push   %ebp
   ioapic->reg = reg;
-80102435:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102435:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 {
 8010243b:	89 e5                	mov    %esp,%ebp
 8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4497,7 +4497,7 @@
   ioapic->reg = reg;
 80102447:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102449:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102449:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010244f:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4507,7 +4507,7 @@
   ioapic->reg = reg;
 80102458:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-8010245a:	a1 34 26 11 80       	mov    0x80112634,%eax
+8010245a:	a1 54 36 11 80       	mov    0x80113654,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010245f:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4539,7 +4539,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+80102486:	81 fb 08 63 11 80    	cmp    $0x80116308,%ebx
 8010248c:	72 72                	jb     80102500 <kfree+0x90>
 8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4552,23 +4552,23 @@
 8010249e:	68 00 10 00 00       	push   $0x1000
 801024a3:	6a 01                	push   $0x1
 801024a5:	53                   	push   %ebx
-801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
+801024a6:	e8 a5 2d 00 00       	call   80105250 <memset>
 
   if(kmem.use_lock)
-801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+801024ab:	8b 15 94 36 11 80    	mov    0x80113694,%edx
 801024b1:	83 c4 10             	add    $0x10,%esp
 801024b4:	85 d2                	test   %edx,%edx
 801024b6:	75 20                	jne    801024d8 <kfree+0x68>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-801024b8:	a1 78 26 11 80       	mov    0x80112678,%eax
+801024b8:	a1 98 36 11 80       	mov    0x80113698,%eax
 801024bd:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-801024bf:	a1 74 26 11 80       	mov    0x80112674,%eax
+801024bf:	a1 94 36 11 80       	mov    0x80113694,%eax
   kmem.freelist = r;
-801024c4:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+801024c4:	89 1d 98 36 11 80    	mov    %ebx,0x80113698
   if(kmem.use_lock)
 801024ca:	85 c0                	test   %eax,%eax
 801024cc:	75 22                	jne    801024f0 <kfree+0x80>
@@ -4581,21 +4581,21 @@
 801024d7:	90                   	nop
     acquire(&kmem.lock);
 801024d8:	83 ec 0c             	sub    $0xc,%esp
-801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
+801024db:	68 60 36 11 80       	push   $0x80113660
+801024e0:	e8 5b 2c 00 00       	call   80105140 <acquire>
 801024e5:	83 c4 10             	add    $0x10,%esp
 801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
 801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&kmem.lock);
-801024f0:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+801024f0:	c7 45 08 60 36 11 80 	movl   $0x80113660,0x8(%ebp)
 }
 801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801024fa:	c9                   	leave  
     release(&kmem.lock);
-801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
+801024fb:	e9 00 2d 00 00       	jmp    80105200 <release>
     panic("kfree");
 80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 46 73 10 80       	push   $0x80107346
+80102503:	68 06 81 10 80       	push   $0x80108106
 80102508:	e8 83 de ff ff       	call   80100390 <panic>
 8010250d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -4649,15 +4649,15 @@
 80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 4c 73 10 80       	push   $0x8010734c
-80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
+8010256f:	68 0c 81 10 80       	push   $0x8010810c
+80102574:	68 60 36 11 80       	push   $0x80113660
+80102579:	e8 42 2a 00 00       	call   80104fc0 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
 80102581:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102584:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+80102584:	c7 05 94 36 11 80 00 	movl   $0x0,0x80113694
 8010258b:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
 8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
@@ -4720,7 +4720,7 @@
 80102610:	39 de                	cmp    %ebx,%esi
 80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
   kmem.use_lock = 1;
-80102614:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+80102614:	c7 05 94 36 11 80 01 	movl   $0x1,0x80113694
 8010261b:	00 00 00 
 }
 8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -4742,18 +4742,18 @@
   struct run *r;
 
   if(kmem.use_lock)
-80102634:	a1 74 26 11 80       	mov    0x80112674,%eax
+80102634:	a1 94 36 11 80       	mov    0x80113694,%eax
 80102639:	85 c0                	test   %eax,%eax
 8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-8010263d:	a1 78 26 11 80       	mov    0x80112678,%eax
+8010263d:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
 80102642:	85 c0                	test   %eax,%eax
 80102644:	74 0a                	je     80102650 <kalloc+0x20>
     kmem.freelist = r->next;
 80102646:	8b 10                	mov    (%eax),%edx
-80102648:	89 15 78 26 11 80    	mov    %edx,0x80112678
+80102648:	89 15 98 36 11 80    	mov    %edx,0x80113698
   if(kmem.use_lock)
 8010264e:	c3                   	ret    
 8010264f:	90                   	nop
@@ -4767,26 +4767,26 @@
 80102659:	89 e5                	mov    %esp,%ebp
 8010265b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
+8010265e:	68 60 36 11 80       	push   $0x80113660
+80102663:	e8 d8 2a 00 00       	call   80105140 <acquire>
   r = kmem.freelist;
-80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102668:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
-8010266d:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+8010266d:	8b 15 94 36 11 80    	mov    0x80113694,%edx
 80102673:	83 c4 10             	add    $0x10,%esp
 80102676:	85 c0                	test   %eax,%eax
 80102678:	74 08                	je     80102682 <kalloc+0x52>
     kmem.freelist = r->next;
 8010267a:	8b 08                	mov    (%eax),%ecx
-8010267c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+8010267c:	89 0d 98 36 11 80    	mov    %ecx,0x80113698
   if(kmem.use_lock)
 80102682:	85 d2                	test   %edx,%edx
 80102684:	74 16                	je     8010269c <kalloc+0x6c>
     release(&kmem.lock);
 80102686:	83 ec 0c             	sub    $0xc,%esp
 80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 8a 1f 00 00       	call   80104620 <release>
+8010268c:	68 60 36 11 80       	push   $0x80113660
+80102691:	e8 6a 2b 00 00       	call   80105200 <release>
   return (char*)r;
 80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4822,7 +4822,7 @@
 801026ba:	53                   	push   %ebx
 801026bb:	ec                   	in     (%dx),%al
   return data;
-801026bc:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
+801026bc:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
     return -1;
   data = inb(KBDATAP);
 801026c2:	0f b6 d0             	movzbl %al,%edx
@@ -4854,9 +4854,9 @@
   }
 
   shift |= shiftcode[data];
-801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+801026df:	0f b6 8a 40 82 10 80 	movzbl -0x7fef7dc0(%edx),%ecx
   shift ^= togglecode[data];
-801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
+801026e6:	0f b6 82 40 81 10 80 	movzbl -0x7fef7ec0(%edx),%eax
   shift |= shiftcode[data];
 801026ed:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
@@ -4864,13 +4864,13 @@
   c = charcode[shift & (CTL | SHIFT)][data];
 801026f1:	89 c8                	mov    %ecx,%eax
   shift ^= togglecode[data];
-801026f3:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+801026f3:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
   c = charcode[shift & (CTL | SHIFT)][data];
 801026f9:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
 801026fc:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
+801026ff:	8b 04 85 20 81 10 80 	mov    -0x7fef7ee0(,%eax,4),%eax
 80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
 8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
@@ -4894,7 +4894,7 @@
     return 0;
 80102723:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80102725:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
+80102725:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
 }
 8010272b:	5b                   	pop    %ebx
 8010272c:	5d                   	pop    %ebp
@@ -4907,7 +4907,7 @@
     return 0;
 80102738:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+8010273a:	0f b6 8a 40 82 10 80 	movzbl -0x7fef7dc0(%edx),%ecx
 80102741:	83 c9 40             	or     $0x40,%ecx
 80102744:	0f b6 c9             	movzbl %cl,%ecx
 80102747:	f7 d1                	not    %ecx
@@ -4916,7 +4916,7 @@
 8010274b:	5b                   	pop    %ebx
 8010274c:	5d                   	pop    %ebp
     shift &= ~(shiftcode[data] | E0ESC);
-8010274d:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+8010274d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
 }
 80102753:	c3                   	ret    
 80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4971,7 +4971,7 @@
 {
 801027a0:	f3 0f 1e fb          	endbr32 
   if(!lapic)
-801027a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801027a4:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 801027a9:	85 c0                	test   %eax,%eax
 801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
   lapic[index] = value;
@@ -5084,7 +5084,7 @@
 {
 801028a0:	f3 0f 1e fb          	endbr32 
   if (!lapic)
-801028a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028a4:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 801028a9:	85 c0                	test   %eax,%eax
 801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
     return 0;
@@ -5108,7 +5108,7 @@
 {
 801028c0:	f3 0f 1e fb          	endbr32 
   if(lapic)
-801028c4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028c4:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 801028c9:	85 c0                	test   %eax,%eax
 801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
   lapic[index] = value;
@@ -5188,7 +5188,7 @@
   wrv[1] = addr >> 4;
 8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-80102932:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102932:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
 8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
@@ -5402,7 +5402,7 @@
 80102aba:	50                   	push   %eax
 80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102abe:	50                   	push   %eax
-80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
+80102abf:	e8 dc 27 00 00       	call   801052a0 <memcmp>
 80102ac4:	83 c4 10             	add    $0x10,%esp
 80102ac7:	85 c0                	test   %eax,%eax
 80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
@@ -5503,7 +5503,7 @@
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102b90:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102b90:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
 80102b96:	85 c9                	test   %ecx,%ecx
 80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
 {
@@ -5518,19 +5518,19 @@
 80102ba6:	83 ec 0c             	sub    $0xc,%esp
 80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102bb0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102bb0:	a1 d4 36 11 80       	mov    0x801136d4,%eax
 80102bb5:	83 ec 08             	sub    $0x8,%esp
 80102bb8:	01 f8                	add    %edi,%eax
 80102bba:	83 c0 01             	add    $0x1,%eax
 80102bbd:	50                   	push   %eax
-80102bbe:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102bbe:	ff 35 e4 36 11 80    	pushl  0x801136e4
 80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
 80102bc9:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
 80102bcb:	58                   	pop    %eax
 80102bcc:	5a                   	pop    %edx
-80102bcd:	ff 34 bd cc 26 11 80 	pushl  -0x7feed934(,%edi,4)
-80102bd4:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102bcd:	ff 34 bd ec 36 11 80 	pushl  -0x7feec914(,%edi,4)
+80102bd4:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102bda:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
@@ -5545,7 +5545,7 @@
 80102bef:	50                   	push   %eax
 80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102bf3:	50                   	push   %eax
-80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
+80102bf4:	e8 f7 26 00 00       	call   801052f0 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102bf9:	89 1c 24             	mov    %ebx,(%esp)
 80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
@@ -5557,7 +5557,7 @@
 80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c11:	83 c4 10             	add    $0x10,%esp
-80102c14:	39 3d c8 26 11 80    	cmp    %edi,0x801126c8
+80102c14:	39 3d e8 36 11 80    	cmp    %edi,0x801136e8
 80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
   }
 }
@@ -5583,8 +5583,8 @@
 80102c33:	53                   	push   %ebx
 80102c34:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c37:	ff 35 b4 26 11 80    	pushl  0x801126b4
-80102c3d:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c37:	ff 35 d4 36 11 80    	pushl  0x801136d4
+80102c3d:	ff 35 e4 36 11 80    	pushl  0x801136e4
 80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
@@ -5594,7 +5594,7 @@
   struct buf *buf = bread(log.dev, log.start);
 80102c4b:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-80102c4d:	a1 c8 26 11 80       	mov    0x801126c8,%eax
+80102c4d:	a1 e8 36 11 80       	mov    0x801136e8,%eax
 80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
 80102c55:	85 c0                	test   %eax,%eax
@@ -5603,7 +5603,7 @@
 80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80102c5f:	90                   	nop
     hb->block[i] = log.lh.block[i];
-80102c60:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
+80102c60:	8b 0c 95 ec 36 11 80 	mov    -0x7feec914(,%edx,4),%ecx
 80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102c6b:	83 c2 01             	add    $0x1,%edx
@@ -5634,9 +5634,9 @@
 80102c98:	83 ec 2c             	sub    $0x2c,%esp
 80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102c9e:	68 80 75 10 80       	push   $0x80107580
-80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
+80102c9e:	68 40 83 10 80       	push   $0x80108340
+80102ca3:	68 a0 36 11 80       	push   $0x801136a0
+80102ca8:	e8 13 23 00 00       	call   80104fc0 <initlock>
   readsb(dev, &sb);
 80102cad:	58                   	pop    %eax
 80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5649,13 +5649,13 @@
   struct buf *buf = bread(log.dev, log.start);
 80102cbc:	59                   	pop    %ecx
   log.dev = dev;
-80102cbd:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+80102cbd:	89 1d e4 36 11 80    	mov    %ebx,0x801136e4
   log.size = sb.nlog;
 80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102cc6:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+80102cc6:	a3 d4 36 11 80       	mov    %eax,0x801136d4
   log.size = sb.nlog;
-80102ccb:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+80102ccb:	89 15 d8 36 11 80    	mov    %edx,0x801136d8
   struct buf *buf = bread(log.dev, log.start);
 80102cd1:	5a                   	pop    %edx
 80102cd2:	50                   	push   %eax
@@ -5665,7 +5665,7 @@
 80102cd9:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
 80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
-80102cdf:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
+80102cdf:	89 0d e8 36 11 80    	mov    %ecx,0x801136e8
   for (i = 0; i < log.lh.n; i++) {
 80102ce5:	85 c9                	test   %ecx,%ecx
 80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
@@ -5674,7 +5674,7 @@
 80102cef:	90                   	nop
     log.lh.block[i] = lh->block[i];
 80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
-80102cf4:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
+80102cf4:	89 1c 95 ec 36 11 80 	mov    %ebx,-0x7feec914(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102cfb:	83 c2 01             	add    $0x1,%edx
 80102cfe:	39 d1                	cmp    %edx,%ecx
@@ -5691,7 +5691,7 @@
   install_trans(); // if committed, copy from log to disk
 80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
   log.lh.n = 0;
-80102d10:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102d10:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
 80102d17:	00 00 00 
   write_head(); // clear the log
 80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
@@ -5715,8 +5715,8 @@
 80102d35:	89 e5                	mov    %esp,%ebp
 80102d37:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
+80102d3a:	68 a0 36 11 80       	push   $0x801136a0
+80102d3f:	e8 fc 23 00 00       	call   80105140 <acquire>
 80102d44:	83 c4 10             	add    $0x10,%esp
 80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
 80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5724,17 +5724,17 @@
     if(log.committing){
       sleep(&log, &log.lock);
 80102d50:	83 ec 08             	sub    $0x8,%esp
-80102d53:	68 80 26 11 80       	push   $0x80112680
-80102d58:	68 80 26 11 80       	push   $0x80112680
-80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
+80102d53:	68 a0 36 11 80       	push   $0x801136a0
+80102d58:	68 a0 36 11 80       	push   $0x801136a0
+80102d5d:	e8 be 19 00 00       	call   80104720 <sleep>
 80102d62:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102d65:	a1 e0 36 11 80       	mov    0x801136e0,%eax
 80102d6a:	85 c0                	test   %eax,%eax
 80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d6e:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102d73:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102d6e:	a1 dc 36 11 80       	mov    0x801136dc,%eax
+80102d73:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
 80102d79:	83 c0 01             	add    $0x1,%eax
 80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
 80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
@@ -5747,10 +5747,10 @@
       release(&log.lock);
 80102d87:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+80102d8a:	a3 dc 36 11 80       	mov    %eax,0x801136dc
       release(&log.lock);
-80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 87 18 00 00       	call   80104620 <release>
+80102d8f:	68 a0 36 11 80       	push   $0x801136a0
+80102d94:	e8 67 24 00 00       	call   80105200 <release>
       break;
     }
   }
@@ -5777,16 +5777,16 @@
   int do_commit = 0;
 
   acquire(&log.lock);
-80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
+80102dad:	68 a0 36 11 80       	push   $0x801136a0
+80102db2:	e8 89 23 00 00       	call   80105140 <acquire>
   log.outstanding -= 1;
-80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102db7:	a1 dc 36 11 80       	mov    0x801136dc,%eax
   if(log.committing)
-80102dbc:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
+80102dbc:	8b 35 e0 36 11 80    	mov    0x801136e0,%esi
 80102dc2:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
 80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102dc8:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+80102dc8:	89 1d dc 36 11 80    	mov    %ebx,0x801136dc
   if(log.committing)
 80102dce:	85 f6                	test   %esi,%esi
 80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
@@ -5796,7 +5796,7 @@
 80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-80102dde:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102dde:	c7 05 e0 36 11 80 01 	movl   $0x1,0x801136e0
 80102de5:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
@@ -5805,32 +5805,32 @@
   }
   release(&log.lock);
 80102de8:	83 ec 0c             	sub    $0xc,%esp
-80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 2b 18 00 00       	call   80104620 <release>
+80102deb:	68 a0 36 11 80       	push   $0x801136a0
+80102df0:	e8 0b 24 00 00       	call   80105200 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80102df5:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102df5:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
 80102dfb:	83 c4 10             	add    $0x10,%esp
 80102dfe:	85 c9                	test   %ecx,%ecx
 80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
     acquire(&log.lock);
 80102e02:	83 ec 0c             	sub    $0xc,%esp
-80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
+80102e05:	68 a0 36 11 80       	push   $0x801136a0
+80102e0a:	e8 31 23 00 00       	call   80105140 <acquire>
     wakeup(&log);
-80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102e0f:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
     log.committing = 0;
-80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102e16:	c7 05 e0 36 11 80 00 	movl   $0x0,0x801136e0
 80102e1d:	00 00 00 
     wakeup(&log);
-80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
+80102e20:	e8 bb 1a 00 00       	call   801048e0 <wakeup>
     release(&log.lock);
-80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
+80102e25:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102e2c:	e8 cf 23 00 00       	call   80105200 <release>
 80102e31:	83 c4 10             	add    $0x10,%esp
 }
 80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5841,19 +5841,19 @@
 80102e3b:	c3                   	ret    
 80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e40:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102e40:	a1 d4 36 11 80       	mov    0x801136d4,%eax
 80102e45:	83 ec 08             	sub    $0x8,%esp
 80102e48:	01 d8                	add    %ebx,%eax
 80102e4a:	83 c0 01             	add    $0x1,%eax
 80102e4d:	50                   	push   %eax
-80102e4e:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102e4e:	ff 35 e4 36 11 80    	pushl  0x801136e4
 80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
 80102e59:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
 80102e5b:	58                   	pop    %eax
 80102e5c:	5a                   	pop    %edx
-80102e5d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102e64:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102e5d:	ff 34 9d ec 36 11 80 	pushl  -0x7feec914(,%ebx,4)
+80102e64:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102e6a:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
@@ -5868,7 +5868,7 @@
 80102e7f:	50                   	push   %eax
 80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102e83:	50                   	push   %eax
-80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
+80102e84:	e8 67 24 00 00       	call   801052f0 <memmove>
     bwrite(to);  // write the log
 80102e89:	89 34 24             	mov    %esi,(%esp)
 80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
@@ -5880,7 +5880,7 @@
 80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102ea1:	83 c4 10             	add    $0x10,%esp
-80102ea4:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102ea4:	3b 1d e8 36 11 80    	cmp    0x801136e8,%ebx
 80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
@@ -5888,7 +5888,7 @@
     install_trans(); // Now install writes to home locations
 80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
     log.lh.n = 0;
-80102eb6:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102eb6:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
 80102ebd:	00 00 00 
     write_head();    // Erase the transaction from the log
 80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
@@ -5896,11 +5896,11 @@
 80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
 80102ed0:	83 ec 0c             	sub    $0xc,%esp
-80102ed3:	68 80 26 11 80       	push   $0x80112680
-80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
+80102ed3:	68 a0 36 11 80       	push   $0x801136a0
+80102ed8:	e8 03 1a 00 00       	call   801048e0 <wakeup>
   release(&log.lock);
-80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 37 17 00 00       	call   80104620 <release>
+80102edd:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102ee4:	e8 17 23 00 00       	call   80105200 <release>
 80102ee9:	83 c4 10             	add    $0x10,%esp
 }
 80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5911,7 +5911,7 @@
 80102ef3:	c3                   	ret    
     panic("log.committing");
 80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 84 75 10 80       	push   $0x80107584
+80102ef7:	68 44 83 10 80       	push   $0x80108344
 80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
 80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5932,29 +5932,29 @@
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f1b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f1b:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
 {
 80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
 80102f24:	83 fa 1d             	cmp    $0x1d,%edx
 80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
-80102f2d:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102f2d:	a1 d8 36 11 80       	mov    0x801136d8,%eax
 80102f32:	83 e8 01             	sub    $0x1,%eax
 80102f35:	39 c2                	cmp    %eax,%edx
 80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102f3d:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102f3d:	a1 dc 36 11 80       	mov    0x801136dc,%eax
 80102f42:	85 c0                	test   %eax,%eax
 80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
 80102f4a:	83 ec 0c             	sub    $0xc,%esp
-80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
+80102f4d:	68 a0 36 11 80       	push   $0x801136a0
+80102f52:	e8 e9 21 00 00       	call   80105140 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f57:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
 80102f5d:	83 c4 10             	add    $0x10,%esp
 80102f60:	85 d2                	test   %edx,%edx
 80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
@@ -5969,12 +5969,12 @@
 80102f73:	39 c2                	cmp    %eax,%edx
 80102f75:	74 29                	je     80102fa0 <log_write+0x90>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f77:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
+80102f77:	39 0c 85 ec 36 11 80 	cmp    %ecx,-0x7feec914(,%eax,4)
 80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102f80:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
+80102f80:	89 0c 85 ec 36 11 80 	mov    %ecx,-0x7feec914(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
@@ -5983,31 +5983,31 @@
 }
 80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-80102f8d:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+80102f8d:	c7 45 08 a0 36 11 80 	movl   $0x801136a0,0x8(%ebp)
 }
 80102f94:	c9                   	leave  
   release(&log.lock);
-80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
+80102f95:	e9 66 22 00 00       	jmp    80105200 <release>
 80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
+80102fa0:	89 0c 95 ec 36 11 80 	mov    %ecx,-0x7feec914(,%edx,4)
     log.lh.n++;
 80102fa7:	83 c2 01             	add    $0x1,%edx
-80102faa:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
+80102faa:	89 15 e8 36 11 80    	mov    %edx,0x801136e8
 80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
   log.lh.block[i] = b->blockno;
 80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fb5:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+80102fb5:	a3 ec 36 11 80       	mov    %eax,0x801136ec
   if (i == log.lh.n)
 80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
 80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
     panic("too big a transaction");
 80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 93 75 10 80       	push   $0x80107593
+80102fc1:	68 53 83 10 80       	push   $0x80108353
 80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
 80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 a9 75 10 80       	push   $0x801075a9
+80102fce:	68 69 83 10 80       	push   $0x80108369
 80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
 80102fd8:	66 90                	xchg   %ax,%ax
 80102fda:	66 90                	xchg   %ax,%ax
@@ -6026,18 +6026,18 @@
 80102fe3:	53                   	push   %ebx
 80102fe4:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
+80102fe7:	e8 64 10 00 00       	call   80104050 <cpuid>
 80102fec:	89 c3                	mov    %eax,%ebx
-80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
+80102fee:	e8 5d 10 00 00       	call   80104050 <cpuid>
 80102ff3:	83 ec 04             	sub    $0x4,%esp
 80102ff6:	53                   	push   %ebx
 80102ff7:	50                   	push   %eax
-80102ff8:	68 c4 75 10 80       	push   $0x801075c4
+80102ff8:	68 84 83 10 80       	push   $0x80108384
 80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
+80103002:	e8 19 36 00 00       	call   80106620 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
+80103007:	e8 e4 0f 00 00       	call   80103ff0 <mycpu>
 8010300c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6048,7 +6048,7 @@
 8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
+8010301a:	e8 91 13 00 00       	call   801043b0 <scheduler>
 8010301f:	90                   	nop
 
 80103020 <mpenter>:
@@ -6058,9 +6058,9 @@
 80103025:	89 e5                	mov    %esp,%ebp
 80103027:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
+8010302a:	e8 81 47 00 00       	call   801077b0 <switchkvm>
   seginit();
-8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
+8010302f:	e8 ec 46 00 00       	call   80107720 <seginit>
   lapicinit();
 80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
   mpmain();
@@ -6080,16 +6080,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 80103053:	83 ec 08             	sub    $0x8,%esp
 80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 54 11 80       	push   $0x801154a8
+8010305b:	68 08 63 11 80       	push   $0x80116308
 80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
   kvmalloc();      // kernel page table
-80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
+80103065:	e8 26 4c 00 00       	call   80107c90 <kvmalloc>
   mpinit();        // detect other processors
 8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
   lapicinit();     // interrupt controller
 8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
   seginit();       // segment descriptors
-80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
+80103074:	e8 a7 46 00 00       	call   80107720 <seginit>
   picinit();       // disable pic
 80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6097,11 +6097,11 @@
   consoleinit();   // console hardware
 80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
+80103088:	e8 53 39 00 00       	call   801069e0 <uartinit>
   pinit();         // process table
-8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
+8010308d:	e8 3e 0f 00 00       	call   80103fd0 <pinit>
   tvinit();        // trap vectors
-80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
+80103092:	e8 09 35 00 00       	call   801065a0 <tvinit>
   binit();         // buffer cache
 80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6116,28 +6116,28 @@
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
 801030a6:	83 c4 0c             	add    $0xc,%esp
 801030a9:	68 8a 00 00 00       	push   $0x8a
-801030ae:	68 8c a4 10 80       	push   $0x8010a48c
+801030ae:	68 8c b4 10 80       	push   $0x8010b48c
 801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
+801030b8:	e8 33 22 00 00       	call   801052f0 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030bd:	83 c4 10             	add    $0x10,%esp
-801030c0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030c0:	69 05 50 38 11 80 b0 	imul   $0xb0,0x80113850,%eax
 801030c7:	00 00 00 
-801030ca:	05 80 27 11 80       	add    $0x80112780,%eax
-801030cf:	3d 80 27 11 80       	cmp    $0x80112780,%eax
+801030ca:	05 a0 37 11 80       	add    $0x801137a0,%eax
+801030cf:	3d a0 37 11 80       	cmp    $0x801137a0,%eax
 801030d4:	76 7a                	jbe    80103150 <main+0x110>
-801030d6:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+801030d6:	bb a0 37 11 80       	mov    $0x801137a0,%ebx
 801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
 801030dd:	8d 76 00             	lea    0x0(%esi),%esi
-801030e0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030e0:	69 05 50 38 11 80 b0 	imul   $0xb0,0x80113850,%eax
 801030e7:	00 00 00 
 801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-801030f0:	05 80 27 11 80       	add    $0x80112780,%eax
+801030f0:	05 a0 37 11 80       	add    $0x801137a0,%eax
 801030f5:	39 c3                	cmp    %eax,%ebx
 801030f7:	73 57                	jae    80103150 <main+0x110>
     if(c == mycpu())  // We've started already.
-801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
+801030f9:	e8 f2 0e 00 00       	call   80103ff0 <mycpu>
 801030fe:	39 c3                	cmp    %eax,%ebx
 80103100:	74 de                	je     801030e0 <main+0xa0>
       continue;
@@ -6157,8 +6157,8 @@
 8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
 80103111:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103114:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010311b:	90 10 00 
+80103114:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+8010311b:	a0 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
 8010311e:	05 00 10 00 00       	add    $0x1000,%eax
 80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
@@ -6183,7 +6183,7 @@
 80103158:	68 00 00 40 80       	push   $0x80400000
 8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
   userinit();      // first user process
-80103162:	e8 29 08 00 00       	call   80103990 <userinit>
+80103162:	e8 39 0f 00 00       	call   801040a0 <userinit>
   mpmain();        // finish this processor's setup
 80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
 8010316c:	66 90                	xchg   %ax,%ax
@@ -6223,9 +6223,9 @@
 80103196:	83 ec 04             	sub    $0x4,%esp
 80103199:	8d 7e 10             	lea    0x10(%esi),%edi
 8010319c:	6a 04                	push   $0x4
-8010319e:	68 d8 75 10 80       	push   $0x801075d8
+8010319e:	68 98 83 10 80       	push   $0x80108398
 801031a3:	56                   	push   %esi
-801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
+801031a4:	e8 f7 20 00 00       	call   801052a0 <memcmp>
 801031a9:	83 c4 10             	add    $0x10,%esp
 801031ac:	85 c0                	test   %eax,%eax
 801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
@@ -6311,12 +6311,12 @@
 80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103258:	6a 04                	push   $0x4
-8010325a:	68 dd 75 10 80       	push   $0x801075dd
+8010325a:	68 9d 83 10 80       	push   $0x8010839d
 8010325f:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
+80103263:	e8 38 20 00 00       	call   801052a0 <memcmp>
 80103268:	83 c4 10             	add    $0x10,%esp
 8010326b:	85 c0                	test   %eax,%eax
 8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
@@ -6353,7 +6353,7 @@
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
 801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-801032be:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+801032be:	a3 9c 36 11 80       	mov    %eax,0x8011369c
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
 801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
 801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
@@ -6433,28 +6433,29 @@
       p += sizeof(struct mpioapic);
 8010334c:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-8010334f:	88 0d 60 27 11 80    	mov    %cl,0x80112760
+8010334f:	88 0d 80 37 11 80    	mov    %cl,0x80113780
       continue;
 80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
 80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010335e:	66 90                	xchg   %ax,%ax
       if(ncpu < NCPU) {
-80103360:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
-80103366:	83 f9 07             	cmp    $0x7,%ecx
-80103369:	7f 19                	jg     80103384 <mpinit+0x194>
+80103360:	8b 0d 50 38 11 80    	mov    0x80113850,%ecx
+80103366:	85 c9                	test   %ecx,%ecx
+80103368:	7f 19                	jg     80103383 <mpinit+0x193>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010336b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
-80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+8010336a:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103370:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
-80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+80103374:	83 c1 01             	add    $0x1,%ecx
+80103377:	89 0d 50 38 11 80    	mov    %ecx,0x80113850
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f 80 27 11 80    	mov    %bl,-0x7feed880(%edi)
+8010337d:	88 9f a0 37 11 80    	mov    %bl,-0x7feec860(%edi)
       p += sizeof(struct mpproc);
-80103384:	83 c0 14             	add    $0x14,%eax
+80103383:	83 c0 14             	add    $0x14,%eax
       continue;
-80103387:	e9 54 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
-8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103386:	e9 55 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
+8010338b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010338f:	90                   	nop
   return mpsearch1(0xF0000, 0x10000);
 80103390:	ba 00 00 01 00       	mov    $0x10000,%edx
 80103395:	b8 00 00 0f 00       	mov    $0xf0000,%eax
@@ -6466,11 +6467,11 @@
 801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 e2 75 10 80       	push   $0x801075e2
+801033b3:	68 a2 83 10 80       	push   $0x801083a2
 801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
 801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 fc 75 10 80       	push   $0x801075fc
+801033c0:	68 bc 83 10 80       	push   $0x801083bc
 801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
 801033ca:	66 90                	xchg   %ax,%ax
 801033cc:	66 90                	xchg   %ax,%ax
@@ -6556,9 +6557,9 @@
 8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 80103464:	00 00 00 
   initlock(&p->lock, "pipe");
-80103467:	68 1b 76 10 80       	push   $0x8010761b
+80103467:	68 db 83 10 80       	push   $0x801083db
 8010346c:	50                   	push   %eax
-8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
+8010346d:	e8 4e 1b 00 00       	call   80104fc0 <initlock>
   (*f0)->type = FD_PIPE;
 80103472:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6659,7 +6660,7 @@
   acquire(&p->lock);
 8010350f:	83 ec 0c             	sub    $0xc,%esp
 80103512:	53                   	push   %ebx
-80103513:	e8 48 10 00 00       	call   80104560 <acquire>
+80103513:	e8 28 1c 00 00       	call   80105140 <acquire>
   if(writable){
 80103518:	83 c4 10             	add    $0x10,%esp
 8010351b:	85 f6                	test   %esi,%esi
@@ -6673,7 +6674,7 @@
 8010352f:	00 00 00 
     wakeup(&p->nread);
 80103532:	50                   	push   %eax
-80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
+80103533:	e8 a8 13 00 00       	call   801048e0 <wakeup>
 80103538:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6697,7 +6698,7 @@
 80103556:	5e                   	pop    %esi
 80103557:	5d                   	pop    %ebp
     release(&p->lock);
-80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
+80103558:	e9 a3 1c 00 00       	jmp    80105200 <release>
 8010355d:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
 80103560:	83 ec 0c             	sub    $0xc,%esp
@@ -6707,14 +6708,14 @@
 80103570:	00 00 00 
     wakeup(&p->nwrite);
 80103573:	50                   	push   %eax
-80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
+80103574:	e8 67 13 00 00       	call   801048e0 <wakeup>
 80103579:	83 c4 10             	add    $0x10,%esp
 8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
 8010357e:	66 90                	xchg   %ax,%ax
     release(&p->lock);
 80103580:	83 ec 0c             	sub    $0xc,%esp
 80103583:	53                   	push   %ebx
-80103584:	e8 97 10 00 00       	call   80104620 <release>
+80103584:	e8 77 1c 00 00       	call   80105200 <release>
     kfree((char*)p);
 80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010358c:	83 c4 10             	add    $0x10,%esp
@@ -6745,7 +6746,7 @@
 
   acquire(&p->lock);
 801035b0:	53                   	push   %ebx
-801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
+801035b1:	e8 8a 1b 00 00       	call   80105140 <acquire>
   for(i = 0; i < n; i++){
 801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
 801035b9:	83 c4 10             	add    $0x10,%esp
@@ -6775,20 +6776,20 @@
 801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
 801035f5:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
-801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
+801035f8:	e8 73 0a 00 00       	call   80104070 <myproc>
 801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
 80103600:	85 c9                	test   %ecx,%ecx
 80103602:	75 34                	jne    80103638 <pipewrite+0x98>
       wakeup(&p->nread);
 80103604:	83 ec 0c             	sub    $0xc,%esp
 80103607:	57                   	push   %edi
-80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
+80103608:	e8 d3 12 00 00       	call   801048e0 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010360d:	58                   	pop    %eax
 8010360e:	5a                   	pop    %edx
 8010360f:	53                   	push   %ebx
 80103610:	56                   	push   %esi
-80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
+80103611:	e8 0a 11 00 00       	call   80104720 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6803,7 +6804,7 @@
         release(&p->lock);
 80103638:	83 ec 0c             	sub    $0xc,%esp
 8010363b:	53                   	push   %ebx
-8010363c:	e8 df 0f 00 00       	call   80104620 <release>
+8010363c:	e8 bf 1b 00 00       	call   80105200 <release>
         return -1;
 80103641:	83 c4 10             	add    $0x10,%esp
 80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6836,10 +6837,10 @@
 80103680:	83 ec 0c             	sub    $0xc,%esp
 80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 80103689:	50                   	push   %eax
-8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
+8010368a:	e8 51 12 00 00       	call   801048e0 <wakeup>
   release(&p->lock);
 8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 89 0f 00 00       	call   80104620 <release>
+80103692:	e8 69 1b 00 00       	call   80105200 <release>
   return n;
 80103697:	8b 45 10             	mov    0x10(%ebp),%eax
 8010369a:	83 c4 10             	add    $0x10,%esp
@@ -6865,7 +6866,7 @@
   acquire(&p->lock);
 801036b3:	56                   	push   %esi
 801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
+801036ba:	e8 81 1a 00 00       	call   80105140 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036c5:	83 c4 10             	add    $0x10,%esp
@@ -6874,7 +6875,7 @@
 801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
 801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
-801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
+801036d8:	e8 93 09 00 00       	call   80104070 <myproc>
 801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
 801036e0:	85 c9                	test   %ecx,%ecx
 801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
@@ -6885,7 +6886,7 @@
 801036e8:	83 ec 08             	sub    $0x8,%esp
 801036eb:	56                   	push   %esi
 801036ec:	53                   	push   %ebx
-801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
+801036ed:	e8 2e 10 00 00       	call   80104720 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 801036f8:	83 c4 10             	add    $0x10,%esp
@@ -6924,10 +6925,10 @@
 8010374c:	83 ec 0c             	sub    $0xc,%esp
 8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103755:	50                   	push   %eax
-80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
+80103756:	e8 85 11 00 00       	call   801048e0 <wakeup>
   release(&p->lock);
 8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
+8010375e:	e8 9d 1a 00 00       	call   80105200 <release>
   return i;
 80103763:	83 c4 10             	add    $0x10,%esp
 }
@@ -6944,7 +6945,7 @@
 80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103778:	56                   	push   %esi
-80103779:	e8 a2 0e 00 00       	call   80104620 <release>
+80103779:	e8 82 1a 00 00       	call   80105200 <release>
       return -1;
 8010377e:	83 c4 10             	add    $0x10,%esp
 }
@@ -6975,8611 +6976,10099 @@
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103794:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103794:	bb b4 39 11 80       	mov    $0x801139b4,%ebx
 {
 80103799:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
+8010379c:	68 80 39 11 80       	push   $0x80113980
+801037a1:	e8 9a 19 00 00       	call   80105140 <acquire>
 801037a6:	83 c4 10             	add    $0x10,%esp
-801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
+801037a9:	eb 17                	jmp    801037c2 <allocproc+0x32>
 801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801037af:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 c3 7c             	add    $0x7c,%ebx
-801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-801037b9:	74 75                	je     80103830 <allocproc+0xa0>
+801037b0:	81 c3 84 00 00 00    	add    $0x84,%ebx
+801037b6:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+801037bc:	0f 84 8e 00 00 00    	je     80103850 <allocproc+0xc0>
     if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037be:	85 c0                	test   %eax,%eax
-801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
+801037c2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037c5:	85 c0                	test   %eax,%eax
+801037c7:	75 e7                	jne    801037b0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+801037c9:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+
+  // Initialise number of context switches with 0
+  p->numcs = 0;
+  p->burstTime = 0;
 
   release(&ptable.lock);
-801037c7:	83 ec 0c             	sub    $0xc,%esp
+801037ce:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037d1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->numcs = 0;
+801037d8:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
   p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037d4:	8d 50 01             	lea    0x1(%eax),%edx
+801037df:	89 43 10             	mov    %eax,0x10(%ebx)
+801037e2:	8d 50 01             	lea    0x1(%eax),%edx
+  p->burstTime = 0;
+801037e5:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801037ec:	00 00 00 
   release(&ptable.lock);
-801037d7:	68 20 2d 11 80       	push   $0x80112d20
+801037ef:	68 80 39 11 80       	push   $0x80113980
   p->pid = nextpid++;
-801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+801037f4:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
   release(&ptable.lock);
-801037e2:	e8 39 0e 00 00       	call   80104620 <release>
+801037fa:	e8 01 1a 00 00       	call   80105200 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
-801037ec:	83 c4 10             	add    $0x10,%esp
-801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
-801037f2:	85 c0                	test   %eax,%eax
-801037f4:	74 53                	je     80103849 <allocproc+0xb9>
+801037ff:	e8 2c ee ff ff       	call   80102630 <kalloc>
+80103804:	83 c4 10             	add    $0x10,%esp
+80103807:	89 43 08             	mov    %eax,0x8(%ebx)
+8010380a:	85 c0                	test   %eax,%eax
+8010380c:	74 5b                	je     80103869 <allocproc+0xd9>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+8010380e:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-801037fc:	83 ec 04             	sub    $0x4,%esp
+80103814:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
+80103817:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
+8010381c:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
+8010381f:	c7 40 14 8f 65 10 80 	movl   $0x8010658f,0x14(%eax)
   p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+80103826:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103811:	6a 14                	push   $0x14
-80103813:	6a 00                	push   $0x0
-80103815:	50                   	push   %eax
-80103816:	e8 55 0e 00 00       	call   80104670 <memset>
+80103829:	6a 14                	push   $0x14
+8010382b:	6a 00                	push   $0x0
+8010382d:	50                   	push   %eax
+8010382e:	e8 1d 1a 00 00       	call   80105250 <memset>
   p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80103833:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010381e:	83 c4 10             	add    $0x10,%esp
+80103836:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
+80103839:	c7 40 10 80 38 10 80 	movl   $0x80103880,0x10(%eax)
 }
-80103828:	89 d8                	mov    %ebx,%eax
-8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010382d:	c9                   	leave  
-8010382e:	c3                   	ret    
-8010382f:	90                   	nop
+80103840:	89 d8                	mov    %ebx,%eax
+80103842:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103845:	c9                   	leave  
+80103846:	c3                   	ret    
+80103847:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010384e:	66 90                	xchg   %ax,%ax
   release(&ptable.lock);
-80103830:	83 ec 0c             	sub    $0xc,%esp
+80103850:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103833:	31 db                	xor    %ebx,%ebx
+80103853:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
+80103855:	68 80 39 11 80       	push   $0x80113980
+8010385a:	e8 a1 19 00 00       	call   80105200 <release>
 }
-8010383f:	89 d8                	mov    %ebx,%eax
+8010385f:	89 d8                	mov    %ebx,%eax
   return 0;
-80103841:	83 c4 10             	add    $0x10,%esp
+80103861:	83 c4 10             	add    $0x10,%esp
 }
-80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103847:	c9                   	leave  
-80103848:	c3                   	ret    
+80103864:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103867:	c9                   	leave  
+80103868:	c3                   	ret    
     p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103869:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103850:	31 db                	xor    %ebx,%ebx
+80103870:	31 db                	xor    %ebx,%ebx
 }
-80103852:	89 d8                	mov    %ebx,%eax
-80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103857:	c9                   	leave  
-80103858:	c3                   	ret    
-80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103872:	89 d8                	mov    %ebx,%eax
+80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103877:	c9                   	leave  
+80103878:	c3                   	ret    
+80103879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80103860 <forkret>:
+80103880 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-80103860:	f3 0f 1e fb          	endbr32 
-80103864:	55                   	push   %ebp
-80103865:	89 e5                	mov    %esp,%ebp
-80103867:	83 ec 14             	sub    $0x14,%esp
+80103880:	f3 0f 1e fb          	endbr32 
+80103884:	55                   	push   %ebp
+80103885:	89 e5                	mov    %esp,%ebp
+80103887:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
+8010388a:	68 80 39 11 80       	push   $0x80113980
+8010388f:	e8 6c 19 00 00       	call   80105200 <release>
 
   if (first) {
-80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103879:	83 c4 10             	add    $0x10,%esp
-8010387c:	85 c0                	test   %eax,%eax
-8010387e:	75 08                	jne    80103888 <forkret+0x28>
+80103894:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+80103899:	83 c4 10             	add    $0x10,%esp
+8010389c:	85 c0                	test   %eax,%eax
+8010389e:	75 08                	jne    801038a8 <forkret+0x28>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-80103880:	c9                   	leave  
-80103881:	c3                   	ret    
-80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801038a0:	c9                   	leave  
+801038a1:	c3                   	ret    
+801038a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     first = 0;
-80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-8010388f:	00 00 00 
+801038a8:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038af:	00 00 00 
     iinit(ROOTDEV);
-80103892:	83 ec 0c             	sub    $0xc,%esp
-80103895:	6a 01                	push   $0x1
-80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
+801038b2:	83 ec 0c             	sub    $0xc,%esp
+801038b5:	6a 01                	push   $0x1
+801038b7:	e8 84 dc ff ff       	call   80101540 <iinit>
     initlog(ROOTDEV);
-8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
+801038bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038c3:	e8 c8 f3 ff ff       	call   80102c90 <initlog>
 }
-801038a8:	83 c4 10             	add    $0x10,%esp
-801038ab:	c9                   	leave  
-801038ac:	c3                   	ret    
-801038ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801038b0 <pinit>:
-{
-801038b0:	f3 0f 1e fb          	endbr32 
-801038b4:	55                   	push   %ebp
-801038b5:	89 e5                	mov    %esp,%ebp
-801038b7:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ptable.lock, "ptable");
-801038ba:	68 20 76 10 80       	push   $0x80107620
-801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
-}
-801038c9:	83 c4 10             	add    $0x10,%esp
-801038cc:	c9                   	leave  
-801038cd:	c3                   	ret    
-801038ce:	66 90                	xchg   %ax,%ax
+801038c8:	83 c4 10             	add    $0x10,%esp
+801038cb:	c9                   	leave  
+801038cc:	c3                   	ret    
+801038cd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801038d0 <mycpu>:
-{
+801038d0 <enqueue>:
+void enqueue(struct proc* np){
 801038d0:	f3 0f 1e fb          	endbr32 
-801038d4:	55                   	push   %ebp
-801038d5:	89 e5                	mov    %esp,%ebp
-801038d7:	56                   	push   %esi
-801038d8:	53                   	push   %ebx
+  if(rqueue.size == NPROC) return; 
+801038d4:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+801038da:	83 fa 40             	cmp    $0x40,%edx
+801038dd:	74 39                	je     80103918 <enqueue+0x48>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801038df:	a1 64 39 11 80       	mov    0x80113964,%eax
+void enqueue(struct proc* np){
+801038e4:	55                   	push   %ebp
+  rqueue.size = rqueue.size + 1;  
+801038e5:	83 c2 01             	add    $0x1,%edx
+801038e8:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801038ee:	83 c0 01             	add    $0x1,%eax
+801038f1:	89 c1                	mov    %eax,%ecx
+void enqueue(struct proc* np){
+801038f3:	89 e5                	mov    %esp,%ebp
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801038f5:	c1 f9 1f             	sar    $0x1f,%ecx
+801038f8:	c1 e9 1a             	shr    $0x1a,%ecx
+801038fb:	01 c8                	add    %ecx,%eax
+801038fd:	83 e0 3f             	and    $0x3f,%eax
+80103900:	29 c8                	sub    %ecx,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103902:	8b 4d 08             	mov    0x8(%ebp),%ecx
+}
+80103905:	5d                   	pop    %ebp
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103906:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+8010390b:	89 0c 85 60 38 11 80 	mov    %ecx,-0x7feec7a0(,%eax,4)
+}
+80103912:	c3                   	ret    
+80103913:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103917:	90                   	nop
+80103918:	c3                   	ret    
+80103919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103920 <dequeue>:
+struct proc* dequeue(){
+80103920:	f3 0f 1e fb          	endbr32 
+  if (rqueue.size == 0) return 0; 
+80103924:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+8010392a:	85 d2                	test   %edx,%edx
+8010392c:	74 52                	je     80103980 <dequeue+0x60>
+  struct proc* next = rqueue.array[rqueue.front]; 
+8010392e:	a1 60 39 11 80       	mov    0x80113960,%eax
+struct proc* dequeue(){
+80103933:	55                   	push   %ebp
+  struct proc* next = rqueue.array[rqueue.front]; 
+80103934:	8b 0c 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%ecx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+8010393b:	83 c0 01             	add    $0x1,%eax
+struct proc* dequeue(){
+8010393e:	89 e5                	mov    %esp,%ebp
+80103940:	53                   	push   %ebx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103941:	89 c3                	mov    %eax,%ebx
+80103943:	c1 fb 1f             	sar    $0x1f,%ebx
+80103946:	c1 eb 1a             	shr    $0x1a,%ebx
+80103949:	01 d8                	add    %ebx,%eax
+8010394b:	83 e0 3f             	and    $0x3f,%eax
+8010394e:	29 d8                	sub    %ebx,%eax
+  rqueue.size = rqueue.size - 1; 
+80103950:	83 ea 01             	sub    $0x1,%edx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103953:	a3 60 39 11 80       	mov    %eax,0x80113960
+  rqueue.size = rqueue.size - 1; 
+80103958:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  if(rqueue.size == 0){
+8010395e:	75 14                	jne    80103974 <dequeue+0x54>
+    rqueue.front = 0;
+80103960:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+80103967:	00 00 00 
+    rqueue.rear = NPROC - 1;
+8010396a:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80103971:	00 00 00 
+}
+80103974:	89 c8                	mov    %ecx,%eax
+80103976:	5b                   	pop    %ebx
+80103977:	5d                   	pop    %ebp
+80103978:	c3                   	ret    
+80103979:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if (rqueue.size == 0) return 0; 
+80103980:	31 c9                	xor    %ecx,%ecx
+}
+80103982:	89 c8                	mov    %ecx,%eax
+80103984:	c3                   	ret    
+80103985:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010398c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103990 <insert_rqueue>:
+void insert_rqueue(struct proc* np){
+80103990:	f3 0f 1e fb          	endbr32 
+80103994:	55                   	push   %ebp
+80103995:	89 e5                	mov    %esp,%ebp
+80103997:	57                   	push   %edi
+80103998:	56                   	push   %esi
+80103999:	53                   	push   %ebx
+8010399a:	83 ec 0c             	sub    $0xc,%esp
+  const int size = rqueue.size;
+8010399d:	8b 3d 68 39 11 80    	mov    0x80113968,%edi
+801039a3:	89 7d ec             	mov    %edi,-0x14(%ebp)
+  if(size == 0 || rqueue.array[rqueue.front]->burstTime == 0){
+801039a6:	85 ff                	test   %edi,%edi
+801039a8:	0f 84 c2 01 00 00    	je     80103b70 <insert_rqueue+0x1e0>
+801039ae:	a1 60 39 11 80       	mov    0x80113960,%eax
+801039b3:	8b 34 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%esi
+801039ba:	8b 96 80 00 00 00    	mov    0x80(%esi),%edx
+801039c0:	85 d2                	test   %edx,%edx
+801039c2:	0f 84 98 01 00 00    	je     80103b60 <insert_rqueue+0x1d0>
+801039c8:	89 fb                	mov    %edi,%ebx
+  for(int i = 0; i < size; ++i){
+801039ca:	89 f9                	mov    %edi,%ecx
+  struct proc* min_proc = 0;
+801039cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+  for(int i = 0; i < size; ++i){
+801039d3:	31 ff                	xor    %edi,%edi
+801039d5:	85 db                	test   %ebx,%ebx
+801039d7:	0f 8e 89 01 00 00    	jle    80103b66 <insert_rqueue+0x1d6>
+801039dd:	89 7d f0             	mov    %edi,-0x10(%ebp)
+801039e0:	31 ff                	xor    %edi,%edi
+801039e2:	eb 37                	jmp    80103a1b <insert_rqueue+0x8b>
+801039e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(min_proc == 0 || min_proc->burstTime >= cur->burstTime){
+801039e8:	85 ff                	test   %edi,%edi
+801039ea:	0f 84 c8 01 00 00    	je     80103bb8 <insert_rqueue+0x228>
+801039f0:	8b 9e 80 00 00 00    	mov    0x80(%esi),%ebx
+801039f6:	39 9f 80 00 00 00    	cmp    %ebx,0x80(%edi)
+801039fc:	0f 4d fe             	cmovge %esi,%edi
+  if(rqueue.size == NPROC) return; 
+801039ff:	83 f9 40             	cmp    $0x40,%ecx
+80103a02:	75 62                	jne    80103a66 <insert_rqueue+0xd6>
+  for(int i = 0; i < size; ++i){
+80103a04:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+80103a08:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+80103a0b:	39 5d ec             	cmp    %ebx,-0x14(%ebp)
+80103a0e:	0f 84 90 00 00 00    	je     80103aa4 <insert_rqueue+0x114>
+80103a14:	8b 34 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%esi
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103a1b:	83 c0 01             	add    $0x1,%eax
+80103a1e:	99                   	cltd   
+80103a1f:	c1 ea 1a             	shr    $0x1a,%edx
+80103a22:	01 d0                	add    %edx,%eax
+80103a24:	83 e0 3f             	and    $0x3f,%eax
+80103a27:	29 d0                	sub    %edx,%eax
+  rqueue.size = rqueue.size - 1; 
+80103a29:	83 e9 01             	sub    $0x1,%ecx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103a2c:	a3 60 39 11 80       	mov    %eax,0x80113960
+  rqueue.size = rqueue.size - 1; 
+80103a31:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+  if(rqueue.size == 0){
+80103a37:	75 af                	jne    801039e8 <insert_rqueue+0x58>
+    rqueue.front = 0;
+80103a39:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+80103a40:	00 00 00 
+    rqueue.rear = NPROC - 1;
+80103a43:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80103a4a:	00 00 00 
+    if(min_proc == 0 || min_proc->burstTime >= cur->burstTime){
+80103a4d:	85 ff                	test   %edi,%edi
+80103a4f:	0f 84 53 01 00 00    	je     80103ba8 <insert_rqueue+0x218>
+80103a55:	8b 9e 80 00 00 00    	mov    0x80(%esi),%ebx
+80103a5b:	31 c0                	xor    %eax,%eax
+80103a5d:	39 9f 80 00 00 00    	cmp    %ebx,0x80(%edi)
+80103a63:	0f 4d fe             	cmovge %esi,%edi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103a66:	8b 1d 64 39 11 80    	mov    0x80113964,%ebx
+  rqueue.size = rqueue.size + 1;  
+80103a6c:	83 c1 01             	add    $0x1,%ecx
+  for(int i = 0; i < size; ++i){
+80103a6f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  rqueue.size = rqueue.size + 1;  
+80103a73:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103a79:	8d 53 01             	lea    0x1(%ebx),%edx
+80103a7c:	89 d3                	mov    %edx,%ebx
+80103a7e:	c1 fb 1f             	sar    $0x1f,%ebx
+80103a81:	c1 eb 1a             	shr    $0x1a,%ebx
+80103a84:	01 da                	add    %ebx,%edx
+80103a86:	83 e2 3f             	and    $0x3f,%edx
+80103a89:	29 da                	sub    %ebx,%edx
+  for(int i = 0; i < size; ++i){
+80103a8b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103a8e:	89 15 64 39 11 80    	mov    %edx,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103a94:	89 34 95 60 38 11 80 	mov    %esi,-0x7feec7a0(,%edx,4)
+  for(int i = 0; i < size; ++i){
+80103a9b:	39 5d ec             	cmp    %ebx,-0x14(%ebp)
+80103a9e:	0f 85 70 ff ff ff    	jne    80103a14 <insert_rqueue+0x84>
+80103aa4:	8b 15 64 39 11 80    	mov    0x80113964,%edx
+80103aaa:	89 7d e8             	mov    %edi,-0x18(%ebp)
+80103aad:	31 f6                	xor    %esi,%esi
+80103aaf:	31 ff                	xor    %edi,%edi
+80103ab1:	89 55 f0             	mov    %edx,-0x10(%ebp)
+80103ab4:	eb 59                	jmp    80103b0f <insert_rqueue+0x17f>
+80103ab6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103abd:	8d 76 00             	lea    0x0(%esi),%esi
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103ac0:	83 c0 01             	add    $0x1,%eax
+80103ac3:	99                   	cltd   
+80103ac4:	c1 ea 1a             	shr    $0x1a,%edx
+80103ac7:	01 d0                	add    %edx,%eax
+80103ac9:	83 e0 3f             	and    $0x3f,%eax
+80103acc:	29 d0                	sub    %edx,%eax
+    if(cur == min_proc){
+80103ace:	3b 5d e8             	cmp    -0x18(%ebp),%ebx
+80103ad1:	0f 84 e9 00 00 00    	je     80103bc0 <insert_rqueue+0x230>
+  if(rqueue.size == NPROC) return; 
+80103ad7:	83 f9 40             	cmp    $0x40,%ecx
+80103ada:	74 27                	je     80103b03 <insert_rqueue+0x173>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103adc:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  rqueue.size = rqueue.size + 1;  
+80103adf:	83 c1 01             	add    $0x1,%ecx
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103ae2:	83 c2 01             	add    $0x1,%edx
+80103ae5:	89 d6                	mov    %edx,%esi
+80103ae7:	c1 fe 1f             	sar    $0x1f,%esi
+80103aea:	c1 ee 1a             	shr    $0x1a,%esi
+80103aed:	01 f2                	add    %esi,%edx
+80103aef:	83 e2 3f             	and    $0x3f,%edx
+80103af2:	29 f2                	sub    %esi,%edx
+  rqueue.size = rqueue.size + 1;  
+80103af4:	be 01 00 00 00       	mov    $0x1,%esi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103af9:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  rqueue.array[rqueue.rear] = np; 
+80103afc:	89 1c 95 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%edx,4)
+  for(int i = 0; i < size; ++i){
+80103b03:	83 c7 01             	add    $0x1,%edi
+80103b06:	39 7d ec             	cmp    %edi,-0x14(%ebp)
+80103b09:	0f 84 c9 00 00 00    	je     80103bd8 <insert_rqueue+0x248>
+  struct proc* next = rqueue.array[rqueue.front]; 
+80103b0f:	8b 1c 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%ebx
+  if(rqueue.size == 0){
+80103b16:	83 e9 01             	sub    $0x1,%ecx
+80103b19:	75 a5                	jne    80103ac0 <insert_rqueue+0x130>
+    if(cur == min_proc){
+80103b1b:	31 c0                	xor    %eax,%eax
+80103b1d:	3b 5d e8             	cmp    -0x18(%ebp),%ebx
+80103b20:	c7 45 f0 3f 00 00 00 	movl   $0x3f,-0x10(%ebp)
+80103b27:	75 b3                	jne    80103adc <insert_rqueue+0x14c>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b29:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  rqueue.array[rqueue.rear] = np; 
+80103b2c:	8b 75 08             	mov    0x8(%ebp),%esi
+  rqueue.size = rqueue.size + 1;  
+80103b2f:	83 c1 01             	add    $0x1,%ecx
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b32:	83 c2 01             	add    $0x1,%edx
+80103b35:	89 d3                	mov    %edx,%ebx
+80103b37:	c1 fb 1f             	sar    $0x1f,%ebx
+80103b3a:	c1 eb 1a             	shr    $0x1a,%ebx
+80103b3d:	01 da                	add    %ebx,%edx
+80103b3f:	83 e2 3f             	and    $0x3f,%edx
+80103b42:	29 da                	sub    %ebx,%edx
+  rqueue.size = rqueue.size + 1;  
+80103b44:	8b 5d e8             	mov    -0x18(%ebp),%ebx
+  rqueue.array[rqueue.rear] = np; 
+80103b47:	89 34 95 60 38 11 80 	mov    %esi,-0x7feec7a0(,%edx,4)
+  rqueue.size = rqueue.size + 1;  
+80103b4e:	be 01 00 00 00       	mov    $0x1,%esi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b53:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  rqueue.size = rqueue.size + 1;  
+80103b56:	e9 7c ff ff ff       	jmp    80103ad7 <insert_rqueue+0x147>
+80103b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b5f:	90                   	nop
+  if(rqueue.size == NPROC) return; 
+80103b60:	83 7d ec 40          	cmpl   $0x40,-0x14(%ebp)
+80103b64:	75 0a                	jne    80103b70 <insert_rqueue+0x1e0>
+}
+80103b66:	83 c4 0c             	add    $0xc,%esp
+80103b69:	5b                   	pop    %ebx
+80103b6a:	5e                   	pop    %esi
+80103b6b:	5f                   	pop    %edi
+80103b6c:	5d                   	pop    %ebp
+80103b6d:	c3                   	ret    
+80103b6e:	66 90                	xchg   %ax,%ax
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b70:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103b75:	8b 7d 08             	mov    0x8(%ebp),%edi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b78:	83 c0 01             	add    $0x1,%eax
+80103b7b:	99                   	cltd   
+80103b7c:	c1 ea 1a             	shr    $0x1a,%edx
+80103b7f:	01 d0                	add    %edx,%eax
+80103b81:	83 e0 3f             	and    $0x3f,%eax
+80103b84:	29 d0                	sub    %edx,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103b86:	89 3c 85 60 38 11 80 	mov    %edi,-0x7feec7a0(,%eax,4)
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103b8d:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.size = rqueue.size + 1;  
+80103b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103b95:	83 c0 01             	add    $0x1,%eax
+80103b98:	a3 68 39 11 80       	mov    %eax,0x80113968
+}
+80103b9d:	83 c4 0c             	add    $0xc,%esp
+80103ba0:	5b                   	pop    %ebx
+80103ba1:	5e                   	pop    %esi
+80103ba2:	5f                   	pop    %edi
+80103ba3:	5d                   	pop    %ebp
+80103ba4:	c3                   	ret    
+80103ba5:	8d 76 00             	lea    0x0(%esi),%esi
+    if(min_proc == 0 || min_proc->burstTime >= cur->burstTime){
+80103ba8:	31 c0                	xor    %eax,%eax
+80103baa:	89 f7                	mov    %esi,%edi
+80103bac:	e9 b5 fe ff ff       	jmp    80103a66 <insert_rqueue+0xd6>
+80103bb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bb8:	89 f7                	mov    %esi,%edi
+80103bba:	e9 40 fe ff ff       	jmp    801039ff <insert_rqueue+0x6f>
+80103bbf:	90                   	nop
+  if(rqueue.size == NPROC) return; 
+80103bc0:	83 f9 40             	cmp    $0x40,%ecx
+80103bc3:	0f 85 60 ff ff ff    	jne    80103b29 <insert_rqueue+0x199>
+  for(int i = 0; i < size; ++i){
+80103bc9:	83 c7 01             	add    $0x1,%edi
+80103bcc:	39 7d ec             	cmp    %edi,-0x14(%ebp)
+80103bcf:	0f 85 3a ff ff ff    	jne    80103b0f <insert_rqueue+0x17f>
+80103bd5:	8d 76 00             	lea    0x0(%esi),%esi
+80103bd8:	a3 60 39 11 80       	mov    %eax,0x80113960
+80103bdd:	89 f0                	mov    %esi,%eax
+80103bdf:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80103be2:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+80103be8:	84 c0                	test   %al,%al
+80103bea:	0f 84 76 ff ff ff    	je     80103b66 <insert_rqueue+0x1d6>
+80103bf0:	89 15 64 39 11 80    	mov    %edx,0x80113964
+}
+80103bf6:	83 c4 0c             	add    $0xc,%esp
+80103bf9:	5b                   	pop    %ebx
+80103bfa:	5e                   	pop    %esi
+80103bfb:	5f                   	pop    %edi
+80103bfc:	5d                   	pop    %ebp
+80103bfd:	c3                   	ret    
+80103bfe:	66 90                	xchg   %ax,%ax
+
+80103c00 <insert_rqueue_sorted>:
+void insert_rqueue_sorted(struct proc* cur){
+80103c00:	f3 0f 1e fb          	endbr32 
+80103c04:	55                   	push   %ebp
+80103c05:	89 e5                	mov    %esp,%ebp
+80103c07:	57                   	push   %edi
+80103c08:	56                   	push   %esi
+80103c09:	53                   	push   %ebx
+80103c0a:	83 ec 0c             	sub    $0xc,%esp
+  struct proc* first_proc = rqueue.array[rqueue.front];
+80103c0d:	a1 60 39 11 80       	mov    0x80113960,%eax
+  const int size = rqueue.size;
+80103c12:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+  struct proc* first_proc = rqueue.array[rqueue.front];
+80103c18:	8b 34 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%esi
+  const int size = rqueue.size;
+80103c1f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  struct proc* first_proc = rqueue.array[rqueue.front];
+80103c22:	89 75 ec             	mov    %esi,-0x14(%ebp)
+  for(int i = 0; i < size; ++i){
+80103c25:	8b 8e 80 00 00 00    	mov    0x80(%esi),%ecx
+80103c2b:	85 d2                	test   %edx,%edx
+80103c2d:	0f 8e dd 02 00 00    	jle    80103f10 <insert_rqueue_sorted+0x310>
+80103c33:	31 db                	xor    %ebx,%ebx
+80103c35:	eb 56                	jmp    80103c8d <insert_rqueue_sorted+0x8d>
+80103c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c3e:	66 90                	xchg   %ax,%ax
+  if(rqueue.size == NPROC) return; 
+80103c40:	83 f9 40             	cmp    $0x40,%ecx
+80103c43:	0f 84 87 00 00 00    	je     80103cd0 <insert_rqueue_sorted+0xd0>
+80103c49:	8b 3d 64 39 11 80    	mov    0x80113964,%edi
+80103c4f:	8d 4f 01             	lea    0x1(%edi),%ecx
+80103c52:	89 cf                	mov    %ecx,%edi
+80103c54:	c1 ff 1f             	sar    $0x1f,%edi
+80103c57:	c1 ef 1a             	shr    $0x1a,%edi
+80103c5a:	01 f9                	add    %edi,%ecx
+80103c5c:	83 e1 3f             	and    $0x3f,%ecx
+80103c5f:	29 f9                	sub    %edi,%ecx
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103c61:	89 0d 64 39 11 80    	mov    %ecx,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103c67:	89 34 8d 60 38 11 80 	mov    %esi,-0x7feec7a0(,%ecx,4)
+  rqueue.size = rqueue.size + 1;  
+80103c6e:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  for(int i = 0; i < size; ++i){
+80103c74:	8b 34 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%esi
+80103c7b:	83 c3 01             	add    $0x1,%ebx
+80103c7e:	8b 8e 80 00 00 00    	mov    0x80(%esi),%ecx
+80103c84:	39 5d f0             	cmp    %ebx,-0x10(%ebp)
+80103c87:	0f 84 13 01 00 00    	je     80103da0 <insert_rqueue_sorted+0x1a0>
+    if(rqueue.array[rqueue.front]->burstTime > 0) break;
+80103c8d:	85 c9                	test   %ecx,%ecx
+80103c8f:	7f 4f                	jg     80103ce0 <insert_rqueue_sorted+0xe0>
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103c91:	83 c0 01             	add    $0x1,%eax
+80103c94:	89 c1                	mov    %eax,%ecx
+80103c96:	c1 f9 1f             	sar    $0x1f,%ecx
+80103c99:	c1 e9 1a             	shr    $0x1a,%ecx
+80103c9c:	01 c8                	add    %ecx,%eax
+80103c9e:	83 e0 3f             	and    $0x3f,%eax
+80103ca1:	29 c8                	sub    %ecx,%eax
+  rqueue.size = rqueue.size - 1; 
+80103ca3:	8d 4a ff             	lea    -0x1(%edx),%ecx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103ca6:	a3 60 39 11 80       	mov    %eax,0x80113960
+  rqueue.size = rqueue.size - 1; 
+80103cab:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+  if(rqueue.size == 0){
+80103cb1:	85 c9                	test   %ecx,%ecx
+80103cb3:	75 8b                	jne    80103c40 <insert_rqueue_sorted+0x40>
+    rqueue.front = 0;
+80103cb5:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+80103cbc:	00 00 00 
+80103cbf:	31 c0                	xor    %eax,%eax
+80103cc1:	ba 01 00 00 00       	mov    $0x1,%edx
+80103cc6:	eb 99                	jmp    80103c61 <insert_rqueue_sorted+0x61>
+80103cc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ccf:	90                   	nop
+80103cd0:	ba 40 00 00 00       	mov    $0x40,%edx
+80103cd5:	eb 9d                	jmp    80103c74 <insert_rqueue_sorted+0x74>
+80103cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103cde:	66 90                	xchg   %ax,%ax
+  if(rqueue.array[rqueue.front]->burstTime == 0){
+80103ce0:	31 f6                	xor    %esi,%esi
+80103ce2:	8d 4a ff             	lea    -0x1(%edx),%ecx
+80103ce5:	eb 3e                	jmp    80103d25 <insert_rqueue_sorted+0x125>
+80103ce7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103cee:	66 90                	xchg   %ax,%ax
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103cf0:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.size = rqueue.size + 1;  
+80103cf5:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  for(int i = 0; i < size; ++i){
+80103cfb:	83 c6 01             	add    $0x1,%esi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103cfe:	83 c0 01             	add    $0x1,%eax
+80103d01:	89 c7                	mov    %eax,%edi
+80103d03:	c1 ff 1f             	sar    $0x1f,%edi
+80103d06:	c1 ef 1a             	shr    $0x1a,%edi
+80103d09:	01 f8                	add    %edi,%eax
+80103d0b:	83 e0 3f             	and    $0x3f,%eax
+80103d0e:	29 f8                	sub    %edi,%eax
+80103d10:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103d15:	89 1c 85 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%eax,4)
+  for(int i = 0; i < size; ++i){
+80103d1c:	39 75 f0             	cmp    %esi,-0x10(%ebp)
+80103d1f:	0f 84 d3 01 00 00    	je     80103ef8 <insert_rqueue_sorted+0x2f8>
+  struct proc* next = rqueue.array[rqueue.front]; 
+80103d25:	a1 60 39 11 80       	mov    0x80113960,%eax
+  rqueue.size = rqueue.size - 1; 
+80103d2a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+80103d2d:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+  struct proc* next = rqueue.array[rqueue.front]; 
+80103d33:	8b 1c 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%ebx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103d3a:	83 c0 01             	add    $0x1,%eax
+80103d3d:	89 c7                	mov    %eax,%edi
+80103d3f:	c1 ff 1f             	sar    $0x1f,%edi
+80103d42:	c1 ef 1a             	shr    $0x1a,%edi
+80103d45:	01 f8                	add    %edi,%eax
+80103d47:	83 e0 3f             	and    $0x3f,%eax
+80103d4a:	29 f8                	sub    %edi,%eax
+80103d4c:	a3 60 39 11 80       	mov    %eax,0x80113960
+  if(rqueue.size == 0){
+80103d51:	85 c9                	test   %ecx,%ecx
+80103d53:	75 14                	jne    80103d69 <insert_rqueue_sorted+0x169>
+    rqueue.front = 0;
+80103d55:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+80103d5c:	00 00 00 
+    rqueue.rear = NPROC - 1;
+80103d5f:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80103d66:	00 00 00 
+    if(p->burstTime == 0 || p->burstTime > cur->burstTime){
+80103d69:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
+80103d6f:	85 c0                	test   %eax,%eax
+80103d71:	74 75                	je     80103de8 <insert_rqueue_sorted+0x1e8>
+80103d73:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103d76:	3b 87 80 00 00 00    	cmp    0x80(%edi),%eax
+80103d7c:	7f 6a                	jg     80103de8 <insert_rqueue_sorted+0x1e8>
+  if(rqueue.size == NPROC) return; 
+80103d7e:	83 f9 40             	cmp    $0x40,%ecx
+80103d81:	0f 85 69 ff ff ff    	jne    80103cf0 <insert_rqueue_sorted+0xf0>
+  for(int i = 0; i < size; ++i){
+80103d87:	83 c6 01             	add    $0x1,%esi
+80103d8a:	39 75 f0             	cmp    %esi,-0x10(%ebp)
+80103d8d:	74 4d                	je     80103ddc <insert_rqueue_sorted+0x1dc>
+  rqueue.size = rqueue.size - 1; 
+80103d8f:	ba 40 00 00 00       	mov    $0x40,%edx
+80103d94:	b9 3f 00 00 00       	mov    $0x3f,%ecx
+80103d99:	eb 8a                	jmp    80103d25 <insert_rqueue_sorted+0x125>
+80103d9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d9f:	90                   	nop
+  if(rqueue.array[rqueue.front]->burstTime == 0){
+80103da0:	85 c9                	test   %ecx,%ecx
+80103da2:	0f 85 38 ff ff ff    	jne    80103ce0 <insert_rqueue_sorted+0xe0>
+  if(rqueue.size == NPROC) return; 
+80103da8:	83 fa 40             	cmp    $0x40,%edx
+80103dab:	74 2f                	je     80103ddc <insert_rqueue_sorted+0x1dc>
+80103dad:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103db2:	83 c0 01             	add    $0x1,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103db5:	8b 75 08             	mov    0x8(%ebp),%esi
+  rqueue.size = rqueue.size + 1;  
+80103db8:	83 c2 01             	add    $0x1,%edx
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103dbb:	89 c1                	mov    %eax,%ecx
+  rqueue.size = rqueue.size + 1;  
+80103dbd:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103dc3:	c1 f9 1f             	sar    $0x1f,%ecx
+80103dc6:	c1 e9 1a             	shr    $0x1a,%ecx
+80103dc9:	01 c8                	add    %ecx,%eax
+80103dcb:	83 e0 3f             	and    $0x3f,%eax
+80103dce:	29 c8                	sub    %ecx,%eax
+80103dd0:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103dd5:	89 34 85 60 38 11 80 	mov    %esi,-0x7feec7a0(,%eax,4)
+}
+80103ddc:	83 c4 0c             	add    $0xc,%esp
+80103ddf:	5b                   	pop    %ebx
+80103de0:	5e                   	pop    %esi
+80103de1:	5f                   	pop    %edi
+80103de2:	5d                   	pop    %ebp
+80103de3:	c3                   	ret    
+80103de4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(rqueue.size == NPROC) return; 
+80103de8:	a1 64 39 11 80       	mov    0x80113964,%eax
+80103ded:	89 cf                	mov    %ecx,%edi
+80103def:	83 f9 40             	cmp    $0x40,%ecx
+80103df2:	74 57                	je     80103e4b <insert_rqueue_sorted+0x24b>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103df4:	83 c0 01             	add    $0x1,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103df7:	8b 75 08             	mov    0x8(%ebp),%esi
+  rqueue.size = rqueue.size + 1;  
+80103dfa:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103e00:	89 c1                	mov    %eax,%ecx
+80103e02:	c1 f9 1f             	sar    $0x1f,%ecx
+80103e05:	c1 e9 1a             	shr    $0x1a,%ecx
+80103e08:	01 c8                	add    %ecx,%eax
+80103e0a:	83 e0 3f             	and    $0x3f,%eax
+80103e0d:	29 c8                	sub    %ecx,%eax
+80103e0f:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103e14:	89 34 85 60 38 11 80 	mov    %esi,-0x7feec7a0(,%eax,4)
+  if(rqueue.size == NPROC) return; 
+80103e1b:	83 fa 40             	cmp    $0x40,%edx
+80103e1e:	0f 84 f4 00 00 00    	je     80103f18 <insert_rqueue_sorted+0x318>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103e24:	83 c0 01             	add    $0x1,%eax
+  rqueue.size = rqueue.size + 1;  
+80103e27:	8d 7a 01             	lea    0x1(%edx),%edi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103e2a:	89 c1                	mov    %eax,%ecx
+  rqueue.size = rqueue.size + 1;  
+80103e2c:	89 3d 68 39 11 80    	mov    %edi,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103e32:	c1 f9 1f             	sar    $0x1f,%ecx
+80103e35:	c1 e9 1a             	shr    $0x1a,%ecx
+80103e38:	01 c8                	add    %ecx,%eax
+80103e3a:	83 e0 3f             	and    $0x3f,%eax
+80103e3d:	29 c8                	sub    %ecx,%eax
+80103e3f:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103e44:	89 1c 85 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%eax,4)
+  if(rqueue.array[rqueue.front]->burstTime == 0){
+80103e4b:	c6 45 f0 00          	movb   $0x0,-0x10(%ebp)
+80103e4f:	8b 15 60 39 11 80    	mov    0x80113960,%edx
+80103e55:	31 f6                	xor    %esi,%esi
+80103e57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e5e:	66 90                	xchg   %ax,%ax
+  while(rqueue.array[rqueue.front] != first_proc) enqueue(dequeue());
+80103e60:	8b 0c 95 60 38 11 80 	mov    -0x7feec7a0(,%edx,4),%ecx
+  rqueue.size = rqueue.size + 1;  
+80103e67:	89 f3                	mov    %esi,%ebx
+  while(rqueue.array[rqueue.front] != first_proc) enqueue(dequeue());
+80103e69:	3b 4d ec             	cmp    -0x14(%ebp),%ecx
+80103e6c:	74 31                	je     80103e9f <insert_rqueue_sorted+0x29f>
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80103e6e:	83 c2 01             	add    $0x1,%edx
+80103e71:	c6 45 f0 01          	movb   $0x1,-0x10(%ebp)
+80103e75:	89 d3                	mov    %edx,%ebx
+80103e77:	c1 fb 1f             	sar    $0x1f,%ebx
+80103e7a:	c1 eb 1a             	shr    $0x1a,%ebx
+80103e7d:	01 da                	add    %ebx,%edx
+80103e7f:	83 e2 3f             	and    $0x3f,%edx
+80103e82:	29 da                	sub    %ebx,%edx
+  if(rqueue.size == NPROC) return; 
+80103e84:	bb 01 00 00 00       	mov    $0x1,%ebx
+80103e89:	83 ff 41             	cmp    $0x41,%edi
+80103e8c:	75 42                	jne    80103ed0 <insert_rqueue_sorted+0x2d0>
+  while(rqueue.array[rqueue.front] != first_proc) enqueue(dequeue());
+80103e8e:	8b 0c 95 60 38 11 80 	mov    -0x7feec7a0(,%edx,4),%ecx
+  rqueue.size = rqueue.size - 1; 
+80103e95:	bf 40 00 00 00       	mov    $0x40,%edi
+  while(rqueue.array[rqueue.front] != first_proc) enqueue(dequeue());
+80103e9a:	3b 4d ec             	cmp    -0x14(%ebp),%ecx
+80103e9d:	75 cf                	jne    80103e6e <insert_rqueue_sorted+0x26e>
+80103e9f:	84 db                	test   %bl,%bl
+80103ea1:	74 06                	je     80103ea9 <insert_rqueue_sorted+0x2a9>
+80103ea3:	89 3d 68 39 11 80    	mov    %edi,0x80113968
+80103ea9:	80 7d f0 00          	cmpb   $0x0,-0x10(%ebp)
+80103ead:	74 06                	je     80103eb5 <insert_rqueue_sorted+0x2b5>
+80103eaf:	89 15 60 39 11 80    	mov    %edx,0x80113960
+80103eb5:	89 f3                	mov    %esi,%ebx
+80103eb7:	84 db                	test   %bl,%bl
+80103eb9:	0f 84 1d ff ff ff    	je     80103ddc <insert_rqueue_sorted+0x1dc>
+80103ebf:	a3 64 39 11 80       	mov    %eax,0x80113964
+}
+80103ec4:	83 c4 0c             	add    $0xc,%esp
+80103ec7:	5b                   	pop    %ebx
+80103ec8:	5e                   	pop    %esi
+80103ec9:	5f                   	pop    %edi
+80103eca:	5d                   	pop    %ebp
+80103ecb:	c3                   	ret    
+80103ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103ed0:	83 c0 01             	add    $0x1,%eax
+  rqueue.size = rqueue.size + 1;  
+80103ed3:	be 01 00 00 00       	mov    $0x1,%esi
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103ed8:	89 c3                	mov    %eax,%ebx
+80103eda:	c1 fb 1f             	sar    $0x1f,%ebx
+80103edd:	c1 eb 1a             	shr    $0x1a,%ebx
+80103ee0:	01 d8                	add    %ebx,%eax
+80103ee2:	83 e0 3f             	and    $0x3f,%eax
+80103ee5:	29 d8                	sub    %ebx,%eax
+  rqueue.array[rqueue.rear] = np; 
+80103ee7:	89 0c 85 60 38 11 80 	mov    %ecx,-0x7feec7a0(,%eax,4)
+  rqueue.size = rqueue.size + 1;  
+80103eee:	e9 6d ff ff ff       	jmp    80103e60 <insert_rqueue_sorted+0x260>
+80103ef3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ef7:	90                   	nop
+  if(rqueue.size == NPROC) return; 
+80103ef8:	83 fa 40             	cmp    $0x40,%edx
+80103efb:	0f 85 b1 fe ff ff    	jne    80103db2 <insert_rqueue_sorted+0x1b2>
+80103f01:	e9 d6 fe ff ff       	jmp    80103ddc <insert_rqueue_sorted+0x1dc>
+80103f06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f0d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(rqueue.array[rqueue.front]->burstTime == 0){
+80103f10:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80103f13:	e9 95 fe ff ff       	jmp    80103dad <insert_rqueue_sorted+0x1ad>
+80103f18:	bf 40 00 00 00       	mov    $0x40,%edi
+80103f1d:	e9 29 ff ff ff       	jmp    80103e4b <insert_rqueue_sorted+0x24b>
+80103f22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103f30 <wakeup1>:
+//PAGEBREAK!
+// Wake up all processes sleeping on chan.
+// The ptable lock must be held.
+static void
+wakeup1(void *chan)
+{
+80103f30:	55                   	push   %ebp
+80103f31:	89 e5                	mov    %esp,%ebp
+80103f33:	56                   	push   %esi
+80103f34:	89 c6                	mov    %eax,%esi
+80103f36:	53                   	push   %ebx
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103f37:	bb b4 39 11 80       	mov    $0x801139b4,%ebx
+80103f3c:	eb 10                	jmp    80103f4e <wakeup1+0x1e>
+80103f3e:	66 90                	xchg   %ax,%ax
+80103f40:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103f46:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+80103f4c:	74 27                	je     80103f75 <wakeup1+0x45>
+    if(p->state == SLEEPING && p->chan == chan){
+80103f4e:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+80103f52:	75 ec                	jne    80103f40 <wakeup1+0x10>
+80103f54:	39 73 20             	cmp    %esi,0x20(%ebx)
+80103f57:	75 e7                	jne    80103f40 <wakeup1+0x10>
+      p->state = RUNNABLE;
+      insert_rqueue_sorted(p);
+80103f59:	53                   	push   %ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103f5a:	81 c3 84 00 00 00    	add    $0x84,%ebx
+      p->state = RUNNABLE;
+80103f60:	c7 43 88 03 00 00 00 	movl   $0x3,-0x78(%ebx)
+      insert_rqueue_sorted(p);
+80103f67:	e8 94 fc ff ff       	call   80103c00 <insert_rqueue_sorted>
+80103f6c:	58                   	pop    %eax
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103f6d:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+80103f73:	75 d9                	jne    80103f4e <wakeup1+0x1e>
+      // makeProcRunnable(p);
+}
+}
+80103f75:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f78:	5b                   	pop    %ebx
+80103f79:	5e                   	pop    %esi
+80103f7a:	5d                   	pop    %ebp
+80103f7b:	c3                   	ret    
+80103f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103f80 <makeProcRunnable>:
+void makeProcRunnable(struct proc* proc){
+80103f80:	f3 0f 1e fb          	endbr32 
+80103f84:	55                   	push   %ebp
+80103f85:	89 e5                	mov    %esp,%ebp
+80103f87:	53                   	push   %ebx
+80103f88:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  proc->state = RUNNABLE;
+80103f8b:	c7 41 0c 03 00 00 00 	movl   $0x3,0xc(%ecx)
+  if(rqueue.size == NPROC) return; 
+80103f92:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+80103f98:	83 fa 40             	cmp    $0x40,%edx
+80103f9b:	74 2c                	je     80103fc9 <makeProcRunnable+0x49>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103f9d:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.size = rqueue.size + 1;  
+80103fa2:	83 c2 01             	add    $0x1,%edx
+80103fa5:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80103fab:	83 c0 01             	add    $0x1,%eax
+80103fae:	89 c3                	mov    %eax,%ebx
+80103fb0:	c1 fb 1f             	sar    $0x1f,%ebx
+80103fb3:	c1 eb 1a             	shr    $0x1a,%ebx
+80103fb6:	01 d8                	add    %ebx,%eax
+80103fb8:	83 e0 3f             	and    $0x3f,%eax
+80103fbb:	29 d8                	sub    %ebx,%eax
+80103fbd:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80103fc2:	89 0c 85 60 38 11 80 	mov    %ecx,-0x7feec7a0(,%eax,4)
+}
+80103fc9:	5b                   	pop    %ebx
+80103fca:	5d                   	pop    %ebp
+80103fcb:	c3                   	ret    
+80103fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103fd0 <pinit>:
+{
+80103fd0:	f3 0f 1e fb          	endbr32 
+80103fd4:	55                   	push   %ebp
+80103fd5:	89 e5                	mov    %esp,%ebp
+80103fd7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+80103fda:	68 e0 83 10 80       	push   $0x801083e0
+80103fdf:	68 80 39 11 80       	push   $0x80113980
+80103fe4:	e8 d7 0f 00 00       	call   80104fc0 <initlock>
+}
+80103fe9:	83 c4 10             	add    $0x10,%esp
+80103fec:	c9                   	leave  
+80103fed:	c3                   	ret    
+80103fee:	66 90                	xchg   %ax,%ax
+
+80103ff0 <mycpu>:
+{
+80103ff0:	f3 0f 1e fb          	endbr32 
+80103ff4:	55                   	push   %ebp
+80103ff5:	89 e5                	mov    %esp,%ebp
+80103ff7:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038d9:	9c                   	pushf  
-801038da:	58                   	pop    %eax
+80103ffa:	9c                   	pushf  
+80103ffb:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038db:	f6 c4 02             	test   $0x2,%ah
-801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
-  apicid = lapicid();
-801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
-  for (i = 0; i < ncpu; ++i) {
-801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103ffc:	f6 c4 02             	test   $0x2,%ah
+80103fff:	75 36                	jne    80104037 <mycpu+0x47>
   apicid = lapicid();
-801038eb:	89 c3                	mov    %eax,%ebx
+80104001:	e8 9a e8 ff ff       	call   801028a0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-801038ed:	85 f6                	test   %esi,%esi
-801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
-801038f1:	31 d2                	xor    %edx,%edx
-801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
-801038f5:	8d 76 00             	lea    0x0(%esi),%esi
-801038f8:	83 c2 01             	add    $0x1,%edx
-801038fb:	39 f2                	cmp    %esi,%edx
-801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
+80104006:	8b 15 50 38 11 80    	mov    0x80113850,%edx
+8010400c:	85 d2                	test   %edx,%edx
+8010400e:	7e 0b                	jle    8010401b <mycpu+0x2b>
     if (cpus[i].apicid == apicid)
-801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
-8010390c:	39 d8                	cmp    %ebx,%eax
-8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
-}
-80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
-      return &cpus[i];
-80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
-}
-80103919:	5b                   	pop    %ebx
-8010391a:	5e                   	pop    %esi
-8010391b:	5d                   	pop    %ebp
-8010391c:	c3                   	ret    
+80104010:	0f b6 15 a0 37 11 80 	movzbl 0x801137a0,%edx
+80104017:	39 d0                	cmp    %edx,%eax
+80104019:	74 15                	je     80104030 <mycpu+0x40>
   panic("unknown apicid\n");
-8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 27 76 10 80       	push   $0x80107627
-80103925:	e8 66 ca ff ff       	call   80100390 <panic>
+8010401b:	83 ec 0c             	sub    $0xc,%esp
+8010401e:	68 e7 83 10 80       	push   $0x801083e7
+80104023:	e8 68 c3 ff ff       	call   80100390 <panic>
+80104028:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010402f:	90                   	nop
+}
+80104030:	c9                   	leave  
+80104031:	b8 a0 37 11 80       	mov    $0x801137a0,%eax
+80104036:	c3                   	ret    
     panic("mycpu called with interrupts enabled\n");
-8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 04 77 10 80       	push   $0x80107704
-80103932:	e8 59 ca ff ff       	call   80100390 <panic>
-80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010393e:	66 90                	xchg   %ax,%ax
+80104037:	83 ec 0c             	sub    $0xc,%esp
+8010403a:	68 e8 84 10 80       	push   $0x801084e8
+8010403f:	e8 4c c3 ff ff       	call   80100390 <panic>
+80104044:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010404b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010404f:	90                   	nop
 
-80103940 <cpuid>:
+80104050 <cpuid>:
 cpuid() {
-80103940:	f3 0f 1e fb          	endbr32 
-80103944:	55                   	push   %ebp
-80103945:	89 e5                	mov    %esp,%ebp
-80103947:	83 ec 08             	sub    $0x8,%esp
+80104050:	f3 0f 1e fb          	endbr32 
+80104054:	55                   	push   %ebp
+80104055:	89 e5                	mov    %esp,%ebp
+80104057:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
+8010405a:	e8 91 ff ff ff       	call   80103ff0 <mycpu>
 }
-8010394f:	c9                   	leave  
+8010405f:	c9                   	leave  
   return mycpu()-cpus;
-80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
-80103955:	c1 f8 04             	sar    $0x4,%eax
-80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80104060:	2d a0 37 11 80       	sub    $0x801137a0,%eax
+80104065:	c1 f8 04             	sar    $0x4,%eax
+80104068:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
 }
-8010395e:	c3                   	ret    
-8010395f:	90                   	nop
+8010406e:	c3                   	ret    
+8010406f:	90                   	nop
 
-80103960 <myproc>:
+80104070 <myproc>:
 myproc(void) {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
+80104070:	f3 0f 1e fb          	endbr32 
+80104074:	55                   	push   %ebp
+80104075:	89 e5                	mov    %esp,%ebp
+80104077:	53                   	push   %ebx
+80104078:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
+8010407b:	e8 c0 0f 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
+80104080:	e8 6b ff ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104085:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
+8010408b:	e8 00 10 00 00       	call   80105090 <popcli>
 }
-80103980:	83 c4 04             	add    $0x4,%esp
-80103983:	89 d8                	mov    %ebx,%eax
-80103985:	5b                   	pop    %ebx
-80103986:	5d                   	pop    %ebp
-80103987:	c3                   	ret    
-80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010398f:	90                   	nop
-
-80103990 <userinit>:
-{
-80103990:	f3 0f 1e fb          	endbr32 
-80103994:	55                   	push   %ebp
-80103995:	89 e5                	mov    %esp,%ebp
-80103997:	53                   	push   %ebx
-80103998:	83 ec 04             	sub    $0x4,%esp
+80104090:	83 c4 04             	add    $0x4,%esp
+80104093:	89 d8                	mov    %ebx,%eax
+80104095:	5b                   	pop    %ebx
+80104096:	5d                   	pop    %ebp
+80104097:	c3                   	ret    
+80104098:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010409f:	90                   	nop
+
+801040a0 <userinit>:
+{
+801040a0:	f3 0f 1e fb          	endbr32 
+801040a4:	55                   	push   %ebp
+801040a5:	89 e5                	mov    %esp,%ebp
+801040a7:	53                   	push   %ebx
+801040a8:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
-801039a0:	89 c3                	mov    %eax,%ebx
+801040ab:	e8 e0 f6 ff ff       	call   80103790 <allocproc>
+801040b0:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+801040b2:	a3 c0 b5 10 80       	mov    %eax,0x8010b5c0
   if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
-801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
-801039af:	85 c0                	test   %eax,%eax
-801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
+801040b7:	e8 54 3b 00 00       	call   80107c10 <setupkvm>
+801040bc:	89 43 04             	mov    %eax,0x4(%ebx)
+801040bf:	85 c0                	test   %eax,%eax
+801040c1:	0f 84 16 01 00 00    	je     801041dd <userinit+0x13d>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039b7:	83 ec 04             	sub    $0x4,%esp
-801039ba:	68 2c 00 00 00       	push   $0x2c
-801039bf:	68 60 a4 10 80       	push   $0x8010a460
-801039c4:	50                   	push   %eax
-801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
+801040c7:	83 ec 04             	sub    $0x4,%esp
+801040ca:	68 2c 00 00 00       	push   $0x2c
+801040cf:	68 60 b4 10 80       	push   $0x8010b460
+801040d4:	50                   	push   %eax
+801040d5:	e8 06 38 00 00       	call   801078e0 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039ca:	83 c4 0c             	add    $0xc,%esp
+801040da:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+801040dd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039d3:	6a 4c                	push   $0x4c
-801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 91 0c 00 00       	call   80104670 <memset>
+801040e3:	6a 4c                	push   $0x4c
+801040e5:	6a 00                	push   $0x0
+801040e7:	ff 73 18             	pushl  0x18(%ebx)
+801040ea:	e8 61 11 00 00       	call   80105250 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
-801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
+801040ef:	8b 43 18             	mov    0x18(%ebx),%eax
+801040f2:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039e7:	83 c4 0c             	add    $0xc,%esp
+801040f7:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
+801040fa:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+801040ff:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
-801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80104103:	8b 43 18             	mov    0x18(%ebx),%eax
+80104106:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
-801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
+8010410a:	8b 43 18             	mov    0x18(%ebx),%eax
+8010410d:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80104111:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
+80104115:	8b 43 18             	mov    0x18(%ebx),%eax
+80104118:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010411c:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80104120:	8b 43 18             	mov    0x18(%ebx),%eax
+80104123:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+8010412a:	8b 43 18             	mov    0x18(%ebx),%eax
+8010412d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80104134:	8b 43 18             	mov    0x18(%ebx),%eax
+80104137:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a31:	6a 10                	push   $0x10
-80103a33:	68 50 76 10 80       	push   $0x80107650
-80103a38:	50                   	push   %eax
-80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
+8010413e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104141:	6a 10                	push   $0x10
+80104143:	68 10 84 10 80       	push   $0x80108410
+80104148:	50                   	push   %eax
+80104149:	e8 c2 12 00 00       	call   80105410 <safestrcpy>
   p->cwd = namei("/");
-80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
-80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
+8010414e:	c7 04 24 19 84 10 80 	movl   $0x80108419,(%esp)
+80104155:	e8 d6 de ff ff       	call   80102030 <namei>
+8010415a:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
-  p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+8010415d:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+80104164:	e8 d7 0f 00 00       	call   80105140 <acquire>
+  if(rqueue.size == NPROC) return; 
+80104169:	83 c4 10             	add    $0x10,%esp
+  rqueue.front = rqueue.size = 0; 
+8010416c:	c7 05 68 39 11 80 00 	movl   $0x0,0x80113968
+80104173:	00 00 00 
+80104176:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+8010417d:	00 00 00 
+  rqueue.rear = NPROC - 1;
+80104180:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80104187:	00 00 00 
+  proc->state = RUNNABLE;
+8010418a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  if(rqueue.size == NPROC) return; 
+80104191:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+80104197:	83 fa 40             	cmp    $0x40,%edx
+8010419a:	74 2c                	je     801041c8 <userinit+0x128>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+8010419c:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.size = rqueue.size + 1;  
+801041a1:	83 c2 01             	add    $0x1,%edx
+801041a4:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801041aa:	83 c0 01             	add    $0x1,%eax
+801041ad:	89 c1                	mov    %eax,%ecx
+801041af:	c1 f9 1f             	sar    $0x1f,%ecx
+801041b2:	c1 e9 1a             	shr    $0x1a,%ecx
+801041b5:	01 c8                	add    %ecx,%eax
+801041b7:	83 e0 3f             	and    $0x3f,%eax
+801041ba:	29 c8                	sub    %ecx,%eax
+801041bc:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+801041c1:	89 1c 85 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%eax,4)
   release(&ptable.lock);
-80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
-}
-80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a6f:	83 c4 10             	add    $0x10,%esp
-80103a72:	c9                   	leave  
-80103a73:	c3                   	ret    
+801041c8:	83 ec 0c             	sub    $0xc,%esp
+801041cb:	68 80 39 11 80       	push   $0x80113980
+801041d0:	e8 2b 10 00 00       	call   80105200 <release>
+}
+801041d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041d8:	83 c4 10             	add    $0x10,%esp
+801041db:	c9                   	leave  
+801041dc:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 37 76 10 80       	push   $0x80107637
-80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
-80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a8f:	90                   	nop
-
-80103a90 <growproc>:
-{
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	55                   	push   %ebp
-80103a95:	89 e5                	mov    %esp,%ebp
-80103a97:	56                   	push   %esi
-80103a98:	53                   	push   %ebx
-80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
+801041dd:	83 ec 0c             	sub    $0xc,%esp
+801041e0:	68 f7 83 10 80       	push   $0x801083f7
+801041e5:	e8 a6 c1 ff ff       	call   80100390 <panic>
+801041ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801041f0 <growproc>:
+{
+801041f0:	f3 0f 1e fb          	endbr32 
+801041f4:	55                   	push   %ebp
+801041f5:	89 e5                	mov    %esp,%ebp
+801041f7:	56                   	push   %esi
+801041f8:	53                   	push   %ebx
+801041f9:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
+801041fc:	e8 3f 0e 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
+80104201:	e8 ea fd ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104206:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
+8010420c:	e8 7f 0e 00 00       	call   80105090 <popcli>
   sz = curproc->sz;
-80103ab1:	8b 03                	mov    (%ebx),%eax
+80104211:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103ab3:	85 f6                	test   %esi,%esi
-80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
+80104213:	85 f6                	test   %esi,%esi
+80104215:	7f 19                	jg     80104230 <growproc+0x40>
   } else if(n < 0){
-80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
+80104217:	75 37                	jne    80104250 <growproc+0x60>
   switchuvm(curproc);
-80103ab9:	83 ec 0c             	sub    $0xc,%esp
+80104219:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103abc:	89 03                	mov    %eax,(%ebx)
+8010421c:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103abe:	53                   	push   %ebx
-80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
+8010421e:	53                   	push   %ebx
+8010421f:	e8 ac 35 00 00       	call   801077d0 <switchuvm>
   return 0;
-80103ac4:	83 c4 10             	add    $0x10,%esp
-80103ac7:	31 c0                	xor    %eax,%eax
+80104224:	83 c4 10             	add    $0x10,%esp
+80104227:	31 c0                	xor    %eax,%eax
 }
-80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103acc:	5b                   	pop    %ebx
-80103acd:	5e                   	pop    %esi
-80103ace:	5d                   	pop    %ebp
-80103acf:	c3                   	ret    
+80104229:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010422c:	5b                   	pop    %ebx
+8010422d:	5e                   	pop    %esi
+8010422e:	5d                   	pop    %ebp
+8010422f:	c3                   	ret    
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
+80104230:	83 ec 04             	sub    $0x4,%esp
+80104233:	01 c6                	add    %eax,%esi
+80104235:	56                   	push   %esi
+80104236:	50                   	push   %eax
+80104237:	ff 73 04             	pushl  0x4(%ebx)
+8010423a:	e8 f1 37 00 00       	call   80107a30 <allocuvm>
+8010423f:	83 c4 10             	add    $0x10,%esp
+80104242:	85 c0                	test   %eax,%eax
+80104244:	75 d3                	jne    80104219 <growproc+0x29>
       return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+80104246:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010424b:	eb dc                	jmp    80104229 <growproc+0x39>
+8010424d:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	f3 0f 1e fb          	endbr32 
-80103b14:	55                   	push   %ebp
-80103b15:	89 e5                	mov    %esp,%ebp
-80103b17:	57                   	push   %edi
-80103b18:	56                   	push   %esi
-80103b19:	53                   	push   %ebx
-80103b1a:	83 ec 1c             	sub    $0x1c,%esp
+80104250:	83 ec 04             	sub    $0x4,%esp
+80104253:	01 c6                	add    %eax,%esi
+80104255:	56                   	push   %esi
+80104256:	50                   	push   %eax
+80104257:	ff 73 04             	pushl  0x4(%ebx)
+8010425a:	e8 01 39 00 00       	call   80107b60 <deallocuvm>
+8010425f:	83 c4 10             	add    $0x10,%esp
+80104262:	85 c0                	test   %eax,%eax
+80104264:	75 b3                	jne    80104219 <growproc+0x29>
+80104266:	eb de                	jmp    80104246 <growproc+0x56>
+80104268:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010426f:	90                   	nop
+
+80104270 <fork>:
+{
+80104270:	f3 0f 1e fb          	endbr32 
+80104274:	55                   	push   %ebp
+80104275:	89 e5                	mov    %esp,%ebp
+80104277:	57                   	push   %edi
+80104278:	56                   	push   %esi
+80104279:	53                   	push   %ebx
+8010427a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
+8010427d:	e8 be 0d 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
+80104282:	e8 69 fd ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104287:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
+8010428d:	e8 fe 0d 00 00       	call   80105090 <popcli>
   if((np = allocproc()) == 0){
-80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
-80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b3a:	85 c0                	test   %eax,%eax
-80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
+80104292:	e8 f9 f4 ff ff       	call   80103790 <allocproc>
+80104297:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010429a:	85 c0                	test   %eax,%eax
+8010429c:	0f 84 e0 00 00 00    	je     80104382 <fork+0x112>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b42:	83 ec 08             	sub    $0x8,%esp
-80103b45:	ff 33                	pushl  (%ebx)
-80103b47:	89 c7                	mov    %eax,%edi
-80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
-80103b51:	83 c4 10             	add    $0x10,%esp
-80103b54:	89 47 04             	mov    %eax,0x4(%edi)
-80103b57:	85 c0                	test   %eax,%eax
-80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
+801042a2:	83 ec 08             	sub    $0x8,%esp
+801042a5:	ff 33                	pushl  (%ebx)
+801042a7:	89 c7                	mov    %eax,%edi
+801042a9:	ff 73 04             	pushl  0x4(%ebx)
+801042ac:	e8 2f 3a 00 00       	call   80107ce0 <copyuvm>
+801042b1:	83 c4 10             	add    $0x10,%esp
+801042b4:	89 47 04             	mov    %eax,0x4(%edi)
+801042b7:	85 c0                	test   %eax,%eax
+801042b9:	0f 84 ca 00 00 00    	je     80104389 <fork+0x119>
   np->sz = curproc->sz;
-80103b5f:	8b 03                	mov    (%ebx),%eax
-80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b64:	89 01                	mov    %eax,(%ecx)
+801042bf:	8b 03                	mov    (%ebx),%eax
+801042c1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801042c4:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
+801042c6:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
+801042c9:	89 c8                	mov    %ecx,%eax
+801042cb:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+801042ce:	b9 13 00 00 00       	mov    $0x13,%ecx
+801042d3:	8b 73 18             	mov    0x18(%ebx),%esi
+801042d6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b78:	31 f6                	xor    %esi,%esi
+801042d8:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
-80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+801042da:	8b 40 18             	mov    0x18(%eax),%eax
+801042dd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
-80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b8c:	85 c0                	test   %eax,%eax
-80103b8e:	74 13                	je     80103ba3 <fork+0x93>
+801042e8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+801042ec:	85 c0                	test   %eax,%eax
+801042ee:	74 13                	je     80104303 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b90:	83 ec 0c             	sub    $0xc,%esp
-80103b93:	50                   	push   %eax
-80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
-80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+801042f0:	83 ec 0c             	sub    $0xc,%esp
+801042f3:	50                   	push   %eax
+801042f4:	e8 77 cb ff ff       	call   80100e70 <filedup>
+801042f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801042fc:	83 c4 10             	add    $0x10,%esp
+801042ff:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103ba3:	83 c6 01             	add    $0x1,%esi
-80103ba6:	83 fe 10             	cmp    $0x10,%esi
-80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
+80104303:	83 c6 01             	add    $0x1,%esi
+80104306:	83 fe 10             	cmp    $0x10,%esi
+80104309:	75 dd                	jne    801042e8 <fork+0x78>
   np->cwd = idup(curproc->cwd);
-80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
+8010430b:	83 ec 0c             	sub    $0xc,%esp
+8010430e:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
+80104311:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
-80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80104314:	e8 17 d4 ff ff       	call   80101730 <idup>
+80104319:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bbc:	83 c4 0c             	add    $0xc,%esp
+8010431c:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
+8010431f:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bc5:	6a 10                	push   $0x10
-80103bc7:	53                   	push   %ebx
-80103bc8:	50                   	push   %eax
-80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
+80104322:	8d 47 6c             	lea    0x6c(%edi),%eax
+80104325:	6a 10                	push   $0x10
+80104327:	53                   	push   %ebx
+80104328:	50                   	push   %eax
+80104329:	e8 e2 10 00 00       	call   80105410 <safestrcpy>
   pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
+8010432e:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
+80104331:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+80104338:	e8 03 0e 00 00       	call   80105140 <acquire>
   np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
-  release(&ptable.lock);
-80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 30 0a 00 00       	call   80104620 <release>
+8010433d:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  insert_rqueue(np);
+80104344:	89 3c 24             	mov    %edi,(%esp)
+80104347:	e8 44 f6 ff ff       	call   80103990 <insert_rqueue>
+  if(np->parent->pid == 2){
+8010434c:	8b 47 14             	mov    0x14(%edi),%eax
+8010434f:	83 c4 10             	add    $0x10,%esp
+80104352:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
+80104356:	75 10                	jne    80104368 <fork+0xf8>
+    base_process = np;
+80104358:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010435b:	a3 bc b5 10 80       	mov    %eax,0x8010b5bc
+    base_process_pid = np->pid;
+80104360:	8b 40 10             	mov    0x10(%eax),%eax
+80104363:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
+ release(&ptable.lock);
+80104368:	83 ec 0c             	sub    $0xc,%esp
+8010436b:	68 80 39 11 80       	push   $0x80113980
+80104370:	e8 8b 0e 00 00       	call   80105200 <release>
   return pid;
-80103bf0:	83 c4 10             	add    $0x10,%esp
+80104375:	83 c4 10             	add    $0x10,%esp
 }
-80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bf6:	89 d8                	mov    %ebx,%eax
-80103bf8:	5b                   	pop    %ebx
-80103bf9:	5e                   	pop    %esi
-80103bfa:	5f                   	pop    %edi
-80103bfb:	5d                   	pop    %ebp
-80103bfc:	c3                   	ret    
+80104378:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010437b:	89 d8                	mov    %ebx,%eax
+8010437d:	5b                   	pop    %ebx
+8010437e:	5e                   	pop    %esi
+8010437f:	5f                   	pop    %edi
+80104380:	5d                   	pop    %ebp
+80104381:	c3                   	ret    
     return -1;
-80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
+80104382:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104387:	eb ef                	jmp    80104378 <fork+0x108>
     kfree(np->kstack);
-80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c07:	83 ec 0c             	sub    $0xc,%esp
-80103c0a:	ff 73 08             	pushl  0x8(%ebx)
-80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
+80104389:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010438c:	83 ec 0c             	sub    $0xc,%esp
+8010438f:	ff 73 08             	pushl  0x8(%ebx)
+80104392:	e8 d9 e0 ff ff       	call   80102470 <kfree>
     np->kstack = 0;
-80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104397:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c19:	83 c4 10             	add    $0x10,%esp
+8010439e:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801043a1:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
-80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	f3 0f 1e fb          	endbr32 
-80103c34:	55                   	push   %ebp
-80103c35:	89 e5                	mov    %esp,%ebp
-80103c37:	57                   	push   %edi
-80103c38:	56                   	push   %esi
-80103c39:	53                   	push   %ebx
-80103c3a:	83 ec 0c             	sub    $0xc,%esp
+801043a8:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801043ad:	eb c9                	jmp    80104378 <fork+0x108>
+801043af:	90                   	nop
+
+801043b0 <scheduler>:
+{
+801043b0:	f3 0f 1e fb          	endbr32 
+801043b4:	55                   	push   %ebp
+801043b5:	89 e5                	mov    %esp,%ebp
+801043b7:	57                   	push   %edi
+801043b8:	56                   	push   %esi
+801043b9:	53                   	push   %ebx
+801043ba:	83 ec 0c             	sub    $0xc,%esp
   struct cpu *c = mycpu();
-80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
+801043bd:	e8 2e fc ff ff       	call   80103ff0 <mycpu>
   c->proc = 0;
-80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c49:	00 00 00 
+801043c2:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+801043c9:	00 00 00 
   struct cpu *c = mycpu();
-80103c4c:	89 c6                	mov    %eax,%esi
+801043cc:	89 c3                	mov    %eax,%ebx
   c->proc = 0;
-80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
-80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043ce:	8d 70 04             	lea    0x4(%eax),%esi
+801043d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("sti");
-80103c58:	fb                   	sti    
-    acquire(&ptable.lock);
-80103c59:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+801043d8:	fb                   	sti    
     acquire(&ptable.lock);
-80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
-80103c6b:	83 c4 10             	add    $0x10,%esp
-80103c6e:	66 90                	xchg   %ax,%ax
-      if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
-      switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
-80103c8a:	57                   	push   %edi
-      p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
-      switchkvm();
-80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
-      c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+801043d9:	83 ec 0c             	sub    $0xc,%esp
+801043dc:	68 80 39 11 80       	push   $0x80113980
+801043e1:	e8 5a 0d 00 00       	call   80105140 <acquire>
+  if (rqueue.size == 0) return 0; 
+801043e6:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+801043ec:	83 c4 10             	add    $0x10,%esp
+801043ef:	85 d2                	test   %edx,%edx
+801043f1:	0f 84 99 00 00 00    	je     80104490 <scheduler+0xe0>
+  struct proc* next = rqueue.array[rqueue.front]; 
+801043f7:	a1 60 39 11 80       	mov    0x80113960,%eax
+801043fc:	8b 3c 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%edi
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80104403:	83 c0 01             	add    $0x1,%eax
+80104406:	89 c1                	mov    %eax,%ecx
+80104408:	c1 f9 1f             	sar    $0x1f,%ecx
+8010440b:	c1 e9 1a             	shr    $0x1a,%ecx
+8010440e:	01 c8                	add    %ecx,%eax
+80104410:	83 e0 3f             	and    $0x3f,%eax
+80104413:	29 c8                	sub    %ecx,%eax
+  rqueue.size = rqueue.size - 1; 
+80104415:	83 ea 01             	sub    $0x1,%edx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80104418:	a3 60 39 11 80       	mov    %eax,0x80113960
+  rqueue.size = rqueue.size - 1; 
+8010441d:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  if(rqueue.size == 0){
+80104423:	75 14                	jne    80104439 <scheduler+0x89>
+    rqueue.front = 0;
+80104425:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+8010442c:	00 00 00 
+    rqueue.rear = NPROC - 1;
+8010442f:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80104436:	00 00 00 
+    if(reqp == 0) {
+80104439:	85 ff                	test   %edi,%edi
+8010443b:	74 53                	je     80104490 <scheduler+0xe0>
+    if(reqp->pid>=3)    //donot print for shell and userinit
+8010443d:	8b 47 10             	mov    0x10(%edi),%eax
+80104440:	83 f8 02             	cmp    $0x2,%eax
+80104443:	7f 63                	jg     801044a8 <scheduler+0xf8>
+    switchuvm(reqp);
+80104445:	83 ec 0c             	sub    $0xc,%esp
+    c->proc = reqp;
+80104448:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
+    switchuvm(reqp);
+8010444e:	57                   	push   %edi
+8010444f:	e8 7c 33 00 00       	call   801077d0 <switchuvm>
+    reqp->numcs++; // Number of Context Switch Increment
+80104454:	83 47 7c 01          	addl   $0x1,0x7c(%edi)
+    reqp->state = RUNNING;
+80104458:	c7 47 0c 04 00 00 00 	movl   $0x4,0xc(%edi)
+    swtch(&(c->scheduler), reqp->context);
+8010445f:	58                   	pop    %eax
+80104460:	5a                   	pop    %edx
+80104461:	ff 77 1c             	pushl  0x1c(%edi)
+80104464:	56                   	push   %esi
+80104465:	e8 09 10 00 00       	call   80105473 <swtch>
+    switchkvm();
+8010446a:	e8 41 33 00 00       	call   801077b0 <switchkvm>
+    c->proc = 0;
+8010446f:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80104476:	00 00 00 
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
-    sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	f3 0f 1e fb          	endbr32 
-80103cd4:	55                   	push   %ebp
-80103cd5:	89 e5                	mov    %esp,%ebp
-80103cd7:	56                   	push   %esi
-80103cd8:	53                   	push   %ebx
+80104479:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+80104480:	e8 7b 0d 00 00       	call   80105200 <release>
+80104485:	83 c4 10             	add    $0x10,%esp
+80104488:	e9 4b ff ff ff       	jmp    801043d8 <scheduler+0x28>
+8010448d:	8d 76 00             	lea    0x0(%esi),%esi
+      release(&ptable.lock); // No process is curently runnable
+80104490:	83 ec 0c             	sub    $0xc,%esp
+80104493:	68 80 39 11 80       	push   $0x80113980
+80104498:	e8 63 0d 00 00       	call   80105200 <release>
+      continue;
+8010449d:	83 c4 10             	add    $0x10,%esp
+801044a0:	e9 33 ff ff ff       	jmp    801043d8 <scheduler+0x28>
+801044a5:	8d 76 00             	lea    0x0(%esi),%esi
+      cprintf("SCHEDULING - pid: %d  burstTime: %d baseprocess: %d\n", reqp->pid, reqp->burstTime, base_process_pid);
+801044a8:	ff 35 b8 b5 10 80    	pushl  0x8010b5b8
+801044ae:	ff b7 80 00 00 00    	pushl  0x80(%edi)
+801044b4:	50                   	push   %eax
+801044b5:	68 10 85 10 80       	push   $0x80108510
+801044ba:	e8 f1 c1 ff ff       	call   801006b0 <cprintf>
+801044bf:	83 c4 10             	add    $0x10,%esp
+801044c2:	e9 7e ff ff ff       	jmp    80104445 <scheduler+0x95>
+801044c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044ce:	66 90                	xchg   %ax,%ax
+
+801044d0 <sched>:
+{
+801044d0:	f3 0f 1e fb          	endbr32 
+801044d4:	55                   	push   %ebp
+801044d5:	89 e5                	mov    %esp,%ebp
+801044d7:	56                   	push   %esi
+801044d8:	53                   	push   %ebx
   pushcli();
-80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
+801044d9:	e8 62 0b 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
+801044de:	e8 0d fb ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801044e3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
+801044e9:	e8 a2 0b 00 00       	call   80105090 <popcli>
   if(!holding(&ptable.lock))
-80103cee:	83 ec 0c             	sub    $0xc,%esp
-80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
-80103cfb:	83 c4 10             	add    $0x10,%esp
-80103cfe:	85 c0                	test   %eax,%eax
-80103d00:	74 4f                	je     80103d51 <sched+0x81>
+801044ee:	83 ec 0c             	sub    $0xc,%esp
+801044f1:	68 80 39 11 80       	push   $0x80113980
+801044f6:	e8 f5 0b 00 00       	call   801050f0 <holding>
+801044fb:	83 c4 10             	add    $0x10,%esp
+801044fe:	85 c0                	test   %eax,%eax
+80104500:	74 4f                	je     80104551 <sched+0x81>
   if(mycpu()->ncli != 1)
-80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
-80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
+80104502:	e8 e9 fa ff ff       	call   80103ff0 <mycpu>
+80104507:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+8010450e:	75 68                	jne    80104578 <sched+0xa8>
   if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d14:	74 55                	je     80103d6b <sched+0x9b>
+80104510:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104514:	74 55                	je     8010456b <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d16:	9c                   	pushf  
-80103d17:	58                   	pop    %eax
+80104516:	9c                   	pushf  
+80104517:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d18:	f6 c4 02             	test   $0x2,%ah
-80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
+80104518:	f6 c4 02             	test   $0x2,%ah
+8010451b:	75 41                	jne    8010455e <sched+0x8e>
   intena = mycpu()->intena;
-80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
+8010451d:	e8 ce fa ff ff       	call   80103ff0 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
+80104522:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80104525:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
-80103d30:	83 ec 08             	sub    $0x8,%esp
-80103d33:	ff 70 04             	pushl  0x4(%eax)
-80103d36:	53                   	push   %ebx
-80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
+8010452b:	e8 c0 fa ff ff       	call   80103ff0 <mycpu>
+80104530:	83 ec 08             	sub    $0x8,%esp
+80104533:	ff 70 04             	pushl  0x4(%eax)
+80104536:	53                   	push   %ebx
+80104537:	e8 37 0f 00 00       	call   80105473 <swtch>
   mycpu()->intena = intena;
-80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
+8010453c:	e8 af fa ff ff       	call   80103ff0 <mycpu>
 }
-80103d41:	83 c4 10             	add    $0x10,%esp
+80104541:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80104544:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d4d:	5b                   	pop    %ebx
-80103d4e:	5e                   	pop    %esi
-80103d4f:	5d                   	pop    %ebp
-80103d50:	c3                   	ret    
+8010454a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010454d:	5b                   	pop    %ebx
+8010454e:	5e                   	pop    %esi
+8010454f:	5d                   	pop    %ebp
+80104550:	c3                   	ret    
     panic("sched ptable.lock");
-80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 5b 76 10 80       	push   $0x8010765b
-80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
+80104551:	83 ec 0c             	sub    $0xc,%esp
+80104554:	68 1b 84 10 80       	push   $0x8010841b
+80104559:	e8 32 be ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 87 76 10 80       	push   $0x80107687
-80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
+8010455e:	83 ec 0c             	sub    $0xc,%esp
+80104561:	68 47 84 10 80       	push   $0x80108447
+80104566:	e8 25 be ff ff       	call   80100390 <panic>
     panic("sched running");
-80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 79 76 10 80       	push   $0x80107679
-80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
+8010456b:	83 ec 0c             	sub    $0xc,%esp
+8010456e:	68 39 84 10 80       	push   $0x80108439
+80104573:	e8 18 be ff ff       	call   80100390 <panic>
     panic("sched locks");
-80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 6d 76 10 80       	push   $0x8010766d
-80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
-80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103d90 <exit>:
-{
-80103d90:	f3 0f 1e fb          	endbr32 
-80103d94:	55                   	push   %ebp
-80103d95:	89 e5                	mov    %esp,%ebp
-80103d97:	57                   	push   %edi
-80103d98:	56                   	push   %esi
-80103d99:	53                   	push   %ebx
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
+80104578:	83 ec 0c             	sub    $0xc,%esp
+8010457b:	68 2d 84 10 80       	push   $0x8010842d
+80104580:	e8 0b be ff ff       	call   80100390 <panic>
+80104585:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010458c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104590 <exit>:
+{
+80104590:	f3 0f 1e fb          	endbr32 
+80104594:	55                   	push   %ebp
+80104595:	89 e5                	mov    %esp,%ebp
+80104597:	57                   	push   %edi
+80104598:	56                   	push   %esi
+80104599:	53                   	push   %ebx
+8010459a:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
+8010459d:	e8 9e 0a 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
+801045a2:	e8 49 fa ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+801045a7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
+801045ad:	e8 de 0a 00 00       	call   80105090 <popcli>
   if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
-80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
-80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801045b2:	8d 5e 28             	lea    0x28(%esi),%ebx
+801045b5:	8d 7e 68             	lea    0x68(%esi),%edi
+801045b8:	39 35 c0 b5 10 80    	cmp    %esi,0x8010b5c0
+801045be:	0f 84 bd 00 00 00    	je     80104681 <exit+0xf1>
+801045c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd]){
-80103dc8:	8b 03                	mov    (%ebx),%eax
-80103dca:	85 c0                	test   %eax,%eax
-80103dcc:	74 12                	je     80103de0 <exit+0x50>
+801045c8:	8b 03                	mov    (%ebx),%eax
+801045ca:	85 c0                	test   %eax,%eax
+801045cc:	74 12                	je     801045e0 <exit+0x50>
       fileclose(curproc->ofile[fd]);
-80103dce:	83 ec 0c             	sub    $0xc,%esp
-80103dd1:	50                   	push   %eax
-80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
+801045ce:	83 ec 0c             	sub    $0xc,%esp
+801045d1:	50                   	push   %eax
+801045d2:	e8 e9 c8 ff ff       	call   80100ec0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103ddd:	83 c4 10             	add    $0x10,%esp
+801045d7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801045dd:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103de0:	83 c3 04             	add    $0x4,%ebx
-80103de3:	39 df                	cmp    %ebx,%edi
-80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
+801045e0:	83 c3 04             	add    $0x4,%ebx
+801045e3:	39 fb                	cmp    %edi,%ebx
+801045e5:	75 e1                	jne    801045c8 <exit+0x38>
   begin_op();
-80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
+801045e7:	e8 44 e7 ff ff       	call   80102d30 <begin_op>
+  iput(curproc->cwd);
+801045ec:	83 ec 0c             	sub    $0xc,%esp
+801045ef:	ff 76 68             	pushl  0x68(%esi)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801045f2:	bb b4 39 11 80       	mov    $0x801139b4,%ebx
   iput(curproc->cwd);
-80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
-80103df2:	e8 99 da ff ff       	call   80101890 <iput>
+801045f7:	e8 94 d2 ff ff       	call   80101890 <iput>
   end_op();
-80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
+801045fc:	e8 9f e7 ff ff       	call   80102da0 <end_op>
   curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+80104601:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
+80104608:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+8010460f:	e8 2c 0b 00 00       	call   80105140 <acquire>
+  cprintf("Waking up parent\n");
+80104614:	c7 04 24 68 84 10 80 	movl   $0x80108468,(%esp)
+8010461b:	e8 90 c0 ff ff       	call   801006b0 <cprintf>
   wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
-80103e12:	83 c4 10             	add    $0x10,%esp
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
-80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 c0 7c             	add    $0x7c,%eax
-80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e28:	74 1c                	je     80103e46 <exit+0xb6>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e33:	75 eb                	jne    80103e20 <exit+0x90>
-      p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 c0 7c             	add    $0x7c,%eax
-80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
-      p->parent = initproc;
-80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+80104620:	8b 46 14             	mov    0x14(%esi),%eax
+80104623:	e8 08 f9 ff ff       	call   80103f30 <wakeup1>
+80104628:	83 c4 10             	add    $0x10,%esp
+8010462b:	eb 11                	jmp    8010463e <exit+0xae>
+8010462d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
-80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e57:	90                   	nop
-80103e58:	83 c2 7c             	add    $0x7c,%edx
-80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
-80103e61:	74 3b                	je     80103e9e <exit+0x10e>
+80104630:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104636:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+8010463c:	74 2a                	je     80104668 <exit+0xd8>
     if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
-80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
+8010463e:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104641:	75 ed                	jne    80104630 <exit+0xa0>
+      p->parent = initproc;
+80104643:	a1 c0 b5 10 80       	mov    0x8010b5c0,%eax
       if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80104648:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
       p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
+8010464c:	89 43 14             	mov    %eax,0x14(%ebx)
       if(p->state == ZOMBIE)
-80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
-80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e7f:	90                   	nop
-80103e80:	83 c0 7c             	add    $0x7c,%eax
-80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e88:	74 ce                	je     80103e58 <exit+0xc8>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
-      p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
+8010464f:	75 df                	jne    80104630 <exit+0xa0>
+        wakeup1(initproc);
+80104651:	e8 da f8 ff ff       	call   80103f30 <wakeup1>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104656:	81 c3 84 00 00 00    	add    $0x84,%ebx
+8010465c:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+80104662:	75 da                	jne    8010463e <exit+0xae>
+80104664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+80104668:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
+8010466f:	e8 5c fe ff ff       	call   801044d0 <sched>
   panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 a8 76 10 80       	push   $0x801076a8
-80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
+80104674:	83 ec 0c             	sub    $0xc,%esp
+80104677:	68 7a 84 10 80       	push   $0x8010847a
+8010467c:	e8 0f bd ff ff       	call   80100390 <panic>
     panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 9b 76 10 80       	push   $0x8010769b
-80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <yield>:
-{
-80103ed0:	f3 0f 1e fb          	endbr32 
-80103ed4:	55                   	push   %ebp
-80103ed5:	89 e5                	mov    %esp,%ebp
-80103ed7:	53                   	push   %ebx
-80103ed8:	83 ec 10             	sub    $0x10,%esp
+80104681:	83 ec 0c             	sub    $0xc,%esp
+80104684:	68 5b 84 10 80       	push   $0x8010845b
+80104689:	e8 02 bd ff ff       	call   80100390 <panic>
+8010468e:	66 90                	xchg   %ax,%ax
+
+80104690 <yield>:
+{
+80104690:	f3 0f 1e fb          	endbr32 
+80104694:	55                   	push   %ebp
+80104695:	89 e5                	mov    %esp,%ebp
+80104697:	53                   	push   %ebx
+80104698:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
+8010469b:	68 80 39 11 80       	push   $0x80113980
+801046a0:	e8 9b 0a 00 00       	call   80105140 <acquire>
   pushcli();
-80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
+801046a5:	e8 96 09 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
+801046aa:	e8 41 f9 ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801046af:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
-  myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+801046b5:	e8 d6 09 00 00       	call   80105090 <popcli>
+  if(rqueue.size == NPROC) return; 
+801046ba:	83 c4 10             	add    $0x10,%esp
+  proc->state = RUNNABLE;
+801046bd:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  if(rqueue.size == NPROC) return; 
+801046c4:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+801046ca:	83 fa 40             	cmp    $0x40,%edx
+801046cd:	74 2c                	je     801046fb <yield+0x6b>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801046cf:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.size = rqueue.size + 1;  
+801046d4:	83 c2 01             	add    $0x1,%edx
+801046d7:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801046dd:	83 c0 01             	add    $0x1,%eax
+801046e0:	89 c1                	mov    %eax,%ecx
+801046e2:	c1 f9 1f             	sar    $0x1f,%ecx
+801046e5:	c1 e9 1a             	shr    $0x1a,%ecx
+801046e8:	01 c8                	add    %ecx,%eax
+801046ea:	83 e0 3f             	and    $0x3f,%eax
+801046ed:	29 c8                	sub    %ecx,%eax
+801046ef:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+801046f4:	89 1c 85 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%eax,4)
   sched();
-80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
+801046fb:	e8 d0 fd ff ff       	call   801044d0 <sched>
   release(&ptable.lock);
-80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
-}
-80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f15:	83 c4 10             	add    $0x10,%esp
-80103f18:	c9                   	leave  
-80103f19:	c3                   	ret    
-80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103f20 <sleep>:
-{
-80103f20:	f3 0f 1e fb          	endbr32 
-80103f24:	55                   	push   %ebp
-80103f25:	89 e5                	mov    %esp,%ebp
-80103f27:	57                   	push   %edi
-80103f28:	56                   	push   %esi
-80103f29:	53                   	push   %ebx
-80103f2a:	83 ec 0c             	sub    $0xc,%esp
-80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104700:	83 ec 0c             	sub    $0xc,%esp
+80104703:	68 80 39 11 80       	push   $0x80113980
+80104708:	e8 f3 0a 00 00       	call   80105200 <release>
+}
+8010470d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104710:	83 c4 10             	add    $0x10,%esp
+80104713:	c9                   	leave  
+80104714:	c3                   	ret    
+80104715:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010471c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104720 <sleep>:
+{
+80104720:	f3 0f 1e fb          	endbr32 
+80104724:	55                   	push   %ebp
+80104725:	89 e5                	mov    %esp,%ebp
+80104727:	57                   	push   %edi
+80104728:	56                   	push   %esi
+80104729:	53                   	push   %ebx
+8010472a:	83 ec 0c             	sub    $0xc,%esp
+8010472d:	8b 7d 08             	mov    0x8(%ebp),%edi
+80104730:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
+80104733:	e8 08 09 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
+80104738:	e8 b3 f8 ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010473d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
+80104743:	e8 48 09 00 00       	call   80105090 <popcli>
   if(p == 0)
-80103f48:	85 db                	test   %ebx,%ebx
-80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
+80104748:	85 db                	test   %ebx,%ebx
+8010474a:	0f 84 83 00 00 00    	je     801047d3 <sleep+0xb3>
   if(lk == 0)
-80103f50:	85 f6                	test   %esi,%esi
-80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
+80104750:	85 f6                	test   %esi,%esi
+80104752:	74 72                	je     801047c6 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
+80104754:	81 fe 80 39 11 80    	cmp    $0x80113980,%esi
+8010475a:	74 4c                	je     801047a8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103f5c:	83 ec 0c             	sub    $0xc,%esp
-80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
+8010475c:	83 ec 0c             	sub    $0xc,%esp
+8010475f:	68 80 39 11 80       	push   $0x80113980
+80104764:	e8 d7 09 00 00       	call   80105140 <acquire>
     release(lk);
-80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 af 06 00 00       	call   80104620 <release>
+80104769:	89 34 24             	mov    %esi,(%esp)
+8010476c:	e8 8f 0a 00 00       	call   80105200 <release>
   p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104771:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104774:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
+8010477b:	e8 50 fd ff ff       	call   801044d0 <sched>
   p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104780:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
+80104787:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+8010478e:	e8 6d 0a 00 00       	call   80105200 <release>
     acquire(lk);
-80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
-80103f96:	83 c4 10             	add    $0x10,%esp
+80104793:	89 75 08             	mov    %esi,0x8(%ebp)
+80104796:	83 c4 10             	add    $0x10,%esp
 }
-80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103f9c:	5b                   	pop    %ebx
-80103f9d:	5e                   	pop    %esi
-80103f9e:	5f                   	pop    %edi
-80103f9f:	5d                   	pop    %ebp
+80104799:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010479c:	5b                   	pop    %ebx
+8010479d:	5e                   	pop    %esi
+8010479e:	5f                   	pop    %edi
+8010479f:	5d                   	pop    %ebp
     acquire(lk);
-80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
-80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
+801047a0:	e9 9b 09 00 00       	jmp    80105140 <acquire>
+801047a5:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
+801047a8:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801047ab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
+801047b2:	e8 19 fd ff ff       	call   801044d0 <sched>
   p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801047b7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103fc1:	5b                   	pop    %ebx
-80103fc2:	5e                   	pop    %esi
-80103fc3:	5f                   	pop    %edi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+801047be:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801047c1:	5b                   	pop    %ebx
+801047c2:	5e                   	pop    %esi
+801047c3:	5f                   	pop    %edi
+801047c4:	5d                   	pop    %ebp
+801047c5:	c3                   	ret    
     panic("sleep without lk");
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 ba 76 10 80       	push   $0x801076ba
-80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
+801047c6:	83 ec 0c             	sub    $0xc,%esp
+801047c9:	68 8c 84 10 80       	push   $0x8010848c
+801047ce:	e8 bd bb ff ff       	call   80100390 <panic>
     panic("sleep");
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 b4 76 10 80       	push   $0x801076b4
-80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
-
-80103fe0 <wait>:
-{
-80103fe0:	f3 0f 1e fb          	endbr32 
-80103fe4:	55                   	push   %ebp
-80103fe5:	89 e5                	mov    %esp,%ebp
-80103fe7:	56                   	push   %esi
-80103fe8:	53                   	push   %ebx
+801047d3:	83 ec 0c             	sub    $0xc,%esp
+801047d6:	68 86 84 10 80       	push   $0x80108486
+801047db:	e8 b0 bb ff ff       	call   80100390 <panic>
+
+801047e0 <wait>:
+{
+801047e0:	f3 0f 1e fb          	endbr32 
+801047e4:	55                   	push   %ebp
+801047e5:	89 e5                	mov    %esp,%ebp
+801047e7:	56                   	push   %esi
+801047e8:	53                   	push   %ebx
   pushcli();
-80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
+801047e9:	e8 52 08 00 00       	call   80105040 <pushcli>
   c = mycpu();
-80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
+801047ee:	e8 fd f7 ff ff       	call   80103ff0 <mycpu>
   p = c->proc;
-80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+801047f3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
+801047f9:	e8 92 08 00 00       	call   80105090 <popcli>
   acquire(&ptable.lock);
-80103ffe:	83 ec 0c             	sub    $0xc,%esp
-80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 55 05 00 00       	call   80104560 <acquire>
-8010400b:	83 c4 10             	add    $0x10,%esp
+801047fe:	83 ec 0c             	sub    $0xc,%esp
+80104801:	68 80 39 11 80       	push   $0x80113980
+80104806:	e8 35 09 00 00       	call   80105140 <acquire>
+8010480b:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-8010400e:	31 c0                	xor    %eax,%eax
+8010480e:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80104015:	eb 14                	jmp    8010402b <wait+0x4b>
-80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 c3 7c             	add    $0x7c,%ebx
-80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
+80104810:	bb b4 39 11 80       	mov    $0x801139b4,%ebx
+80104815:	eb 17                	jmp    8010482e <wait+0x4e>
+80104817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010481e:	66 90                	xchg   %ax,%ax
+80104820:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104826:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+8010482c:	74 1e                	je     8010484c <wait+0x6c>
       if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
-8010402e:	75 f0                	jne    80104020 <wait+0x40>
+8010482e:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104831:	75 ed                	jne    80104820 <wait+0x40>
       if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
+80104833:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104837:	74 37                	je     80104870 <wait+0x90>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 c3 7c             	add    $0x7c,%ebx
+80104839:	81 c3 84 00 00 00    	add    $0x84,%ebx
       havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
+8010483f:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
+80104844:	81 fb b4 5a 11 80    	cmp    $0x80115ab4,%ebx
+8010484a:	75 e2                	jne    8010482e <wait+0x4e>
     if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
+8010484c:	85 c0                	test   %eax,%eax
+8010484e:	74 76                	je     801048c6 <wait+0xe6>
+80104850:	8b 46 24             	mov    0x24(%esi),%eax
+80104853:	85 c0                	test   %eax,%eax
+80104855:	75 6f                	jne    801048c6 <wait+0xe6>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
+80104857:	83 ec 08             	sub    $0x8,%esp
+8010485a:	68 80 39 11 80       	push   $0x80113980
+8010485f:	56                   	push   %esi
+80104860:	e8 bb fe ff ff       	call   80104720 <sleep>
     havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104865:	83 c4 10             	add    $0x10,%esp
+80104868:	eb a4                	jmp    8010480e <wait+0x2e>
+8010486a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
+80104870:	83 ec 0c             	sub    $0xc,%esp
+80104873:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
+80104876:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
+80104879:	e8 f2 db ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
+8010487e:	5a                   	pop    %edx
+8010487f:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104882:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
+80104889:	e8 02 33 00 00       	call   80107b90 <freevm>
         release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010488e:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
         p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80104895:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+8010489c:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+801048a3:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+801048a7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801048ae:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-801040ad:	e8 6e 05 00 00       	call   80104620 <release>
+801048b5:	e8 46 09 00 00       	call   80105200 <release>
         return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
+801048ba:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
+801048bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048c0:	89 f0                	mov    %esi,%eax
+801048c2:	5b                   	pop    %ebx
+801048c3:	5e                   	pop    %esi
+801048c4:	5d                   	pop    %ebp
+801048c5:	c3                   	ret    
       release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
+801048c6:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+801048c9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 50 05 00 00       	call   80104620 <release>
+801048ce:	68 80 39 11 80       	push   $0x80113980
+801048d3:	e8 28 09 00 00       	call   80105200 <release>
       return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048d8:	83 c4 10             	add    $0x10,%esp
+801048db:	eb e0                	jmp    801048bd <wait+0xdd>
+801048dd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801040e0 <wakeup>:
-}
+801048e0 <wakeup>:
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-801040e0:	f3 0f 1e fb          	endbr32 
-801040e4:	55                   	push   %ebp
-801040e5:	89 e5                	mov    %esp,%ebp
-801040e7:	53                   	push   %ebx
-801040e8:	83 ec 10             	sub    $0x10,%esp
-801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048e0:	f3 0f 1e fb          	endbr32 
+801048e4:	55                   	push   %ebp
+801048e5:	89 e5                	mov    %esp,%ebp
+801048e7:	53                   	push   %ebx
+801048e8:	83 ec 10             	sub    $0x10,%esp
+801048eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
-801040f8:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
-80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 c0 7c             	add    $0x7c,%eax
-8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104110:	74 1c                	je     8010412e <wakeup+0x4e>
-    if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
-8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
-      p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 c0 7c             	add    $0x7c,%eax
-80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
+801048ee:	68 80 39 11 80       	push   $0x80113980
+801048f3:	e8 48 08 00 00       	call   80105140 <acquire>
   wakeup1(chan);
+801048f8:	89 d8                	mov    %ebx,%eax
+801048fa:	e8 31 f6 ff ff       	call   80103f30 <wakeup1>
+  release(&ptable.lock);
+801048ff:	c7 45 08 80 39 11 80 	movl   $0x80113980,0x8(%ebp)
+}
+80104906:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&ptable.lock);
-8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+80104909:	83 c4 10             	add    $0x10,%esp
 }
-80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104138:	c9                   	leave  
+8010490c:	c9                   	leave  
   release(&ptable.lock);
-80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
-8010413e:	66 90                	xchg   %ax,%ax
+8010490d:	e9 ee 08 00 00       	jmp    80105200 <release>
+80104912:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104140 <kill>:
+80104920 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104140:	f3 0f 1e fb          	endbr32 
-80104144:	55                   	push   %ebp
-80104145:	89 e5                	mov    %esp,%ebp
-80104147:	53                   	push   %ebx
-80104148:	83 ec 10             	sub    $0x10,%esp
-8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104920:	f3 0f 1e fb          	endbr32 
+80104924:	55                   	push   %ebp
+80104925:	89 e5                	mov    %esp,%ebp
+80104927:	53                   	push   %ebx
+80104928:	83 ec 10             	sub    $0x10,%esp
+8010492b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 08 04 00 00       	call   80104560 <acquire>
-80104158:	83 c4 10             	add    $0x10,%esp
+8010492e:	68 80 39 11 80       	push   $0x80113980
+80104933:	e8 08 08 00 00       	call   80105140 <acquire>
+80104938:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104160:	eb 10                	jmp    80104172 <kill+0x32>
-80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 c0 7c             	add    $0x7c,%eax
-8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104170:	74 36                	je     801041a8 <kill+0x68>
+8010493b:	b8 b4 39 11 80       	mov    $0x801139b4,%eax
+80104940:	eb 12                	jmp    80104954 <kill+0x34>
+80104942:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104948:	05 84 00 00 00       	add    $0x84,%eax
+8010494d:	3d b4 5a 11 80       	cmp    $0x80115ab4,%eax
+80104952:	74 74                	je     801049c8 <kill+0xa8>
     if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104175:	75 f1                	jne    80104168 <kill+0x28>
+80104954:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104957:	75 ef                	jne    80104948 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      if(p->state == SLEEPING){
+80104959:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-      if(p->state == SLEEPING)
-80104182:	75 07                	jne    8010418b <kill+0x4b>
-        p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010495d:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING){
+80104964:	74 1a                	je     80104980 <kill+0x60>
+        makeProcRunnable(p);
+      }
       release(&ptable.lock);
-8010418b:	83 ec 0c             	sub    $0xc,%esp
-8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 88 04 00 00       	call   80104620 <release>
+80104966:	83 ec 0c             	sub    $0xc,%esp
+80104969:	68 80 39 11 80       	push   $0x80113980
+8010496e:	e8 8d 08 00 00       	call   80105200 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104973:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-8010419b:	83 c4 10             	add    $0x10,%esp
-8010419e:	31 c0                	xor    %eax,%eax
+80104976:	83 c4 10             	add    $0x10,%esp
+80104979:	31 c0                	xor    %eax,%eax
 }
-801041a0:	c9                   	leave  
-801041a1:	c3                   	ret    
-801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010497b:	c9                   	leave  
+8010497c:	c3                   	ret    
+8010497d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(rqueue.size == NPROC) return; 
+80104980:	8b 0d 68 39 11 80    	mov    0x80113968,%ecx
+  proc->state = RUNNABLE;
+80104986:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  if(rqueue.size == NPROC) return; 
+8010498d:	83 f9 40             	cmp    $0x40,%ecx
+80104990:	74 d4                	je     80104966 <kill+0x46>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80104992:	8b 15 64 39 11 80    	mov    0x80113964,%edx
+  rqueue.size = rqueue.size + 1;  
+80104998:	83 c1 01             	add    $0x1,%ecx
+8010499b:	89 0d 68 39 11 80    	mov    %ecx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+801049a1:	83 c2 01             	add    $0x1,%edx
+801049a4:	89 d3                	mov    %edx,%ebx
+801049a6:	c1 fb 1f             	sar    $0x1f,%ebx
+801049a9:	c1 eb 1a             	shr    $0x1a,%ebx
+801049ac:	01 da                	add    %ebx,%edx
+801049ae:	83 e2 3f             	and    $0x3f,%edx
+801049b1:	29 da                	sub    %ebx,%edx
+801049b3:	89 15 64 39 11 80    	mov    %edx,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+801049b9:	89 04 95 60 38 11 80 	mov    %eax,-0x7feec7a0(,%edx,4)
+  rqueue.size = rqueue.size + 1;  
+801049c0:	eb a4                	jmp    80104966 <kill+0x46>
+801049c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-801041a8:	83 ec 0c             	sub    $0xc,%esp
-801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 6b 04 00 00       	call   80104620 <release>
+801049c8:	83 ec 0c             	sub    $0xc,%esp
+801049cb:	68 80 39 11 80       	push   $0x80113980
+801049d0:	e8 2b 08 00 00       	call   80105200 <release>
 }
-801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801049d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041b8:	83 c4 10             	add    $0x10,%esp
-801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801049d8:	83 c4 10             	add    $0x10,%esp
+801049db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041c0:	c9                   	leave  
-801041c1:	c3                   	ret    
-801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049e0:	c9                   	leave  
+801049e1:	c3                   	ret    
+801049e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801041d0 <procdump>:
+801049f0 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041d0:	f3 0f 1e fb          	endbr32 
-801041d4:	55                   	push   %ebp
-801041d5:	89 e5                	mov    %esp,%ebp
-801041d7:	57                   	push   %edi
-801041d8:	56                   	push   %esi
-801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-801041e2:	83 ec 3c             	sub    $0x3c,%esp
-801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
-801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041ee:	66 90                	xchg   %ax,%ax
+801049f0:	f3 0f 1e fb          	endbr32 
+801049f4:	55                   	push   %ebp
+801049f5:	89 e5                	mov    %esp,%ebp
+801049f7:	57                   	push   %edi
+801049f8:	56                   	push   %esi
+801049f9:	8d 75 e8             	lea    -0x18(%ebp),%esi
+801049fc:	53                   	push   %ebx
+801049fd:	bb 20 3a 11 80       	mov    $0x80113a20,%ebx
+80104a02:	83 ec 3c             	sub    $0x3c,%esp
+80104a05:	eb 2b                	jmp    80104a32 <procdump+0x42>
+80104a07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a0e:	66 90                	xchg   %ax,%ax
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 37 7a 10 80       	push   $0x80107a37
-801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
-801041fd:	83 c4 10             	add    $0x10,%esp
+80104a10:	83 ec 0c             	sub    $0xc,%esp
+80104a13:	68 8b 88 10 80       	push   $0x8010888b
+80104a18:	e8 93 bc ff ff       	call   801006b0 <cprintf>
+80104a1d:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
-80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
+80104a20:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104a26:	81 fb 20 5b 11 80    	cmp    $0x80115b20,%ebx
+80104a2c:	0f 84 8e 00 00 00    	je     80104ac0 <procdump+0xd0>
     if(p->state == UNUSED)
-8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104212:	85 c0                	test   %eax,%eax
-80104214:	74 ea                	je     80104200 <procdump+0x30>
+80104a32:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104a35:	85 c0                	test   %eax,%eax
+80104a37:	74 e7                	je     80104a20 <procdump+0x30>
       state = "???";
-80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
+80104a39:	ba 9d 84 10 80       	mov    $0x8010849d,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010421b:	83 f8 05             	cmp    $0x5,%eax
-8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
+80104a3e:	83 f8 05             	cmp    $0x5,%eax
+80104a41:	77 11                	ja     80104a54 <procdump+0x64>
+80104a43:	8b 14 85 70 85 10 80 	mov    -0x7fef7a90(,%eax,4),%edx
       state = "???";
-80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
-8010422c:	85 d2                	test   %edx,%edx
-8010422e:	0f 44 d0             	cmove  %eax,%edx
+80104a4a:	b8 9d 84 10 80       	mov    $0x8010849d,%eax
+80104a4f:	85 d2                	test   %edx,%edx
+80104a51:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104231:	53                   	push   %ebx
-80104232:	52                   	push   %edx
-80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 cf 76 10 80       	push   $0x801076cf
-8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
+80104a54:	53                   	push   %ebx
+80104a55:	52                   	push   %edx
+80104a56:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104a59:	68 a1 84 10 80       	push   $0x801084a1
+80104a5e:	e8 4d bc ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
-80104240:	83 c4 10             	add    $0x10,%esp
-80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104247:	75 a7                	jne    801041f0 <procdump+0x20>
+80104a63:	83 c4 10             	add    $0x10,%esp
+80104a66:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104a6a:	75 a4                	jne    80104a10 <procdump+0x20>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104249:	83 ec 08             	sub    $0x8,%esp
-8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104252:	50                   	push   %eax
-80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104256:	8b 40 0c             	mov    0xc(%eax),%eax
-80104259:	83 c0 08             	add    $0x8,%eax
-8010425c:	50                   	push   %eax
-8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
+80104a6c:	83 ec 08             	sub    $0x8,%esp
+80104a6f:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104a72:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104a75:	50                   	push   %eax
+80104a76:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104a79:	8b 40 0c             	mov    0xc(%eax),%eax
+80104a7c:	83 c0 08             	add    $0x8,%eax
+80104a7f:	50                   	push   %eax
+80104a80:	e8 5b 05 00 00       	call   80104fe0 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104262:	83 c4 10             	add    $0x10,%esp
-80104265:	8d 76 00             	lea    0x0(%esi),%esi
-80104268:	8b 17                	mov    (%edi),%edx
-8010426a:	85 d2                	test   %edx,%edx
-8010426c:	74 82                	je     801041f0 <procdump+0x20>
+80104a85:	83 c4 10             	add    $0x10,%esp
+80104a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a8f:	90                   	nop
+80104a90:	8b 17                	mov    (%edi),%edx
+80104a92:	85 d2                	test   %edx,%edx
+80104a94:	0f 84 76 ff ff ff    	je     80104a10 <procdump+0x20>
         cprintf(" %p", pc[i]);
-8010426e:	83 ec 08             	sub    $0x8,%esp
-80104271:	83 c7 04             	add    $0x4,%edi
-80104274:	52                   	push   %edx
-80104275:	68 21 71 10 80       	push   $0x80107121
-8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
+80104a9a:	83 ec 08             	sub    $0x8,%esp
+80104a9d:	83 c7 04             	add    $0x4,%edi
+80104aa0:	52                   	push   %edx
+80104aa1:	68 e1 7e 10 80       	push   $0x80107ee1
+80104aa6:	e8 05 bc ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010427f:	83 c4 10             	add    $0x10,%esp
-80104282:	39 fe                	cmp    %edi,%esi
-80104284:	75 e2                	jne    80104268 <procdump+0x98>
-80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
-8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010428f:	90                   	nop
-  }
-}
-80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104293:	5b                   	pop    %ebx
-80104294:	5e                   	pop    %esi
-80104295:	5f                   	pop    %edi
-80104296:	5d                   	pop    %ebp
-80104297:	c3                   	ret    
-80104298:	66 90                	xchg   %ax,%ax
-8010429a:	66 90                	xchg   %ax,%ax
-8010429c:	66 90                	xchg   %ax,%ax
-8010429e:	66 90                	xchg   %ax,%ax
+80104aab:	83 c4 10             	add    $0x10,%esp
+80104aae:	39 fe                	cmp    %edi,%esi
+80104ab0:	75 de                	jne    80104a90 <procdump+0xa0>
+80104ab2:	e9 59 ff ff ff       	jmp    80104a10 <procdump+0x20>
+80104ab7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104abe:	66 90                	xchg   %ax,%ax
+  }
+}
+80104ac0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104ac3:	5b                   	pop    %ebx
+80104ac4:	5e                   	pop    %esi
+80104ac5:	5f                   	pop    %edi
+80104ac6:	5d                   	pop    %ebp
+80104ac7:	c3                   	ret    
+80104ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104acf:	90                   	nop
+
+80104ad0 <getNumProc>:
+
+int 
+getNumProc(void)
+{
+80104ad0:	f3 0f 1e fb          	endbr32 
+80104ad4:	55                   	push   %ebp
+80104ad5:	89 e5                	mov    %esp,%ebp
+80104ad7:	53                   	push   %ebx
+	int used = 0;
+80104ad8:	31 db                	xor    %ebx,%ebx
+{
+80104ada:	83 ec 10             	sub    $0x10,%esp
+	struct proc *p;
+
+  acquire(&ptable.lock);
+80104add:	68 80 39 11 80       	push   $0x80113980
+80104ae2:	e8 59 06 00 00       	call   80105140 <acquire>
+80104ae7:	83 c4 10             	add    $0x10,%esp
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104aea:	b8 b4 39 11 80       	mov    $0x801139b4,%eax
+80104aef:	90                   	nop
+    if(p->state != UNUSED)
+      used++;
+80104af0:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80104af4:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104af7:	05 84 00 00 00       	add    $0x84,%eax
+80104afc:	3d b4 5a 11 80       	cmp    $0x80115ab4,%eax
+80104b01:	75 ed                	jne    80104af0 <getNumProc+0x20>
+
+  release(&ptable.lock);
+80104b03:	83 ec 0c             	sub    $0xc,%esp
+80104b06:	68 80 39 11 80       	push   $0x80113980
+80104b0b:	e8 f0 06 00 00       	call   80105200 <release>
+	return used;
+}
+80104b10:	89 d8                	mov    %ebx,%eax
+80104b12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104b15:	c9                   	leave  
+80104b16:	c3                   	ret    
+80104b17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b1e:	66 90                	xchg   %ax,%ax
+
+80104b20 <getMaxPid>:
+
+int 
+getMaxPid(void)
+{
+80104b20:	f3 0f 1e fb          	endbr32 
+80104b24:	55                   	push   %ebp
+80104b25:	89 e5                	mov    %esp,%ebp
+80104b27:	53                   	push   %ebx
+	int maxPid = 0;
+80104b28:	31 db                	xor    %ebx,%ebx
+{
+80104b2a:	83 ec 10             	sub    $0x10,%esp
+	struct proc *p;
+
+  acquire(&ptable.lock);
+80104b2d:	68 80 39 11 80       	push   $0x80113980
+80104b32:	e8 09 06 00 00       	call   80105140 <acquire>
+80104b37:	83 c4 10             	add    $0x10,%esp
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104b3a:	b8 b4 39 11 80       	mov    $0x801139b4,%eax
+80104b3f:	90                   	nop
+    if(p->state != UNUSED)
+80104b40:	8b 50 0c             	mov    0xc(%eax),%edx
+80104b43:	85 d2                	test   %edx,%edx
+80104b45:	74 08                	je     80104b4f <getMaxPid+0x2f>
+      maxPid = (maxPid < p->pid) ? p->pid : maxPid;
+80104b47:	8b 50 10             	mov    0x10(%eax),%edx
+80104b4a:	39 d3                	cmp    %edx,%ebx
+80104b4c:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104b4f:	05 84 00 00 00       	add    $0x84,%eax
+80104b54:	3d b4 5a 11 80       	cmp    $0x80115ab4,%eax
+80104b59:	75 e5                	jne    80104b40 <getMaxPid+0x20>
+
+  release(&ptable.lock);
+80104b5b:	83 ec 0c             	sub    $0xc,%esp
+80104b5e:	68 80 39 11 80       	push   $0x80113980
+80104b63:	e8 98 06 00 00       	call   80105200 <release>
+	return maxPid;
+}
+80104b68:	89 d8                	mov    %ebx,%eax
+80104b6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104b6d:	c9                   	leave  
+80104b6e:	c3                   	ret    
+80104b6f:	90                   	nop
+
+80104b70 <getProcInfo>:
+
+int 
+getProcInfo()
+{
+80104b70:	f3 0f 1e fb          	endbr32 
+80104b74:	55                   	push   %ebp
+80104b75:	89 e5                	mov    %esp,%ebp
+80104b77:	53                   	push   %ebx
+80104b78:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80104b7b:	e8 c0 04 00 00       	call   80105040 <pushcli>
+  c = mycpu();
+80104b80:	e8 6b f4 ff ff       	call   80103ff0 <mycpu>
+  p = c->proc;
+80104b85:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104b8b:	e8 00 05 00 00       	call   80105090 <popcli>
+  int ret = -1;
+  struct proc *p = myproc();
+  
+  acquire(&ptable.lock);
+80104b90:	83 ec 0c             	sub    $0xc,%esp
+80104b93:	68 80 39 11 80       	push   $0x80113980
+80104b98:	e8 a3 05 00 00       	call   80105140 <acquire>
+
+  cprintf(" PID: %d   NCS: %d    BurstTime: %d \n", p->pid, p->numcs, p->burstTime);
+80104b9d:	ff b3 80 00 00 00    	pushl  0x80(%ebx)
+80104ba3:	ff 73 7c             	pushl  0x7c(%ebx)
+80104ba6:	ff 73 10             	pushl  0x10(%ebx)
+80104ba9:	68 48 85 10 80       	push   $0x80108548
+80104bae:	e8 fd ba ff ff       	call   801006b0 <cprintf>
+  
+
+  release(&ptable.lock);
+80104bb3:	83 c4 14             	add    $0x14,%esp
+80104bb6:	68 80 39 11 80       	push   $0x80113980
+80104bbb:	e8 40 06 00 00       	call   80105200 <release>
+  return ret;
+}
+80104bc0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104bc3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104bc8:	c9                   	leave  
+80104bc9:	c3                   	ret    
+80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104bd0 <get_burst_time>:
+
+int
+get_burst_time()
+{
+80104bd0:	f3 0f 1e fb          	endbr32 
+80104bd4:	55                   	push   %ebp
+80104bd5:	89 e5                	mov    %esp,%ebp
+80104bd7:	53                   	push   %ebx
+80104bd8:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80104bdb:	e8 60 04 00 00       	call   80105040 <pushcli>
+  c = mycpu();
+80104be0:	e8 0b f4 ff ff       	call   80103ff0 <mycpu>
+  p = c->proc;
+80104be5:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104beb:	e8 a0 04 00 00       	call   80105090 <popcli>
+  struct proc *p = myproc();
+  return p->burstTime;
+80104bf0:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
+}
+80104bf6:	83 c4 04             	add    $0x4,%esp
+80104bf9:	5b                   	pop    %ebx
+80104bfa:	5d                   	pop    %ebp
+80104bfb:	c3                   	ret    
+80104bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104c00 <set_burst_time>:
+
+
+int
+set_burst_time(int n)
+{
+80104c00:	f3 0f 1e fb          	endbr32 
+80104c04:	55                   	push   %ebp
+80104c05:	89 e5                	mov    %esp,%ebp
+80104c07:	57                   	push   %edi
+80104c08:	56                   	push   %esi
+80104c09:	53                   	push   %ebx
+80104c0a:	83 ec 2c             	sub    $0x2c,%esp
+  pushcli();
+80104c0d:	e8 2e 04 00 00       	call   80105040 <pushcli>
+  c = mycpu();
+80104c12:	e8 d9 f3 ff ff       	call   80103ff0 <mycpu>
+  p = c->proc;
+80104c17:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104c1d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+  popcli();
+80104c20:	e8 6b 04 00 00       	call   80105090 <popcli>
+  struct proc* cur = myproc();
+
+  // can't use this system call more than once for one process
+  if(cur->burstTime != 0) return -1;
+80104c25:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
+80104c2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80104c2e:	85 c0                	test   %eax,%eax
+80104c30:	0f 85 26 02 00 00    	jne    80104e5c <set_burst_time+0x25c>
+
+  cprintf("Setting burst time\n");
+80104c36:	83 ec 0c             	sub    $0xc,%esp
+80104c39:	68 aa 84 10 80       	push   $0x801084aa
+80104c3e:	e8 6d ba ff ff       	call   801006b0 <cprintf>
+
+  cur->burstTime = n;
+80104c43:	8b 45 08             	mov    0x8(%ebp),%eax
+80104c46:	89 83 80 00 00 00    	mov    %eax,0x80(%ebx)
+  acquire(&ptable.lock);
+80104c4c:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
+80104c53:	e8 e8 04 00 00       	call   80105140 <acquire>
+  
+  // Reposition this process in rqueue
+  insert_rqueue_sorted(cur);
+80104c58:	89 1c 24             	mov    %ebx,(%esp)
+80104c5b:	e8 a0 ef ff ff       	call   80103c00 <insert_rqueue_sorted>
+
+  // Check if burst time of all processes have been set 
+  const int size = rqueue.size;
+80104c60:	a1 68 39 11 80       	mov    0x80113968,%eax
+  int should_rotate = 1;
+  struct proc* minBurstproc = 0;
+  for(int i = 0; i < size; ++i){
+80104c65:	83 c4 10             	add    $0x10,%esp
+80104c68:	85 c0                	test   %eax,%eax
+80104c6a:	0f 8e e0 01 00 00    	jle    80104e50 <set_burst_time+0x250>
+80104c70:	31 ff                	xor    %edi,%edi
+  int should_rotate = 1;
+80104c72:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+  for(int i = 0; i < size; ++i){
+80104c79:	89 c2                	mov    %eax,%edx
+  struct proc* minBurstproc = 0;
+80104c7b:	31 db                	xor    %ebx,%ebx
+80104c7d:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80104c80:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80104c83:	eb 54                	jmp    80104cd9 <set_burst_time+0xd9>
+80104c85:	8d 76 00             	lea    0x0(%esi),%esi
+    struct proc* p = dequeue();
+    if(p->burstTime == 0){
+      should_rotate = 0;
+    }
+    if(minBurstproc == 0 || minBurstproc->burstTime > p->burstTime){
+80104c88:	3b b3 80 00 00 00    	cmp    0x80(%ebx),%esi
+80104c8e:	0f 4c d9             	cmovl  %ecx,%ebx
+  if(rqueue.size == NPROC) return; 
+80104c91:	83 f8 40             	cmp    $0x40,%eax
+80104c94:	74 29                	je     80104cbf <set_burst_time+0xbf>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80104c96:	a1 64 39 11 80       	mov    0x80113964,%eax
+  rqueue.size = rqueue.size + 1;  
+80104c9b:	89 15 68 39 11 80    	mov    %edx,0x80113968
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80104ca1:	83 c0 01             	add    $0x1,%eax
+80104ca4:	89 c6                	mov    %eax,%esi
+80104ca6:	c1 fe 1f             	sar    $0x1f,%esi
+80104ca9:	c1 ee 1a             	shr    $0x1a,%esi
+80104cac:	01 f0                	add    %esi,%eax
+80104cae:	83 e0 3f             	and    $0x3f,%eax
+80104cb1:	29 f0                	sub    %esi,%eax
+80104cb3:	a3 64 39 11 80       	mov    %eax,0x80113964
+  rqueue.array[rqueue.rear] = np; 
+80104cb8:	89 0c 85 60 38 11 80 	mov    %ecx,-0x7feec7a0(,%eax,4)
+  for(int i = 0; i < size; ++i){
+80104cbf:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+80104cc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80104cc6:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+80104cc9:	74 75                	je     80104d40 <set_burst_time+0x140>
+80104ccb:	8b 15 68 39 11 80    	mov    0x80113968,%edx
+  if (rqueue.size == 0) return 0; 
+80104cd1:	85 d2                	test   %edx,%edx
+80104cd3:	0f 84 8f 01 00 00    	je     80104e68 <set_burst_time+0x268>
+  struct proc* next = rqueue.array[rqueue.front]; 
+80104cd9:	a1 60 39 11 80       	mov    0x80113960,%eax
+80104cde:	8b 0c 85 60 38 11 80 	mov    -0x7feec7a0(,%eax,4),%ecx
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80104ce5:	83 c0 01             	add    $0x1,%eax
+80104ce8:	89 c6                	mov    %eax,%esi
+80104cea:	c1 fe 1f             	sar    $0x1f,%esi
+80104ced:	c1 ee 1a             	shr    $0x1a,%esi
+80104cf0:	01 f0                	add    %esi,%eax
+80104cf2:	83 e0 3f             	and    $0x3f,%eax
+80104cf5:	29 f0                	sub    %esi,%eax
+80104cf7:	a3 60 39 11 80       	mov    %eax,0x80113960
+  rqueue.size = rqueue.size - 1; 
+80104cfc:	8d 42 ff             	lea    -0x1(%edx),%eax
+80104cff:	a3 68 39 11 80       	mov    %eax,0x80113968
+  if(rqueue.size == 0){
+80104d04:	85 c0                	test   %eax,%eax
+80104d06:	75 14                	jne    80104d1c <set_burst_time+0x11c>
+    rqueue.front = 0;
+80104d08:	c7 05 60 39 11 80 00 	movl   $0x0,0x80113960
+80104d0f:	00 00 00 
+    rqueue.rear = NPROC - 1;
+80104d12:	c7 05 64 39 11 80 3f 	movl   $0x3f,0x80113964
+80104d19:	00 00 00 
+    if(p->burstTime == 0){
+80104d1c:	8b b1 80 00 00 00    	mov    0x80(%ecx),%esi
+      should_rotate = 0;
+80104d22:	bf 00 00 00 00       	mov    $0x0,%edi
+80104d27:	85 f6                	test   %esi,%esi
+80104d29:	0f 45 7d e0          	cmovne -0x20(%ebp),%edi
+80104d2d:	89 7d e0             	mov    %edi,-0x20(%ebp)
+    if(minBurstproc == 0 || minBurstproc->burstTime > p->burstTime){
+80104d30:	85 db                	test   %ebx,%ebx
+80104d32:	0f 85 50 ff ff ff    	jne    80104c88 <set_burst_time+0x88>
+80104d38:	89 cb                	mov    %ecx,%ebx
+80104d3a:	e9 52 ff ff ff       	jmp    80104c91 <set_burst_time+0x91>
+80104d3f:	90                   	nop
+    }
+    enqueue(p);
+  }
+
+  // Choose base process if burst time of all processes have been set 
+  if(should_rotate){
+80104d40:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80104d43:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80104d46:	85 c0                	test   %eax,%eax
+80104d48:	75 2e                	jne    80104d78 <set_burst_time+0x178>
+    while(rqueue.array[rqueue.front] != minBurstproc) enqueue(dequeue());
+    base_process = minBurstproc;
+    base_process_pid = minBurstproc->pid;
+  }
+
+  cur->state = RUNNABLE;
+80104d4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+80104d4d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  sched();
+80104d54:	e8 77 f7 ff ff       	call   801044d0 <sched>
+  release(&ptable.lock);
+80104d59:	83 ec 0c             	sub    $0xc,%esp
+80104d5c:	68 80 39 11 80       	push   $0x80113980
+80104d61:	e8 9a 04 00 00       	call   80105200 <release>
+  return 0;
+80104d66:	83 c4 10             	add    $0x10,%esp
+}
+80104d69:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80104d6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d6f:	5b                   	pop    %ebx
+80104d70:	5e                   	pop    %esi
+80104d71:	5f                   	pop    %edi
+80104d72:	5d                   	pop    %ebp
+80104d73:	c3                   	ret    
+80104d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d78:	a1 68 39 11 80       	mov    0x80113968,%eax
+  rqueue.size = rqueue.size + 1;  
+80104d7d:	c6 45 e0 00          	movb   $0x0,-0x20(%ebp)
+80104d81:	8b 0d 60 39 11 80    	mov    0x80113960,%ecx
+80104d87:	31 f6                	xor    %esi,%esi
+80104d89:	8b 15 64 39 11 80    	mov    0x80113964,%edx
+80104d8f:	90                   	nop
+80104d90:	89 f7                	mov    %esi,%edi
+    while(rqueue.array[rqueue.front] != minBurstproc) enqueue(dequeue());
+80104d92:	8b 1c 8d 60 38 11 80 	mov    -0x7feec7a0(,%ecx,4),%ebx
+80104d99:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+80104d9c:	74 72                	je     80104e10 <set_burst_time+0x210>
+  if (rqueue.size == 0) return 0; 
+80104d9e:	85 c0                	test   %eax,%eax
+80104da0:	74 5e                	je     80104e00 <set_burst_time+0x200>
+  if(rqueue.size == 0){
+80104da2:	83 e8 01             	sub    $0x1,%eax
+80104da5:	74 49                	je     80104df0 <set_burst_time+0x1f0>
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+80104da7:	83 c1 01             	add    $0x1,%ecx
+80104daa:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
+80104dae:	89 cf                	mov    %ecx,%edi
+80104db0:	c1 ff 1f             	sar    $0x1f,%edi
+80104db3:	c1 ef 1a             	shr    $0x1a,%edi
+80104db6:	01 f9                	add    %edi,%ecx
+80104db8:	83 e1 3f             	and    $0x3f,%ecx
+80104dbb:	29 f9                	sub    %edi,%ecx
+  if(rqueue.size == NPROC) return; 
+80104dbd:	bf 01 00 00 00       	mov    $0x1,%edi
+80104dc2:	83 f8 40             	cmp    $0x40,%eax
+80104dc5:	74 cb                	je     80104d92 <set_burst_time+0x192>
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80104dc7:	83 c2 01             	add    $0x1,%edx
+  rqueue.size = rqueue.size + 1;  
+80104dca:	83 c0 01             	add    $0x1,%eax
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+80104dcd:	89 d6                	mov    %edx,%esi
+80104dcf:	c1 fe 1f             	sar    $0x1f,%esi
+80104dd2:	c1 ee 1a             	shr    $0x1a,%esi
+80104dd5:	01 f2                	add    %esi,%edx
+80104dd7:	83 e2 3f             	and    $0x3f,%edx
+80104dda:	29 f2                	sub    %esi,%edx
+  rqueue.size = rqueue.size + 1;  
+80104ddc:	be 01 00 00 00       	mov    $0x1,%esi
+  rqueue.array[rqueue.rear] = np; 
+80104de1:	89 1c 95 60 38 11 80 	mov    %ebx,-0x7feec7a0(,%edx,4)
+  rqueue.size = rqueue.size + 1;  
+80104de8:	eb a6                	jmp    80104d90 <set_burst_time+0x190>
+80104dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104df0:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
+    rqueue.rear = NPROC - 1;
+80104df4:	ba 3f 00 00 00       	mov    $0x3f,%edx
+  struct proc* minBurstproc = 0;
+80104df9:	89 c1                	mov    %eax,%ecx
+  if(rqueue.size == NPROC) return; 
+80104dfb:	31 c0                	xor    %eax,%eax
+80104dfd:	eb c8                	jmp    80104dc7 <set_burst_time+0x1c7>
+80104dff:	90                   	nop
+80104e00:	89 c8                	mov    %ecx,%eax
+  if (rqueue.size == 0) return 0; 
+80104e02:	31 db                	xor    %ebx,%ebx
+80104e04:	eb f3                	jmp    80104df9 <set_burst_time+0x1f9>
+80104e06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e0d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e10:	89 fb                	mov    %edi,%ebx
+80104e12:	84 db                	test   %bl,%bl
+80104e14:	74 05                	je     80104e1b <set_burst_time+0x21b>
+80104e16:	a3 68 39 11 80       	mov    %eax,0x80113968
+80104e1b:	80 7d e0 00          	cmpb   $0x0,-0x20(%ebp)
+80104e1f:	74 06                	je     80104e27 <set_burst_time+0x227>
+80104e21:	89 0d 60 39 11 80    	mov    %ecx,0x80113960
+80104e27:	89 f0                	mov    %esi,%eax
+80104e29:	84 c0                	test   %al,%al
+80104e2b:	74 06                	je     80104e33 <set_burst_time+0x233>
+80104e2d:	89 15 64 39 11 80    	mov    %edx,0x80113964
+    base_process = minBurstproc;
+80104e33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80104e36:	a3 bc b5 10 80       	mov    %eax,0x8010b5bc
+    base_process_pid = minBurstproc->pid;
+80104e3b:	8b 40 10             	mov    0x10(%eax),%eax
+80104e3e:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
+80104e43:	e9 02 ff ff ff       	jmp    80104d4a <set_burst_time+0x14a>
+80104e48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e4f:	90                   	nop
+  struct proc* minBurstproc = 0;
+80104e50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80104e57:	e9 21 ff ff ff       	jmp    80104d7d <set_burst_time+0x17d>
+  if(cur->burstTime != 0) return -1;
+80104e5c:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
+80104e63:	e9 01 ff ff ff       	jmp    80104d69 <set_burst_time+0x169>
+80104e68:	e9 00 00 00 00       	jmp    80104e6d <set_burst_time.cold>
+
+80104e6d <set_burst_time.cold>:
+    if(p->burstTime == 0){
+80104e6d:	a1 80 00 00 00       	mov    0x80,%eax
+80104e72:	0f 0b                	ud2    
+80104e74:	66 90                	xchg   %ax,%ax
+80104e76:	66 90                	xchg   %ax,%ax
+80104e78:	66 90                	xchg   %ax,%ax
+80104e7a:	66 90                	xchg   %ax,%ax
+80104e7c:	66 90                	xchg   %ax,%ax
+80104e7e:	66 90                	xchg   %ax,%ax
 
-801042a0 <initsleeplock>:
+80104e80 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	53                   	push   %ebx
-801042a8:	83 ec 0c             	sub    $0xc,%esp
-801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104e80:	f3 0f 1e fb          	endbr32 
+80104e84:	55                   	push   %ebp
+80104e85:	89 e5                	mov    %esp,%ebp
+80104e87:	53                   	push   %ebx
+80104e88:	83 ec 0c             	sub    $0xc,%esp
+80104e8b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042ae:	68 44 77 10 80       	push   $0x80107744
-801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b6:	50                   	push   %eax
-801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
+80104e8e:	68 88 85 10 80       	push   $0x80108588
+80104e93:	8d 43 04             	lea    0x4(%ebx),%eax
+80104e96:	50                   	push   %eax
+80104e97:	e8 24 01 00 00       	call   80104fc0 <initlock>
   lk->name = name;
-801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104e9f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c5:	83 c4 10             	add    $0x10,%esp
+80104ea5:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104ea8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
+80104eaf:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d5:	c9                   	leave  
-801042d6:	c3                   	ret    
-801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042de:	66 90                	xchg   %ax,%ax
+80104eb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104eb5:	c9                   	leave  
+80104eb6:	c3                   	ret    
+80104eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ebe:	66 90                	xchg   %ax,%ax
 
-801042e0 <acquiresleep>:
+80104ec0 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	f3 0f 1e fb          	endbr32 
-801042e4:	55                   	push   %ebp
-801042e5:	89 e5                	mov    %esp,%ebp
-801042e7:	56                   	push   %esi
-801042e8:	53                   	push   %ebx
-801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104ec0:	f3 0f 1e fb          	endbr32 
+80104ec4:	55                   	push   %ebp
+80104ec5:	89 e5                	mov    %esp,%ebp
+80104ec7:	56                   	push   %esi
+80104ec8:	53                   	push   %ebx
+80104ec9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
-801042ef:	83 ec 0c             	sub    $0xc,%esp
-801042f2:	56                   	push   %esi
-801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
+80104ecc:	8d 73 04             	lea    0x4(%ebx),%esi
+80104ecf:	83 ec 0c             	sub    $0xc,%esp
+80104ed2:	56                   	push   %esi
+80104ed3:	e8 68 02 00 00       	call   80105140 <acquire>
   while (lk->locked) {
-801042f8:	8b 13                	mov    (%ebx),%edx
-801042fa:	83 c4 10             	add    $0x10,%esp
-801042fd:	85 d2                	test   %edx,%edx
-801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
-80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ed8:	8b 13                	mov    (%ebx),%edx
+80104eda:	83 c4 10             	add    $0x10,%esp
+80104edd:	85 d2                	test   %edx,%edx
+80104edf:	74 1a                	je     80104efb <acquiresleep+0x3b>
+80104ee1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104308:	83 ec 08             	sub    $0x8,%esp
-8010430b:	56                   	push   %esi
-8010430c:	53                   	push   %ebx
-8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
+80104ee8:	83 ec 08             	sub    $0x8,%esp
+80104eeb:	56                   	push   %esi
+80104eec:	53                   	push   %ebx
+80104eed:	e8 2e f8 ff ff       	call   80104720 <sleep>
   while (lk->locked) {
-80104312:	8b 03                	mov    (%ebx),%eax
-80104314:	83 c4 10             	add    $0x10,%esp
-80104317:	85 c0                	test   %eax,%eax
-80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
+80104ef2:	8b 03                	mov    (%ebx),%eax
+80104ef4:	83 c4 10             	add    $0x10,%esp
+80104ef7:	85 c0                	test   %eax,%eax
+80104ef9:	75 ed                	jne    80104ee8 <acquiresleep+0x28>
   }
   lk->locked = 1;
-8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104efb:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
-80104326:	8b 40 10             	mov    0x10(%eax),%eax
-80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104f01:	e8 6a f1 ff ff       	call   80104070 <myproc>
+80104f06:	8b 40 10             	mov    0x10(%eax),%eax
+80104f09:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
+80104f0c:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104332:	5b                   	pop    %ebx
-80104333:	5e                   	pop    %esi
-80104334:	5d                   	pop    %ebp
+80104f0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104f12:	5b                   	pop    %ebx
+80104f13:	5e                   	pop    %esi
+80104f14:	5d                   	pop    %ebp
   release(&lk->lk);
-80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
-8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f15:	e9 e6 02 00 00       	jmp    80105200 <release>
+80104f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104340 <releasesleep>:
+80104f20 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	f3 0f 1e fb          	endbr32 
-80104344:	55                   	push   %ebp
-80104345:	89 e5                	mov    %esp,%ebp
-80104347:	56                   	push   %esi
-80104348:	53                   	push   %ebx
-80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f20:	f3 0f 1e fb          	endbr32 
+80104f24:	55                   	push   %ebp
+80104f25:	89 e5                	mov    %esp,%ebp
+80104f27:	56                   	push   %esi
+80104f28:	53                   	push   %ebx
+80104f29:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434f:	83 ec 0c             	sub    $0xc,%esp
-80104352:	56                   	push   %esi
-80104353:	e8 08 02 00 00       	call   80104560 <acquire>
+80104f2c:	8d 73 04             	lea    0x4(%ebx),%esi
+80104f2f:	83 ec 0c             	sub    $0xc,%esp
+80104f32:	56                   	push   %esi
+80104f33:	e8 08 02 00 00       	call   80105140 <acquire>
   lk->locked = 0;
-80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104f38:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104f3e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104365:	89 1c 24             	mov    %ebx,(%esp)
-80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
+80104f45:	89 1c 24             	mov    %ebx,(%esp)
+80104f48:	e8 93 f9 ff ff       	call   801048e0 <wakeup>
   release(&lk->lk);
-8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
-80104370:	83 c4 10             	add    $0x10,%esp
+80104f4d:	89 75 08             	mov    %esi,0x8(%ebp)
+80104f50:	83 c4 10             	add    $0x10,%esp
 }
-80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104376:	5b                   	pop    %ebx
-80104377:	5e                   	pop    %esi
-80104378:	5d                   	pop    %ebp
+80104f53:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104f56:	5b                   	pop    %ebx
+80104f57:	5e                   	pop    %esi
+80104f58:	5d                   	pop    %ebp
   release(&lk->lk);
-80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
-8010437e:	66 90                	xchg   %ax,%ax
+80104f59:	e9 a2 02 00 00       	jmp    80105200 <release>
+80104f5e:	66 90                	xchg   %ax,%ax
 
-80104380 <holdingsleep>:
+80104f60 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	f3 0f 1e fb          	endbr32 
-80104384:	55                   	push   %ebp
-80104385:	89 e5                	mov    %esp,%ebp
-80104387:	57                   	push   %edi
-80104388:	31 ff                	xor    %edi,%edi
-8010438a:	56                   	push   %esi
-8010438b:	53                   	push   %ebx
-8010438c:	83 ec 18             	sub    $0x18,%esp
-8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f60:	f3 0f 1e fb          	endbr32 
+80104f64:	55                   	push   %ebp
+80104f65:	89 e5                	mov    %esp,%ebp
+80104f67:	57                   	push   %edi
+80104f68:	31 ff                	xor    %edi,%edi
+80104f6a:	56                   	push   %esi
+80104f6b:	53                   	push   %ebx
+80104f6c:	83 ec 18             	sub    $0x18,%esp
+80104f6f:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104392:	8d 73 04             	lea    0x4(%ebx),%esi
-80104395:	56                   	push   %esi
-80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
+80104f72:	8d 73 04             	lea    0x4(%ebx),%esi
+80104f75:	56                   	push   %esi
+80104f76:	e8 c5 01 00 00       	call   80105140 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-8010439b:	8b 03                	mov    (%ebx),%eax
-8010439d:	83 c4 10             	add    $0x10,%esp
-801043a0:	85 c0                	test   %eax,%eax
-801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
+80104f7b:	8b 03                	mov    (%ebx),%eax
+80104f7d:	83 c4 10             	add    $0x10,%esp
+80104f80:	85 c0                	test   %eax,%eax
+80104f82:	75 1c                	jne    80104fa0 <holdingsleep+0x40>
   release(&lk->lk);
-801043a4:	83 ec 0c             	sub    $0xc,%esp
-801043a7:	56                   	push   %esi
-801043a8:	e8 73 02 00 00       	call   80104620 <release>
+80104f84:	83 ec 0c             	sub    $0xc,%esp
+80104f87:	56                   	push   %esi
+80104f88:	e8 73 02 00 00       	call   80105200 <release>
   return r;
 }
-801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043b0:	89 f8                	mov    %edi,%eax
-801043b2:	5b                   	pop    %ebx
-801043b3:	5e                   	pop    %esi
-801043b4:	5f                   	pop    %edi
-801043b5:	5d                   	pop    %ebp
-801043b6:	c3                   	ret    
-801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043be:	66 90                	xchg   %ax,%ax
+80104f8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f90:	89 f8                	mov    %edi,%eax
+80104f92:	5b                   	pop    %ebx
+80104f93:	5e                   	pop    %esi
+80104f94:	5f                   	pop    %edi
+80104f95:	5d                   	pop    %ebp
+80104f96:	c3                   	ret    
+80104f97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f9e:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
-801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043cb:	0f 94 c0             	sete   %al
-801043ce:	0f b6 c0             	movzbl %al,%eax
-801043d1:	89 c7                	mov    %eax,%edi
-801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
-801043d5:	66 90                	xchg   %ax,%ax
-801043d7:	66 90                	xchg   %ax,%ax
-801043d9:	66 90                	xchg   %ax,%ax
-801043db:	66 90                	xchg   %ax,%ax
-801043dd:	66 90                	xchg   %ax,%ax
-801043df:	90                   	nop
+80104fa0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104fa3:	e8 c8 f0 ff ff       	call   80104070 <myproc>
+80104fa8:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104fab:	0f 94 c0             	sete   %al
+80104fae:	0f b6 c0             	movzbl %al,%eax
+80104fb1:	89 c7                	mov    %eax,%edi
+80104fb3:	eb cf                	jmp    80104f84 <holdingsleep+0x24>
+80104fb5:	66 90                	xchg   %ax,%ax
+80104fb7:	66 90                	xchg   %ax,%ax
+80104fb9:	66 90                	xchg   %ax,%ax
+80104fbb:	66 90                	xchg   %ax,%ax
+80104fbd:	66 90                	xchg   %ax,%ax
+80104fbf:	90                   	nop
 
-801043e0 <initlock>:
+80104fc0 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
+80104fc0:	f3 0f 1e fb          	endbr32 
+80104fc4:	55                   	push   %ebp
+80104fc5:	89 e5                	mov    %esp,%ebp
+80104fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104fca:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104fcd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043f3:	89 50 04             	mov    %edx,0x4(%eax)
+80104fd3:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104fd6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043fd:	5d                   	pop    %ebp
-801043fe:	c3                   	ret    
-801043ff:	90                   	nop
+80104fdd:	5d                   	pop    %ebp
+80104fde:	c3                   	ret    
+80104fdf:	90                   	nop
 
-80104400 <getcallerpcs>:
+80104fe0 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104400:	f3 0f 1e fb          	endbr32 
-80104404:	55                   	push   %ebp
+80104fe0:	f3 0f 1e fb          	endbr32 
+80104fe4:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104405:	31 d2                	xor    %edx,%edx
+80104fe5:	31 d2                	xor    %edx,%edx
 {
-80104407:	89 e5                	mov    %esp,%ebp
-80104409:	53                   	push   %ebx
+80104fe7:	89 e5                	mov    %esp,%ebp
+80104fe9:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
+80104fea:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104fed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104410:	83 e8 08             	sub    $0x8,%eax
+80104ff0:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
+80104ff3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ff7:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
+80104ff8:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104ffe:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80105004:	77 1a                	ja     80105020 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104426:	8b 58 04             	mov    0x4(%eax),%ebx
-80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80105006:	8b 58 04             	mov    0x4(%eax),%ebx
+80105009:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-8010442c:	83 c2 01             	add    $0x1,%edx
+8010500c:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-8010442f:	8b 00                	mov    (%eax),%eax
+8010500f:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104431:	83 fa 0a             	cmp    $0xa,%edx
-80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
+80105011:	83 fa 0a             	cmp    $0xa,%edx
+80105014:	75 e2                	jne    80104ff8 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104436:	5b                   	pop    %ebx
-80104437:	5d                   	pop    %ebp
-80104438:	c3                   	ret    
-80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105016:	5b                   	pop    %ebx
+80105017:	5d                   	pop    %ebp
+80105018:	c3                   	ret    
+80105019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104443:	8d 51 28             	lea    0x28(%ecx),%edx
-80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010444d:	8d 76 00             	lea    0x0(%esi),%esi
+80105020:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80105023:	8d 51 28             	lea    0x28(%ecx),%edx
+80105026:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010502d:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80105030:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104456:	83 c0 04             	add    $0x4,%eax
-80104459:	39 d0                	cmp    %edx,%eax
-8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
-}
-8010445d:	5b                   	pop    %ebx
-8010445e:	5d                   	pop    %ebp
-8010445f:	c3                   	ret    
+80105036:	83 c0 04             	add    $0x4,%eax
+80105039:	39 d0                	cmp    %edx,%eax
+8010503b:	75 f3                	jne    80105030 <getcallerpcs+0x50>
+}
+8010503d:	5b                   	pop    %ebx
+8010503e:	5d                   	pop    %ebp
+8010503f:	c3                   	ret    
 
-80104460 <pushcli>:
+80105040 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104460:	f3 0f 1e fb          	endbr32 
-80104464:	55                   	push   %ebp
-80104465:	89 e5                	mov    %esp,%ebp
-80104467:	53                   	push   %ebx
-80104468:	83 ec 04             	sub    $0x4,%esp
-8010446b:	9c                   	pushf  
-8010446c:	5b                   	pop    %ebx
+80105040:	f3 0f 1e fb          	endbr32 
+80105044:	55                   	push   %ebp
+80105045:	89 e5                	mov    %esp,%ebp
+80105047:	53                   	push   %ebx
+80105048:	83 ec 04             	sub    $0x4,%esp
+8010504b:	9c                   	pushf  
+8010504c:	5b                   	pop    %ebx
   asm volatile("cli");
-8010446d:	fa                   	cli    
+8010504d:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
-80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104479:	85 c0                	test   %eax,%eax
-8010447b:	74 13                	je     80104490 <pushcli+0x30>
+8010504e:	e8 9d ef ff ff       	call   80103ff0 <mycpu>
+80105053:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80105059:	85 c0                	test   %eax,%eax
+8010505b:	74 13                	je     80105070 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
-80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+8010505d:	e8 8e ef ff ff       	call   80103ff0 <mycpu>
+80105062:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104489:	83 c4 04             	add    $0x4,%esp
-8010448c:	5b                   	pop    %ebx
-8010448d:	5d                   	pop    %ebp
-8010448e:	c3                   	ret    
-8010448f:	90                   	nop
+80105069:	83 c4 04             	add    $0x4,%esp
+8010506c:	5b                   	pop    %ebx
+8010506d:	5d                   	pop    %ebp
+8010506e:	c3                   	ret    
+8010506f:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
-80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
-801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105070:	e8 7b ef ff ff       	call   80103ff0 <mycpu>
+80105075:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010507b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80105081:	eb da                	jmp    8010505d <pushcli+0x1d>
+80105083:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010508a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044b0 <popcli>:
+80105090 <popcli>:
 
 void
 popcli(void)
 {
-801044b0:	f3 0f 1e fb          	endbr32 
-801044b4:	55                   	push   %ebp
-801044b5:	89 e5                	mov    %esp,%ebp
-801044b7:	83 ec 08             	sub    $0x8,%esp
+80105090:	f3 0f 1e fb          	endbr32 
+80105094:	55                   	push   %ebp
+80105095:	89 e5                	mov    %esp,%ebp
+80105097:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044ba:	9c                   	pushf  
-801044bb:	58                   	pop    %eax
+8010509a:	9c                   	pushf  
+8010509b:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044bc:	f6 c4 02             	test   $0x2,%ah
-801044bf:	75 31                	jne    801044f2 <popcli+0x42>
+8010509c:	f6 c4 02             	test   $0x2,%ah
+8010509f:	75 31                	jne    801050d2 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
-801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044cd:	78 30                	js     801044ff <popcli+0x4f>
+801050a1:	e8 4a ef ff ff       	call   80103ff0 <mycpu>
+801050a6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801050ad:	78 30                	js     801050df <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
-801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044da:	85 d2                	test   %edx,%edx
-801044dc:	74 02                	je     801044e0 <popcli+0x30>
+801050af:	e8 3c ef ff ff       	call   80103ff0 <mycpu>
+801050b4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801050ba:	85 d2                	test   %edx,%edx
+801050bc:	74 02                	je     801050c0 <popcli+0x30>
     sti();
 }
-801044de:	c9                   	leave  
-801044df:	c3                   	ret    
+801050be:	c9                   	leave  
+801050bf:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
-801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044eb:	85 c0                	test   %eax,%eax
-801044ed:	74 ef                	je     801044de <popcli+0x2e>
+801050c0:	e8 2b ef ff ff       	call   80103ff0 <mycpu>
+801050c5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801050cb:	85 c0                	test   %eax,%eax
+801050cd:	74 ef                	je     801050be <popcli+0x2e>
   asm volatile("sti");
-801044ef:	fb                   	sti    
+801050cf:	fb                   	sti    
 }
-801044f0:	c9                   	leave  
-801044f1:	c3                   	ret    
+801050d0:	c9                   	leave  
+801050d1:	c3                   	ret    
     panic("popcli - interruptible");
-801044f2:	83 ec 0c             	sub    $0xc,%esp
-801044f5:	68 4f 77 10 80       	push   $0x8010774f
-801044fa:	e8 91 be ff ff       	call   80100390 <panic>
+801050d2:	83 ec 0c             	sub    $0xc,%esp
+801050d5:	68 93 85 10 80       	push   $0x80108593
+801050da:	e8 b1 b2 ff ff       	call   80100390 <panic>
     panic("popcli");
-801044ff:	83 ec 0c             	sub    $0xc,%esp
-80104502:	68 66 77 10 80       	push   $0x80107766
-80104507:	e8 84 be ff ff       	call   80100390 <panic>
-8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104510 <holding>:
-{
-80104510:	f3 0f 1e fb          	endbr32 
-80104514:	55                   	push   %ebp
-80104515:	89 e5                	mov    %esp,%ebp
-80104517:	56                   	push   %esi
-80104518:	53                   	push   %ebx
-80104519:	8b 75 08             	mov    0x8(%ebp),%esi
-8010451c:	31 db                	xor    %ebx,%ebx
+801050df:	83 ec 0c             	sub    $0xc,%esp
+801050e2:	68 aa 85 10 80       	push   $0x801085aa
+801050e7:	e8 a4 b2 ff ff       	call   80100390 <panic>
+801050ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801050f0 <holding>:
+{
+801050f0:	f3 0f 1e fb          	endbr32 
+801050f4:	55                   	push   %ebp
+801050f5:	89 e5                	mov    %esp,%ebp
+801050f7:	56                   	push   %esi
+801050f8:	53                   	push   %ebx
+801050f9:	8b 75 08             	mov    0x8(%ebp),%esi
+801050fc:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
+801050fe:	e8 3d ff ff ff       	call   80105040 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104523:	8b 06                	mov    (%esi),%eax
-80104525:	85 c0                	test   %eax,%eax
-80104527:	75 0f                	jne    80104538 <holding+0x28>
+80105103:	8b 06                	mov    (%esi),%eax
+80105105:	85 c0                	test   %eax,%eax
+80105107:	75 0f                	jne    80105118 <holding+0x28>
   popcli();
-80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
+80105109:	e8 82 ff ff ff       	call   80105090 <popcli>
 }
-8010452e:	89 d8                	mov    %ebx,%eax
-80104530:	5b                   	pop    %ebx
-80104531:	5e                   	pop    %esi
-80104532:	5d                   	pop    %ebp
-80104533:	c3                   	ret    
-80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010510e:	89 d8                	mov    %ebx,%eax
+80105110:	5b                   	pop    %ebx
+80105111:	5e                   	pop    %esi
+80105112:	5d                   	pop    %ebp
+80105113:	c3                   	ret    
+80105114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
-80104540:	39 c3                	cmp    %eax,%ebx
-80104542:	0f 94 c3             	sete   %bl
+80105118:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010511b:	e8 d0 ee ff ff       	call   80103ff0 <mycpu>
+80105120:	39 c3                	cmp    %eax,%ebx
+80105122:	0f 94 c3             	sete   %bl
   popcli();
-80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
+80105125:	e8 66 ff ff ff       	call   80105090 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454a:	0f b6 db             	movzbl %bl,%ebx
+8010512a:	0f b6 db             	movzbl %bl,%ebx
 }
-8010454d:	89 d8                	mov    %ebx,%eax
-8010454f:	5b                   	pop    %ebx
-80104550:	5e                   	pop    %esi
-80104551:	5d                   	pop    %ebp
-80104552:	c3                   	ret    
-80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104560 <acquire>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	56                   	push   %esi
-80104568:	53                   	push   %ebx
+8010512d:	89 d8                	mov    %ebx,%eax
+8010512f:	5b                   	pop    %ebx
+80105130:	5e                   	pop    %esi
+80105131:	5d                   	pop    %ebp
+80105132:	c3                   	ret    
+80105133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010513a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105140 <acquire>:
+{
+80105140:	f3 0f 1e fb          	endbr32 
+80105144:	55                   	push   %ebp
+80105145:	89 e5                	mov    %esp,%ebp
+80105147:	56                   	push   %esi
+80105148:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
+80105149:	e8 f2 fe ff ff       	call   80105040 <pushcli>
   if(holding(lk))
-8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104571:	83 ec 0c             	sub    $0xc,%esp
-80104574:	53                   	push   %ebx
-80104575:	e8 96 ff ff ff       	call   80104510 <holding>
-8010457a:	83 c4 10             	add    $0x10,%esp
-8010457d:	85 c0                	test   %eax,%eax
-8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
-80104585:	89 c6                	mov    %eax,%esi
+8010514e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105151:	83 ec 0c             	sub    $0xc,%esp
+80105154:	53                   	push   %ebx
+80105155:	e8 96 ff ff ff       	call   801050f0 <holding>
+8010515a:	83 c4 10             	add    $0x10,%esp
+8010515d:	85 c0                	test   %eax,%eax
+8010515f:	0f 85 7f 00 00 00    	jne    801051e4 <acquire+0xa4>
+80105165:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104587:	ba 01 00 00 00       	mov    $0x1,%edx
-8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104593:	89 d0                	mov    %edx,%eax
-80104595:	f0 87 03             	lock xchg %eax,(%ebx)
+80105167:	ba 01 00 00 00       	mov    $0x1,%edx
+8010516c:	eb 05                	jmp    80105173 <acquire+0x33>
+8010516e:	66 90                	xchg   %ax,%ax
+80105170:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105173:	89 d0                	mov    %edx,%eax
+80105175:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104598:	85 c0                	test   %eax,%eax
-8010459a:	75 f4                	jne    80104590 <acquire+0x30>
+80105178:	85 c0                	test   %eax,%eax
+8010517a:	75 f4                	jne    80105170 <acquire+0x30>
   __sync_synchronize();
-8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+8010517c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
-801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
+80105181:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105184:	e8 67 ee ff ff       	call   80103ff0 <mycpu>
+80105189:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801045ac:	89 e8                	mov    %ebp,%eax
-801045ae:	66 90                	xchg   %ax,%ax
+8010518c:	89 e8                	mov    %ebp,%eax
+8010518e:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-801045bc:	77 22                	ja     801045e0 <acquire+0x80>
+80105190:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80105196:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+8010519c:	77 22                	ja     801051c0 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801045be:	8b 50 04             	mov    0x4(%eax),%edx
-801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+8010519e:	8b 50 04             	mov    0x4(%eax),%edx
+801051a1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-801045c5:	83 c6 01             	add    $0x1,%esi
+801051a5:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801045c8:	8b 00                	mov    (%eax),%eax
+801051a8:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801045ca:	83 fe 0a             	cmp    $0xa,%esi
-801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
+801051aa:	83 fe 0a             	cmp    $0xa,%esi
+801051ad:	75 e1                	jne    80105190 <acquire+0x50>
 }
-801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801045d2:	5b                   	pop    %ebx
-801045d3:	5e                   	pop    %esi
-801045d4:	5d                   	pop    %ebp
-801045d5:	c3                   	ret    
-801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045dd:	8d 76 00             	lea    0x0(%esi),%esi
+801051af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801051b2:	5b                   	pop    %ebx
+801051b3:	5e                   	pop    %esi
+801051b4:	5d                   	pop    %ebp
+801051b5:	c3                   	ret    
+801051b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051bd:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-801045e4:	83 c3 34             	add    $0x34,%ebx
-801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045ee:	66 90                	xchg   %ax,%ax
+801051c0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+801051c4:	83 c3 34             	add    $0x34,%ebx
+801051c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051ce:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801051d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-801045f6:	83 c0 04             	add    $0x4,%eax
-801045f9:	39 d8                	cmp    %ebx,%eax
-801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
-}
-801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104600:	5b                   	pop    %ebx
-80104601:	5e                   	pop    %esi
-80104602:	5d                   	pop    %ebp
-80104603:	c3                   	ret    
+801051d6:	83 c0 04             	add    $0x4,%eax
+801051d9:	39 d8                	cmp    %ebx,%eax
+801051db:	75 f3                	jne    801051d0 <acquire+0x90>
+}
+801051dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801051e0:	5b                   	pop    %ebx
+801051e1:	5e                   	pop    %esi
+801051e2:	5d                   	pop    %ebp
+801051e3:	c3                   	ret    
     panic("acquire");
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	68 6d 77 10 80       	push   $0x8010776d
-8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
-80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010461f:	90                   	nop
-
-80104620 <release>:
-{
-80104620:	f3 0f 1e fb          	endbr32 
-80104624:	55                   	push   %ebp
-80104625:	89 e5                	mov    %esp,%ebp
-80104627:	53                   	push   %ebx
-80104628:	83 ec 10             	sub    $0x10,%esp
-8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801051e4:	83 ec 0c             	sub    $0xc,%esp
+801051e7:	68 b1 85 10 80       	push   $0x801085b1
+801051ec:	e8 9f b1 ff ff       	call   80100390 <panic>
+801051f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051ff:	90                   	nop
+
+80105200 <release>:
+{
+80105200:	f3 0f 1e fb          	endbr32 
+80105204:	55                   	push   %ebp
+80105205:	89 e5                	mov    %esp,%ebp
+80105207:	53                   	push   %ebx
+80105208:	83 ec 10             	sub    $0x10,%esp
+8010520b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010462e:	53                   	push   %ebx
-8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
-80104634:	83 c4 10             	add    $0x10,%esp
-80104637:	85 c0                	test   %eax,%eax
-80104639:	74 22                	je     8010465d <release+0x3d>
+8010520e:	53                   	push   %ebx
+8010520f:	e8 dc fe ff ff       	call   801050f0 <holding>
+80105214:	83 c4 10             	add    $0x10,%esp
+80105217:	85 c0                	test   %eax,%eax
+80105219:	74 22                	je     8010523d <release+0x3d>
   lk->pcs[0] = 0;
-8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010521b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80105222:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80105229:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010522e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104657:	c9                   	leave  
+80105234:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105237:	c9                   	leave  
   popcli();
-80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
+80105238:	e9 53 fe ff ff       	jmp    80105090 <popcli>
     panic("release");
-8010465d:	83 ec 0c             	sub    $0xc,%esp
-80104660:	68 75 77 10 80       	push   $0x80107775
-80104665:	e8 26 bd ff ff       	call   80100390 <panic>
-8010466a:	66 90                	xchg   %ax,%ax
-8010466c:	66 90                	xchg   %ax,%ax
-8010466e:	66 90                	xchg   %ax,%ax
+8010523d:	83 ec 0c             	sub    $0xc,%esp
+80105240:	68 b9 85 10 80       	push   $0x801085b9
+80105245:	e8 46 b1 ff ff       	call   80100390 <panic>
+8010524a:	66 90                	xchg   %ax,%ax
+8010524c:	66 90                	xchg   %ax,%ax
+8010524e:	66 90                	xchg   %ax,%ax
 
-80104670 <memset>:
+80105250 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104670:	f3 0f 1e fb          	endbr32 
-80104674:	55                   	push   %ebp
-80104675:	89 e5                	mov    %esp,%ebp
-80104677:	57                   	push   %edi
-80104678:	8b 55 08             	mov    0x8(%ebp),%edx
-8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010467e:	53                   	push   %ebx
-8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105250:	f3 0f 1e fb          	endbr32 
+80105254:	55                   	push   %ebp
+80105255:	89 e5                	mov    %esp,%ebp
+80105257:	57                   	push   %edi
+80105258:	8b 55 08             	mov    0x8(%ebp),%edx
+8010525b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010525e:	53                   	push   %ebx
+8010525f:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-80104682:	89 d7                	mov    %edx,%edi
-80104684:	09 cf                	or     %ecx,%edi
-80104686:	83 e7 03             	and    $0x3,%edi
-80104689:	75 25                	jne    801046b0 <memset+0x40>
+80105262:	89 d7                	mov    %edx,%edi
+80105264:	09 cf                	or     %ecx,%edi
+80105266:	83 e7 03             	and    $0x3,%edi
+80105269:	75 25                	jne    80105290 <memset+0x40>
     c &= 0xFF;
-8010468b:	0f b6 f8             	movzbl %al,%edi
+8010526b:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010468e:	c1 e0 18             	shl    $0x18,%eax
-80104691:	89 fb                	mov    %edi,%ebx
-80104693:	c1 e9 02             	shr    $0x2,%ecx
-80104696:	c1 e3 10             	shl    $0x10,%ebx
-80104699:	09 d8                	or     %ebx,%eax
-8010469b:	09 f8                	or     %edi,%eax
-8010469d:	c1 e7 08             	shl    $0x8,%edi
-801046a0:	09 f8                	or     %edi,%eax
+8010526e:	c1 e0 18             	shl    $0x18,%eax
+80105271:	89 fb                	mov    %edi,%ebx
+80105273:	c1 e9 02             	shr    $0x2,%ecx
+80105276:	c1 e3 10             	shl    $0x10,%ebx
+80105279:	09 d8                	or     %ebx,%eax
+8010527b:	09 f8                	or     %edi,%eax
+8010527d:	c1 e7 08             	shl    $0x8,%edi
+80105280:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801046a2:	89 d7                	mov    %edx,%edi
-801046a4:	fc                   	cld    
-801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
+80105282:	89 d7                	mov    %edx,%edi
+80105284:	fc                   	cld    
+80105285:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801046a7:	5b                   	pop    %ebx
-801046a8:	89 d0                	mov    %edx,%eax
-801046aa:	5f                   	pop    %edi
-801046ab:	5d                   	pop    %ebp
-801046ac:	c3                   	ret    
-801046ad:	8d 76 00             	lea    0x0(%esi),%esi
+80105287:	5b                   	pop    %ebx
+80105288:	89 d0                	mov    %edx,%eax
+8010528a:	5f                   	pop    %edi
+8010528b:	5d                   	pop    %ebp
+8010528c:	c3                   	ret    
+8010528d:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("cld; rep stosb" :
-801046b0:	89 d7                	mov    %edx,%edi
-801046b2:	fc                   	cld    
-801046b3:	f3 aa                	rep stos %al,%es:(%edi)
-801046b5:	5b                   	pop    %ebx
-801046b6:	89 d0                	mov    %edx,%eax
-801046b8:	5f                   	pop    %edi
-801046b9:	5d                   	pop    %ebp
-801046ba:	c3                   	ret    
-801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046bf:	90                   	nop
+80105290:	89 d7                	mov    %edx,%edi
+80105292:	fc                   	cld    
+80105293:	f3 aa                	rep stos %al,%es:(%edi)
+80105295:	5b                   	pop    %ebx
+80105296:	89 d0                	mov    %edx,%eax
+80105298:	5f                   	pop    %edi
+80105299:	5d                   	pop    %ebp
+8010529a:	c3                   	ret    
+8010529b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010529f:	90                   	nop
 
-801046c0 <memcmp>:
+801052a0 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046c0:	f3 0f 1e fb          	endbr32 
-801046c4:	55                   	push   %ebp
-801046c5:	89 e5                	mov    %esp,%ebp
-801046c7:	56                   	push   %esi
-801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
-801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ce:	53                   	push   %ebx
-801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+801052a0:	f3 0f 1e fb          	endbr32 
+801052a4:	55                   	push   %ebp
+801052a5:	89 e5                	mov    %esp,%ebp
+801052a7:	56                   	push   %esi
+801052a8:	8b 75 10             	mov    0x10(%ebp),%esi
+801052ab:	8b 55 08             	mov    0x8(%ebp),%edx
+801052ae:	53                   	push   %ebx
+801052af:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046d2:	85 f6                	test   %esi,%esi
-801046d4:	74 2a                	je     80104700 <memcmp+0x40>
-801046d6:	01 c6                	add    %eax,%esi
-801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801052b2:	85 f6                	test   %esi,%esi
+801052b4:	74 2a                	je     801052e0 <memcmp+0x40>
+801052b6:	01 c6                	add    %eax,%esi
+801052b8:	eb 10                	jmp    801052ca <memcmp+0x2a>
+801052ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046e0:	83 c0 01             	add    $0x1,%eax
-801046e3:	83 c2 01             	add    $0x1,%edx
+801052c0:	83 c0 01             	add    $0x1,%eax
+801052c3:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046e6:	39 f0                	cmp    %esi,%eax
-801046e8:	74 16                	je     80104700 <memcmp+0x40>
+801052c6:	39 f0                	cmp    %esi,%eax
+801052c8:	74 16                	je     801052e0 <memcmp+0x40>
     if(*s1 != *s2)
-801046ea:	0f b6 0a             	movzbl (%edx),%ecx
-801046ed:	0f b6 18             	movzbl (%eax),%ebx
-801046f0:	38 d9                	cmp    %bl,%cl
-801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
+801052ca:	0f b6 0a             	movzbl (%edx),%ecx
+801052cd:	0f b6 18             	movzbl (%eax),%ebx
+801052d0:	38 d9                	cmp    %bl,%cl
+801052d2:	74 ec                	je     801052c0 <memcmp+0x20>
       return *s1 - *s2;
-801046f4:	0f b6 c1             	movzbl %cl,%eax
-801046f7:	29 d8                	sub    %ebx,%eax
+801052d4:	0f b6 c1             	movzbl %cl,%eax
+801052d7:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	5b                   	pop    %ebx
+801052d9:	5b                   	pop    %ebx
+801052da:	5e                   	pop    %esi
+801052db:	5d                   	pop    %ebp
+801052dc:	c3                   	ret    
+801052dd:	8d 76 00             	lea    0x0(%esi),%esi
+801052e0:	5b                   	pop    %ebx
   return 0;
-80104701:	31 c0                	xor    %eax,%eax
+801052e1:	31 c0                	xor    %eax,%eax
 }
-80104703:	5e                   	pop    %esi
-80104704:	5d                   	pop    %ebp
-80104705:	c3                   	ret    
-80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010470d:	8d 76 00             	lea    0x0(%esi),%esi
+801052e3:	5e                   	pop    %esi
+801052e4:	5d                   	pop    %ebp
+801052e5:	c3                   	ret    
+801052e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ed:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104710 <memmove>:
+801052f0 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104710:	f3 0f 1e fb          	endbr32 
-80104714:	55                   	push   %ebp
-80104715:	89 e5                	mov    %esp,%ebp
-80104717:	57                   	push   %edi
-80104718:	8b 55 08             	mov    0x8(%ebp),%edx
-8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010471e:	56                   	push   %esi
-8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
+801052f0:	f3 0f 1e fb          	endbr32 
+801052f4:	55                   	push   %ebp
+801052f5:	89 e5                	mov    %esp,%ebp
+801052f7:	57                   	push   %edi
+801052f8:	8b 55 08             	mov    0x8(%ebp),%edx
+801052fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801052fe:	56                   	push   %esi
+801052ff:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80104722:	39 d6                	cmp    %edx,%esi
-80104724:	73 2a                	jae    80104750 <memmove+0x40>
-80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104729:	39 fa                	cmp    %edi,%edx
-8010472b:	73 23                	jae    80104750 <memmove+0x40>
-8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80105302:	39 d6                	cmp    %edx,%esi
+80105304:	73 2a                	jae    80105330 <memmove+0x40>
+80105306:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80105309:	39 fa                	cmp    %edi,%edx
+8010530b:	73 23                	jae    80105330 <memmove+0x40>
+8010530d:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80104730:	85 c9                	test   %ecx,%ecx
-80104732:	74 13                	je     80104747 <memmove+0x37>
-80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105310:	85 c9                	test   %ecx,%ecx
+80105312:	74 13                	je     80105327 <memmove+0x37>
+80105314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80105318:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+8010531c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-8010473f:	83 e8 01             	sub    $0x1,%eax
-80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104745:	75 f1                	jne    80104738 <memmove+0x28>
+8010531f:	83 e8 01             	sub    $0x1,%eax
+80105322:	83 f8 ff             	cmp    $0xffffffff,%eax
+80105325:	75 f1                	jne    80105318 <memmove+0x28>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80104747:	5e                   	pop    %esi
-80104748:	89 d0                	mov    %edx,%eax
-8010474a:	5f                   	pop    %edi
-8010474b:	5d                   	pop    %ebp
-8010474c:	c3                   	ret    
-8010474d:	8d 76 00             	lea    0x0(%esi),%esi
+80105327:	5e                   	pop    %esi
+80105328:	89 d0                	mov    %edx,%eax
+8010532a:	5f                   	pop    %edi
+8010532b:	5d                   	pop    %ebp
+8010532c:	c3                   	ret    
+8010532d:	8d 76 00             	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104753:	89 d7                	mov    %edx,%edi
-80104755:	85 c9                	test   %ecx,%ecx
-80104757:	74 ee                	je     80104747 <memmove+0x37>
-80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105330:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80105333:	89 d7                	mov    %edx,%edi
+80105335:	85 c9                	test   %ecx,%ecx
+80105337:	74 ee                	je     80105327 <memmove+0x37>
+80105339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80105340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104761:	39 f0                	cmp    %esi,%eax
-80104763:	75 fb                	jne    80104760 <memmove+0x50>
+80105341:	39 f0                	cmp    %esi,%eax
+80105343:	75 fb                	jne    80105340 <memmove+0x50>
 }
-80104765:	5e                   	pop    %esi
-80104766:	89 d0                	mov    %edx,%eax
-80104768:	5f                   	pop    %edi
-80104769:	5d                   	pop    %ebp
-8010476a:	c3                   	ret    
-8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010476f:	90                   	nop
+80105345:	5e                   	pop    %esi
+80105346:	89 d0                	mov    %edx,%eax
+80105348:	5f                   	pop    %edi
+80105349:	5d                   	pop    %ebp
+8010534a:	c3                   	ret    
+8010534b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010534f:	90                   	nop
 
-80104770 <memcpy>:
+80105350 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-80104770:	f3 0f 1e fb          	endbr32 
+80105350:	f3 0f 1e fb          	endbr32 
   return memmove(dst, src, n);
-80104774:	eb 9a                	jmp    80104710 <memmove>
-80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+80105354:	eb 9a                	jmp    801052f0 <memmove>
+80105356:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010535d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104780 <strncmp>:
+80105360 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104780:	f3 0f 1e fb          	endbr32 
-80104784:	55                   	push   %ebp
-80104785:	89 e5                	mov    %esp,%ebp
-80104787:	56                   	push   %esi
-80104788:	8b 75 10             	mov    0x10(%ebp),%esi
-8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010478e:	53                   	push   %ebx
-8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105360:	f3 0f 1e fb          	endbr32 
+80105364:	55                   	push   %ebp
+80105365:	89 e5                	mov    %esp,%ebp
+80105367:	56                   	push   %esi
+80105368:	8b 75 10             	mov    0x10(%ebp),%esi
+8010536b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010536e:	53                   	push   %ebx
+8010536f:	8b 45 0c             	mov    0xc(%ebp),%eax
   while(n > 0 && *p && *p == *q)
-80104792:	85 f6                	test   %esi,%esi
-80104794:	74 32                	je     801047c8 <strncmp+0x48>
-80104796:	01 c6                	add    %eax,%esi
-80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
-8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801047a0:	38 da                	cmp    %bl,%dl
-801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
+80105372:	85 f6                	test   %esi,%esi
+80105374:	74 32                	je     801053a8 <strncmp+0x48>
+80105376:	01 c6                	add    %eax,%esi
+80105378:	eb 14                	jmp    8010538e <strncmp+0x2e>
+8010537a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105380:	38 da                	cmp    %bl,%dl
+80105382:	75 14                	jne    80105398 <strncmp+0x38>
     n--, p++, q++;
-801047a4:	83 c0 01             	add    $0x1,%eax
-801047a7:	83 c1 01             	add    $0x1,%ecx
+80105384:	83 c0 01             	add    $0x1,%eax
+80105387:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801047aa:	39 f0                	cmp    %esi,%eax
-801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
-801047ae:	0f b6 11             	movzbl (%ecx),%edx
-801047b1:	0f b6 18             	movzbl (%eax),%ebx
-801047b4:	84 d2                	test   %dl,%dl
-801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
+8010538a:	39 f0                	cmp    %esi,%eax
+8010538c:	74 1a                	je     801053a8 <strncmp+0x48>
+8010538e:	0f b6 11             	movzbl (%ecx),%edx
+80105391:	0f b6 18             	movzbl (%eax),%ebx
+80105394:	84 d2                	test   %dl,%dl
+80105396:	75 e8                	jne    80105380 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047b8:	0f b6 c2             	movzbl %dl,%eax
-801047bb:	29 d8                	sub    %ebx,%eax
+80105398:	0f b6 c2             	movzbl %dl,%eax
+8010539b:	29 d8                	sub    %ebx,%eax
 }
-801047bd:	5b                   	pop    %ebx
-801047be:	5e                   	pop    %esi
-801047bf:	5d                   	pop    %ebp
-801047c0:	c3                   	ret    
-801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047c8:	5b                   	pop    %ebx
+8010539d:	5b                   	pop    %ebx
+8010539e:	5e                   	pop    %esi
+8010539f:	5d                   	pop    %ebp
+801053a0:	c3                   	ret    
+801053a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053a8:	5b                   	pop    %ebx
     return 0;
-801047c9:	31 c0                	xor    %eax,%eax
+801053a9:	31 c0                	xor    %eax,%eax
 }
-801047cb:	5e                   	pop    %esi
-801047cc:	5d                   	pop    %ebp
-801047cd:	c3                   	ret    
-801047ce:	66 90                	xchg   %ax,%ax
+801053ab:	5e                   	pop    %esi
+801053ac:	5d                   	pop    %ebp
+801053ad:	c3                   	ret    
+801053ae:	66 90                	xchg   %ax,%ax
 
-801047d0 <strncpy>:
+801053b0 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047d0:	f3 0f 1e fb          	endbr32 
-801047d4:	55                   	push   %ebp
-801047d5:	89 e5                	mov    %esp,%ebp
-801047d7:	57                   	push   %edi
-801047d8:	56                   	push   %esi
-801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047dc:	53                   	push   %ebx
-801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
+801053b0:	f3 0f 1e fb          	endbr32 
+801053b4:	55                   	push   %ebp
+801053b5:	89 e5                	mov    %esp,%ebp
+801053b7:	57                   	push   %edi
+801053b8:	56                   	push   %esi
+801053b9:	8b 75 08             	mov    0x8(%ebp),%esi
+801053bc:	53                   	push   %ebx
+801053bd:	8b 45 10             	mov    0x10(%ebp),%eax
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047e0:	89 f2                	mov    %esi,%edx
-801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
-801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047ef:	83 c2 01             	add    $0x1,%edx
-801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-801047f6:	89 f9                	mov    %edi,%ecx
-801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
-801047fb:	84 c9                	test   %cl,%cl
-801047fd:	74 09                	je     80104808 <strncpy+0x38>
-801047ff:	89 c3                	mov    %eax,%ebx
-80104801:	83 e8 01             	sub    $0x1,%eax
-80104804:	85 db                	test   %ebx,%ebx
-80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
+801053c0:	89 f2                	mov    %esi,%edx
+801053c2:	eb 1b                	jmp    801053df <strncpy+0x2f>
+801053c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053c8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+801053cc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801053cf:	83 c2 01             	add    $0x1,%edx
+801053d2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+801053d6:	89 f9                	mov    %edi,%ecx
+801053d8:	88 4a ff             	mov    %cl,-0x1(%edx)
+801053db:	84 c9                	test   %cl,%cl
+801053dd:	74 09                	je     801053e8 <strncpy+0x38>
+801053df:	89 c3                	mov    %eax,%ebx
+801053e1:	83 e8 01             	sub    $0x1,%eax
+801053e4:	85 db                	test   %ebx,%ebx
+801053e6:	7f e0                	jg     801053c8 <strncpy+0x18>
     ;
   while(n-- > 0)
-80104808:	89 d1                	mov    %edx,%ecx
-8010480a:	85 c0                	test   %eax,%eax
-8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
-8010480e:	66 90                	xchg   %ax,%ax
+801053e8:	89 d1                	mov    %edx,%ecx
+801053ea:	85 c0                	test   %eax,%eax
+801053ec:	7e 15                	jle    80105403 <strncpy+0x53>
+801053ee:	66 90                	xchg   %ax,%ax
     *s++ = 0;
-80104810:	83 c1 01             	add    $0x1,%ecx
-80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+801053f0:	83 c1 01             	add    $0x1,%ecx
+801053f3:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
   while(n-- > 0)
-80104817:	89 c8                	mov    %ecx,%eax
-80104819:	f7 d0                	not    %eax
-8010481b:	01 d0                	add    %edx,%eax
-8010481d:	01 d8                	add    %ebx,%eax
-8010481f:	85 c0                	test   %eax,%eax
-80104821:	7f ed                	jg     80104810 <strncpy+0x40>
+801053f7:	89 c8                	mov    %ecx,%eax
+801053f9:	f7 d0                	not    %eax
+801053fb:	01 d0                	add    %edx,%eax
+801053fd:	01 d8                	add    %ebx,%eax
+801053ff:	85 c0                	test   %eax,%eax
+80105401:	7f ed                	jg     801053f0 <strncpy+0x40>
   return os;
 }
-80104823:	5b                   	pop    %ebx
-80104824:	89 f0                	mov    %esi,%eax
-80104826:	5e                   	pop    %esi
-80104827:	5f                   	pop    %edi
-80104828:	5d                   	pop    %ebp
-80104829:	c3                   	ret    
-8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105403:	5b                   	pop    %ebx
+80105404:	89 f0                	mov    %esi,%eax
+80105406:	5e                   	pop    %esi
+80105407:	5f                   	pop    %edi
+80105408:	5d                   	pop    %ebp
+80105409:	c3                   	ret    
+8010540a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104830 <safestrcpy>:
+80105410 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104830:	f3 0f 1e fb          	endbr32 
-80104834:	55                   	push   %ebp
-80104835:	89 e5                	mov    %esp,%ebp
-80104837:	56                   	push   %esi
-80104838:	8b 55 10             	mov    0x10(%ebp),%edx
-8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010483e:	53                   	push   %ebx
-8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105410:	f3 0f 1e fb          	endbr32 
+80105414:	55                   	push   %ebp
+80105415:	89 e5                	mov    %esp,%ebp
+80105417:	56                   	push   %esi
+80105418:	8b 55 10             	mov    0x10(%ebp),%edx
+8010541b:	8b 75 08             	mov    0x8(%ebp),%esi
+8010541e:	53                   	push   %ebx
+8010541f:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80104842:	85 d2                	test   %edx,%edx
-80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
-80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010484a:	89 f2                	mov    %esi,%edx
-8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
-8010484e:	66 90                	xchg   %ax,%ax
+80105422:	85 d2                	test   %edx,%edx
+80105424:	7e 21                	jle    80105447 <safestrcpy+0x37>
+80105426:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+8010542a:	89 f2                	mov    %esi,%edx
+8010542c:	eb 12                	jmp    80105440 <safestrcpy+0x30>
+8010542e:	66 90                	xchg   %ax,%ax
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104850:	0f b6 08             	movzbl (%eax),%ecx
-80104853:	83 c0 01             	add    $0x1,%eax
-80104856:	83 c2 01             	add    $0x1,%edx
-80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010485c:	84 c9                	test   %cl,%cl
-8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
-80104860:	39 d8                	cmp    %ebx,%eax
-80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
+80105430:	0f b6 08             	movzbl (%eax),%ecx
+80105433:	83 c0 01             	add    $0x1,%eax
+80105436:	83 c2 01             	add    $0x1,%edx
+80105439:	88 4a ff             	mov    %cl,-0x1(%edx)
+8010543c:	84 c9                	test   %cl,%cl
+8010543e:	74 04                	je     80105444 <safestrcpy+0x34>
+80105440:	39 d8                	cmp    %ebx,%eax
+80105442:	75 ec                	jne    80105430 <safestrcpy+0x20>
     ;
   *s = 0;
-80104864:	c6 02 00             	movb   $0x0,(%edx)
+80105444:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104867:	89 f0                	mov    %esi,%eax
-80104869:	5b                   	pop    %ebx
-8010486a:	5e                   	pop    %esi
-8010486b:	5d                   	pop    %ebp
-8010486c:	c3                   	ret    
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
+80105447:	89 f0                	mov    %esi,%eax
+80105449:	5b                   	pop    %ebx
+8010544a:	5e                   	pop    %esi
+8010544b:	5d                   	pop    %ebp
+8010544c:	c3                   	ret    
+8010544d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104870 <strlen>:
+80105450 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
+80105450:	f3 0f 1e fb          	endbr32 
+80105454:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104875:	31 c0                	xor    %eax,%eax
+80105455:	31 c0                	xor    %eax,%eax
 {
-80104877:	89 e5                	mov    %esp,%ebp
-80104879:	8b 55 08             	mov    0x8(%ebp),%edx
+80105457:	89 e5                	mov    %esp,%ebp
+80105459:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
-8010487f:	74 10                	je     80104891 <strlen+0x21>
-80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104888:	83 c0 01             	add    $0x1,%eax
-8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-8010488f:	75 f7                	jne    80104888 <strlen+0x18>
+8010545c:	80 3a 00             	cmpb   $0x0,(%edx)
+8010545f:	74 10                	je     80105471 <strlen+0x21>
+80105461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105468:	83 c0 01             	add    $0x1,%eax
+8010546b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+8010546f:	75 f7                	jne    80105468 <strlen+0x18>
     ;
   return n;
 }
-80104891:	5d                   	pop    %ebp
-80104892:	c3                   	ret    
+80105471:	5d                   	pop    %ebp
+80105472:	c3                   	ret    
 
-80104893 <swtch>:
+80105473 <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
+80105473:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
+80105477:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-8010489b:	55                   	push   %ebp
+8010547b:	55                   	push   %ebp
   pushl %ebx
-8010489c:	53                   	push   %ebx
+8010547c:	53                   	push   %ebx
   pushl %esi
-8010489d:	56                   	push   %esi
+8010547d:	56                   	push   %esi
   pushl %edi
-8010489e:	57                   	push   %edi
+8010547e:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-8010489f:	89 20                	mov    %esp,(%eax)
+8010547f:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801048a1:	89 d4                	mov    %edx,%esp
+80105481:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801048a3:	5f                   	pop    %edi
+80105483:	5f                   	pop    %edi
   popl %esi
-801048a4:	5e                   	pop    %esi
+80105484:	5e                   	pop    %esi
   popl %ebx
-801048a5:	5b                   	pop    %ebx
+80105485:	5b                   	pop    %ebx
   popl %ebp
-801048a6:	5d                   	pop    %ebp
+80105486:	5d                   	pop    %ebp
   ret
-801048a7:	c3                   	ret    
-801048a8:	66 90                	xchg   %ax,%ax
-801048aa:	66 90                	xchg   %ax,%ax
-801048ac:	66 90                	xchg   %ax,%ax
-801048ae:	66 90                	xchg   %ax,%ax
+80105487:	c3                   	ret    
+80105488:	66 90                	xchg   %ax,%ax
+8010548a:	66 90                	xchg   %ax,%ax
+8010548c:	66 90                	xchg   %ax,%ax
+8010548e:	66 90                	xchg   %ax,%ax
 
-801048b0 <fetchint>:
+80105490 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801048b0:	f3 0f 1e fb          	endbr32 
-801048b4:	55                   	push   %ebp
-801048b5:	89 e5                	mov    %esp,%ebp
-801048b7:	53                   	push   %ebx
-801048b8:	83 ec 04             	sub    $0x4,%esp
-801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105490:	f3 0f 1e fb          	endbr32 
+80105494:	55                   	push   %ebp
+80105495:	89 e5                	mov    %esp,%ebp
+80105497:	53                   	push   %ebx
+80105498:	83 ec 04             	sub    $0x4,%esp
+8010549b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
+8010549e:	e8 cd eb ff ff       	call   80104070 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801048c3:	8b 00                	mov    (%eax),%eax
-801048c5:	39 d8                	cmp    %ebx,%eax
-801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
-801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
-801048cc:	39 d0                	cmp    %edx,%eax
-801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
+801054a3:	8b 00                	mov    (%eax),%eax
+801054a5:	39 d8                	cmp    %ebx,%eax
+801054a7:	76 17                	jbe    801054c0 <fetchint+0x30>
+801054a9:	8d 53 04             	lea    0x4(%ebx),%edx
+801054ac:	39 d0                	cmp    %edx,%eax
+801054ae:	72 10                	jb     801054c0 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048d3:	8b 13                	mov    (%ebx),%edx
-801048d5:	89 10                	mov    %edx,(%eax)
+801054b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+801054b3:	8b 13                	mov    (%ebx),%edx
+801054b5:	89 10                	mov    %edx,(%eax)
   return 0;
-801048d7:	31 c0                	xor    %eax,%eax
+801054b7:	31 c0                	xor    %eax,%eax
 }
-801048d9:	83 c4 04             	add    $0x4,%esp
-801048dc:	5b                   	pop    %ebx
-801048dd:	5d                   	pop    %ebp
-801048de:	c3                   	ret    
-801048df:	90                   	nop
-    return -1;
-801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
-801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ee:	66 90                	xchg   %ax,%ax
+801054b9:	83 c4 04             	add    $0x4,%esp
+801054bc:	5b                   	pop    %ebx
+801054bd:	5d                   	pop    %ebp
+801054be:	c3                   	ret    
+801054bf:	90                   	nop
+    return -1;
+801054c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054c5:	eb f2                	jmp    801054b9 <fetchint+0x29>
+801054c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054ce:	66 90                	xchg   %ax,%ax
 
-801048f0 <fetchstr>:
+801054d0 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048f0:	f3 0f 1e fb          	endbr32 
-801048f4:	55                   	push   %ebp
-801048f5:	89 e5                	mov    %esp,%ebp
-801048f7:	53                   	push   %ebx
-801048f8:	83 ec 04             	sub    $0x4,%esp
-801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801054d0:	f3 0f 1e fb          	endbr32 
+801054d4:	55                   	push   %ebp
+801054d5:	89 e5                	mov    %esp,%ebp
+801054d7:	53                   	push   %ebx
+801054d8:	83 ec 04             	sub    $0x4,%esp
+801054db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
+801054de:	e8 8d eb ff ff       	call   80104070 <myproc>
 
   if(addr >= curproc->sz)
-80104903:	39 18                	cmp    %ebx,(%eax)
-80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
+801054e3:	39 18                	cmp    %ebx,(%eax)
+801054e5:	76 31                	jbe    80105518 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010490a:	89 1a                	mov    %ebx,(%edx)
+801054e7:	8b 55 0c             	mov    0xc(%ebp),%edx
+801054ea:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010490c:	8b 10                	mov    (%eax),%edx
+801054ec:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010490e:	39 d3                	cmp    %edx,%ebx
-80104910:	73 26                	jae    80104938 <fetchstr+0x48>
-80104912:	89 d8                	mov    %ebx,%eax
-80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
-80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491d:	8d 76 00             	lea    0x0(%esi),%esi
-80104920:	83 c0 01             	add    $0x1,%eax
-80104923:	39 c2                	cmp    %eax,%edx
-80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
+801054ee:	39 d3                	cmp    %edx,%ebx
+801054f0:	73 26                	jae    80105518 <fetchstr+0x48>
+801054f2:	89 d8                	mov    %ebx,%eax
+801054f4:	eb 11                	jmp    80105507 <fetchstr+0x37>
+801054f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054fd:	8d 76 00             	lea    0x0(%esi),%esi
+80105500:	83 c0 01             	add    $0x1,%eax
+80105503:	39 c2                	cmp    %eax,%edx
+80105505:	76 11                	jbe    80105518 <fetchstr+0x48>
     if(*s == 0)
-80104927:	80 38 00             	cmpb   $0x0,(%eax)
-8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
+80105507:	80 38 00             	cmpb   $0x0,(%eax)
+8010550a:	75 f4                	jne    80105500 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010492c:	83 c4 04             	add    $0x4,%esp
+8010550c:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010492f:	29 d8                	sub    %ebx,%eax
+8010550f:	29 d8                	sub    %ebx,%eax
 }
-80104931:	5b                   	pop    %ebx
-80104932:	5d                   	pop    %ebp
-80104933:	c3                   	ret    
-80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104938:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104940:	5b                   	pop    %ebx
-80104941:	5d                   	pop    %ebp
-80104942:	c3                   	ret    
-80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105511:	5b                   	pop    %ebx
+80105512:	5d                   	pop    %ebp
+80105513:	c3                   	ret    
+80105514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105518:	83 c4 04             	add    $0x4,%esp
+    return -1;
+8010551b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105520:	5b                   	pop    %ebx
+80105521:	5d                   	pop    %ebp
+80105522:	c3                   	ret    
+80105523:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010552a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104950 <argint>:
+80105530 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104950:	f3 0f 1e fb          	endbr32 
-80104954:	55                   	push   %ebp
-80104955:	89 e5                	mov    %esp,%ebp
-80104957:	56                   	push   %esi
-80104958:	53                   	push   %ebx
+80105530:	f3 0f 1e fb          	endbr32 
+80105534:	55                   	push   %ebp
+80105535:	89 e5                	mov    %esp,%ebp
+80105537:	56                   	push   %esi
+80105538:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
-8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104961:	8b 40 18             	mov    0x18(%eax),%eax
-80104964:	8b 40 44             	mov    0x44(%eax),%eax
-80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80105539:	e8 32 eb ff ff       	call   80104070 <myproc>
+8010553e:	8b 55 08             	mov    0x8(%ebp),%edx
+80105541:	8b 40 18             	mov    0x18(%eax),%eax
+80105544:	8b 40 44             	mov    0x44(%eax),%eax
+80105547:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
+8010554a:	e8 21 eb ff ff       	call   80104070 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
+8010554f:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104972:	8b 00                	mov    (%eax),%eax
-80104974:	39 c6                	cmp    %eax,%esi
-80104976:	73 18                	jae    80104990 <argint+0x40>
-80104978:	8d 53 08             	lea    0x8(%ebx),%edx
-8010497b:	39 d0                	cmp    %edx,%eax
-8010497d:	72 11                	jb     80104990 <argint+0x40>
+80105552:	8b 00                	mov    (%eax),%eax
+80105554:	39 c6                	cmp    %eax,%esi
+80105556:	73 18                	jae    80105570 <argint+0x40>
+80105558:	8d 53 08             	lea    0x8(%ebx),%edx
+8010555b:	39 d0                	cmp    %edx,%eax
+8010555d:	72 11                	jb     80105570 <argint+0x40>
   *ip = *(int*)(addr);
-8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104982:	8b 53 04             	mov    0x4(%ebx),%edx
-80104985:	89 10                	mov    %edx,(%eax)
+8010555f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105562:	8b 53 04             	mov    0x4(%ebx),%edx
+80105565:	89 10                	mov    %edx,(%eax)
   return 0;
-80104987:	31 c0                	xor    %eax,%eax
+80105567:	31 c0                	xor    %eax,%eax
 }
-80104989:	5b                   	pop    %ebx
-8010498a:	5e                   	pop    %esi
-8010498b:	5d                   	pop    %ebp
-8010498c:	c3                   	ret    
-8010498d:	8d 76 00             	lea    0x0(%esi),%esi
+80105569:	5b                   	pop    %ebx
+8010556a:	5e                   	pop    %esi
+8010556b:	5d                   	pop    %ebp
+8010556c:	c3                   	ret    
+8010556d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105570:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104995:	eb f2                	jmp    80104989 <argint+0x39>
-80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010499e:	66 90                	xchg   %ax,%ax
+80105575:	eb f2                	jmp    80105569 <argint+0x39>
+80105577:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010557e:	66 90                	xchg   %ax,%ax
 
-801049a0 <argptr>:
+80105580 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801049a0:	f3 0f 1e fb          	endbr32 
-801049a4:	55                   	push   %ebp
-801049a5:	89 e5                	mov    %esp,%ebp
-801049a7:	56                   	push   %esi
-801049a8:	53                   	push   %ebx
-801049a9:	83 ec 10             	sub    $0x10,%esp
-801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80105580:	f3 0f 1e fb          	endbr32 
+80105584:	55                   	push   %ebp
+80105585:	89 e5                	mov    %esp,%ebp
+80105587:	56                   	push   %esi
+80105588:	53                   	push   %ebx
+80105589:	83 ec 10             	sub    $0x10,%esp
+8010558c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
+8010558f:	e8 dc ea ff ff       	call   80104070 <myproc>
  
   if(argint(n, &i) < 0)
-801049b4:	83 ec 08             	sub    $0x8,%esp
+80105594:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-801049b7:	89 c6                	mov    %eax,%esi
+80105597:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801049bc:	50                   	push   %eax
-801049bd:	ff 75 08             	pushl  0x8(%ebp)
-801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
+80105599:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010559c:	50                   	push   %eax
+8010559d:	ff 75 08             	pushl  0x8(%ebp)
+801055a0:	e8 8b ff ff ff       	call   80105530 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049c5:	83 c4 10             	add    $0x10,%esp
-801049c8:	85 c0                	test   %eax,%eax
-801049ca:	78 24                	js     801049f0 <argptr+0x50>
-801049cc:	85 db                	test   %ebx,%ebx
-801049ce:	78 20                	js     801049f0 <argptr+0x50>
-801049d0:	8b 16                	mov    (%esi),%edx
-801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801049d5:	39 c2                	cmp    %eax,%edx
-801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
-801049d9:	01 c3                	add    %eax,%ebx
-801049db:	39 da                	cmp    %ebx,%edx
-801049dd:	72 11                	jb     801049f0 <argptr+0x50>
+801055a5:	83 c4 10             	add    $0x10,%esp
+801055a8:	85 c0                	test   %eax,%eax
+801055aa:	78 24                	js     801055d0 <argptr+0x50>
+801055ac:	85 db                	test   %ebx,%ebx
+801055ae:	78 20                	js     801055d0 <argptr+0x50>
+801055b0:	8b 16                	mov    (%esi),%edx
+801055b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801055b5:	39 c2                	cmp    %eax,%edx
+801055b7:	76 17                	jbe    801055d0 <argptr+0x50>
+801055b9:	01 c3                	add    %eax,%ebx
+801055bb:	39 da                	cmp    %ebx,%edx
+801055bd:	72 11                	jb     801055d0 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049e2:	89 02                	mov    %eax,(%edx)
+801055bf:	8b 55 0c             	mov    0xc(%ebp),%edx
+801055c2:	89 02                	mov    %eax,(%edx)
   return 0;
-801049e4:	31 c0                	xor    %eax,%eax
+801055c4:	31 c0                	xor    %eax,%eax
 }
-801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801049e9:	5b                   	pop    %ebx
-801049ea:	5e                   	pop    %esi
-801049eb:	5d                   	pop    %ebp
-801049ec:	c3                   	ret    
-801049ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
-801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049fe:	66 90                	xchg   %ax,%ax
+801055c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801055c9:	5b                   	pop    %ebx
+801055ca:	5e                   	pop    %esi
+801055cb:	5d                   	pop    %ebp
+801055cc:	c3                   	ret    
+801055cd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801055d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055d5:	eb ef                	jmp    801055c6 <argptr+0x46>
+801055d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055de:	66 90                	xchg   %ax,%ax
 
-80104a00 <argstr>:
+801055e0 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104a00:	f3 0f 1e fb          	endbr32 
-80104a04:	55                   	push   %ebp
-80104a05:	89 e5                	mov    %esp,%ebp
-80104a07:	83 ec 20             	sub    $0x20,%esp
+801055e0:	f3 0f 1e fb          	endbr32 
+801055e4:	55                   	push   %ebp
+801055e5:	89 e5                	mov    %esp,%ebp
+801055e7:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0d:	50                   	push   %eax
-80104a0e:	ff 75 08             	pushl  0x8(%ebp)
-80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
-80104a16:	83 c4 10             	add    $0x10,%esp
-80104a19:	85 c0                	test   %eax,%eax
-80104a1b:	78 13                	js     80104a30 <argstr+0x30>
+801055ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801055ed:	50                   	push   %eax
+801055ee:	ff 75 08             	pushl  0x8(%ebp)
+801055f1:	e8 3a ff ff ff       	call   80105530 <argint>
+801055f6:	83 c4 10             	add    $0x10,%esp
+801055f9:	85 c0                	test   %eax,%eax
+801055fb:	78 13                	js     80105610 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104a1d:	83 ec 08             	sub    $0x8,%esp
-80104a20:	ff 75 0c             	pushl  0xc(%ebp)
-80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
-80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
-80104a2b:	83 c4 10             	add    $0x10,%esp
-}
-80104a2e:	c9                   	leave  
-80104a2f:	c3                   	ret    
-80104a30:	c9                   	leave  
-    return -1;
-80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a36:	c3                   	ret    
-80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a3e:	66 90                	xchg   %ax,%ax
+801055fd:	83 ec 08             	sub    $0x8,%esp
+80105600:	ff 75 0c             	pushl  0xc(%ebp)
+80105603:	ff 75 f4             	pushl  -0xc(%ebp)
+80105606:	e8 c5 fe ff ff       	call   801054d0 <fetchstr>
+8010560b:	83 c4 10             	add    $0x10,%esp
+}
+8010560e:	c9                   	leave  
+8010560f:	c3                   	ret    
+80105610:	c9                   	leave  
+    return -1;
+80105611:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105616:	c3                   	ret    
+80105617:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010561e:	66 90                	xchg   %ax,%ax
 
-80104a40 <syscall>:
-[SYS_close]   sys_close,
+80105620 <syscall>:
+[SYS_set_burst_time] sys_set_burst_time,
 };
 
 void
 syscall(void)
 {
-80104a40:	f3 0f 1e fb          	endbr32 
-80104a44:	55                   	push   %ebp
-80104a45:	89 e5                	mov    %esp,%ebp
-80104a47:	53                   	push   %ebx
-80104a48:	83 ec 04             	sub    $0x4,%esp
+80105620:	f3 0f 1e fb          	endbr32 
+80105624:	55                   	push   %ebp
+80105625:	89 e5                	mov    %esp,%ebp
+80105627:	53                   	push   %ebx
+80105628:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
-80104a50:	89 c3                	mov    %eax,%ebx
+8010562b:	e8 40 ea ff ff       	call   80104070 <myproc>
+80105630:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a52:	8b 40 18             	mov    0x18(%eax),%eax
-80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
+80105632:	8b 40 18             	mov    0x18(%eax),%eax
+80105635:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a5b:	83 fa 14             	cmp    $0x14,%edx
-80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
-80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
-80104a67:	85 d2                	test   %edx,%edx
-80104a69:	74 15                	je     80104a80 <syscall+0x40>
+80105638:	8d 50 ff             	lea    -0x1(%eax),%edx
+8010563b:	83 fa 19             	cmp    $0x19,%edx
+8010563e:	77 20                	ja     80105660 <syscall+0x40>
+80105640:	8b 14 85 e0 85 10 80 	mov    -0x7fef7a20(,%eax,4),%edx
+80105647:	85 d2                	test   %edx,%edx
+80105649:	74 15                	je     80105660 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a6b:	ff d2                	call   *%edx
-80104a6d:	89 c2                	mov    %eax,%edx
-80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
+8010564b:	ff d2                	call   *%edx
+8010564d:	89 c2                	mov    %eax,%edx
+8010564f:	8b 43 18             	mov    0x18(%ebx),%eax
+80105652:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a78:	c9                   	leave  
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105655:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105658:	c9                   	leave  
+80105659:	c3                   	ret    
+8010565a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104a80:	50                   	push   %eax
+80105660:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80105661:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104a84:	50                   	push   %eax
-80104a85:	ff 73 10             	pushl  0x10(%ebx)
-80104a88:	68 7d 77 10 80       	push   $0x8010777d
-80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
+80105664:	50                   	push   %eax
+80105665:	ff 73 10             	pushl  0x10(%ebx)
+80105668:	68 c1 85 10 80       	push   $0x801085c1
+8010566d:	e8 3e b0 ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a95:	83 c4 10             	add    $0x10,%esp
-80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104aa2:	c9                   	leave  
-80104aa3:	c3                   	ret    
-80104aa4:	66 90                	xchg   %ax,%ax
-80104aa6:	66 90                	xchg   %ax,%ax
-80104aa8:	66 90                	xchg   %ax,%ax
-80104aaa:	66 90                	xchg   %ax,%ax
-80104aac:	66 90                	xchg   %ax,%ax
-80104aae:	66 90                	xchg   %ax,%ax
+80105672:	8b 43 18             	mov    0x18(%ebx),%eax
+80105675:	83 c4 10             	add    $0x10,%esp
+80105678:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+8010567f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105682:	c9                   	leave  
+80105683:	c3                   	ret    
+80105684:	66 90                	xchg   %ax,%ax
+80105686:	66 90                	xchg   %ax,%ax
+80105688:	66 90                	xchg   %ax,%ax
+8010568a:	66 90                	xchg   %ax,%ax
+8010568c:	66 90                	xchg   %ax,%ax
+8010568e:	66 90                	xchg   %ax,%ax
 
-80104ab0 <create>:
+80105690 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ab0:	55                   	push   %ebp
-80104ab1:	89 e5                	mov    %esp,%ebp
-80104ab3:	57                   	push   %edi
-80104ab4:	56                   	push   %esi
+80105690:	55                   	push   %ebp
+80105691:	89 e5                	mov    %esp,%ebp
+80105693:	57                   	push   %edi
+80105694:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105695:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ab8:	53                   	push   %ebx
-80104ab9:	83 ec 34             	sub    $0x34,%esp
-80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105698:	53                   	push   %ebx
+80105699:	83 ec 34             	sub    $0x34,%esp
+8010569c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010569f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ac2:	57                   	push   %edi
-80104ac3:	50                   	push   %eax
+801056a2:	57                   	push   %edi
+801056a3:	50                   	push   %eax
 {
-80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+801056a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801056a7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
-80104acf:	83 c4 10             	add    $0x10,%esp
-80104ad2:	85 c0                	test   %eax,%eax
-80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
+801056aa:	e8 a1 c9 ff ff       	call   80102050 <nameiparent>
+801056af:	83 c4 10             	add    $0x10,%esp
+801056b2:	85 c0                	test   %eax,%eax
+801056b4:	0f 84 46 01 00 00    	je     80105800 <create+0x170>
     return 0;
   ilock(dp);
-80104ada:	83 ec 0c             	sub    $0xc,%esp
-80104add:	89 c3                	mov    %eax,%ebx
-80104adf:	50                   	push   %eax
-80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
+801056ba:	83 ec 0c             	sub    $0xc,%esp
+801056bd:	89 c3                	mov    %eax,%ebx
+801056bf:	50                   	push   %eax
+801056c0:	e8 9b c0 ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104ae5:	83 c4 0c             	add    $0xc,%esp
-80104ae8:	6a 00                	push   $0x0
-80104aea:	57                   	push   %edi
-80104aeb:	53                   	push   %ebx
-80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
-80104af1:	83 c4 10             	add    $0x10,%esp
-80104af4:	89 c6                	mov    %eax,%esi
-80104af6:	85 c0                	test   %eax,%eax
-80104af8:	74 56                	je     80104b50 <create+0xa0>
+801056c5:	83 c4 0c             	add    $0xc,%esp
+801056c8:	6a 00                	push   $0x0
+801056ca:	57                   	push   %edi
+801056cb:	53                   	push   %ebx
+801056cc:	e8 df c5 ff ff       	call   80101cb0 <dirlookup>
+801056d1:	83 c4 10             	add    $0x10,%esp
+801056d4:	89 c6                	mov    %eax,%esi
+801056d6:	85 c0                	test   %eax,%eax
+801056d8:	74 56                	je     80105730 <create+0xa0>
     iunlockput(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	53                   	push   %ebx
-80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
+801056da:	83 ec 0c             	sub    $0xc,%esp
+801056dd:	53                   	push   %ebx
+801056de:	e8 1d c3 ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80104b03:	89 34 24             	mov    %esi,(%esp)
-80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
+801056e3:	89 34 24             	mov    %esi,(%esp)
+801056e6:	e8 75 c0 ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b0b:	83 c4 10             	add    $0x10,%esp
-80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b13:	75 1b                	jne    80104b30 <create+0x80>
-80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b1a:	75 14                	jne    80104b30 <create+0x80>
+801056eb:	83 c4 10             	add    $0x10,%esp
+801056ee:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+801056f3:	75 1b                	jne    80105710 <create+0x80>
+801056f5:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+801056fa:	75 14                	jne    80105710 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b1f:	89 f0                	mov    %esi,%eax
-80104b21:	5b                   	pop    %ebx
-80104b22:	5e                   	pop    %esi
-80104b23:	5f                   	pop    %edi
-80104b24:	5d                   	pop    %ebp
-80104b25:	c3                   	ret    
-80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+801056fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801056ff:	89 f0                	mov    %esi,%eax
+80105701:	5b                   	pop    %ebx
+80105702:	5e                   	pop    %esi
+80105703:	5f                   	pop    %edi
+80105704:	5d                   	pop    %ebp
+80105705:	c3                   	ret    
+80105706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010570d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b30:	83 ec 0c             	sub    $0xc,%esp
-80104b33:	56                   	push   %esi
+80105710:	83 ec 0c             	sub    $0xc,%esp
+80105713:	56                   	push   %esi
     return 0;
-80104b34:	31 f6                	xor    %esi,%esi
+80105714:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
+80105716:	e8 e5 c2 ff ff       	call   80101a00 <iunlockput>
     return 0;
-80104b3b:	83 c4 10             	add    $0x10,%esp
+8010571b:	83 c4 10             	add    $0x10,%esp
 }
-80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b41:	89 f0                	mov    %esi,%eax
-80104b43:	5b                   	pop    %ebx
-80104b44:	5e                   	pop    %esi
-80104b45:	5f                   	pop    %edi
-80104b46:	5d                   	pop    %ebp
-80104b47:	c3                   	ret    
-80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4f:	90                   	nop
+8010571e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105721:	89 f0                	mov    %esi,%eax
+80105723:	5b                   	pop    %ebx
+80105724:	5e                   	pop    %esi
+80105725:	5f                   	pop    %edi
+80105726:	5d                   	pop    %ebp
+80105727:	c3                   	ret    
+80105728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010572f:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b54:	83 ec 08             	sub    $0x8,%esp
-80104b57:	50                   	push   %eax
-80104b58:	ff 33                	pushl  (%ebx)
-80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
-80104b5f:	83 c4 10             	add    $0x10,%esp
-80104b62:	89 c6                	mov    %eax,%esi
-80104b64:	85 c0                	test   %eax,%eax
-80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
+80105730:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80105734:	83 ec 08             	sub    $0x8,%esp
+80105737:	50                   	push   %eax
+80105738:	ff 33                	pushl  (%ebx)
+8010573a:	e8 a1 be ff ff       	call   801015e0 <ialloc>
+8010573f:	83 c4 10             	add    $0x10,%esp
+80105742:	89 c6                	mov    %eax,%esi
+80105744:	85 c0                	test   %eax,%eax
+80105746:	0f 84 cd 00 00 00    	je     80105819 <create+0x189>
   ilock(ip);
-80104b6c:	83 ec 0c             	sub    $0xc,%esp
-80104b6f:	50                   	push   %eax
-80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
+8010574c:	83 ec 0c             	sub    $0xc,%esp
+8010574f:	50                   	push   %eax
+80105750:	e8 0b c0 ff ff       	call   80101760 <ilock>
   ip->major = major;
-80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
+80105755:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105759:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
+8010575d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105761:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
-80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
+80105765:	b8 01 00 00 00       	mov    $0x1,%eax
+8010576a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104b8e:	89 34 24             	mov    %esi,(%esp)
-80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
+8010576e:	89 34 24             	mov    %esi,(%esp)
+80105771:	e8 2a bf ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104b96:	83 c4 10             	add    $0x10,%esp
-80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104b9e:	74 30                	je     80104bd0 <create+0x120>
+80105776:	83 c4 10             	add    $0x10,%esp
+80105779:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+8010577e:	74 30                	je     801057b0 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104ba0:	83 ec 04             	sub    $0x4,%esp
-80104ba3:	ff 76 04             	pushl  0x4(%esi)
-80104ba6:	57                   	push   %edi
-80104ba7:	53                   	push   %ebx
-80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
-80104bad:	83 c4 10             	add    $0x10,%esp
-80104bb0:	85 c0                	test   %eax,%eax
-80104bb2:	78 78                	js     80104c2c <create+0x17c>
+80105780:	83 ec 04             	sub    $0x4,%esp
+80105783:	ff 76 04             	pushl  0x4(%esi)
+80105786:	57                   	push   %edi
+80105787:	53                   	push   %ebx
+80105788:	e8 e3 c7 ff ff       	call   80101f70 <dirlink>
+8010578d:	83 c4 10             	add    $0x10,%esp
+80105790:	85 c0                	test   %eax,%eax
+80105792:	78 78                	js     8010580c <create+0x17c>
   iunlockput(dp);
-80104bb4:	83 ec 0c             	sub    $0xc,%esp
-80104bb7:	53                   	push   %ebx
-80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
+80105794:	83 ec 0c             	sub    $0xc,%esp
+80105797:	53                   	push   %ebx
+80105798:	e8 63 c2 ff ff       	call   80101a00 <iunlockput>
   return ip;
-80104bbd:	83 c4 10             	add    $0x10,%esp
+8010579d:	83 c4 10             	add    $0x10,%esp
 }
-80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104bc3:	89 f0                	mov    %esi,%eax
-80104bc5:	5b                   	pop    %ebx
-80104bc6:	5e                   	pop    %esi
-80104bc7:	5f                   	pop    %edi
-80104bc8:	5d                   	pop    %ebp
-80104bc9:	c3                   	ret    
-80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801057a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801057a3:	89 f0                	mov    %esi,%eax
+801057a5:	5b                   	pop    %ebx
+801057a6:	5e                   	pop    %esi
+801057a7:	5f                   	pop    %edi
+801057a8:	5d                   	pop    %ebp
+801057a9:	c3                   	ret    
+801057aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bd0:	83 ec 0c             	sub    $0xc,%esp
+801057b0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+801057b3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bd8:	53                   	push   %ebx
-80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
+801057b8:	53                   	push   %ebx
+801057b9:	e8 e2 be ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bde:	83 c4 0c             	add    $0xc,%esp
-80104be1:	ff 76 04             	pushl  0x4(%esi)
-80104be4:	68 14 78 10 80       	push   $0x80107814
-80104be9:	56                   	push   %esi
-80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
-80104bef:	83 c4 10             	add    $0x10,%esp
-80104bf2:	85 c0                	test   %eax,%eax
-80104bf4:	78 18                	js     80104c0e <create+0x15e>
-80104bf6:	83 ec 04             	sub    $0x4,%esp
-80104bf9:	ff 73 04             	pushl  0x4(%ebx)
-80104bfc:	68 13 78 10 80       	push   $0x80107813
-80104c01:	56                   	push   %esi
-80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
-80104c07:	83 c4 10             	add    $0x10,%esp
-80104c0a:	85 c0                	test   %eax,%eax
-80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
+801057be:	83 c4 0c             	add    $0xc,%esp
+801057c1:	ff 76 04             	pushl  0x4(%esi)
+801057c4:	68 68 86 10 80       	push   $0x80108668
+801057c9:	56                   	push   %esi
+801057ca:	e8 a1 c7 ff ff       	call   80101f70 <dirlink>
+801057cf:	83 c4 10             	add    $0x10,%esp
+801057d2:	85 c0                	test   %eax,%eax
+801057d4:	78 18                	js     801057ee <create+0x15e>
+801057d6:	83 ec 04             	sub    $0x4,%esp
+801057d9:	ff 73 04             	pushl  0x4(%ebx)
+801057dc:	68 67 86 10 80       	push   $0x80108667
+801057e1:	56                   	push   %esi
+801057e2:	e8 89 c7 ff ff       	call   80101f70 <dirlink>
+801057e7:	83 c4 10             	add    $0x10,%esp
+801057ea:	85 c0                	test   %eax,%eax
+801057ec:	79 92                	jns    80105780 <create+0xf0>
       panic("create dots");
-80104c0e:	83 ec 0c             	sub    $0xc,%esp
-80104c11:	68 07 78 10 80       	push   $0x80107807
-80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
-80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c1f:	90                   	nop
+801057ee:	83 ec 0c             	sub    $0xc,%esp
+801057f1:	68 5b 86 10 80       	push   $0x8010865b
+801057f6:	e8 95 ab ff ff       	call   80100390 <panic>
+801057fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801057ff:	90                   	nop
 }
-80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105800:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c23:	31 f6                	xor    %esi,%esi
+80105803:	31 f6                	xor    %esi,%esi
 }
-80104c25:	5b                   	pop    %ebx
-80104c26:	89 f0                	mov    %esi,%eax
-80104c28:	5e                   	pop    %esi
-80104c29:	5f                   	pop    %edi
-80104c2a:	5d                   	pop    %ebp
-80104c2b:	c3                   	ret    
+80105805:	5b                   	pop    %ebx
+80105806:	89 f0                	mov    %esi,%eax
+80105808:	5e                   	pop    %esi
+80105809:	5f                   	pop    %edi
+8010580a:	5d                   	pop    %ebp
+8010580b:	c3                   	ret    
     panic("create: dirlink");
-80104c2c:	83 ec 0c             	sub    $0xc,%esp
-80104c2f:	68 16 78 10 80       	push   $0x80107816
-80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
+8010580c:	83 ec 0c             	sub    $0xc,%esp
+8010580f:	68 6a 86 10 80       	push   $0x8010866a
+80105814:	e8 77 ab ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104c39:	83 ec 0c             	sub    $0xc,%esp
-80104c3c:	68 f8 77 10 80       	push   $0x801077f8
-80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
-80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80105819:	83 ec 0c             	sub    $0xc,%esp
+8010581c:	68 4c 86 10 80       	push   $0x8010864c
+80105821:	e8 6a ab ff ff       	call   80100390 <panic>
+80105826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010582d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104c50 <argfd.constprop.0>:
+80105830 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104c50:	55                   	push   %ebp
-80104c51:	89 e5                	mov    %esp,%ebp
-80104c53:	56                   	push   %esi
-80104c54:	89 d6                	mov    %edx,%esi
-80104c56:	53                   	push   %ebx
-80104c57:	89 c3                	mov    %eax,%ebx
+80105830:	55                   	push   %ebp
+80105831:	89 e5                	mov    %esp,%ebp
+80105833:	56                   	push   %esi
+80105834:	89 d6                	mov    %edx,%esi
+80105836:	53                   	push   %ebx
+80105837:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105839:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104c5c:	83 ec 18             	sub    $0x18,%esp
+8010583c:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c5f:	50                   	push   %eax
-80104c60:	6a 00                	push   $0x0
-80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
-80104c67:	83 c4 10             	add    $0x10,%esp
-80104c6a:	85 c0                	test   %eax,%eax
-80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
+8010583f:	50                   	push   %eax
+80105840:	6a 00                	push   $0x0
+80105842:	e8 e9 fc ff ff       	call   80105530 <argint>
+80105847:	83 c4 10             	add    $0x10,%esp
+8010584a:	85 c0                	test   %eax,%eax
+8010584c:	78 2a                	js     80105878 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
-80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
-80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104c80:	85 c0                	test   %eax,%eax
-80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
+8010584e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105852:	77 24                	ja     80105878 <argfd.constprop.0+0x48>
+80105854:	e8 17 e8 ff ff       	call   80104070 <myproc>
+80105859:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010585c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105860:	85 c0                	test   %eax,%eax
+80105862:	74 14                	je     80105878 <argfd.constprop.0+0x48>
   if(pfd)
-80104c84:	85 db                	test   %ebx,%ebx
-80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
+80105864:	85 db                	test   %ebx,%ebx
+80105866:	74 02                	je     8010586a <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104c88:	89 13                	mov    %edx,(%ebx)
+80105868:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104c8a:	89 06                	mov    %eax,(%esi)
+8010586a:	89 06                	mov    %eax,(%esi)
   return 0;
-80104c8c:	31 c0                	xor    %eax,%eax
+8010586c:	31 c0                	xor    %eax,%eax
 }
-80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104c91:	5b                   	pop    %ebx
-80104c92:	5e                   	pop    %esi
-80104c93:	5d                   	pop    %ebp
-80104c94:	c3                   	ret    
-80104c95:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
-80104c9f:	90                   	nop
+8010586e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105871:	5b                   	pop    %ebx
+80105872:	5e                   	pop    %esi
+80105873:	5d                   	pop    %ebp
+80105874:	c3                   	ret    
+80105875:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010587d:	eb ef                	jmp    8010586e <argfd.constprop.0+0x3e>
+8010587f:	90                   	nop
 
-80104ca0 <sys_dup>:
+80105880 <sys_dup>:
 {
-80104ca0:	f3 0f 1e fb          	endbr32 
-80104ca4:	55                   	push   %ebp
+80105880:	f3 0f 1e fb          	endbr32 
+80105884:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104ca5:	31 c0                	xor    %eax,%eax
+80105885:	31 c0                	xor    %eax,%eax
 {
-80104ca7:	89 e5                	mov    %esp,%ebp
-80104ca9:	56                   	push   %esi
-80104caa:	53                   	push   %ebx
+80105887:	89 e5                	mov    %esp,%ebp
+80105889:	56                   	push   %esi
+8010588a:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010588b:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104cae:	83 ec 10             	sub    $0x10,%esp
+8010588e:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104cb6:	85 c0                	test   %eax,%eax
-80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
+80105891:	e8 9a ff ff ff       	call   80105830 <argfd.constprop.0>
+80105896:	85 c0                	test   %eax,%eax
+80105898:	78 1e                	js     801058b8 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
+8010589a:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104cbd:	31 db                	xor    %ebx,%ebx
+8010589d:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
+8010589f:	e8 cc e7 ff ff       	call   80104070 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104ccc:	85 d2                	test   %edx,%edx
-80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
+801058a8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801058ac:	85 d2                	test   %edx,%edx
+801058ae:	74 20                	je     801058d0 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80104cd0:	83 c3 01             	add    $0x1,%ebx
-80104cd3:	83 fb 10             	cmp    $0x10,%ebx
-80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
-}
-80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104ce0:	89 d8                	mov    %ebx,%eax
-80104ce2:	5b                   	pop    %ebx
-80104ce3:	5e                   	pop    %esi
-80104ce4:	5d                   	pop    %ebp
-80104ce5:	c3                   	ret    
-80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
+801058b0:	83 c3 01             	add    $0x1,%ebx
+801058b3:	83 fb 10             	cmp    $0x10,%ebx
+801058b6:	75 f0                	jne    801058a8 <sys_dup+0x28>
+}
+801058b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+801058bb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+801058c0:	89 d8                	mov    %ebx,%eax
+801058c2:	5b                   	pop    %ebx
+801058c3:	5e                   	pop    %esi
+801058c4:	5d                   	pop    %ebp
+801058c5:	c3                   	ret    
+801058c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058cd:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+801058d0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cf4:	83 ec 0c             	sub    $0xc,%esp
-80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
+801058d4:	83 ec 0c             	sub    $0xc,%esp
+801058d7:	ff 75 f4             	pushl  -0xc(%ebp)
+801058da:	e8 91 b5 ff ff       	call   80100e70 <filedup>
   return fd;
-80104cff:	83 c4 10             	add    $0x10,%esp
+801058df:	83 c4 10             	add    $0x10,%esp
 }
-80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d05:	89 d8                	mov    %ebx,%eax
-80104d07:	5b                   	pop    %ebx
-80104d08:	5e                   	pop    %esi
-80104d09:	5d                   	pop    %ebp
-80104d0a:	c3                   	ret    
-80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d0f:	90                   	nop
+801058e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801058e5:	89 d8                	mov    %ebx,%eax
+801058e7:	5b                   	pop    %ebx
+801058e8:	5e                   	pop    %esi
+801058e9:	5d                   	pop    %ebp
+801058ea:	c3                   	ret    
+801058eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058ef:	90                   	nop
 
-80104d10 <sys_read>:
+801058f0 <sys_read>:
 {
-80104d10:	f3 0f 1e fb          	endbr32 
-80104d14:	55                   	push   %ebp
+801058f0:	f3 0f 1e fb          	endbr32 
+801058f4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d15:	31 c0                	xor    %eax,%eax
+801058f5:	31 c0                	xor    %eax,%eax
 {
-80104d17:	89 e5                	mov    %esp,%ebp
-80104d19:	83 ec 18             	sub    $0x18,%esp
+801058f7:	89 e5                	mov    %esp,%ebp
+801058f9:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104d24:	85 c0                	test   %eax,%eax
-80104d26:	78 48                	js     80104d70 <sys_read+0x60>
-80104d28:	83 ec 08             	sub    $0x8,%esp
-80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d2e:	50                   	push   %eax
-80104d2f:	6a 02                	push   $0x2
-80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
-80104d36:	83 c4 10             	add    $0x10,%esp
-80104d39:	85 c0                	test   %eax,%eax
-80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
-80104d3d:	83 ec 04             	sub    $0x4,%esp
-80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d46:	50                   	push   %eax
-80104d47:	6a 01                	push   $0x1
-80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
-80104d4e:	83 c4 10             	add    $0x10,%esp
-80104d51:	85 c0                	test   %eax,%eax
-80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
+801058fc:	8d 55 ec             	lea    -0x14(%ebp),%edx
+801058ff:	e8 2c ff ff ff       	call   80105830 <argfd.constprop.0>
+80105904:	85 c0                	test   %eax,%eax
+80105906:	78 48                	js     80105950 <sys_read+0x60>
+80105908:	83 ec 08             	sub    $0x8,%esp
+8010590b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010590e:	50                   	push   %eax
+8010590f:	6a 02                	push   $0x2
+80105911:	e8 1a fc ff ff       	call   80105530 <argint>
+80105916:	83 c4 10             	add    $0x10,%esp
+80105919:	85 c0                	test   %eax,%eax
+8010591b:	78 33                	js     80105950 <sys_read+0x60>
+8010591d:	83 ec 04             	sub    $0x4,%esp
+80105920:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105923:	ff 75 f0             	pushl  -0x10(%ebp)
+80105926:	50                   	push   %eax
+80105927:	6a 01                	push   $0x1
+80105929:	e8 52 fc ff ff       	call   80105580 <argptr>
+8010592e:	83 c4 10             	add    $0x10,%esp
+80105931:	85 c0                	test   %eax,%eax
+80105933:	78 1b                	js     80105950 <sys_read+0x60>
   return fileread(f, p, n);
-80104d55:	83 ec 04             	sub    $0x4,%esp
-80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
-80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
-80104d66:	83 c4 10             	add    $0x10,%esp
+80105935:	83 ec 04             	sub    $0x4,%esp
+80105938:	ff 75 f0             	pushl  -0x10(%ebp)
+8010593b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010593e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105941:	e8 aa b6 ff ff       	call   80100ff0 <fileread>
+80105946:	83 c4 10             	add    $0x10,%esp
 }
-80104d69:	c9                   	leave  
-80104d6a:	c3                   	ret    
-80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d6f:	90                   	nop
-80104d70:	c9                   	leave  
-    return -1;
-80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d76:	c3                   	ret    
-80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d7e:	66 90                	xchg   %ax,%ax
+80105949:	c9                   	leave  
+8010594a:	c3                   	ret    
+8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010594f:	90                   	nop
+80105950:	c9                   	leave  
+    return -1;
+80105951:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105956:	c3                   	ret    
+80105957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010595e:	66 90                	xchg   %ax,%ax
 
-80104d80 <sys_write>:
+80105960 <sys_write>:
 {
-80104d80:	f3 0f 1e fb          	endbr32 
-80104d84:	55                   	push   %ebp
+80105960:	f3 0f 1e fb          	endbr32 
+80105964:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d85:	31 c0                	xor    %eax,%eax
+80105965:	31 c0                	xor    %eax,%eax
 {
-80104d87:	89 e5                	mov    %esp,%ebp
-80104d89:	83 ec 18             	sub    $0x18,%esp
+80105967:	89 e5                	mov    %esp,%ebp
+80105969:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104d94:	85 c0                	test   %eax,%eax
-80104d96:	78 48                	js     80104de0 <sys_write+0x60>
-80104d98:	83 ec 08             	sub    $0x8,%esp
-80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d9e:	50                   	push   %eax
-80104d9f:	6a 02                	push   $0x2
-80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
-80104da6:	83 c4 10             	add    $0x10,%esp
-80104da9:	85 c0                	test   %eax,%eax
-80104dab:	78 33                	js     80104de0 <sys_write+0x60>
-80104dad:	83 ec 04             	sub    $0x4,%esp
-80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
-80104db6:	50                   	push   %eax
-80104db7:	6a 01                	push   $0x1
-80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
-80104dbe:	83 c4 10             	add    $0x10,%esp
-80104dc1:	85 c0                	test   %eax,%eax
-80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
+8010596c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010596f:	e8 bc fe ff ff       	call   80105830 <argfd.constprop.0>
+80105974:	85 c0                	test   %eax,%eax
+80105976:	78 48                	js     801059c0 <sys_write+0x60>
+80105978:	83 ec 08             	sub    $0x8,%esp
+8010597b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010597e:	50                   	push   %eax
+8010597f:	6a 02                	push   $0x2
+80105981:	e8 aa fb ff ff       	call   80105530 <argint>
+80105986:	83 c4 10             	add    $0x10,%esp
+80105989:	85 c0                	test   %eax,%eax
+8010598b:	78 33                	js     801059c0 <sys_write+0x60>
+8010598d:	83 ec 04             	sub    $0x4,%esp
+80105990:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105993:	ff 75 f0             	pushl  -0x10(%ebp)
+80105996:	50                   	push   %eax
+80105997:	6a 01                	push   $0x1
+80105999:	e8 e2 fb ff ff       	call   80105580 <argptr>
+8010599e:	83 c4 10             	add    $0x10,%esp
+801059a1:	85 c0                	test   %eax,%eax
+801059a3:	78 1b                	js     801059c0 <sys_write+0x60>
   return filewrite(f, p, n);
-80104dc5:	83 ec 04             	sub    $0x4,%esp
-80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
-80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
-80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
-80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
-80104dd6:	83 c4 10             	add    $0x10,%esp
-}
-80104dd9:	c9                   	leave  
-80104dda:	c3                   	ret    
-80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104ddf:	90                   	nop
-80104de0:	c9                   	leave  
-    return -1;
-80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104de6:	c3                   	ret    
-80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dee:	66 90                	xchg   %ax,%ax
-
-80104df0 <sys_close>:
-{
-80104df0:	f3 0f 1e fb          	endbr32 
-80104df4:	55                   	push   %ebp
-80104df5:	89 e5                	mov    %esp,%ebp
-80104df7:	83 ec 18             	sub    $0x18,%esp
+801059a5:	83 ec 04             	sub    $0x4,%esp
+801059a8:	ff 75 f0             	pushl  -0x10(%ebp)
+801059ab:	ff 75 f4             	pushl  -0xc(%ebp)
+801059ae:	ff 75 ec             	pushl  -0x14(%ebp)
+801059b1:	e8 da b6 ff ff       	call   80101090 <filewrite>
+801059b6:	83 c4 10             	add    $0x10,%esp
+}
+801059b9:	c9                   	leave  
+801059ba:	c3                   	ret    
+801059bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059bf:	90                   	nop
+801059c0:	c9                   	leave  
+    return -1;
+801059c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801059c6:	c3                   	ret    
+801059c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ce:	66 90                	xchg   %ax,%ax
+
+801059d0 <sys_close>:
+{
+801059d0:	f3 0f 1e fb          	endbr32 
+801059d4:	55                   	push   %ebp
+801059d5:	89 e5                	mov    %esp,%ebp
+801059d7:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104e05:	85 c0                	test   %eax,%eax
-80104e07:	78 27                	js     80104e30 <sys_close+0x40>
+801059da:	8d 55 f4             	lea    -0xc(%ebp),%edx
+801059dd:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801059e0:	e8 4b fe ff ff       	call   80105830 <argfd.constprop.0>
+801059e5:	85 c0                	test   %eax,%eax
+801059e7:	78 27                	js     80105a10 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
-80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+801059e9:	e8 82 e6 ff ff       	call   80104070 <myproc>
+801059ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104e11:	83 ec 0c             	sub    $0xc,%esp
+801059f1:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104e1b:	00 
+801059f4:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+801059fb:	00 
   fileclose(f);
-80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
+801059fc:	ff 75 f4             	pushl  -0xc(%ebp)
+801059ff:	e8 bc b4 ff ff       	call   80100ec0 <fileclose>
   return 0;
-80104e24:	83 c4 10             	add    $0x10,%esp
-80104e27:	31 c0                	xor    %eax,%eax
+80105a04:	83 c4 10             	add    $0x10,%esp
+80105a07:	31 c0                	xor    %eax,%eax
 }
-80104e29:	c9                   	leave  
-80104e2a:	c3                   	ret    
-80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e2f:	90                   	nop
-80104e30:	c9                   	leave  
+80105a09:	c9                   	leave  
+80105a0a:	c3                   	ret    
+80105a0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a0f:	90                   	nop
+80105a10:	c9                   	leave  
     return -1;
-80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104e36:	c3                   	ret    
-80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e3e:	66 90                	xchg   %ax,%ax
+80105a16:	c3                   	ret    
+80105a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a1e:	66 90                	xchg   %ax,%ax
 
-80104e40 <sys_fstat>:
+80105a20 <sys_fstat>:
 {
-80104e40:	f3 0f 1e fb          	endbr32 
-80104e44:	55                   	push   %ebp
+80105a20:	f3 0f 1e fb          	endbr32 
+80105a24:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e45:	31 c0                	xor    %eax,%eax
+80105a25:	31 c0                	xor    %eax,%eax
 {
-80104e47:	89 e5                	mov    %esp,%ebp
-80104e49:	83 ec 18             	sub    $0x18,%esp
+80105a27:	89 e5                	mov    %esp,%ebp
+80105a29:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
-80104e54:	85 c0                	test   %eax,%eax
-80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
-80104e58:	83 ec 04             	sub    $0x4,%esp
-80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e5e:	6a 14                	push   $0x14
-80104e60:	50                   	push   %eax
-80104e61:	6a 01                	push   $0x1
-80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
-80104e68:	83 c4 10             	add    $0x10,%esp
-80104e6b:	85 c0                	test   %eax,%eax
-80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
+80105a2c:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80105a2f:	e8 fc fd ff ff       	call   80105830 <argfd.constprop.0>
+80105a34:	85 c0                	test   %eax,%eax
+80105a36:	78 30                	js     80105a68 <sys_fstat+0x48>
+80105a38:	83 ec 04             	sub    $0x4,%esp
+80105a3b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a3e:	6a 14                	push   $0x14
+80105a40:	50                   	push   %eax
+80105a41:	6a 01                	push   $0x1
+80105a43:	e8 38 fb ff ff       	call   80105580 <argptr>
+80105a48:	83 c4 10             	add    $0x10,%esp
+80105a4b:	85 c0                	test   %eax,%eax
+80105a4d:	78 19                	js     80105a68 <sys_fstat+0x48>
   return filestat(f, st);
-80104e6f:	83 ec 08             	sub    $0x8,%esp
-80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
-80104e7d:	83 c4 10             	add    $0x10,%esp
-}
-80104e80:	c9                   	leave  
-80104e81:	c3                   	ret    
-80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104e88:	c9                   	leave  
-    return -1;
-80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104e8e:	c3                   	ret    
-80104e8f:	90                   	nop
-
-80104e90 <sys_link>:
-{
-80104e90:	f3 0f 1e fb          	endbr32 
-80104e94:	55                   	push   %ebp
-80104e95:	89 e5                	mov    %esp,%ebp
-80104e97:	57                   	push   %edi
-80104e98:	56                   	push   %esi
+80105a4f:	83 ec 08             	sub    $0x8,%esp
+80105a52:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a55:	ff 75 f0             	pushl  -0x10(%ebp)
+80105a58:	e8 43 b5 ff ff       	call   80100fa0 <filestat>
+80105a5d:	83 c4 10             	add    $0x10,%esp
+}
+80105a60:	c9                   	leave  
+80105a61:	c3                   	ret    
+80105a62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a68:	c9                   	leave  
+    return -1;
+80105a69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a6e:	c3                   	ret    
+80105a6f:	90                   	nop
+
+80105a70 <sys_link>:
+{
+80105a70:	f3 0f 1e fb          	endbr32 
+80105a74:	55                   	push   %ebp
+80105a75:	89 e5                	mov    %esp,%ebp
+80105a77:	57                   	push   %edi
+80105a78:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105a79:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104e9c:	53                   	push   %ebx
-80104e9d:	83 ec 34             	sub    $0x34,%esp
+80105a7c:	53                   	push   %ebx
+80105a7d:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ea0:	50                   	push   %eax
-80104ea1:	6a 00                	push   $0x0
-80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
-80104ea8:	83 c4 10             	add    $0x10,%esp
-80104eab:	85 c0                	test   %eax,%eax
-80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
-80104eb3:	83 ec 08             	sub    $0x8,%esp
-80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104eb9:	50                   	push   %eax
-80104eba:	6a 01                	push   $0x1
-80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
-80104ec1:	83 c4 10             	add    $0x10,%esp
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
+80105a80:	50                   	push   %eax
+80105a81:	6a 00                	push   $0x0
+80105a83:	e8 58 fb ff ff       	call   801055e0 <argstr>
+80105a88:	83 c4 10             	add    $0x10,%esp
+80105a8b:	85 c0                	test   %eax,%eax
+80105a8d:	0f 88 ff 00 00 00    	js     80105b92 <sys_link+0x122>
+80105a93:	83 ec 08             	sub    $0x8,%esp
+80105a96:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105a99:	50                   	push   %eax
+80105a9a:	6a 01                	push   $0x1
+80105a9c:	e8 3f fb ff ff       	call   801055e0 <argstr>
+80105aa1:	83 c4 10             	add    $0x10,%esp
+80105aa4:	85 c0                	test   %eax,%eax
+80105aa6:	0f 88 e6 00 00 00    	js     80105b92 <sys_link+0x122>
   begin_op();
-80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
+80105aac:	e8 7f d2 ff ff       	call   80102d30 <begin_op>
   if((ip = namei(old)) == 0){
-80104ed1:	83 ec 0c             	sub    $0xc,%esp
-80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
-80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
-80104edc:	83 c4 10             	add    $0x10,%esp
-80104edf:	89 c3                	mov    %eax,%ebx
-80104ee1:	85 c0                	test   %eax,%eax
-80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
+80105ab1:	83 ec 0c             	sub    $0xc,%esp
+80105ab4:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105ab7:	e8 74 c5 ff ff       	call   80102030 <namei>
+80105abc:	83 c4 10             	add    $0x10,%esp
+80105abf:	89 c3                	mov    %eax,%ebx
+80105ac1:	85 c0                	test   %eax,%eax
+80105ac3:	0f 84 e8 00 00 00    	je     80105bb1 <sys_link+0x141>
   ilock(ip);
-80104ee9:	83 ec 0c             	sub    $0xc,%esp
-80104eec:	50                   	push   %eax
-80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
+80105ac9:	83 ec 0c             	sub    $0xc,%esp
+80105acc:	50                   	push   %eax
+80105acd:	e8 8e bc ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80104ef2:	83 c4 10             	add    $0x10,%esp
-80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
+80105ad2:	83 c4 10             	add    $0x10,%esp
+80105ad5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105ada:	0f 84 b9 00 00 00    	je     80105b99 <sys_link+0x129>
   iupdate(ip);
-80104f00:	83 ec 0c             	sub    $0xc,%esp
+80105ae0:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105ae3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105ae8:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f0b:	53                   	push   %ebx
-80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
+80105aeb:	53                   	push   %ebx
+80105aec:	e8 af bb ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80104f11:	89 1c 24             	mov    %ebx,(%esp)
-80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
+80105af1:	89 1c 24             	mov    %ebx,(%esp)
+80105af4:	e8 47 bd ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f19:	58                   	pop    %eax
-80104f1a:	5a                   	pop    %edx
-80104f1b:	57                   	push   %edi
-80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
-80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
-80104f24:	83 c4 10             	add    $0x10,%esp
-80104f27:	89 c6                	mov    %eax,%esi
-80104f29:	85 c0                	test   %eax,%eax
-80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
+80105af9:	58                   	pop    %eax
+80105afa:	5a                   	pop    %edx
+80105afb:	57                   	push   %edi
+80105afc:	ff 75 d0             	pushl  -0x30(%ebp)
+80105aff:	e8 4c c5 ff ff       	call   80102050 <nameiparent>
+80105b04:	83 c4 10             	add    $0x10,%esp
+80105b07:	89 c6                	mov    %eax,%esi
+80105b09:	85 c0                	test   %eax,%eax
+80105b0b:	74 5f                	je     80105b6c <sys_link+0xfc>
   ilock(dp);
-80104f2d:	83 ec 0c             	sub    $0xc,%esp
-80104f30:	50                   	push   %eax
-80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
+80105b0d:	83 ec 0c             	sub    $0xc,%esp
+80105b10:	50                   	push   %eax
+80105b11:	e8 4a bc ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f36:	8b 03                	mov    (%ebx),%eax
-80104f38:	83 c4 10             	add    $0x10,%esp
-80104f3b:	39 06                	cmp    %eax,(%esi)
-80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
-80104f3f:	83 ec 04             	sub    $0x4,%esp
-80104f42:	ff 73 04             	pushl  0x4(%ebx)
-80104f45:	57                   	push   %edi
-80104f46:	56                   	push   %esi
-80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
-80104f4c:	83 c4 10             	add    $0x10,%esp
-80104f4f:	85 c0                	test   %eax,%eax
-80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
+80105b16:	8b 03                	mov    (%ebx),%eax
+80105b18:	83 c4 10             	add    $0x10,%esp
+80105b1b:	39 06                	cmp    %eax,(%esi)
+80105b1d:	75 41                	jne    80105b60 <sys_link+0xf0>
+80105b1f:	83 ec 04             	sub    $0x4,%esp
+80105b22:	ff 73 04             	pushl  0x4(%ebx)
+80105b25:	57                   	push   %edi
+80105b26:	56                   	push   %esi
+80105b27:	e8 44 c4 ff ff       	call   80101f70 <dirlink>
+80105b2c:	83 c4 10             	add    $0x10,%esp
+80105b2f:	85 c0                	test   %eax,%eax
+80105b31:	78 2d                	js     80105b60 <sys_link+0xf0>
   iunlockput(dp);
-80104f53:	83 ec 0c             	sub    $0xc,%esp
-80104f56:	56                   	push   %esi
-80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
+80105b33:	83 ec 0c             	sub    $0xc,%esp
+80105b36:	56                   	push   %esi
+80105b37:	e8 c4 be ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-80104f5c:	89 1c 24             	mov    %ebx,(%esp)
-80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
+80105b3c:	89 1c 24             	mov    %ebx,(%esp)
+80105b3f:	e8 4c bd ff ff       	call   80101890 <iput>
   end_op();
-80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
+80105b44:	e8 57 d2 ff ff       	call   80102da0 <end_op>
   return 0;
-80104f69:	83 c4 10             	add    $0x10,%esp
-80104f6c:	31 c0                	xor    %eax,%eax
+80105b49:	83 c4 10             	add    $0x10,%esp
+80105b4c:	31 c0                	xor    %eax,%eax
 }
-80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f71:	5b                   	pop    %ebx
-80104f72:	5e                   	pop    %esi
-80104f73:	5f                   	pop    %edi
-80104f74:	5d                   	pop    %ebp
-80104f75:	c3                   	ret    
-80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
+80105b4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b51:	5b                   	pop    %ebx
+80105b52:	5e                   	pop    %esi
+80105b53:	5f                   	pop    %edi
+80105b54:	5d                   	pop    %ebp
+80105b55:	c3                   	ret    
+80105b56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104f80:	83 ec 0c             	sub    $0xc,%esp
-80104f83:	56                   	push   %esi
-80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
+80105b60:	83 ec 0c             	sub    $0xc,%esp
+80105b63:	56                   	push   %esi
+80105b64:	e8 97 be ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80104f89:	83 c4 10             	add    $0x10,%esp
+80105b69:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	53                   	push   %ebx
-80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
+80105b6c:	83 ec 0c             	sub    $0xc,%esp
+80105b6f:	53                   	push   %ebx
+80105b70:	e8 eb bb ff ff       	call   80101760 <ilock>
   ip->nlink--;
-80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105b75:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104f9a:	89 1c 24             	mov    %ebx,(%esp)
-80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
+80105b7a:	89 1c 24             	mov    %ebx,(%esp)
+80105b7d:	e8 1e bb ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80104fa2:	89 1c 24             	mov    %ebx,(%esp)
-80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
+80105b82:	89 1c 24             	mov    %ebx,(%esp)
+80105b85:	e8 76 be ff ff       	call   80101a00 <iunlockput>
   end_op();
-80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
+80105b8a:	e8 11 d2 ff ff       	call   80102da0 <end_op>
   return -1;
-80104faf:	83 c4 10             	add    $0x10,%esp
-80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
+80105b8f:	83 c4 10             	add    $0x10,%esp
+80105b92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b97:	eb b5                	jmp    80105b4e <sys_link+0xde>
     iunlockput(ip);
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	53                   	push   %ebx
-80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
+80105b99:	83 ec 0c             	sub    $0xc,%esp
+80105b9c:	53                   	push   %ebx
+80105b9d:	e8 5e be ff ff       	call   80101a00 <iunlockput>
     end_op();
-80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
+80105ba2:	e8 f9 d1 ff ff       	call   80102da0 <end_op>
     return -1;
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
+80105ba7:	83 c4 10             	add    $0x10,%esp
+80105baa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105baf:	eb 9d                	jmp    80105b4e <sys_link+0xde>
     end_op();
-80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
+80105bb1:	e8 ea d1 ff ff       	call   80102da0 <end_op>
     return -1;
-80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
-80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fe0 <sys_unlink>:
-{
-80104fe0:	f3 0f 1e fb          	endbr32 
-80104fe4:	55                   	push   %ebp
-80104fe5:	89 e5                	mov    %esp,%ebp
-80104fe7:	57                   	push   %edi
-80104fe8:	56                   	push   %esi
+80105bb6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bbb:	eb 91                	jmp    80105b4e <sys_link+0xde>
+80105bbd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105bc0 <sys_unlink>:
+{
+80105bc0:	f3 0f 1e fb          	endbr32 
+80105bc4:	55                   	push   %ebp
+80105bc5:	89 e5                	mov    %esp,%ebp
+80105bc7:	57                   	push   %edi
+80105bc8:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105bc9:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80104fec:	53                   	push   %ebx
-80104fed:	83 ec 54             	sub    $0x54,%esp
+80105bcc:	53                   	push   %ebx
+80105bcd:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80104ff0:	50                   	push   %eax
-80104ff1:	6a 00                	push   $0x0
-80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	85 c0                	test   %eax,%eax
-80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
+80105bd0:	50                   	push   %eax
+80105bd1:	6a 00                	push   $0x0
+80105bd3:	e8 08 fa ff ff       	call   801055e0 <argstr>
+80105bd8:	83 c4 10             	add    $0x10,%esp
+80105bdb:	85 c0                	test   %eax,%eax
+80105bdd:	0f 88 7d 01 00 00    	js     80105d60 <sys_unlink+0x1a0>
   begin_op();
-80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
+80105be3:	e8 48 d1 ff ff       	call   80102d30 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010500b:	83 ec 08             	sub    $0x8,%esp
-8010500e:	53                   	push   %ebx
-8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
-80105017:	83 c4 10             	add    $0x10,%esp
-8010501a:	89 c6                	mov    %eax,%esi
-8010501c:	85 c0                	test   %eax,%eax
-8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
+80105be8:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105beb:	83 ec 08             	sub    $0x8,%esp
+80105bee:	53                   	push   %ebx
+80105bef:	ff 75 c0             	pushl  -0x40(%ebp)
+80105bf2:	e8 59 c4 ff ff       	call   80102050 <nameiparent>
+80105bf7:	83 c4 10             	add    $0x10,%esp
+80105bfa:	89 c6                	mov    %eax,%esi
+80105bfc:	85 c0                	test   %eax,%eax
+80105bfe:	0f 84 66 01 00 00    	je     80105d6a <sys_unlink+0x1aa>
   ilock(dp);
-80105024:	83 ec 0c             	sub    $0xc,%esp
-80105027:	50                   	push   %eax
-80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
+80105c04:	83 ec 0c             	sub    $0xc,%esp
+80105c07:	50                   	push   %eax
+80105c08:	e8 53 bb ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010502d:	58                   	pop    %eax
-8010502e:	5a                   	pop    %edx
-8010502f:	68 14 78 10 80       	push   $0x80107814
-80105034:	53                   	push   %ebx
-80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
-8010503a:	83 c4 10             	add    $0x10,%esp
-8010503d:	85 c0                	test   %eax,%eax
-8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
-80105045:	83 ec 08             	sub    $0x8,%esp
-80105048:	68 13 78 10 80       	push   $0x80107813
-8010504d:	53                   	push   %ebx
-8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
-80105053:	83 c4 10             	add    $0x10,%esp
-80105056:	85 c0                	test   %eax,%eax
-80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
+80105c0d:	58                   	pop    %eax
+80105c0e:	5a                   	pop    %edx
+80105c0f:	68 68 86 10 80       	push   $0x80108668
+80105c14:	53                   	push   %ebx
+80105c15:	e8 76 c0 ff ff       	call   80101c90 <namecmp>
+80105c1a:	83 c4 10             	add    $0x10,%esp
+80105c1d:	85 c0                	test   %eax,%eax
+80105c1f:	0f 84 03 01 00 00    	je     80105d28 <sys_unlink+0x168>
+80105c25:	83 ec 08             	sub    $0x8,%esp
+80105c28:	68 67 86 10 80       	push   $0x80108667
+80105c2d:	53                   	push   %ebx
+80105c2e:	e8 5d c0 ff ff       	call   80101c90 <namecmp>
+80105c33:	83 c4 10             	add    $0x10,%esp
+80105c36:	85 c0                	test   %eax,%eax
+80105c38:	0f 84 ea 00 00 00    	je     80105d28 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010505e:	83 ec 04             	sub    $0x4,%esp
-80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105064:	50                   	push   %eax
-80105065:	53                   	push   %ebx
-80105066:	56                   	push   %esi
-80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
-8010506c:	83 c4 10             	add    $0x10,%esp
-8010506f:	89 c3                	mov    %eax,%ebx
-80105071:	85 c0                	test   %eax,%eax
-80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
+80105c3e:	83 ec 04             	sub    $0x4,%esp
+80105c41:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105c44:	50                   	push   %eax
+80105c45:	53                   	push   %ebx
+80105c46:	56                   	push   %esi
+80105c47:	e8 64 c0 ff ff       	call   80101cb0 <dirlookup>
+80105c4c:	83 c4 10             	add    $0x10,%esp
+80105c4f:	89 c3                	mov    %eax,%ebx
+80105c51:	85 c0                	test   %eax,%eax
+80105c53:	0f 84 cf 00 00 00    	je     80105d28 <sys_unlink+0x168>
   ilock(ip);
-80105079:	83 ec 0c             	sub    $0xc,%esp
-8010507c:	50                   	push   %eax
-8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
+80105c59:	83 ec 0c             	sub    $0xc,%esp
+80105c5c:	50                   	push   %eax
+80105c5d:	e8 fe ba ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105082:	83 c4 10             	add    $0x10,%esp
-80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
+80105c62:	83 c4 10             	add    $0x10,%esp
+80105c65:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80105c6a:	0f 8e 23 01 00 00    	jle    80105d93 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105098:	74 66                	je     80105100 <sys_unlink+0x120>
+80105c70:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105c75:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105c78:	74 66                	je     80105ce0 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010509a:	83 ec 04             	sub    $0x4,%esp
-8010509d:	6a 10                	push   $0x10
-8010509f:	6a 00                	push   $0x0
-801050a1:	57                   	push   %edi
-801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
+80105c7a:	83 ec 04             	sub    $0x4,%esp
+80105c7d:	6a 10                	push   $0x10
+80105c7f:	6a 00                	push   $0x0
+80105c81:	57                   	push   %edi
+80105c82:	e8 c9 f5 ff ff       	call   80105250 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050a7:	6a 10                	push   $0x10
-801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
-801050ac:	57                   	push   %edi
-801050ad:	56                   	push   %esi
-801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
-801050b3:	83 c4 20             	add    $0x20,%esp
-801050b6:	83 f8 10             	cmp    $0x10,%eax
-801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
+80105c87:	6a 10                	push   $0x10
+80105c89:	ff 75 c4             	pushl  -0x3c(%ebp)
+80105c8c:	57                   	push   %edi
+80105c8d:	56                   	push   %esi
+80105c8e:	e8 cd be ff ff       	call   80101b60 <writei>
+80105c93:	83 c4 20             	add    $0x20,%esp
+80105c96:	83 f8 10             	cmp    $0x10,%eax
+80105c99:	0f 85 e7 00 00 00    	jne    80105d86 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
+80105c9f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105ca4:	0f 84 96 00 00 00    	je     80105d40 <sys_unlink+0x180>
   iunlockput(dp);
-801050ca:	83 ec 0c             	sub    $0xc,%esp
-801050cd:	56                   	push   %esi
-801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
+80105caa:	83 ec 0c             	sub    $0xc,%esp
+80105cad:	56                   	push   %esi
+80105cae:	e8 4d bd ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105cb3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050d8:	89 1c 24             	mov    %ebx,(%esp)
-801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
+80105cb8:	89 1c 24             	mov    %ebx,(%esp)
+80105cbb:	e8 e0 b9 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801050e0:	89 1c 24             	mov    %ebx,(%esp)
-801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
+80105cc0:	89 1c 24             	mov    %ebx,(%esp)
+80105cc3:	e8 38 bd ff ff       	call   80101a00 <iunlockput>
   end_op();
-801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
+80105cc8:	e8 d3 d0 ff ff       	call   80102da0 <end_op>
   return 0;
-801050ed:	83 c4 10             	add    $0x10,%esp
-801050f0:	31 c0                	xor    %eax,%eax
+80105ccd:	83 c4 10             	add    $0x10,%esp
+80105cd0:	31 c0                	xor    %eax,%eax
 }
-801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801050f5:	5b                   	pop    %ebx
-801050f6:	5e                   	pop    %esi
-801050f7:	5f                   	pop    %edi
-801050f8:	5d                   	pop    %ebp
-801050f9:	c3                   	ret    
-801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105cd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cd5:	5b                   	pop    %ebx
+80105cd6:	5e                   	pop    %esi
+80105cd7:	5f                   	pop    %edi
+80105cd8:	5d                   	pop    %ebp
+80105cd9:	c3                   	ret    
+80105cda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
-80105106:	ba 20 00 00 00       	mov    $0x20,%edx
-8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
-8010510d:	8d 76 00             	lea    0x0(%esi),%esi
-80105110:	83 c2 10             	add    $0x10,%edx
-80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
+80105ce0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105ce4:	76 94                	jbe    80105c7a <sys_unlink+0xba>
+80105ce6:	ba 20 00 00 00       	mov    $0x20,%edx
+80105ceb:	eb 0b                	jmp    80105cf8 <sys_unlink+0x138>
+80105ced:	8d 76 00             	lea    0x0(%esi),%esi
+80105cf0:	83 c2 10             	add    $0x10,%edx
+80105cf3:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105cf6:	76 82                	jbe    80105c7a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105118:	6a 10                	push   $0x10
-8010511a:	52                   	push   %edx
-8010511b:	57                   	push   %edi
-8010511c:	53                   	push   %ebx
-8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
-80105125:	83 c4 10             	add    $0x10,%esp
-80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010512b:	83 f8 10             	cmp    $0x10,%eax
-8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
+80105cf8:	6a 10                	push   $0x10
+80105cfa:	52                   	push   %edx
+80105cfb:	57                   	push   %edi
+80105cfc:	53                   	push   %ebx
+80105cfd:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105d00:	e8 5b bd ff ff       	call   80101a60 <readi>
+80105d05:	83 c4 10             	add    $0x10,%esp
+80105d08:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+80105d0b:	83 f8 10             	cmp    $0x10,%eax
+80105d0e:	75 69                	jne    80105d79 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
+80105d10:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105d15:	74 d9                	je     80105cf0 <sys_unlink+0x130>
     iunlockput(ip);
-80105137:	83 ec 0c             	sub    $0xc,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
+80105d17:	83 ec 0c             	sub    $0xc,%esp
+80105d1a:	53                   	push   %ebx
+80105d1b:	e8 e0 bc ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105140:	83 c4 10             	add    $0x10,%esp
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+80105d20:	83 c4 10             	add    $0x10,%esp
+80105d23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d27:	90                   	nop
   iunlockput(dp);
-80105148:	83 ec 0c             	sub    $0xc,%esp
-8010514b:	56                   	push   %esi
-8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
+80105d28:	83 ec 0c             	sub    $0xc,%esp
+80105d2b:	56                   	push   %esi
+80105d2c:	e8 cf bc ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
+80105d31:	e8 6a d0 ff ff       	call   80102da0 <end_op>
   return -1;
-80105156:	83 c4 10             	add    $0x10,%esp
-80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
+80105d36:	83 c4 10             	add    $0x10,%esp
+80105d39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d3e:	eb 92                	jmp    80105cd2 <sys_unlink+0x112>
     iupdate(dp);
-80105160:	83 ec 0c             	sub    $0xc,%esp
+80105d40:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105d43:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105168:	56                   	push   %esi
-80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
-8010516e:	83 c4 10             	add    $0x10,%esp
-80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
-80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010517d:	8d 76 00             	lea    0x0(%esi),%esi
+80105d48:	56                   	push   %esi
+80105d49:	e8 52 b9 ff ff       	call   801016a0 <iupdate>
+80105d4e:	83 c4 10             	add    $0x10,%esp
+80105d51:	e9 54 ff ff ff       	jmp    80105caa <sys_unlink+0xea>
+80105d56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d5d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105d60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d65:	e9 68 ff ff ff       	jmp    80105cd2 <sys_unlink+0x112>
     end_op();
-8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
+80105d6a:	e8 31 d0 ff ff       	call   80102da0 <end_op>
     return -1;
-8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105d6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d74:	e9 59 ff ff ff       	jmp    80105cd2 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105199:	83 ec 0c             	sub    $0xc,%esp
-8010519c:	68 38 78 10 80       	push   $0x80107838
-801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
+80105d79:	83 ec 0c             	sub    $0xc,%esp
+80105d7c:	68 8c 86 10 80       	push   $0x8010868c
+80105d81:	e8 0a a6 ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801051a6:	83 ec 0c             	sub    $0xc,%esp
-801051a9:	68 4a 78 10 80       	push   $0x8010784a
-801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
+80105d86:	83 ec 0c             	sub    $0xc,%esp
+80105d89:	68 9e 86 10 80       	push   $0x8010869e
+80105d8e:	e8 fd a5 ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801051b3:	83 ec 0c             	sub    $0xc,%esp
-801051b6:	68 26 78 10 80       	push   $0x80107826
-801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
+80105d93:	83 ec 0c             	sub    $0xc,%esp
+80105d96:	68 7a 86 10 80       	push   $0x8010867a
+80105d9b:	e8 f0 a5 ff ff       	call   80100390 <panic>
 
-801051c0 <sys_open>:
+80105da0 <sys_open>:
 
 int
 sys_open(void)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
-801051c4:	55                   	push   %ebp
-801051c5:	89 e5                	mov    %esp,%ebp
-801051c7:	57                   	push   %edi
-801051c8:	56                   	push   %esi
+80105da0:	f3 0f 1e fb          	endbr32 
+80105da4:	55                   	push   %ebp
+80105da5:	89 e5                	mov    %esp,%ebp
+80105da7:	57                   	push   %edi
+80105da8:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105da9:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051cc:	53                   	push   %ebx
-801051cd:	83 ec 24             	sub    $0x24,%esp
+80105dac:	53                   	push   %ebx
+80105dad:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051d0:	50                   	push   %eax
-801051d1:	6a 00                	push   $0x0
-801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
-801051d8:	83 c4 10             	add    $0x10,%esp
-801051db:	85 c0                	test   %eax,%eax
-801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
-801051e3:	83 ec 08             	sub    $0x8,%esp
-801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801051e9:	50                   	push   %eax
-801051ea:	6a 01                	push   $0x1
-801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
-801051f1:	83 c4 10             	add    $0x10,%esp
-801051f4:	85 c0                	test   %eax,%eax
-801051f6:	78 75                	js     8010526d <sys_open+0xad>
+80105db0:	50                   	push   %eax
+80105db1:	6a 00                	push   $0x0
+80105db3:	e8 28 f8 ff ff       	call   801055e0 <argstr>
+80105db8:	83 c4 10             	add    $0x10,%esp
+80105dbb:	85 c0                	test   %eax,%eax
+80105dbd:	0f 88 8a 00 00 00    	js     80105e4d <sys_open+0xad>
+80105dc3:	83 ec 08             	sub    $0x8,%esp
+80105dc6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105dc9:	50                   	push   %eax
+80105dca:	6a 01                	push   $0x1
+80105dcc:	e8 5f f7 ff ff       	call   80105530 <argint>
+80105dd1:	83 c4 10             	add    $0x10,%esp
+80105dd4:	85 c0                	test   %eax,%eax
+80105dd6:	78 75                	js     80105e4d <sys_open+0xad>
     return -1;
 
   begin_op();
-801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
+80105dd8:	e8 53 cf ff ff       	call   80102d30 <begin_op>
 
   if(omode & O_CREATE){
-801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105201:	75 75                	jne    80105278 <sys_open+0xb8>
+80105ddd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105de1:	75 75                	jne    80105e58 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105203:	83 ec 0c             	sub    $0xc,%esp
-80105206:	ff 75 e0             	pushl  -0x20(%ebp)
-80105209:	e8 22 ce ff ff       	call   80102030 <namei>
-8010520e:	83 c4 10             	add    $0x10,%esp
-80105211:	89 c6                	mov    %eax,%esi
-80105213:	85 c0                	test   %eax,%eax
-80105215:	74 7e                	je     80105295 <sys_open+0xd5>
+80105de3:	83 ec 0c             	sub    $0xc,%esp
+80105de6:	ff 75 e0             	pushl  -0x20(%ebp)
+80105de9:	e8 42 c2 ff ff       	call   80102030 <namei>
+80105dee:	83 c4 10             	add    $0x10,%esp
+80105df1:	89 c6                	mov    %eax,%esi
+80105df3:	85 c0                	test   %eax,%eax
+80105df5:	74 7e                	je     80105e75 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105217:	83 ec 0c             	sub    $0xc,%esp
-8010521a:	50                   	push   %eax
-8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
+80105df7:	83 ec 0c             	sub    $0xc,%esp
+80105dfa:	50                   	push   %eax
+80105dfb:	e8 60 b9 ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105220:	83 c4 10             	add    $0x10,%esp
-80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
+80105e00:	83 c4 10             	add    $0x10,%esp
+80105e03:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105e08:	0f 84 c2 00 00 00    	je     80105ed0 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
-80105233:	89 c7                	mov    %eax,%edi
-80105235:	85 c0                	test   %eax,%eax
-80105237:	74 23                	je     8010525c <sys_open+0x9c>
+80105e0e:	e8 ed af ff ff       	call   80100e00 <filealloc>
+80105e13:	89 c7                	mov    %eax,%edi
+80105e15:	85 c0                	test   %eax,%eax
+80105e17:	74 23                	je     80105e3c <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
+80105e19:	e8 52 e2 ff ff       	call   80104070 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010523e:	31 db                	xor    %ebx,%ebx
+80105e1e:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105244:	85 d2                	test   %edx,%edx
-80105246:	74 60                	je     801052a8 <sys_open+0xe8>
+80105e20:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105e24:	85 d2                	test   %edx,%edx
+80105e26:	74 60                	je     80105e88 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105248:	83 c3 01             	add    $0x1,%ebx
-8010524b:	83 fb 10             	cmp    $0x10,%ebx
-8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
+80105e28:	83 c3 01             	add    $0x1,%ebx
+80105e2b:	83 fb 10             	cmp    $0x10,%ebx
+80105e2e:	75 f0                	jne    80105e20 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	57                   	push   %edi
-80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
-80105259:	83 c4 10             	add    $0x10,%esp
+80105e30:	83 ec 0c             	sub    $0xc,%esp
+80105e33:	57                   	push   %edi
+80105e34:	e8 87 b0 ff ff       	call   80100ec0 <fileclose>
+80105e39:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010525c:	83 ec 0c             	sub    $0xc,%esp
-8010525f:	56                   	push   %esi
-80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
+80105e3c:	83 ec 0c             	sub    $0xc,%esp
+80105e3f:	56                   	push   %esi
+80105e40:	e8 bb bb ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
+80105e45:	e8 56 cf ff ff       	call   80102da0 <end_op>
     return -1;
-8010526a:	83 c4 10             	add    $0x10,%esp
-8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
-80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e4a:	83 c4 10             	add    $0x10,%esp
+80105e4d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105e52:	eb 6d                	jmp    80105ec1 <sys_open+0x121>
+80105e54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105278:	83 ec 0c             	sub    $0xc,%esp
-8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010527e:	31 c9                	xor    %ecx,%ecx
-80105280:	ba 02 00 00 00       	mov    $0x2,%edx
-80105285:	6a 00                	push   $0x0
-80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
+80105e58:	83 ec 0c             	sub    $0xc,%esp
+80105e5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105e5e:	31 c9                	xor    %ecx,%ecx
+80105e60:	ba 02 00 00 00       	mov    $0x2,%edx
+80105e65:	6a 00                	push   $0x0
+80105e67:	e8 24 f8 ff ff       	call   80105690 <create>
     if(ip == 0){
-8010528c:	83 c4 10             	add    $0x10,%esp
+80105e6c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010528f:	89 c6                	mov    %eax,%esi
+80105e6f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105291:	85 c0                	test   %eax,%eax
-80105293:	75 99                	jne    8010522e <sys_open+0x6e>
+80105e71:	85 c0                	test   %eax,%eax
+80105e73:	75 99                	jne    80105e0e <sys_open+0x6e>
       end_op();
-80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
+80105e75:	e8 26 cf ff ff       	call   80102da0 <end_op>
       return -1;
-8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
-801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e7a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105e7f:	eb 40                	jmp    80105ec1 <sys_open+0x121>
+80105e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
+80105e88:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+80105e8b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052af:	56                   	push   %esi
-801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
+80105e8f:	56                   	push   %esi
+80105e90:	e8 ab b9 ff ff       	call   80101840 <iunlock>
   end_op();
-801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
+80105e95:	e8 06 cf ff ff       	call   80102da0 <end_op>
 
   f->type = FD_INODE;
-801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+80105e9a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105ea0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052c3:	83 c4 10             	add    $0x10,%esp
+80105ea3:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052c6:	89 77 10             	mov    %esi,0x10(%edi)
+80105ea6:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052c9:	89 d0                	mov    %edx,%eax
+80105ea9:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+80105eab:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801052d2:	f7 d0                	not    %eax
-801052d4:	83 e0 01             	and    $0x1,%eax
+80105eb2:	f7 d0                	not    %eax
+80105eb4:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052d7:	83 e2 03             	and    $0x3,%edx
+80105eb7:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801052da:	88 47 08             	mov    %al,0x8(%edi)
+80105eba:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052dd:	0f 95 47 09          	setne  0x9(%edi)
+80105ebd:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052e4:	89 d8                	mov    %ebx,%eax
-801052e6:	5b                   	pop    %ebx
-801052e7:	5e                   	pop    %esi
-801052e8:	5f                   	pop    %edi
-801052e9:	5d                   	pop    %ebp
-801052ea:	c3                   	ret    
-801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801052ef:	90                   	nop
+80105ec1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ec4:	89 d8                	mov    %ebx,%eax
+80105ec6:	5b                   	pop    %ebx
+80105ec7:	5e                   	pop    %esi
+80105ec8:	5f                   	pop    %edi
+80105ec9:	5d                   	pop    %ebp
+80105eca:	c3                   	ret    
+80105ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ecf:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801052f3:	85 c9                	test   %ecx,%ecx
-801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
-801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
+80105ed0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105ed3:	85 c9                	test   %ecx,%ecx
+80105ed5:	0f 84 33 ff ff ff    	je     80105e0e <sys_open+0x6e>
+80105edb:	e9 5c ff ff ff       	jmp    80105e3c <sys_open+0x9c>
 
-80105300 <sys_mkdir>:
+80105ee0 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	83 ec 18             	sub    $0x18,%esp
+80105ee0:	f3 0f 1e fb          	endbr32 
+80105ee4:	55                   	push   %ebp
+80105ee5:	89 e5                	mov    %esp,%ebp
+80105ee7:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
+80105eea:	e8 41 ce ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010530f:	83 ec 08             	sub    $0x8,%esp
-80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105315:	50                   	push   %eax
-80105316:	6a 00                	push   $0x0
-80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
-80105324:	83 ec 0c             	sub    $0xc,%esp
-80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532a:	31 c9                	xor    %ecx,%ecx
-8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105331:	6a 00                	push   $0x0
-80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
-80105338:	83 c4 10             	add    $0x10,%esp
-8010533b:	85 c0                	test   %eax,%eax
-8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
+80105eef:	83 ec 08             	sub    $0x8,%esp
+80105ef2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ef5:	50                   	push   %eax
+80105ef6:	6a 00                	push   $0x0
+80105ef8:	e8 e3 f6 ff ff       	call   801055e0 <argstr>
+80105efd:	83 c4 10             	add    $0x10,%esp
+80105f00:	85 c0                	test   %eax,%eax
+80105f02:	78 34                	js     80105f38 <sys_mkdir+0x58>
+80105f04:	83 ec 0c             	sub    $0xc,%esp
+80105f07:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105f0a:	31 c9                	xor    %ecx,%ecx
+80105f0c:	ba 01 00 00 00       	mov    $0x1,%edx
+80105f11:	6a 00                	push   $0x0
+80105f13:	e8 78 f7 ff ff       	call   80105690 <create>
+80105f18:	83 c4 10             	add    $0x10,%esp
+80105f1b:	85 c0                	test   %eax,%eax
+80105f1d:	74 19                	je     80105f38 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010533f:	83 ec 0c             	sub    $0xc,%esp
-80105342:	50                   	push   %eax
-80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
+80105f1f:	83 ec 0c             	sub    $0xc,%esp
+80105f22:	50                   	push   %eax
+80105f23:	e8 d8 ba ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
+80105f28:	e8 73 ce ff ff       	call   80102da0 <end_op>
   return 0;
-8010534d:	83 c4 10             	add    $0x10,%esp
-80105350:	31 c0                	xor    %eax,%eax
+80105f2d:	83 c4 10             	add    $0x10,%esp
+80105f30:	31 c0                	xor    %eax,%eax
 }
-80105352:	c9                   	leave  
-80105353:	c3                   	ret    
-80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f32:	c9                   	leave  
+80105f33:	c3                   	ret    
+80105f34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
+80105f38:	e8 63 ce ff ff       	call   80102da0 <end_op>
     return -1;
-8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105362:	c9                   	leave  
-80105363:	c3                   	ret    
-80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010536f:	90                   	nop
+80105f42:	c9                   	leave  
+80105f43:	c3                   	ret    
+80105f44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f4f:	90                   	nop
 
-80105370 <sys_mknod>:
+80105f50 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105370:	f3 0f 1e fb          	endbr32 
-80105374:	55                   	push   %ebp
-80105375:	89 e5                	mov    %esp,%ebp
-80105377:	83 ec 18             	sub    $0x18,%esp
+80105f50:	f3 0f 1e fb          	endbr32 
+80105f54:	55                   	push   %ebp
+80105f55:	89 e5                	mov    %esp,%ebp
+80105f57:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
+80105f5a:	e8 d1 cd ff ff       	call   80102d30 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010537f:	83 ec 08             	sub    $0x8,%esp
-80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105385:	50                   	push   %eax
-80105386:	6a 00                	push   $0x0
-80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
-8010538d:	83 c4 10             	add    $0x10,%esp
-80105390:	85 c0                	test   %eax,%eax
-80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
+80105f5f:	83 ec 08             	sub    $0x8,%esp
+80105f62:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105f65:	50                   	push   %eax
+80105f66:	6a 00                	push   $0x0
+80105f68:	e8 73 f6 ff ff       	call   801055e0 <argstr>
+80105f6d:	83 c4 10             	add    $0x10,%esp
+80105f70:	85 c0                	test   %eax,%eax
+80105f72:	78 64                	js     80105fd8 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105394:	83 ec 08             	sub    $0x8,%esp
-80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010539a:	50                   	push   %eax
-8010539b:	6a 01                	push   $0x1
-8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
+80105f74:	83 ec 08             	sub    $0x8,%esp
+80105f77:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105f7a:	50                   	push   %eax
+80105f7b:	6a 01                	push   $0x1
+80105f7d:	e8 ae f5 ff ff       	call   80105530 <argint>
   if((argstr(0, &path)) < 0 ||
-801053a2:	83 c4 10             	add    $0x10,%esp
-801053a5:	85 c0                	test   %eax,%eax
-801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
+80105f82:	83 c4 10             	add    $0x10,%esp
+80105f85:	85 c0                	test   %eax,%eax
+80105f87:	78 4f                	js     80105fd8 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-801053a9:	83 ec 08             	sub    $0x8,%esp
-801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053af:	50                   	push   %eax
-801053b0:	6a 02                	push   $0x2
-801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
+80105f89:	83 ec 08             	sub    $0x8,%esp
+80105f8c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105f8f:	50                   	push   %eax
+80105f90:	6a 02                	push   $0x2
+80105f92:	e8 99 f5 ff ff       	call   80105530 <argint>
      argint(1, &major) < 0 ||
-801053b7:	83 c4 10             	add    $0x10,%esp
-801053ba:	85 c0                	test   %eax,%eax
-801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
+80105f97:	83 c4 10             	add    $0x10,%esp
+80105f9a:	85 c0                	test   %eax,%eax
+80105f9c:	78 3a                	js     80105fd8 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053c2:	83 ec 0c             	sub    $0xc,%esp
-801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ce:	50                   	push   %eax
-801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
+80105f9e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105fa2:	83 ec 0c             	sub    $0xc,%esp
+80105fa5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105fa9:	ba 03 00 00 00       	mov    $0x3,%edx
+80105fae:	50                   	push   %eax
+80105faf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105fb2:	e8 d9 f6 ff ff       	call   80105690 <create>
      argint(2, &minor) < 0 ||
-801053d7:	83 c4 10             	add    $0x10,%esp
-801053da:	85 c0                	test   %eax,%eax
-801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
+80105fb7:	83 c4 10             	add    $0x10,%esp
+80105fba:	85 c0                	test   %eax,%eax
+80105fbc:	74 1a                	je     80105fd8 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	50                   	push   %eax
-801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
+80105fbe:	83 ec 0c             	sub    $0xc,%esp
+80105fc1:	50                   	push   %eax
+80105fc2:	e8 39 ba ff ff       	call   80101a00 <iunlockput>
   end_op();
-801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
+80105fc7:	e8 d4 cd ff ff       	call   80102da0 <end_op>
   return 0;
-801053ec:	83 c4 10             	add    $0x10,%esp
-801053ef:	31 c0                	xor    %eax,%eax
+80105fcc:	83 c4 10             	add    $0x10,%esp
+80105fcf:	31 c0                	xor    %eax,%eax
 }
-801053f1:	c9                   	leave  
-801053f2:	c3                   	ret    
-801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801053f7:	90                   	nop
+80105fd1:	c9                   	leave  
+80105fd2:	c3                   	ret    
+80105fd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fd7:	90                   	nop
     end_op();
-801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
+80105fd8:	e8 c3 cd ff ff       	call   80102da0 <end_op>
     return -1;
-801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105fdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105402:	c9                   	leave  
-80105403:	c3                   	ret    
-80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010540f:	90                   	nop
+80105fe2:	c9                   	leave  
+80105fe3:	c3                   	ret    
+80105fe4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105feb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fef:	90                   	nop
 
-80105410 <sys_chdir>:
+80105ff0 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105410:	f3 0f 1e fb          	endbr32 
-80105414:	55                   	push   %ebp
-80105415:	89 e5                	mov    %esp,%ebp
-80105417:	56                   	push   %esi
-80105418:	53                   	push   %ebx
-80105419:	83 ec 10             	sub    $0x10,%esp
+80105ff0:	f3 0f 1e fb          	endbr32 
+80105ff4:	55                   	push   %ebp
+80105ff5:	89 e5                	mov    %esp,%ebp
+80105ff7:	56                   	push   %esi
+80105ff8:	53                   	push   %ebx
+80105ff9:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
-80105421:	89 c6                	mov    %eax,%esi
+80105ffc:	e8 6f e0 ff ff       	call   80104070 <myproc>
+80106001:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
+80106003:	e8 28 cd ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105428:	83 ec 08             	sub    $0x8,%esp
-8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010542e:	50                   	push   %eax
-8010542f:	6a 00                	push   $0x0
-80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
-80105436:	83 c4 10             	add    $0x10,%esp
-80105439:	85 c0                	test   %eax,%eax
-8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
-8010543d:	83 ec 0c             	sub    $0xc,%esp
-80105440:	ff 75 f4             	pushl  -0xc(%ebp)
-80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
-80105448:	83 c4 10             	add    $0x10,%esp
-8010544b:	89 c3                	mov    %eax,%ebx
-8010544d:	85 c0                	test   %eax,%eax
-8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
+80106008:	83 ec 08             	sub    $0x8,%esp
+8010600b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010600e:	50                   	push   %eax
+8010600f:	6a 00                	push   $0x0
+80106011:	e8 ca f5 ff ff       	call   801055e0 <argstr>
+80106016:	83 c4 10             	add    $0x10,%esp
+80106019:	85 c0                	test   %eax,%eax
+8010601b:	78 73                	js     80106090 <sys_chdir+0xa0>
+8010601d:	83 ec 0c             	sub    $0xc,%esp
+80106020:	ff 75 f4             	pushl  -0xc(%ebp)
+80106023:	e8 08 c0 ff ff       	call   80102030 <namei>
+80106028:	83 c4 10             	add    $0x10,%esp
+8010602b:	89 c3                	mov    %eax,%ebx
+8010602d:	85 c0                	test   %eax,%eax
+8010602f:	74 5f                	je     80106090 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105451:	83 ec 0c             	sub    $0xc,%esp
-80105454:	50                   	push   %eax
-80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
+80106031:	83 ec 0c             	sub    $0xc,%esp
+80106034:	50                   	push   %eax
+80106035:	e8 26 b7 ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-8010545a:	83 c4 10             	add    $0x10,%esp
-8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
+8010603a:	83 c4 10             	add    $0x10,%esp
+8010603d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106042:	75 2c                	jne    80106070 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105464:	83 ec 0c             	sub    $0xc,%esp
-80105467:	53                   	push   %ebx
-80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
+80106044:	83 ec 0c             	sub    $0xc,%esp
+80106047:	53                   	push   %ebx
+80106048:	e8 f3 b7 ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-8010546d:	58                   	pop    %eax
-8010546e:	ff 76 68             	pushl  0x68(%esi)
-80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
+8010604d:	58                   	pop    %eax
+8010604e:	ff 76 68             	pushl  0x68(%esi)
+80106051:	e8 3a b8 ff ff       	call   80101890 <iput>
   end_op();
-80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
+80106056:	e8 45 cd ff ff       	call   80102da0 <end_op>
   curproc->cwd = ip;
-8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
+8010605b:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010547e:	83 c4 10             	add    $0x10,%esp
-80105481:	31 c0                	xor    %eax,%eax
+8010605e:	83 c4 10             	add    $0x10,%esp
+80106061:	31 c0                	xor    %eax,%eax
 }
-80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105486:	5b                   	pop    %ebx
-80105487:	5e                   	pop    %esi
-80105488:	5d                   	pop    %ebp
-80105489:	c3                   	ret    
-8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106063:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106066:	5b                   	pop    %ebx
+80106067:	5e                   	pop    %esi
+80106068:	5d                   	pop    %ebp
+80106069:	c3                   	ret    
+8010606a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105490:	83 ec 0c             	sub    $0xc,%esp
-80105493:	53                   	push   %ebx
-80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
+80106070:	83 ec 0c             	sub    $0xc,%esp
+80106073:	53                   	push   %ebx
+80106074:	e8 87 b9 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
+80106079:	e8 22 cd ff ff       	call   80102da0 <end_op>
     return -1;
-8010549e:	83 c4 10             	add    $0x10,%esp
-801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
-801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054af:	90                   	nop
+8010607e:	83 c4 10             	add    $0x10,%esp
+80106081:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106086:	eb db                	jmp    80106063 <sys_chdir+0x73>
+80106088:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010608f:	90                   	nop
     end_op();
-801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
+80106090:	e8 0b cd ff ff       	call   80102da0 <end_op>
     return -1;
-801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
-801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106095:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010609a:	eb c7                	jmp    80106063 <sys_chdir+0x73>
+8010609c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054c0 <sys_exec>:
+801060a0 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054c0:	f3 0f 1e fb          	endbr32 
-801054c4:	55                   	push   %ebp
-801054c5:	89 e5                	mov    %esp,%ebp
-801054c7:	57                   	push   %edi
-801054c8:	56                   	push   %esi
+801060a0:	f3 0f 1e fb          	endbr32 
+801060a4:	55                   	push   %ebp
+801060a5:	89 e5                	mov    %esp,%ebp
+801060a7:	57                   	push   %edi
+801060a8:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+801060a9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054cf:	53                   	push   %ebx
-801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+801060af:	53                   	push   %ebx
+801060b0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d6:	50                   	push   %eax
-801054d7:	6a 00                	push   $0x0
-801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
-801054e9:	83 ec 08             	sub    $0x8,%esp
-801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054f2:	50                   	push   %eax
-801054f3:	6a 01                	push   $0x1
-801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
-801054fa:	83 c4 10             	add    $0x10,%esp
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
+801060b6:	50                   	push   %eax
+801060b7:	6a 00                	push   $0x0
+801060b9:	e8 22 f5 ff ff       	call   801055e0 <argstr>
+801060be:	83 c4 10             	add    $0x10,%esp
+801060c1:	85 c0                	test   %eax,%eax
+801060c3:	0f 88 8b 00 00 00    	js     80106154 <sys_exec+0xb4>
+801060c9:	83 ec 08             	sub    $0x8,%esp
+801060cc:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801060d2:	50                   	push   %eax
+801060d3:	6a 01                	push   $0x1
+801060d5:	e8 56 f4 ff ff       	call   80105530 <argint>
+801060da:	83 c4 10             	add    $0x10,%esp
+801060dd:	85 c0                	test   %eax,%eax
+801060df:	78 73                	js     80106154 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105501:	83 ec 04             	sub    $0x4,%esp
-80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801060e1:	83 ec 04             	sub    $0x4,%esp
+801060e4:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010550a:	31 db                	xor    %ebx,%ebx
+801060ea:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010550c:	68 80 00 00 00       	push   $0x80
-80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105517:	6a 00                	push   $0x0
-80105519:	50                   	push   %eax
-8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801060ec:	68 80 00 00 00       	push   $0x80
+801060f1:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+801060f7:	6a 00                	push   $0x0
+801060f9:	50                   	push   %eax
+801060fa:	e8 51 f1 ff ff       	call   80105250 <memset>
+801060ff:	83 c4 10             	add    $0x10,%esp
+80106102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105535:	83 ec 08             	sub    $0x8,%esp
-80105538:	57                   	push   %edi
-80105539:	01 f0                	add    %esi,%eax
-8010553b:	50                   	push   %eax
-8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	85 c0                	test   %eax,%eax
-80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
+80106108:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010610e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80106115:	83 ec 08             	sub    $0x8,%esp
+80106118:	57                   	push   %edi
+80106119:	01 f0                	add    %esi,%eax
+8010611b:	50                   	push   %eax
+8010611c:	e8 6f f3 ff ff       	call   80105490 <fetchint>
+80106121:	83 c4 10             	add    $0x10,%esp
+80106124:	85 c0                	test   %eax,%eax
+80106126:	78 2c                	js     80106154 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010554e:	85 c0                	test   %eax,%eax
-80105550:	74 36                	je     80105588 <sys_exec+0xc8>
+80106128:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+8010612e:	85 c0                	test   %eax,%eax
+80106130:	74 36                	je     80106168 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105558:	83 ec 08             	sub    $0x8,%esp
-8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-8010555e:	52                   	push   %edx
-8010555f:	50                   	push   %eax
-80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
-80105565:	83 c4 10             	add    $0x10,%esp
-80105568:	85 c0                	test   %eax,%eax
-8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
+80106132:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80106138:	83 ec 08             	sub    $0x8,%esp
+8010613b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+8010613e:	52                   	push   %edx
+8010613f:	50                   	push   %eax
+80106140:	e8 8b f3 ff ff       	call   801054d0 <fetchstr>
+80106145:	83 c4 10             	add    $0x10,%esp
+80106148:	85 c0                	test   %eax,%eax
+8010614a:	78 08                	js     80106154 <sys_exec+0xb4>
   for(i=0;; i++){
-8010556c:	83 c3 01             	add    $0x1,%ebx
+8010614c:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-8010556f:	83 fb 20             	cmp    $0x20,%ebx
-80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
+8010614f:	83 fb 20             	cmp    $0x20,%ebx
+80106152:	75 b4                	jne    80106108 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106154:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106157:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010557c:	5b                   	pop    %ebx
-8010557d:	5e                   	pop    %esi
-8010557e:	5f                   	pop    %edi
-8010557f:	5d                   	pop    %ebp
-80105580:	c3                   	ret    
-80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010615c:	5b                   	pop    %ebx
+8010615d:	5e                   	pop    %esi
+8010615e:	5f                   	pop    %edi
+8010615f:	5d                   	pop    %ebp
+80106160:	c3                   	ret    
+80106161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105588:	83 ec 08             	sub    $0x8,%esp
-8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80106168:	83 ec 08             	sub    $0x8,%esp
+8010616b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105598:	00 00 00 00 
+80106171:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80106178:	00 00 00 00 
   return exec(path, argv);
-8010559c:	50                   	push   %eax
-8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
-801055a8:	83 c4 10             	add    $0x10,%esp
-}
-801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055ae:	5b                   	pop    %ebx
-801055af:	5e                   	pop    %esi
-801055b0:	5f                   	pop    %edi
-801055b1:	5d                   	pop    %ebp
-801055b2:	c3                   	ret    
-801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010617c:	50                   	push   %eax
+8010617d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80106183:	e8 f8 a8 ff ff       	call   80100a80 <exec>
+80106188:	83 c4 10             	add    $0x10,%esp
+}
+8010618b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010618e:	5b                   	pop    %ebx
+8010618f:	5e                   	pop    %esi
+80106190:	5f                   	pop    %edi
+80106191:	5d                   	pop    %ebp
+80106192:	c3                   	ret    
+80106193:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010619a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801055c0 <sys_pipe>:
+801061a0 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	f3 0f 1e fb          	endbr32 
-801055c4:	55                   	push   %ebp
-801055c5:	89 e5                	mov    %esp,%ebp
-801055c7:	57                   	push   %edi
-801055c8:	56                   	push   %esi
+801061a0:	f3 0f 1e fb          	endbr32 
+801061a4:	55                   	push   %ebp
+801061a5:	89 e5                	mov    %esp,%ebp
+801061a7:	57                   	push   %edi
+801061a8:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801061a9:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055cc:	53                   	push   %ebx
-801055cd:	83 ec 20             	sub    $0x20,%esp
+801061ac:	53                   	push   %ebx
+801061ad:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055d0:	6a 08                	push   $0x8
-801055d2:	50                   	push   %eax
-801055d3:	6a 00                	push   $0x0
-801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
-801055da:	83 c4 10             	add    $0x10,%esp
-801055dd:	85 c0                	test   %eax,%eax
-801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
+801061b0:	6a 08                	push   $0x8
+801061b2:	50                   	push   %eax
+801061b3:	6a 00                	push   $0x0
+801061b5:	e8 c6 f3 ff ff       	call   80105580 <argptr>
+801061ba:	83 c4 10             	add    $0x10,%esp
+801061bd:	85 c0                	test   %eax,%eax
+801061bf:	78 4e                	js     8010620f <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055e1:	83 ec 08             	sub    $0x8,%esp
-801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055eb:	50                   	push   %eax
-801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
-801055f1:	83 c4 10             	add    $0x10,%esp
-801055f4:	85 c0                	test   %eax,%eax
-801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
+801061c1:	83 ec 08             	sub    $0x8,%esp
+801061c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801061c7:	50                   	push   %eax
+801061c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801061cb:	50                   	push   %eax
+801061cc:	e8 1f d2 ff ff       	call   801033f0 <pipealloc>
+801061d1:	83 c4 10             	add    $0x10,%esp
+801061d4:	85 c0                	test   %eax,%eax
+801061d6:	78 37                	js     8010620f <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801061d8:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055fb:	31 db                	xor    %ebx,%ebx
+801061db:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
+801061dd:	e8 8e de ff ff       	call   80104070 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801061e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010560c:	85 f6                	test   %esi,%esi
-8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
+801061e8:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+801061ec:	85 f6                	test   %esi,%esi
+801061ee:	74 30                	je     80106220 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80105610:	83 c3 01             	add    $0x1,%ebx
-80105613:	83 fb 10             	cmp    $0x10,%ebx
-80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
+801061f0:	83 c3 01             	add    $0x1,%ebx
+801061f3:	83 fb 10             	cmp    $0x10,%ebx
+801061f6:	75 f0                	jne    801061e8 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105618:	83 ec 0c             	sub    $0xc,%esp
-8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
+801061f8:	83 ec 0c             	sub    $0xc,%esp
+801061fb:	ff 75 e0             	pushl  -0x20(%ebp)
+801061fe:	e8 bd ac ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80105623:	58                   	pop    %eax
-80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010562c:	83 c4 10             	add    $0x10,%esp
-8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
-80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+80106203:	58                   	pop    %eax
+80106204:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106207:	e8 b4 ac ff ff       	call   80100ec0 <fileclose>
+    return -1;
+8010620c:	83 c4 10             	add    $0x10,%esp
+8010620f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106214:	eb 5b                	jmp    80106271 <sys_pipe+0xd1>
+80106216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010621d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105640:	8d 73 08             	lea    0x8(%ebx),%esi
-80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80106220:	8d 73 08             	lea    0x8(%ebx),%esi
+80106223:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80106227:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
+8010622a:	e8 41 de ff ff       	call   80104070 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010564f:	31 d2                	xor    %edx,%edx
-80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010622f:	31 d2                	xor    %edx,%edx
+80106231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010565c:	85 c9                	test   %ecx,%ecx
-8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
+80106238:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010623c:	85 c9                	test   %ecx,%ecx
+8010623e:	74 20                	je     80106260 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-80105660:	83 c2 01             	add    $0x1,%edx
-80105663:	83 fa 10             	cmp    $0x10,%edx
-80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
+80106240:	83 c2 01             	add    $0x1,%edx
+80106243:	83 fa 10             	cmp    $0x10,%edx
+80106246:	75 f0                	jne    80106238 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
-8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105674:	00 
-80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
-80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010567e:	66 90                	xchg   %ax,%ax
+80106248:	e8 23 de ff ff       	call   80104070 <myproc>
+8010624d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80106254:	00 
+80106255:	eb a1                	jmp    801061f8 <sys_pipe+0x58>
+80106257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010625e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80106260:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105687:	89 18                	mov    %ebx,(%eax)
+80106264:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80106267:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010568c:	89 50 04             	mov    %edx,0x4(%eax)
+80106269:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010626c:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010568f:	31 c0                	xor    %eax,%eax
+8010626f:	31 c0                	xor    %eax,%eax
 }
-80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105694:	5b                   	pop    %ebx
-80105695:	5e                   	pop    %esi
-80105696:	5f                   	pop    %edi
-80105697:	5d                   	pop    %ebp
-80105698:	c3                   	ret    
-80105699:	66 90                	xchg   %ax,%ax
-8010569b:	66 90                	xchg   %ax,%ax
-8010569d:	66 90                	xchg   %ax,%ax
-8010569f:	90                   	nop
+80106271:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106274:	5b                   	pop    %ebx
+80106275:	5e                   	pop    %esi
+80106276:	5f                   	pop    %edi
+80106277:	5d                   	pop    %ebp
+80106278:	c3                   	ret    
+80106279:	66 90                	xchg   %ax,%ax
+8010627b:	66 90                	xchg   %ax,%ax
+8010627d:	66 90                	xchg   %ax,%ax
+8010627f:	90                   	nop
 
-801056a0 <sys_fork>:
-#include "mmu.h"
+80106280 <sys_fork>:
 #include "proc.h"
+#include "processInfo.h"
 
 int
 sys_fork(void)
 {
-801056a0:	f3 0f 1e fb          	endbr32 
+80106280:	f3 0f 1e fb          	endbr32 
   return fork();
-801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106284:	e9 e7 df ff ff       	jmp    80104270 <fork>
+80106289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056b0 <sys_exit>:
+80106290 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056b0:	f3 0f 1e fb          	endbr32 
-801056b4:	55                   	push   %ebp
-801056b5:	89 e5                	mov    %esp,%ebp
-801056b7:	83 ec 08             	sub    $0x8,%esp
+80106290:	f3 0f 1e fb          	endbr32 
+80106294:	55                   	push   %ebp
+80106295:	89 e5                	mov    %esp,%ebp
+80106297:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
+8010629a:	e8 f1 e2 ff ff       	call   80104590 <exit>
   return 0;  // not reached
 }
-801056bf:	31 c0                	xor    %eax,%eax
-801056c1:	c9                   	leave  
-801056c2:	c3                   	ret    
-801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010629f:	31 c0                	xor    %eax,%eax
+801062a1:	c9                   	leave  
+801062a2:	c3                   	ret    
+801062a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801056d0 <sys_wait>:
+801062b0 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801056d0:	f3 0f 1e fb          	endbr32 
+801062b0:	f3 0f 1e fb          	endbr32 
   return wait();
-801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
-801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062b4:	e9 27 e5 ff ff       	jmp    801047e0 <wait>
+801062b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_kill>:
+801062c0 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056e0:	f3 0f 1e fb          	endbr32 
-801056e4:	55                   	push   %ebp
-801056e5:	89 e5                	mov    %esp,%ebp
-801056e7:	83 ec 20             	sub    $0x20,%esp
+801062c0:	f3 0f 1e fb          	endbr32 
+801062c4:	55                   	push   %ebp
+801062c5:	89 e5                	mov    %esp,%ebp
+801062c7:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056ed:	50                   	push   %eax
-801056ee:	6a 00                	push   $0x0
-801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
-801056f5:	83 c4 10             	add    $0x10,%esp
-801056f8:	85 c0                	test   %eax,%eax
-801056fa:	78 14                	js     80105710 <sys_kill+0x30>
+801062ca:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801062cd:	50                   	push   %eax
+801062ce:	6a 00                	push   $0x0
+801062d0:	e8 5b f2 ff ff       	call   80105530 <argint>
+801062d5:	83 c4 10             	add    $0x10,%esp
+801062d8:	85 c0                	test   %eax,%eax
+801062da:	78 14                	js     801062f0 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056fc:	83 ec 0c             	sub    $0xc,%esp
-801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
-80105702:	e8 39 ea ff ff       	call   80104140 <kill>
-80105707:	83 c4 10             	add    $0x10,%esp
-}
-8010570a:	c9                   	leave  
-8010570b:	c3                   	ret    
-8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105710:	c9                   	leave  
-    return -1;
-80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105716:	c3                   	ret    
-80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010571e:	66 90                	xchg   %ax,%ax
+801062dc:	83 ec 0c             	sub    $0xc,%esp
+801062df:	ff 75 f4             	pushl  -0xc(%ebp)
+801062e2:	e8 39 e6 ff ff       	call   80104920 <kill>
+801062e7:	83 c4 10             	add    $0x10,%esp
+}
+801062ea:	c9                   	leave  
+801062eb:	c3                   	ret    
+801062ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801062f0:	c9                   	leave  
+    return -1;
+801062f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801062f6:	c3                   	ret    
+801062f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062fe:	66 90                	xchg   %ax,%ax
 
-80105720 <sys_getpid>:
+80106300 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105720:	f3 0f 1e fb          	endbr32 
-80105724:	55                   	push   %ebp
-80105725:	89 e5                	mov    %esp,%ebp
-80105727:	83 ec 08             	sub    $0x8,%esp
+80106300:	f3 0f 1e fb          	endbr32 
+80106304:	55                   	push   %ebp
+80106305:	89 e5                	mov    %esp,%ebp
+80106307:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
-8010572f:	8b 40 10             	mov    0x10(%eax),%eax
+8010630a:	e8 61 dd ff ff       	call   80104070 <myproc>
+8010630f:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80105732:	c9                   	leave  
-80105733:	c3                   	ret    
-80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010573f:	90                   	nop
+80106312:	c9                   	leave  
+80106313:	c3                   	ret    
+80106314:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010631b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010631f:	90                   	nop
 
-80105740 <sys_sbrk>:
+80106320 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105740:	f3 0f 1e fb          	endbr32 
-80105744:	55                   	push   %ebp
-80105745:	89 e5                	mov    %esp,%ebp
-80105747:	53                   	push   %ebx
+80106320:	f3 0f 1e fb          	endbr32 
+80106324:	55                   	push   %ebp
+80106325:	89 e5                	mov    %esp,%ebp
+80106327:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106328:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010574b:	83 ec 1c             	sub    $0x1c,%esp
+8010632b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010574e:	50                   	push   %eax
-8010574f:	6a 00                	push   $0x0
-80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
-80105756:	83 c4 10             	add    $0x10,%esp
-80105759:	85 c0                	test   %eax,%eax
-8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
+8010632e:	50                   	push   %eax
+8010632f:	6a 00                	push   $0x0
+80106331:	e8 fa f1 ff ff       	call   80105530 <argint>
+80106336:	83 c4 10             	add    $0x10,%esp
+80106339:	85 c0                	test   %eax,%eax
+8010633b:	78 23                	js     80106360 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
+8010633d:	e8 2e dd ff ff       	call   80104070 <myproc>
   if(growproc(n) < 0)
-80105762:	83 ec 0c             	sub    $0xc,%esp
+80106342:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105765:	8b 18                	mov    (%eax),%ebx
+80106345:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105767:	ff 75 f4             	pushl  -0xc(%ebp)
-8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
-8010576f:	83 c4 10             	add    $0x10,%esp
-80105772:	85 c0                	test   %eax,%eax
-80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
+80106347:	ff 75 f4             	pushl  -0xc(%ebp)
+8010634a:	e8 a1 de ff ff       	call   801041f0 <growproc>
+8010634f:	83 c4 10             	add    $0x10,%esp
+80106352:	85 c0                	test   %eax,%eax
+80106354:	78 0a                	js     80106360 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105776:	89 d8                	mov    %ebx,%eax
-80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010577b:	c9                   	leave  
-8010577c:	c3                   	ret    
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
-80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010578e:	66 90                	xchg   %ax,%ax
+80106356:	89 d8                	mov    %ebx,%eax
+80106358:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010635b:	c9                   	leave  
+8010635c:	c3                   	ret    
+8010635d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80106360:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80106365:	eb ef                	jmp    80106356 <sys_sbrk+0x36>
+80106367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010636e:	66 90                	xchg   %ax,%ax
 
-80105790 <sys_sleep>:
+80106370 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105790:	f3 0f 1e fb          	endbr32 
-80105794:	55                   	push   %ebp
-80105795:	89 e5                	mov    %esp,%ebp
-80105797:	53                   	push   %ebx
+80106370:	f3 0f 1e fb          	endbr32 
+80106374:	55                   	push   %ebp
+80106375:	89 e5                	mov    %esp,%ebp
+80106377:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106378:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010579b:	83 ec 1c             	sub    $0x1c,%esp
+8010637b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010579e:	50                   	push   %eax
-8010579f:	6a 00                	push   $0x0
-801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
-801057a6:	83 c4 10             	add    $0x10,%esp
-801057a9:	85 c0                	test   %eax,%eax
-801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
+8010637e:	50                   	push   %eax
+8010637f:	6a 00                	push   $0x0
+80106381:	e8 aa f1 ff ff       	call   80105530 <argint>
+80106386:	83 c4 10             	add    $0x10,%esp
+80106389:	85 c0                	test   %eax,%eax
+8010638b:	0f 88 86 00 00 00    	js     80106417 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	68 60 4c 11 80       	push   $0x80114c60
-801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
+80106391:	83 ec 0c             	sub    $0xc,%esp
+80106394:	68 c0 5a 11 80       	push   $0x80115ac0
+80106399:	e8 a2 ed ff ff       	call   80105140 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010639e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+801063a1:	8b 1d 00 63 11 80    	mov    0x80116300,%ebx
   while(ticks - ticks0 < n){
-801057c7:	83 c4 10             	add    $0x10,%esp
-801057ca:	85 d2                	test   %edx,%edx
-801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
-801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
+801063a7:	83 c4 10             	add    $0x10,%esp
+801063aa:	85 d2                	test   %edx,%edx
+801063ac:	75 23                	jne    801063d1 <sys_sleep+0x61>
+801063ae:	eb 50                	jmp    80106400 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057d0:	83 ec 08             	sub    $0x8,%esp
-801057d3:	68 60 4c 11 80       	push   $0x80114c60
-801057d8:	68 a0 54 11 80       	push   $0x801154a0
-801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
+801063b0:	83 ec 08             	sub    $0x8,%esp
+801063b3:	68 c0 5a 11 80       	push   $0x80115ac0
+801063b8:	68 00 63 11 80       	push   $0x80116300
+801063bd:	e8 5e e3 ff ff       	call   80104720 <sleep>
   while(ticks - ticks0 < n){
-801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
-801057e7:	83 c4 10             	add    $0x10,%esp
-801057ea:	29 d8                	sub    %ebx,%eax
-801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
+801063c2:	a1 00 63 11 80       	mov    0x80116300,%eax
+801063c7:	83 c4 10             	add    $0x10,%esp
+801063ca:	29 d8                	sub    %ebx,%eax
+801063cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801063cf:	73 2f                	jae    80106400 <sys_sleep+0x90>
     if(myproc()->killed){
-801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
-801057f6:	8b 40 24             	mov    0x24(%eax),%eax
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
+801063d1:	e8 9a dc ff ff       	call   80104070 <myproc>
+801063d6:	8b 40 24             	mov    0x24(%eax),%eax
+801063d9:	85 c0                	test   %eax,%eax
+801063db:	74 d3                	je     801063b0 <sys_sleep+0x40>
       release(&tickslock);
-801057fd:	83 ec 0c             	sub    $0xc,%esp
-80105800:	68 60 4c 11 80       	push   $0x80114c60
-80105805:	e8 16 ee ff ff       	call   80104620 <release>
+801063dd:	83 ec 0c             	sub    $0xc,%esp
+801063e0:	68 c0 5a 11 80       	push   $0x80115ac0
+801063e5:	e8 16 ee ff ff       	call   80105200 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801063ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010580d:	83 c4 10             	add    $0x10,%esp
-80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801063ed:	83 c4 10             	add    $0x10,%esp
+801063f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105815:	c9                   	leave  
-80105816:	c3                   	ret    
-80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581e:	66 90                	xchg   %ax,%ax
+801063f5:	c9                   	leave  
+801063f6:	c3                   	ret    
+801063f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063fe:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105820:	83 ec 0c             	sub    $0xc,%esp
-80105823:	68 60 4c 11 80       	push   $0x80114c60
-80105828:	e8 f3 ed ff ff       	call   80104620 <release>
+80106400:	83 ec 0c             	sub    $0xc,%esp
+80106403:	68 c0 5a 11 80       	push   $0x80115ac0
+80106408:	e8 f3 ed ff ff       	call   80105200 <release>
   return 0;
-8010582d:	83 c4 10             	add    $0x10,%esp
-80105830:	31 c0                	xor    %eax,%eax
+8010640d:	83 c4 10             	add    $0x10,%esp
+80106410:	31 c0                	xor    %eax,%eax
 }
-80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105835:	c9                   	leave  
-80105836:	c3                   	ret    
-    return -1;
-80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
-8010583e:	66 90                	xchg   %ax,%ax
+80106412:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106415:	c9                   	leave  
+80106416:	c3                   	ret    
+    return -1;
+80106417:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010641c:	eb f4                	jmp    80106412 <sys_sleep+0xa2>
+8010641e:	66 90                	xchg   %ax,%ax
 
-80105840 <sys_uptime>:
+80106420 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	53                   	push   %ebx
-80105848:	83 ec 10             	sub    $0x10,%esp
+80106420:	f3 0f 1e fb          	endbr32 
+80106424:	55                   	push   %ebp
+80106425:	89 e5                	mov    %esp,%ebp
+80106427:	53                   	push   %ebx
+80106428:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010584b:	68 60 4c 11 80       	push   $0x80114c60
-80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
+8010642b:	68 c0 5a 11 80       	push   $0x80115ac0
+80106430:	e8 0b ed ff ff       	call   80105140 <acquire>
   xticks = ticks;
-80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80106435:	8b 1d 00 63 11 80    	mov    0x80116300,%ebx
   release(&tickslock);
-8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105862:	e8 b9 ed ff ff       	call   80104620 <release>
+8010643b:	c7 04 24 c0 5a 11 80 	movl   $0x80115ac0,(%esp)
+80106442:	e8 b9 ed ff ff       	call   80105200 <release>
   return xticks;
 }
-80105867:	89 d8                	mov    %ebx,%eax
-80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010586c:	c9                   	leave  
-8010586d:	c3                   	ret    
+80106447:	89 d8                	mov    %ebx,%eax
+80106449:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010644c:	c9                   	leave  
+8010644d:	c3                   	ret    
+8010644e:	66 90                	xchg   %ax,%ax
+
+80106450 <sys_wolfie>:
+
+int 
+sys_wolfie(void)
+{
+80106450:	f3 0f 1e fb          	endbr32 
+80106454:	55                   	push   %ebp
+80106455:	89 e5                	mov    %esp,%ebp
+80106457:	53                   	push   %ebx
+  char *buf;
+  uint size;
+
+  if (argptr(0,(void*)&buf,sizeof(buf))<0)
+80106458:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+8010645b:	83 ec 38             	sub    $0x38,%esp
+  if (argptr(0,(void*)&buf,sizeof(buf))<0)
+8010645e:	6a 04                	push   $0x4
+80106460:	50                   	push   %eax
+80106461:	6a 00                	push   $0x0
+80106463:	e8 18 f1 ff ff       	call   80105580 <argptr>
+80106468:	83 c4 10             	add    $0x10,%esp
+8010646b:	85 c0                	test   %eax,%eax
+8010646d:	0f 88 7d 00 00 00    	js     801064f0 <sys_wolfie+0xa0>
+     return -1;
+  if (argptr(0,(void*)&size,sizeof(size))<0)
+80106473:	83 ec 04             	sub    $0x4,%esp
+80106476:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80106479:	6a 04                	push   $0x4
+8010647b:	50                   	push   %eax
+8010647c:	6a 00                	push   $0x0
+8010647e:	e8 fd f0 ff ff       	call   80105580 <argptr>
+80106483:	83 c4 10             	add    $0x10,%esp
+80106486:	85 c0                	test   %eax,%eax
+80106488:	78 66                	js     801064f0 <sys_wolfie+0xa0>
+     return -1;
+
+  char wolf[] = "Wolfie Wolf - System Call\n\n";
+  uint wolfsize = sizeof(wolf);
+
+  if (size < wolfsize) 
+8010648a:	83 7d d8 1b          	cmpl   $0x1b,-0x28(%ebp)
+  char wolf[] = "Wolfie Wolf - System Call\n\n";
+8010648e:	c7 45 dc 57 6f 6c 66 	movl   $0x666c6f57,-0x24(%ebp)
+80106495:	c7 45 e0 69 65 20 57 	movl   $0x57206569,-0x20(%ebp)
+8010649c:	c7 45 e4 6f 6c 66 20 	movl   $0x20666c6f,-0x1c(%ebp)
+801064a3:	c7 45 e8 2d 20 53 79 	movl   $0x7953202d,-0x18(%ebp)
+801064aa:	c7 45 ec 73 74 65 6d 	movl   $0x6d657473,-0x14(%ebp)
+801064b1:	c7 45 f0 20 43 61 6c 	movl   $0x6c614320,-0x10(%ebp)
+801064b8:	c7 45 f4 6c 0a 0a 00 	movl   $0xa0a6c,-0xc(%ebp)
+  if (size < wolfsize) 
+801064bf:	76 2f                	jbe    801064f0 <sys_wolfie+0xa0>
+801064c1:	ba 6f 00 00 00       	mov    $0x6f,%edx
+     return -1;
+
+  int i;
+  for (i=0; wolf[i]!='\0'; i++)
+801064c6:	31 c0                	xor    %eax,%eax
+801064c8:	b9 57 00 00 00       	mov    $0x57,%ecx
+801064cd:	eb 08                	jmp    801064d7 <sys_wolfie+0x87>
+801064cf:	90                   	nop
+801064d0:	89 d1                	mov    %edx,%ecx
+801064d2:	0f b6 54 05 dd       	movzbl -0x23(%ebp,%eax,1),%edx
+     buf[i] = wolf[i];
+801064d7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+801064da:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
+  for (i=0; wolf[i]!='\0'; i++)
+801064dd:	83 c0 01             	add    $0x1,%eax
+801064e0:	84 d2                	test   %dl,%dl
+801064e2:	75 ec                	jne    801064d0 <sys_wolfie+0x80>
+  buf[i] = '\0';
+801064e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+801064e7:	c6 04 02 00          	movb   $0x0,(%edx,%eax,1)
+
+  return i;
+}
+801064eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801064ee:	c9                   	leave  
+801064ef:	c3                   	ret    
+     return -1;
+801064f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801064f5:	eb f4                	jmp    801064eb <sys_wolfie+0x9b>
+801064f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801064fe:	66 90                	xchg   %ax,%ax
+
+80106500 <sys_getNumProc>:
+
+int 
+sys_getNumProc(void)
+{
+80106500:	f3 0f 1e fb          	endbr32 
+  return getNumProc();
+80106504:	e9 c7 e5 ff ff       	jmp    80104ad0 <getNumProc>
+80106509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106510 <sys_getMaxPid>:
+}
+
+int 
+sys_getMaxPid(void)
+{
+80106510:	f3 0f 1e fb          	endbr32 
+  return getMaxPid();
+80106514:	e9 07 e6 ff ff       	jmp    80104b20 <getMaxPid>
+80106519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106520 <sys_getProcInfo>:
+}
+
+int 
+sys_getProcInfo(void)
+{
+80106520:	f3 0f 1e fb          	endbr32 
+  return getProcInfo();
+80106524:	e9 47 e6 ff ff       	jmp    80104b70 <getProcInfo>
+80106529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106530 <sys_get_burst_time>:
+}
+
+
+int
+sys_get_burst_time(void)
+{
+80106530:	f3 0f 1e fb          	endbr32 
+  return get_burst_time();
+80106534:	e9 97 e6 ff ff       	jmp    80104bd0 <get_burst_time>
+80106539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106540 <sys_set_burst_time>:
+}
+
+
+int
+sys_set_burst_time(void)
+{
+80106540:	f3 0f 1e fb          	endbr32 
+80106544:	55                   	push   %ebp
+80106545:	89 e5                	mov    %esp,%ebp
+80106547:	83 ec 1c             	sub    $0x1c,%esp
+  int n;
+  if (argptr(0,(void*)&n, sizeof(n))<0)
+8010654a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010654d:	6a 04                	push   $0x4
+8010654f:	50                   	push   %eax
+80106550:	6a 00                	push   $0x0
+80106552:	e8 29 f0 ff ff       	call   80105580 <argptr>
+80106557:	83 c4 10             	add    $0x10,%esp
+8010655a:	85 c0                	test   %eax,%eax
+8010655c:	78 12                	js     80106570 <sys_set_burst_time+0x30>
+    return -1;
+  return set_burst_time(n);
+8010655e:	83 ec 0c             	sub    $0xc,%esp
+80106561:	ff 75 f4             	pushl  -0xc(%ebp)
+80106564:	e8 97 e6 ff ff       	call   80104c00 <set_burst_time>
+80106569:	83 c4 10             	add    $0x10,%esp
+}
+8010656c:	c9                   	leave  
+8010656d:	c3                   	ret    
+8010656e:	66 90                	xchg   %ax,%ax
+80106570:	c9                   	leave  
+    return -1;
+80106571:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106576:	c3                   	ret    
 
-8010586e <alltraps>:
+80106577 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010586e:	1e                   	push   %ds
+80106577:	1e                   	push   %ds
   pushl %es
-8010586f:	06                   	push   %es
+80106578:	06                   	push   %es
   pushl %fs
-80105870:	0f a0                	push   %fs
+80106579:	0f a0                	push   %fs
   pushl %gs
-80105872:	0f a8                	push   %gs
+8010657b:	0f a8                	push   %gs
   pushal
-80105874:	60                   	pusha  
+8010657d:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105875:	66 b8 10 00          	mov    $0x10,%ax
+8010657e:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105879:	8e d8                	mov    %eax,%ds
+80106582:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-8010587b:	8e c0                	mov    %eax,%es
+80106584:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-8010587d:	54                   	push   %esp
+80106586:	54                   	push   %esp
   call trap
-8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
+80106587:	e8 c4 00 00 00       	call   80106650 <trap>
   addl $4, %esp
-80105883:	83 c4 04             	add    $0x4,%esp
+8010658c:	83 c4 04             	add    $0x4,%esp
 
-80105886 <trapret>:
+8010658f <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105886:	61                   	popa   
+8010658f:	61                   	popa   
   popl %gs
-80105887:	0f a9                	pop    %gs
+80106590:	0f a9                	pop    %gs
   popl %fs
-80105889:	0f a1                	pop    %fs
+80106592:	0f a1                	pop    %fs
   popl %es
-8010588b:	07                   	pop    %es
+80106594:	07                   	pop    %es
   popl %ds
-8010588c:	1f                   	pop    %ds
+80106595:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-8010588d:	83 c4 08             	add    $0x8,%esp
+80106596:	83 c4 08             	add    $0x8,%esp
   iret
-80105890:	cf                   	iret   
-80105891:	66 90                	xchg   %ax,%ax
-80105893:	66 90                	xchg   %ax,%ax
-80105895:	66 90                	xchg   %ax,%ax
-80105897:	66 90                	xchg   %ax,%ax
-80105899:	66 90                	xchg   %ax,%ax
-8010589b:	66 90                	xchg   %ax,%ax
-8010589d:	66 90                	xchg   %ax,%ax
-8010589f:	90                   	nop
+80106599:	cf                   	iret   
+8010659a:	66 90                	xchg   %ax,%ax
+8010659c:	66 90                	xchg   %ax,%ax
+8010659e:	66 90                	xchg   %ax,%ax
 
-801058a0 <tvinit>:
+801065a0 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-801058a0:	f3 0f 1e fb          	endbr32 
-801058a4:	55                   	push   %ebp
+801065a0:	f3 0f 1e fb          	endbr32 
+801065a4:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058a5:	31 c0                	xor    %eax,%eax
+801065a5:	31 c0                	xor    %eax,%eax
 {
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 08             	sub    $0x8,%esp
-801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801065a7:	89 e5                	mov    %esp,%ebp
+801065a9:	83 ec 08             	sub    $0x8,%esp
+801065ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
-801058be:	08 00 00 8e 
-801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
-801058c9:	80 
-801058ca:	c1 ea 10             	shr    $0x10,%edx
-801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
-801058d4:	80 
+801065b0:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+801065b7:	c7 04 c5 02 5b 11 80 	movl   $0x8e000008,-0x7feea4fe(,%eax,8)
+801065be:	08 00 00 8e 
+801065c2:	66 89 14 c5 00 5b 11 	mov    %dx,-0x7feea500(,%eax,8)
+801065c9:	80 
+801065ca:	c1 ea 10             	shr    $0x10,%edx
+801065cd:	66 89 14 c5 06 5b 11 	mov    %dx,-0x7feea4fa(,%eax,8)
+801065d4:	80 
   for(i = 0; i < 256; i++)
-801058d5:	83 c0 01             	add    $0x1,%eax
-801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
-801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
+801065d5:	83 c0 01             	add    $0x1,%eax
+801065d8:	3d 00 01 00 00       	cmp    $0x100,%eax
+801065dd:	75 d1                	jne    801065b0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-801058df:	83 ec 08             	sub    $0x8,%esp
+801065df:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
-801058ee:	00 00 ef 
+801065e2:	a1 08 b1 10 80       	mov    0x8010b108,%eax
+801065e7:	c7 05 02 5d 11 80 08 	movl   $0xef000008,0x80115d02
+801065ee:	00 00 ef 
   initlock(&tickslock, "time");
-801058f1:	68 59 78 10 80       	push   $0x80107859
-801058f6:	68 60 4c 11 80       	push   $0x80114c60
+801065f1:	68 ad 86 10 80       	push   $0x801086ad
+801065f6:	68 c0 5a 11 80       	push   $0x80115ac0
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
-80105901:	c1 e8 10             	shr    $0x10,%eax
-80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+801065fb:	66 a3 00 5d 11 80    	mov    %ax,0x80115d00
+80106601:	c1 e8 10             	shr    $0x10,%eax
+80106604:	66 a3 06 5d 11 80    	mov    %ax,0x80115d06
   initlock(&tickslock, "time");
-8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
+8010660a:	e8 b1 e9 ff ff       	call   80104fc0 <initlock>
 }
-8010590f:	83 c4 10             	add    $0x10,%esp
-80105912:	c9                   	leave  
-80105913:	c3                   	ret    
-80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010591f:	90                   	nop
+8010660f:	83 c4 10             	add    $0x10,%esp
+80106612:	c9                   	leave  
+80106613:	c3                   	ret    
+80106614:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010661b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010661f:	90                   	nop
 
-80105920 <idtinit>:
+80106620 <idtinit>:
 
 void
 idtinit(void)
 {
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
+80106620:	f3 0f 1e fb          	endbr32 
+80106624:	55                   	push   %ebp
   pd[0] = size-1;
-80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-8010592a:	89 e5                	mov    %esp,%ebp
-8010592c:	83 ec 10             	sub    $0x10,%esp
-8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80106625:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+8010662a:	89 e5                	mov    %esp,%ebp
+8010662c:	83 ec 10             	sub    $0x10,%esp
+8010662f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
-80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80106633:	b8 00 5b 11 80       	mov    $0x80115b00,%eax
+80106638:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-8010593c:	c1 e8 10             	shr    $0x10,%eax
-8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+8010663c:	c1 e8 10             	shr    $0x10,%eax
+8010663f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105946:	0f 01 18             	lidtl  (%eax)
+80106643:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80106646:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105949:	c9                   	leave  
-8010594a:	c3                   	ret    
-8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010594f:	90                   	nop
+80106649:	c9                   	leave  
+8010664a:	c3                   	ret    
+8010664b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010664f:	90                   	nop
 
-80105950 <trap>:
+80106650 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105950:	f3 0f 1e fb          	endbr32 
-80105954:	55                   	push   %ebp
-80105955:	89 e5                	mov    %esp,%ebp
-80105957:	57                   	push   %edi
-80105958:	56                   	push   %esi
-80105959:	53                   	push   %ebx
-8010595a:	83 ec 1c             	sub    $0x1c,%esp
-8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80106650:	f3 0f 1e fb          	endbr32 
+80106654:	55                   	push   %ebp
+80106655:	89 e5                	mov    %esp,%ebp
+80106657:	57                   	push   %edi
+80106658:	56                   	push   %esi
+80106659:	53                   	push   %ebx
+8010665a:	83 ec 1c             	sub    $0x1c,%esp
+8010665d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105960:	8b 43 30             	mov    0x30(%ebx),%eax
-80105963:	83 f8 40             	cmp    $0x40,%eax
-80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
+80106660:	8b 43 30             	mov    0x30(%ebx),%eax
+80106663:	83 f8 40             	cmp    $0x40,%eax
+80106666:	0f 84 0c 02 00 00    	je     80106878 <trap+0x228>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010596c:	83 e8 20             	sub    $0x20,%eax
-8010596f:	83 f8 1f             	cmp    $0x1f,%eax
-80105972:	77 08                	ja     8010597c <trap+0x2c>
-80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
-8010597b:	80 
+8010666c:	83 e8 20             	sub    $0x20,%eax
+8010666f:	83 f8 1f             	cmp    $0x1f,%eax
+80106672:	77 08                	ja     8010667c <trap+0x2c>
+80106674:	3e ff 24 85 54 87 10 	notrack jmp *-0x7fef78ac(,%eax,4)
+8010667b:	80 
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010597c:	e8 df df ff ff       	call   80103960 <myproc>
-80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105984:	85 c0                	test   %eax,%eax
-80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
-8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
+8010667c:	e8 ef d9 ff ff       	call   80104070 <myproc>
+80106681:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106684:	85 c0                	test   %eax,%eax
+80106686:	0f 84 a0 02 00 00    	je     8010692c <trap+0x2dc>
+8010668c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106690:	0f 84 96 02 00 00    	je     8010692c <trap+0x2dc>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105996:	0f 20 d1             	mov    %cr2,%ecx
-80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80106696:	0f 20 d1             	mov    %cr2,%ecx
+80106699:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
-801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
-801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
-801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010669c:	e8 af d9 ff ff       	call   80104050 <cpuid>
+801066a1:	8b 73 30             	mov    0x30(%ebx),%esi
+801066a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801066a7:	8b 43 34             	mov    0x34(%ebx),%eax
+801066aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
-801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
+801066ad:	e8 be d9 ff ff       	call   80104070 <myproc>
+801066b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801066b5:	e8 b6 d9 ff ff       	call   80104070 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801059c0:	51                   	push   %ecx
-801059c1:	57                   	push   %edi
-801059c2:	52                   	push   %edx
-801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801059c6:	56                   	push   %esi
+801066ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+801066bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801066c0:	51                   	push   %ecx
+801066c1:	57                   	push   %edi
+801066c2:	52                   	push   %edx
+801066c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801066c6:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
-801059ca:	83 c6 6c             	add    $0x6c,%esi
+801066c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
+801066ca:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059cd:	56                   	push   %esi
-801059ce:	ff 70 10             	pushl  0x10(%eax)
-801059d1:	68 bc 78 10 80       	push   $0x801078bc
-801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
+801066cd:	56                   	push   %esi
+801066ce:	ff 70 10             	pushl  0x10(%eax)
+801066d1:	68 10 87 10 80       	push   $0x80108710
+801066d6:	e8 d5 9f ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-801059db:	83 c4 20             	add    $0x20,%esp
-801059de:	e8 7d df ff ff       	call   80103960 <myproc>
-801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801066db:	83 c4 20             	add    $0x20,%esp
+801066de:	e8 8d d9 ff ff       	call   80104070 <myproc>
+801066e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
-801059ef:	85 c0                	test   %eax,%eax
-801059f1:	74 1d                	je     80105a10 <trap+0xc0>
-801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
-801059f8:	8b 50 24             	mov    0x24(%eax),%edx
-801059fb:	85 d2                	test   %edx,%edx
-801059fd:	74 11                	je     80105a10 <trap+0xc0>
-801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a03:	83 e0 03             	and    $0x3,%eax
-80105a06:	66 83 f8 03          	cmp    $0x3,%ax
-80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
-80105a15:	85 c0                	test   %eax,%eax
-80105a17:	74 0f                	je     80105a28 <trap+0xd8>
-80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
-80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+801066ea:	e8 81 d9 ff ff       	call   80104070 <myproc>
+801066ef:	85 c0                	test   %eax,%eax
+801066f1:	74 1d                	je     80106710 <trap+0xc0>
+801066f3:	e8 78 d9 ff ff       	call   80104070 <myproc>
+801066f8:	8b 48 24             	mov    0x24(%eax),%ecx
+801066fb:	85 c9                	test   %ecx,%ecx
+801066fd:	74 11                	je     80106710 <trap+0xc0>
+801066ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106703:	83 e0 03             	and    $0x3,%eax
+80106706:	66 83 f8 03          	cmp    $0x3,%ax
+8010670a:	0f 84 a0 01 00 00    	je     801068b0 <trap+0x260>
+  
+  static int ticks_since_last_yield = 0;
+  static int time_slice = 0;
+  static int time_slice_initializing = 0;
+  static struct proc* last_proc = 0;
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+80106710:	e8 5b d9 ff ff       	call   80104070 <myproc>
+80106715:	85 c0                	test   %eax,%eax
+80106717:	74 0f                	je     80106728 <trap+0xd8>
+80106719:	e8 52 d9 ff ff       	call   80104070 <myproc>
+8010671e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80106722:	0f 84 e8 00 00 00    	je     80106810 <trap+0x1c0>
+      }
+    }
+  }
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
-80105a2d:	85 c0                	test   %eax,%eax
-80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
-80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
-80105a36:	8b 40 24             	mov    0x24(%eax),%eax
-80105a39:	85 c0                	test   %eax,%eax
-80105a3b:	74 11                	je     80105a4e <trap+0xfe>
-80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a41:	83 e0 03             	and    $0x3,%eax
-80105a44:	66 83 f8 03          	cmp    $0x3,%ax
-80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
+80106728:	e8 43 d9 ff ff       	call   80104070 <myproc>
+8010672d:	85 c0                	test   %eax,%eax
+8010672f:	74 1d                	je     8010674e <trap+0xfe>
+80106731:	e8 3a d9 ff ff       	call   80104070 <myproc>
+80106736:	8b 40 24             	mov    0x24(%eax),%eax
+80106739:	85 c0                	test   %eax,%eax
+8010673b:	74 11                	je     8010674e <trap+0xfe>
+8010673d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106741:	83 e0 03             	and    $0x3,%eax
+80106744:	66 83 f8 03          	cmp    $0x3,%ax
+80106748:	0f 84 53 01 00 00    	je     801068a1 <trap+0x251>
     exit();
 }
-80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a51:	5b                   	pop    %ebx
-80105a52:	5e                   	pop    %esi
-80105a53:	5f                   	pop    %edi
-80105a54:	5d                   	pop    %ebp
-80105a55:	c3                   	ret    
+8010674e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106751:	5b                   	pop    %ebx
+80106752:	5e                   	pop    %esi
+80106753:	5f                   	pop    %edi
+80106754:	5d                   	pop    %ebp
+80106755:	c3                   	ret    
     ideintr();
-80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
+80106756:	e8 85 ba ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
+8010675b:	e8 60 c1 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
-80105a65:	85 c0                	test   %eax,%eax
-80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
-80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
+80106760:	e8 0b d9 ff ff       	call   80104070 <myproc>
+80106765:	85 c0                	test   %eax,%eax
+80106767:	75 8a                	jne    801066f3 <trap+0xa3>
+80106769:	eb a5                	jmp    80106710 <trap+0xc0>
     if(cpuid() == 0){
-80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
-80105a70:	85 c0                	test   %eax,%eax
-80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
+8010676b:	e8 e0 d8 ff ff       	call   80104050 <cpuid>
+80106770:	85 c0                	test   %eax,%eax
+80106772:	75 e7                	jne    8010675b <trap+0x10b>
       acquire(&tickslock);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	68 60 4c 11 80       	push   $0x80114c60
-80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
+80106774:	83 ec 0c             	sub    $0xc,%esp
+80106777:	68 c0 5a 11 80       	push   $0x80115ac0
+8010677c:	e8 bf e9 ff ff       	call   80105140 <acquire>
       wakeup(&ticks);
-80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+80106781:	c7 04 24 00 63 11 80 	movl   $0x80116300,(%esp)
       ticks++;
-80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+80106788:	83 05 00 63 11 80 01 	addl   $0x1,0x80116300
       wakeup(&ticks);
-80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
+8010678f:	e8 4c e1 ff ff       	call   801048e0 <wakeup>
       release(&tickslock);
-80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
-80105aa0:	83 c4 10             	add    $0x10,%esp
+80106794:	c7 04 24 c0 5a 11 80 	movl   $0x80115ac0,(%esp)
+8010679b:	e8 60 ea ff ff       	call   80105200 <release>
+801067a0:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
+801067a3:	eb b6                	jmp    8010675b <trap+0x10b>
     kbdintr();
-80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
+801067a5:	e8 d6 bf ff ff       	call   80102780 <kbdintr>
     lapiceoi();
-80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
+801067aa:	e8 11 c1 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
-80105ab4:	85 c0                	test   %eax,%eax
-80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
-80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
+801067af:	e8 bc d8 ff ff       	call   80104070 <myproc>
+801067b4:	85 c0                	test   %eax,%eax
+801067b6:	0f 85 37 ff ff ff    	jne    801066f3 <trap+0xa3>
+801067bc:	e9 4f ff ff ff       	jmp    80106710 <trap+0xc0>
     uartintr();
-80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
+801067c1:	e8 0a 03 00 00       	call   80106ad0 <uartintr>
     lapiceoi();
-80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
+801067c6:	e8 f5 c0 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
-80105ad0:	85 c0                	test   %eax,%eax
-80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
-80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
+801067cb:	e8 a0 d8 ff ff       	call   80104070 <myproc>
+801067d0:	85 c0                	test   %eax,%eax
+801067d2:	0f 85 1b ff ff ff    	jne    801066f3 <trap+0xa3>
+801067d8:	e9 33 ff ff ff       	jmp    80106710 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
-80105ae9:	57                   	push   %edi
-80105aea:	56                   	push   %esi
-80105aeb:	50                   	push   %eax
-80105aec:	68 64 78 10 80       	push   $0x80107864
-80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
+801067dd:	8b 7b 38             	mov    0x38(%ebx),%edi
+801067e0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+801067e4:	e8 67 d8 ff ff       	call   80104050 <cpuid>
+801067e9:	57                   	push   %edi
+801067ea:	56                   	push   %esi
+801067eb:	50                   	push   %eax
+801067ec:	68 b8 86 10 80       	push   $0x801086b8
+801067f1:	e8 ba 9e ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
+801067f6:	e8 c5 c0 ff ff       	call   801028c0 <lapiceoi>
     break;
-80105afb:	83 c4 10             	add    $0x10,%esp
+801067fb:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
-80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
-  if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
-    yield();
-80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
-80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801067fe:	e8 6d d8 ff ff       	call   80104070 <myproc>
+80106803:	85 c0                	test   %eax,%eax
+80106805:	0f 85 e8 fe ff ff    	jne    801066f3 <trap+0xa3>
+8010680b:	e9 00 ff ff ff       	jmp    80106710 <trap+0xc0>
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+80106810:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80106814:	0f 85 0e ff ff ff    	jne    80106728 <trap+0xd8>
+    if(myproc() == base_process){
+8010681a:	e8 51 d8 ff ff       	call   80104070 <myproc>
+8010681f:	39 05 bc b5 10 80    	cmp    %eax,0x8010b5bc
+80106825:	0f 84 a5 00 00 00    	je     801068d0 <trap+0x280>
+      time_slice_initializing = 0;
+8010682b:	c7 05 d0 b5 10 80 00 	movl   $0x0,0x8010b5d0
+80106832:	00 00 00 
+      if(last_proc == myproc()){
+80106835:	e8 36 d8 ff ff       	call   80104070 <myproc>
+8010683a:	39 05 c8 b5 10 80    	cmp    %eax,0x8010b5c8
+80106840:	0f 84 ac 00 00 00    	je     801068f2 <trap+0x2a2>
+        last_proc = myproc();
+80106846:	e8 25 d8 ff ff       	call   80104070 <myproc>
+        if(ticks_since_last_yield == time_slice){
+8010684b:	8b 15 cc b5 10 80    	mov    0x8010b5cc,%edx
+        ticks_since_last_yield = 0;
+80106851:	c7 05 c4 b5 10 80 00 	movl   $0x0,0x8010b5c4
+80106858:	00 00 00 
+        last_proc = myproc();
+8010685b:	a3 c8 b5 10 80       	mov    %eax,0x8010b5c8
+        if(ticks_since_last_yield == time_slice){
+80106860:	85 d2                	test   %edx,%edx
+80106862:	0f 85 c0 fe ff ff    	jne    80106728 <trap+0xd8>
+          yield();
+80106868:	e8 23 de ff ff       	call   80104690 <yield>
+8010686d:	e9 b6 fe ff ff       	jmp    80106728 <trap+0xd8>
+80106872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed)
-80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
-80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
-80105b30:	85 f6                	test   %esi,%esi
-80105b32:	75 3c                	jne    80105b70 <trap+0x220>
+80106878:	e8 f3 d7 ff ff       	call   80104070 <myproc>
+8010687d:	8b 70 24             	mov    0x24(%eax),%esi
+80106880:	85 f6                	test   %esi,%esi
+80106882:	75 3c                	jne    801068c0 <trap+0x270>
     myproc()->tf = tf;
-80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
-80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
+80106884:	e8 e7 d7 ff ff       	call   80104070 <myproc>
+80106889:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
+8010688c:	e8 8f ed ff ff       	call   80105620 <syscall>
     if(myproc()->killed)
-80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
-80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b49:	85 c9                	test   %ecx,%ecx
-80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
-}
-80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b54:	5b                   	pop    %ebx
-80105b55:	5e                   	pop    %esi
-80105b56:	5f                   	pop    %edi
-80105b57:	5d                   	pop    %ebp
+80106891:	e8 da d7 ff ff       	call   80104070 <myproc>
+80106896:	8b 58 24             	mov    0x24(%eax),%ebx
+80106899:	85 db                	test   %ebx,%ebx
+8010689b:	0f 84 ad fe ff ff    	je     8010674e <trap+0xfe>
+}
+801068a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801068a4:	5b                   	pop    %ebx
+801068a5:	5e                   	pop    %esi
+801068a6:	5f                   	pop    %edi
+801068a7:	5d                   	pop    %ebp
       exit();
-80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
+801068a8:	e9 e3 dc ff ff       	jmp    80104590 <exit>
+801068ad:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
-80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
-80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801068b0:	e8 db dc ff ff       	call   80104590 <exit>
+801068b5:	e9 56 fe ff ff       	jmp    80106710 <trap+0xc0>
+801068ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
-80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
-80105b77:	0f 20 d6             	mov    %cr2,%esi
+801068c0:	e8 cb dc ff ff       	call   80104590 <exit>
+801068c5:	eb bd                	jmp    80106884 <trap+0x234>
+801068c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068ce:	66 90                	xchg   %ax,%ax
+      if(time_slice_initializing == 1) ++time_slice;
+801068d0:	83 3d d0 b5 10 80 01 	cmpl   $0x1,0x8010b5d0
+801068d7:	74 33                	je     8010690c <trap+0x2bc>
+        time_slice_initializing = 1;
+801068d9:	c7 05 d0 b5 10 80 01 	movl   $0x1,0x8010b5d0
+801068e0:	00 00 00 
+        time_slice = 1;
+801068e3:	c7 05 cc b5 10 80 01 	movl   $0x1,0x8010b5cc
+801068ea:	00 00 00 
+801068ed:	e9 36 fe ff ff       	jmp    80106728 <trap+0xd8>
+        if(ticks_since_last_yield == time_slice){
+801068f2:	a1 c4 b5 10 80       	mov    0x8010b5c4,%eax
+801068f7:	3b 05 cc b5 10 80    	cmp    0x8010b5cc,%eax
+801068fd:	74 19                	je     80106918 <trap+0x2c8>
+          ticks_since_last_yield++;
+801068ff:	83 c0 01             	add    $0x1,%eax
+80106902:	a3 c4 b5 10 80       	mov    %eax,0x8010b5c4
+80106907:	e9 1c fe ff ff       	jmp    80106728 <trap+0xd8>
+      if(time_slice_initializing == 1) ++time_slice;
+8010690c:	83 05 cc b5 10 80 01 	addl   $0x1,0x8010b5cc
+80106913:	e9 10 fe ff ff       	jmp    80106728 <trap+0xd8>
+          ticks_since_last_yield = 0;
+80106918:	c7 05 c4 b5 10 80 00 	movl   $0x0,0x8010b5c4
+8010691f:	00 00 00 
+          yield();
+80106922:	e8 69 dd ff ff       	call   80104690 <yield>
+80106927:	e9 fc fd ff ff       	jmp    80106728 <trap+0xd8>
+8010692c:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
-80105b7f:	83 ec 0c             	sub    $0xc,%esp
-80105b82:	56                   	push   %esi
-80105b83:	57                   	push   %edi
-80105b84:	50                   	push   %eax
-80105b85:	ff 73 30             	pushl  0x30(%ebx)
-80105b88:	68 88 78 10 80       	push   $0x80107888
-80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
+8010692f:	e8 1c d7 ff ff       	call   80104050 <cpuid>
+80106934:	83 ec 0c             	sub    $0xc,%esp
+80106937:	56                   	push   %esi
+80106938:	57                   	push   %edi
+80106939:	50                   	push   %eax
+8010693a:	ff 73 30             	pushl  0x30(%ebx)
+8010693d:	68 dc 86 10 80       	push   $0x801086dc
+80106942:	e8 69 9d ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80105b92:	83 c4 14             	add    $0x14,%esp
-80105b95:	68 5e 78 10 80       	push   $0x8010785e
-80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
-80105b9f:	90                   	nop
+80106947:	83 c4 14             	add    $0x14,%esp
+8010694a:	68 b2 86 10 80       	push   $0x801086b2
+8010694f:	e8 3c 9a ff ff       	call   80100390 <panic>
+80106954:	66 90                	xchg   %ax,%ax
+80106956:	66 90                	xchg   %ax,%ax
+80106958:	66 90                	xchg   %ax,%ax
+8010695a:	66 90                	xchg   %ax,%ax
+8010695c:	66 90                	xchg   %ax,%ax
+8010695e:	66 90                	xchg   %ax,%ax
 
-80105ba0 <uartgetc>:
+80106960 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80105ba0:	f3 0f 1e fb          	endbr32 
+80106960:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ba9:	85 c0                	test   %eax,%eax
-80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
+80106964:	a1 d4 b5 10 80       	mov    0x8010b5d4,%eax
+80106969:	85 c0                	test   %eax,%eax
+8010696b:	74 1b                	je     80106988 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bb2:	ec                   	in     (%dx),%al
+8010696d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106972:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105bb3:	a8 01                	test   $0x1,%al
-80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
-80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bbc:	ec                   	in     (%dx),%al
+80106973:	a8 01                	test   $0x1,%al
+80106975:	74 11                	je     80106988 <uartgetc+0x28>
+80106977:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010697c:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bbd:	0f b6 c0             	movzbl %al,%eax
-80105bc0:	c3                   	ret    
-80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010697d:	0f b6 c0             	movzbl %al,%eax
+80106980:	c3                   	ret    
+80106981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106988:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
+8010698d:	c3                   	ret    
+8010698e:	66 90                	xchg   %ax,%ax
 
-80105bd0 <uartputc.part.0>:
+80106990 <uartputc.part.0>:
 uartputc(int c)
-80105bd0:	55                   	push   %ebp
-80105bd1:	89 e5                	mov    %esp,%ebp
-80105bd3:	57                   	push   %edi
-80105bd4:	89 c7                	mov    %eax,%edi
-80105bd6:	56                   	push   %esi
-80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105bdc:	53                   	push   %ebx
-80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105be2:	83 ec 0c             	sub    $0xc,%esp
-80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
-80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bee:	66 90                	xchg   %ax,%ax
+80106990:	55                   	push   %ebp
+80106991:	89 e5                	mov    %esp,%ebp
+80106993:	57                   	push   %edi
+80106994:	89 c7                	mov    %eax,%edi
+80106996:	56                   	push   %esi
+80106997:	be fd 03 00 00       	mov    $0x3fd,%esi
+8010699c:	53                   	push   %ebx
+8010699d:	bb 80 00 00 00       	mov    $0x80,%ebx
+801069a2:	83 ec 0c             	sub    $0xc,%esp
+801069a5:	eb 1b                	jmp    801069c2 <uartputc.part.0+0x32>
+801069a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ae:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80105bf0:	83 ec 0c             	sub    $0xc,%esp
-80105bf3:	6a 0a                	push   $0xa
-80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
+801069b0:	83 ec 0c             	sub    $0xc,%esp
+801069b3:	6a 0a                	push   $0xa
+801069b5:	e8 26 bf ff ff       	call   801028e0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105bfa:	83 c4 10             	add    $0x10,%esp
-80105bfd:	83 eb 01             	sub    $0x1,%ebx
-80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
-80105c02:	89 f2                	mov    %esi,%edx
-80105c04:	ec                   	in     (%dx),%al
-80105c05:	a8 20                	test   $0x20,%al
-80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
+801069ba:	83 c4 10             	add    $0x10,%esp
+801069bd:	83 eb 01             	sub    $0x1,%ebx
+801069c0:	74 07                	je     801069c9 <uartputc.part.0+0x39>
+801069c2:	89 f2                	mov    %esi,%edx
+801069c4:	ec                   	in     (%dx),%al
+801069c5:	a8 20                	test   $0x20,%al
+801069c7:	74 e7                	je     801069b0 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c0e:	89 f8                	mov    %edi,%eax
-80105c10:	ee                   	out    %al,(%dx)
-}
-80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c14:	5b                   	pop    %ebx
-80105c15:	5e                   	pop    %esi
-80105c16:	5f                   	pop    %edi
-80105c17:	5d                   	pop    %ebp
-80105c18:	c3                   	ret    
-80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105c20 <uartinit>:
-{
-80105c20:	f3 0f 1e fb          	endbr32 
-80105c24:	55                   	push   %ebp
-80105c25:	31 c9                	xor    %ecx,%ecx
-80105c27:	89 c8                	mov    %ecx,%eax
-80105c29:	89 e5                	mov    %esp,%ebp
-80105c2b:	57                   	push   %edi
-80105c2c:	56                   	push   %esi
-80105c2d:	53                   	push   %ebx
-80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105c33:	89 da                	mov    %ebx,%edx
-80105c35:	83 ec 0c             	sub    $0xc,%esp
-80105c38:	ee                   	out    %al,(%dx)
-80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c43:	89 fa                	mov    %edi,%edx
-80105c45:	ee                   	out    %al,(%dx)
-80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c50:	ee                   	out    %al,(%dx)
-80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105c56:	89 c8                	mov    %ecx,%eax
-80105c58:	89 f2                	mov    %esi,%edx
-80105c5a:	ee                   	out    %al,(%dx)
-80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c60:	89 fa                	mov    %edi,%edx
-80105c62:	ee                   	out    %al,(%dx)
-80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c68:	89 c8                	mov    %ecx,%eax
-80105c6a:	ee                   	out    %al,(%dx)
-80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c70:	89 f2                	mov    %esi,%edx
-80105c72:	ee                   	out    %al,(%dx)
+801069c9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801069ce:	89 f8                	mov    %edi,%eax
+801069d0:	ee                   	out    %al,(%dx)
+}
+801069d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801069d4:	5b                   	pop    %ebx
+801069d5:	5e                   	pop    %esi
+801069d6:	5f                   	pop    %edi
+801069d7:	5d                   	pop    %ebp
+801069d8:	c3                   	ret    
+801069d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801069e0 <uartinit>:
+{
+801069e0:	f3 0f 1e fb          	endbr32 
+801069e4:	55                   	push   %ebp
+801069e5:	31 c9                	xor    %ecx,%ecx
+801069e7:	89 c8                	mov    %ecx,%eax
+801069e9:	89 e5                	mov    %esp,%ebp
+801069eb:	57                   	push   %edi
+801069ec:	56                   	push   %esi
+801069ed:	53                   	push   %ebx
+801069ee:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+801069f3:	89 da                	mov    %ebx,%edx
+801069f5:	83 ec 0c             	sub    $0xc,%esp
+801069f8:	ee                   	out    %al,(%dx)
+801069f9:	bf fb 03 00 00       	mov    $0x3fb,%edi
+801069fe:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80106a03:	89 fa                	mov    %edi,%edx
+80106a05:	ee                   	out    %al,(%dx)
+80106a06:	b8 0c 00 00 00       	mov    $0xc,%eax
+80106a0b:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106a10:	ee                   	out    %al,(%dx)
+80106a11:	be f9 03 00 00       	mov    $0x3f9,%esi
+80106a16:	89 c8                	mov    %ecx,%eax
+80106a18:	89 f2                	mov    %esi,%edx
+80106a1a:	ee                   	out    %al,(%dx)
+80106a1b:	b8 03 00 00 00       	mov    $0x3,%eax
+80106a20:	89 fa                	mov    %edi,%edx
+80106a22:	ee                   	out    %al,(%dx)
+80106a23:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106a28:	89 c8                	mov    %ecx,%eax
+80106a2a:	ee                   	out    %al,(%dx)
+80106a2b:	b8 01 00 00 00       	mov    $0x1,%eax
+80106a30:	89 f2                	mov    %esi,%edx
+80106a32:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c78:	ec                   	in     (%dx),%al
+80106a33:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106a38:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c79:	3c ff                	cmp    $0xff,%al
-80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
+80106a39:	3c ff                	cmp    $0xff,%al
+80106a3b:	74 52                	je     80106a8f <uartinit+0xaf>
   uart = 1;
-80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105c84:	00 00 00 
-80105c87:	89 da                	mov    %ebx,%edx
-80105c89:	ec                   	in     (%dx),%al
-80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8f:	ec                   	in     (%dx),%al
+80106a3d:	c7 05 d4 b5 10 80 01 	movl   $0x1,0x8010b5d4
+80106a44:	00 00 00 
+80106a47:	89 da                	mov    %ebx,%edx
+80106a49:	ec                   	in     (%dx),%al
+80106a4a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106a4f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c90:	83 ec 08             	sub    $0x8,%esp
-80105c93:	be 76 00 00 00       	mov    $0x76,%esi
+80106a50:	83 ec 08             	sub    $0x8,%esp
+80106a53:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
+80106a58:	bb d4 87 10 80       	mov    $0x801087d4,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105c9d:	6a 00                	push   $0x0
-80105c9f:	6a 04                	push   $0x4
-80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
-80105ca6:	83 c4 10             	add    $0x10,%esp
+80106a5d:	6a 00                	push   $0x0
+80106a5f:	6a 04                	push   $0x4
+80106a61:	e8 ca b9 ff ff       	call   80102430 <ioapicenable>
+80106a66:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
-80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
-80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80106a69:	b8 78 00 00 00       	mov    $0x78,%eax
+80106a6e:	eb 04                	jmp    80106a74 <uartinit+0x94>
+80106a70:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105cba:	85 d2                	test   %edx,%edx
-80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
+80106a74:	8b 15 d4 b5 10 80    	mov    0x8010b5d4,%edx
+80106a7a:	85 d2                	test   %edx,%edx
+80106a7c:	74 08                	je     80106a86 <uartinit+0xa6>
     uartputc(*p);
-80105cbe:	0f be c0             	movsbl %al,%eax
-80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
+80106a7e:	0f be c0             	movsbl %al,%eax
+80106a81:	e8 0a ff ff ff       	call   80106990 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80105cc6:	89 f0                	mov    %esi,%eax
-80105cc8:	83 c3 01             	add    $0x1,%ebx
-80105ccb:	84 c0                	test   %al,%al
-80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
-}
-80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105cd2:	5b                   	pop    %ebx
-80105cd3:	5e                   	pop    %esi
-80105cd4:	5f                   	pop    %edi
-80105cd5:	5d                   	pop    %ebp
-80105cd6:	c3                   	ret    
-80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cde:	66 90                	xchg   %ax,%ax
+80106a86:	89 f0                	mov    %esi,%eax
+80106a88:	83 c3 01             	add    $0x1,%ebx
+80106a8b:	84 c0                	test   %al,%al
+80106a8d:	75 e1                	jne    80106a70 <uartinit+0x90>
+}
+80106a8f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a92:	5b                   	pop    %ebx
+80106a93:	5e                   	pop    %esi
+80106a94:	5f                   	pop    %edi
+80106a95:	5d                   	pop    %ebp
+80106a96:	c3                   	ret    
+80106a97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a9e:	66 90                	xchg   %ax,%ax
 
-80105ce0 <uartputc>:
+80106aa0 <uartputc>:
 {
-80105ce0:	f3 0f 1e fb          	endbr32 
-80105ce4:	55                   	push   %ebp
+80106aa0:	f3 0f 1e fb          	endbr32 
+80106aa4:	55                   	push   %ebp
   if(!uart)
-80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80106aa5:	8b 15 d4 b5 10 80    	mov    0x8010b5d4,%edx
 {
-80105ceb:	89 e5                	mov    %esp,%ebp
-80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
+80106aab:	89 e5                	mov    %esp,%ebp
+80106aad:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105cf0:	85 d2                	test   %edx,%edx
-80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
+80106ab0:	85 d2                	test   %edx,%edx
+80106ab2:	74 0c                	je     80106ac0 <uartputc+0x20>
 }
-80105cf4:	5d                   	pop    %ebp
-80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
-80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105d00:	5d                   	pop    %ebp
-80105d01:	c3                   	ret    
-80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ab4:	5d                   	pop    %ebp
+80106ab5:	e9 d6 fe ff ff       	jmp    80106990 <uartputc.part.0>
+80106aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106ac0:	5d                   	pop    %ebp
+80106ac1:	c3                   	ret    
+80106ac2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d10 <uartintr>:
+80106ad0 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	f3 0f 1e fb          	endbr32 
-80105d14:	55                   	push   %ebp
-80105d15:	89 e5                	mov    %esp,%ebp
-80105d17:	83 ec 14             	sub    $0x14,%esp
+80106ad0:	f3 0f 1e fb          	endbr32 
+80106ad4:	55                   	push   %ebp
+80106ad5:	89 e5                	mov    %esp,%ebp
+80106ad7:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
+80106ada:	68 60 69 10 80       	push   $0x80106960
+80106adf:	e8 7c 9d ff ff       	call   80100860 <consoleintr>
 }
-80105d24:	83 c4 10             	add    $0x10,%esp
-80105d27:	c9                   	leave  
-80105d28:	c3                   	ret    
+80106ae4:	83 c4 10             	add    $0x10,%esp
+80106ae7:	c9                   	leave  
+80106ae8:	c3                   	ret    
 
-80105d29 <vector0>:
+80106ae9 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d29:	6a 00                	push   $0x0
+80106ae9:	6a 00                	push   $0x0
   pushl $0
-80105d2b:	6a 00                	push   $0x0
+80106aeb:	6a 00                	push   $0x0
   jmp alltraps
-80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
+80106aed:	e9 85 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d32 <vector1>:
+80106af2 <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d32:	6a 00                	push   $0x0
+80106af2:	6a 00                	push   $0x0
   pushl $1
-80105d34:	6a 01                	push   $0x1
+80106af4:	6a 01                	push   $0x1
   jmp alltraps
-80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
+80106af6:	e9 7c fa ff ff       	jmp    80106577 <alltraps>
 
-80105d3b <vector2>:
+80106afb <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d3b:	6a 00                	push   $0x0
+80106afb:	6a 00                	push   $0x0
   pushl $2
-80105d3d:	6a 02                	push   $0x2
+80106afd:	6a 02                	push   $0x2
   jmp alltraps
-80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
+80106aff:	e9 73 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d44 <vector3>:
+80106b04 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d44:	6a 00                	push   $0x0
+80106b04:	6a 00                	push   $0x0
   pushl $3
-80105d46:	6a 03                	push   $0x3
+80106b06:	6a 03                	push   $0x3
   jmp alltraps
-80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
+80106b08:	e9 6a fa ff ff       	jmp    80106577 <alltraps>
 
-80105d4d <vector4>:
+80106b0d <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d4d:	6a 00                	push   $0x0
+80106b0d:	6a 00                	push   $0x0
   pushl $4
-80105d4f:	6a 04                	push   $0x4
+80106b0f:	6a 04                	push   $0x4
   jmp alltraps
-80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
+80106b11:	e9 61 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d56 <vector5>:
+80106b16 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d56:	6a 00                	push   $0x0
+80106b16:	6a 00                	push   $0x0
   pushl $5
-80105d58:	6a 05                	push   $0x5
+80106b18:	6a 05                	push   $0x5
   jmp alltraps
-80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
+80106b1a:	e9 58 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d5f <vector6>:
+80106b1f <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5f:	6a 00                	push   $0x0
+80106b1f:	6a 00                	push   $0x0
   pushl $6
-80105d61:	6a 06                	push   $0x6
+80106b21:	6a 06                	push   $0x6
   jmp alltraps
-80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
+80106b23:	e9 4f fa ff ff       	jmp    80106577 <alltraps>
 
-80105d68 <vector7>:
+80106b28 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d68:	6a 00                	push   $0x0
+80106b28:	6a 00                	push   $0x0
   pushl $7
-80105d6a:	6a 07                	push   $0x7
+80106b2a:	6a 07                	push   $0x7
   jmp alltraps
-80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
+80106b2c:	e9 46 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d71 <vector8>:
+80106b31 <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d71:	6a 08                	push   $0x8
+80106b31:	6a 08                	push   $0x8
   jmp alltraps
-80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
+80106b33:	e9 3f fa ff ff       	jmp    80106577 <alltraps>
 
-80105d78 <vector9>:
+80106b38 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d78:	6a 00                	push   $0x0
+80106b38:	6a 00                	push   $0x0
   pushl $9
-80105d7a:	6a 09                	push   $0x9
+80106b3a:	6a 09                	push   $0x9
   jmp alltraps
-80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
+80106b3c:	e9 36 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d81 <vector10>:
+80106b41 <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d81:	6a 0a                	push   $0xa
+80106b41:	6a 0a                	push   $0xa
   jmp alltraps
-80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
+80106b43:	e9 2f fa ff ff       	jmp    80106577 <alltraps>
 
-80105d88 <vector11>:
+80106b48 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d88:	6a 0b                	push   $0xb
+80106b48:	6a 0b                	push   $0xb
   jmp alltraps
-80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
+80106b4a:	e9 28 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d8f <vector12>:
+80106b4f <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8f:	6a 0c                	push   $0xc
+80106b4f:	6a 0c                	push   $0xc
   jmp alltraps
-80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
+80106b51:	e9 21 fa ff ff       	jmp    80106577 <alltraps>
 
-80105d96 <vector13>:
+80106b56 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d96:	6a 0d                	push   $0xd
+80106b56:	6a 0d                	push   $0xd
   jmp alltraps
-80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
+80106b58:	e9 1a fa ff ff       	jmp    80106577 <alltraps>
 
-80105d9d <vector14>:
+80106b5d <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d9d:	6a 0e                	push   $0xe
+80106b5d:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
+80106b5f:	e9 13 fa ff ff       	jmp    80106577 <alltraps>
 
-80105da4 <vector15>:
+80106b64 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da4:	6a 00                	push   $0x0
+80106b64:	6a 00                	push   $0x0
   pushl $15
-80105da6:	6a 0f                	push   $0xf
+80106b66:	6a 0f                	push   $0xf
   jmp alltraps
-80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
+80106b68:	e9 0a fa ff ff       	jmp    80106577 <alltraps>
 
-80105dad <vector16>:
+80106b6d <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105dad:	6a 00                	push   $0x0
+80106b6d:	6a 00                	push   $0x0
   pushl $16
-80105daf:	6a 10                	push   $0x10
+80106b6f:	6a 10                	push   $0x10
   jmp alltraps
-80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
+80106b71:	e9 01 fa ff ff       	jmp    80106577 <alltraps>
 
-80105db6 <vector17>:
+80106b76 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db6:	6a 11                	push   $0x11
+80106b76:	6a 11                	push   $0x11
   jmp alltraps
-80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
+80106b78:	e9 fa f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dbd <vector18>:
+80106b7d <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105dbd:	6a 00                	push   $0x0
+80106b7d:	6a 00                	push   $0x0
   pushl $18
-80105dbf:	6a 12                	push   $0x12
+80106b7f:	6a 12                	push   $0x12
   jmp alltraps
-80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
+80106b81:	e9 f1 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dc6 <vector19>:
+80106b86 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc6:	6a 00                	push   $0x0
+80106b86:	6a 00                	push   $0x0
   pushl $19
-80105dc8:	6a 13                	push   $0x13
+80106b88:	6a 13                	push   $0x13
   jmp alltraps
-80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
+80106b8a:	e9 e8 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dcf <vector20>:
+80106b8f <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcf:	6a 00                	push   $0x0
+80106b8f:	6a 00                	push   $0x0
   pushl $20
-80105dd1:	6a 14                	push   $0x14
+80106b91:	6a 14                	push   $0x14
   jmp alltraps
-80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
+80106b93:	e9 df f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dd8 <vector21>:
+80106b98 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd8:	6a 00                	push   $0x0
+80106b98:	6a 00                	push   $0x0
   pushl $21
-80105dda:	6a 15                	push   $0x15
+80106b9a:	6a 15                	push   $0x15
   jmp alltraps
-80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
+80106b9c:	e9 d6 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105de1 <vector22>:
+80106ba1 <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105de1:	6a 00                	push   $0x0
+80106ba1:	6a 00                	push   $0x0
   pushl $22
-80105de3:	6a 16                	push   $0x16
+80106ba3:	6a 16                	push   $0x16
   jmp alltraps
-80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
+80106ba5:	e9 cd f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dea <vector23>:
+80106baa <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105dea:	6a 00                	push   $0x0
+80106baa:	6a 00                	push   $0x0
   pushl $23
-80105dec:	6a 17                	push   $0x17
+80106bac:	6a 17                	push   $0x17
   jmp alltraps
-80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
+80106bae:	e9 c4 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105df3 <vector24>:
+80106bb3 <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105df3:	6a 00                	push   $0x0
+80106bb3:	6a 00                	push   $0x0
   pushl $24
-80105df5:	6a 18                	push   $0x18
+80106bb5:	6a 18                	push   $0x18
   jmp alltraps
-80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
+80106bb7:	e9 bb f9 ff ff       	jmp    80106577 <alltraps>
 
-80105dfc <vector25>:
+80106bbc <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105dfc:	6a 00                	push   $0x0
+80106bbc:	6a 00                	push   $0x0
   pushl $25
-80105dfe:	6a 19                	push   $0x19
+80106bbe:	6a 19                	push   $0x19
   jmp alltraps
-80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
+80106bc0:	e9 b2 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e05 <vector26>:
+80106bc5 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e05:	6a 00                	push   $0x0
+80106bc5:	6a 00                	push   $0x0
   pushl $26
-80105e07:	6a 1a                	push   $0x1a
+80106bc7:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
+80106bc9:	e9 a9 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e0e <vector27>:
+80106bce <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0e:	6a 00                	push   $0x0
+80106bce:	6a 00                	push   $0x0
   pushl $27
-80105e10:	6a 1b                	push   $0x1b
+80106bd0:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
+80106bd2:	e9 a0 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e17 <vector28>:
+80106bd7 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e17:	6a 00                	push   $0x0
+80106bd7:	6a 00                	push   $0x0
   pushl $28
-80105e19:	6a 1c                	push   $0x1c
+80106bd9:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
+80106bdb:	e9 97 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e20 <vector29>:
+80106be0 <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e20:	6a 00                	push   $0x0
+80106be0:	6a 00                	push   $0x0
   pushl $29
-80105e22:	6a 1d                	push   $0x1d
+80106be2:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
+80106be4:	e9 8e f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e29 <vector30>:
+80106be9 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e29:	6a 00                	push   $0x0
+80106be9:	6a 00                	push   $0x0
   pushl $30
-80105e2b:	6a 1e                	push   $0x1e
+80106beb:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
+80106bed:	e9 85 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e32 <vector31>:
+80106bf2 <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e32:	6a 00                	push   $0x0
+80106bf2:	6a 00                	push   $0x0
   pushl $31
-80105e34:	6a 1f                	push   $0x1f
+80106bf4:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
+80106bf6:	e9 7c f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e3b <vector32>:
+80106bfb <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e3b:	6a 00                	push   $0x0
+80106bfb:	6a 00                	push   $0x0
   pushl $32
-80105e3d:	6a 20                	push   $0x20
+80106bfd:	6a 20                	push   $0x20
   jmp alltraps
-80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
+80106bff:	e9 73 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e44 <vector33>:
+80106c04 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e44:	6a 00                	push   $0x0
+80106c04:	6a 00                	push   $0x0
   pushl $33
-80105e46:	6a 21                	push   $0x21
+80106c06:	6a 21                	push   $0x21
   jmp alltraps
-80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
+80106c08:	e9 6a f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e4d <vector34>:
+80106c0d <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e4d:	6a 00                	push   $0x0
+80106c0d:	6a 00                	push   $0x0
   pushl $34
-80105e4f:	6a 22                	push   $0x22
+80106c0f:	6a 22                	push   $0x22
   jmp alltraps
-80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
+80106c11:	e9 61 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e56 <vector35>:
+80106c16 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e56:	6a 00                	push   $0x0
+80106c16:	6a 00                	push   $0x0
   pushl $35
-80105e58:	6a 23                	push   $0x23
+80106c18:	6a 23                	push   $0x23
   jmp alltraps
-80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
+80106c1a:	e9 58 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e5f <vector36>:
+80106c1f <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5f:	6a 00                	push   $0x0
+80106c1f:	6a 00                	push   $0x0
   pushl $36
-80105e61:	6a 24                	push   $0x24
+80106c21:	6a 24                	push   $0x24
   jmp alltraps
-80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
+80106c23:	e9 4f f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e68 <vector37>:
+80106c28 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e68:	6a 00                	push   $0x0
+80106c28:	6a 00                	push   $0x0
   pushl $37
-80105e6a:	6a 25                	push   $0x25
+80106c2a:	6a 25                	push   $0x25
   jmp alltraps
-80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
+80106c2c:	e9 46 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e71 <vector38>:
+80106c31 <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e71:	6a 00                	push   $0x0
+80106c31:	6a 00                	push   $0x0
   pushl $38
-80105e73:	6a 26                	push   $0x26
+80106c33:	6a 26                	push   $0x26
   jmp alltraps
-80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
+80106c35:	e9 3d f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e7a <vector39>:
+80106c3a <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e7a:	6a 00                	push   $0x0
+80106c3a:	6a 00                	push   $0x0
   pushl $39
-80105e7c:	6a 27                	push   $0x27
+80106c3c:	6a 27                	push   $0x27
   jmp alltraps
-80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
+80106c3e:	e9 34 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e83 <vector40>:
+80106c43 <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e83:	6a 00                	push   $0x0
+80106c43:	6a 00                	push   $0x0
   pushl $40
-80105e85:	6a 28                	push   $0x28
+80106c45:	6a 28                	push   $0x28
   jmp alltraps
-80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
+80106c47:	e9 2b f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e8c <vector41>:
+80106c4c <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e8c:	6a 00                	push   $0x0
+80106c4c:	6a 00                	push   $0x0
   pushl $41
-80105e8e:	6a 29                	push   $0x29
+80106c4e:	6a 29                	push   $0x29
   jmp alltraps
-80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
+80106c50:	e9 22 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e95 <vector42>:
+80106c55 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e95:	6a 00                	push   $0x0
+80106c55:	6a 00                	push   $0x0
   pushl $42
-80105e97:	6a 2a                	push   $0x2a
+80106c57:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
+80106c59:	e9 19 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105e9e <vector43>:
+80106c5e <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9e:	6a 00                	push   $0x0
+80106c5e:	6a 00                	push   $0x0
   pushl $43
-80105ea0:	6a 2b                	push   $0x2b
+80106c60:	6a 2b                	push   $0x2b
   jmp alltraps
-80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
+80106c62:	e9 10 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105ea7 <vector44>:
+80106c67 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea7:	6a 00                	push   $0x0
+80106c67:	6a 00                	push   $0x0
   pushl $44
-80105ea9:	6a 2c                	push   $0x2c
+80106c69:	6a 2c                	push   $0x2c
   jmp alltraps
-80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
+80106c6b:	e9 07 f9 ff ff       	jmp    80106577 <alltraps>
 
-80105eb0 <vector45>:
+80106c70 <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eb0:	6a 00                	push   $0x0
+80106c70:	6a 00                	push   $0x0
   pushl $45
-80105eb2:	6a 2d                	push   $0x2d
+80106c72:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
+80106c74:	e9 fe f8 ff ff       	jmp    80106577 <alltraps>
 
-80105eb9 <vector46>:
+80106c79 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb9:	6a 00                	push   $0x0
+80106c79:	6a 00                	push   $0x0
   pushl $46
-80105ebb:	6a 2e                	push   $0x2e
+80106c7b:	6a 2e                	push   $0x2e
   jmp alltraps
-80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
+80106c7d:	e9 f5 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105ec2 <vector47>:
+80106c82 <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ec2:	6a 00                	push   $0x0
+80106c82:	6a 00                	push   $0x0
   pushl $47
-80105ec4:	6a 2f                	push   $0x2f
+80106c84:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
+80106c86:	e9 ec f8 ff ff       	jmp    80106577 <alltraps>
 
-80105ecb <vector48>:
+80106c8b <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ecb:	6a 00                	push   $0x0
+80106c8b:	6a 00                	push   $0x0
   pushl $48
-80105ecd:	6a 30                	push   $0x30
+80106c8d:	6a 30                	push   $0x30
   jmp alltraps
-80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
+80106c8f:	e9 e3 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105ed4 <vector49>:
+80106c94 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed4:	6a 00                	push   $0x0
+80106c94:	6a 00                	push   $0x0
   pushl $49
-80105ed6:	6a 31                	push   $0x31
+80106c96:	6a 31                	push   $0x31
   jmp alltraps
-80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
+80106c98:	e9 da f8 ff ff       	jmp    80106577 <alltraps>
 
-80105edd <vector50>:
+80106c9d <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105edd:	6a 00                	push   $0x0
+80106c9d:	6a 00                	push   $0x0
   pushl $50
-80105edf:	6a 32                	push   $0x32
+80106c9f:	6a 32                	push   $0x32
   jmp alltraps
-80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
+80106ca1:	e9 d1 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105ee6 <vector51>:
+80106ca6 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee6:	6a 00                	push   $0x0
+80106ca6:	6a 00                	push   $0x0
   pushl $51
-80105ee8:	6a 33                	push   $0x33
+80106ca8:	6a 33                	push   $0x33
   jmp alltraps
-80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
+80106caa:	e9 c8 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105eef <vector52>:
+80106caf <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eef:	6a 00                	push   $0x0
+80106caf:	6a 00                	push   $0x0
   pushl $52
-80105ef1:	6a 34                	push   $0x34
+80106cb1:	6a 34                	push   $0x34
   jmp alltraps
-80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
+80106cb3:	e9 bf f8 ff ff       	jmp    80106577 <alltraps>
 
-80105ef8 <vector53>:
+80106cb8 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef8:	6a 00                	push   $0x0
+80106cb8:	6a 00                	push   $0x0
   pushl $53
-80105efa:	6a 35                	push   $0x35
+80106cba:	6a 35                	push   $0x35
   jmp alltraps
-80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
+80106cbc:	e9 b6 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f01 <vector54>:
+80106cc1 <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105f01:	6a 00                	push   $0x0
+80106cc1:	6a 00                	push   $0x0
   pushl $54
-80105f03:	6a 36                	push   $0x36
+80106cc3:	6a 36                	push   $0x36
   jmp alltraps
-80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
+80106cc5:	e9 ad f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f0a <vector55>:
+80106cca <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f0a:	6a 00                	push   $0x0
+80106cca:	6a 00                	push   $0x0
   pushl $55
-80105f0c:	6a 37                	push   $0x37
+80106ccc:	6a 37                	push   $0x37
   jmp alltraps
-80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
+80106cce:	e9 a4 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f13 <vector56>:
+80106cd3 <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f13:	6a 00                	push   $0x0
+80106cd3:	6a 00                	push   $0x0
   pushl $56
-80105f15:	6a 38                	push   $0x38
+80106cd5:	6a 38                	push   $0x38
   jmp alltraps
-80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
+80106cd7:	e9 9b f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f1c <vector57>:
+80106cdc <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f1c:	6a 00                	push   $0x0
+80106cdc:	6a 00                	push   $0x0
   pushl $57
-80105f1e:	6a 39                	push   $0x39
+80106cde:	6a 39                	push   $0x39
   jmp alltraps
-80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
+80106ce0:	e9 92 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f25 <vector58>:
+80106ce5 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f25:	6a 00                	push   $0x0
+80106ce5:	6a 00                	push   $0x0
   pushl $58
-80105f27:	6a 3a                	push   $0x3a
+80106ce7:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
+80106ce9:	e9 89 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f2e <vector59>:
+80106cee <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2e:	6a 00                	push   $0x0
+80106cee:	6a 00                	push   $0x0
   pushl $59
-80105f30:	6a 3b                	push   $0x3b
+80106cf0:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
+80106cf2:	e9 80 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f37 <vector60>:
+80106cf7 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f37:	6a 00                	push   $0x0
+80106cf7:	6a 00                	push   $0x0
   pushl $60
-80105f39:	6a 3c                	push   $0x3c
+80106cf9:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
+80106cfb:	e9 77 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f40 <vector61>:
+80106d00 <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f40:	6a 00                	push   $0x0
+80106d00:	6a 00                	push   $0x0
   pushl $61
-80105f42:	6a 3d                	push   $0x3d
+80106d02:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
+80106d04:	e9 6e f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f49 <vector62>:
+80106d09 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f49:	6a 00                	push   $0x0
+80106d09:	6a 00                	push   $0x0
   pushl $62
-80105f4b:	6a 3e                	push   $0x3e
+80106d0b:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
+80106d0d:	e9 65 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f52 <vector63>:
+80106d12 <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f52:	6a 00                	push   $0x0
+80106d12:	6a 00                	push   $0x0
   pushl $63
-80105f54:	6a 3f                	push   $0x3f
+80106d14:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
+80106d16:	e9 5c f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f5b <vector64>:
+80106d1b <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f5b:	6a 00                	push   $0x0
+80106d1b:	6a 00                	push   $0x0
   pushl $64
-80105f5d:	6a 40                	push   $0x40
+80106d1d:	6a 40                	push   $0x40
   jmp alltraps
-80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
+80106d1f:	e9 53 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f64 <vector65>:
+80106d24 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f64:	6a 00                	push   $0x0
+80106d24:	6a 00                	push   $0x0
   pushl $65
-80105f66:	6a 41                	push   $0x41
+80106d26:	6a 41                	push   $0x41
   jmp alltraps
-80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
+80106d28:	e9 4a f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f6d <vector66>:
+80106d2d <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f6d:	6a 00                	push   $0x0
+80106d2d:	6a 00                	push   $0x0
   pushl $66
-80105f6f:	6a 42                	push   $0x42
+80106d2f:	6a 42                	push   $0x42
   jmp alltraps
-80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
+80106d31:	e9 41 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f76 <vector67>:
+80106d36 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f76:	6a 00                	push   $0x0
+80106d36:	6a 00                	push   $0x0
   pushl $67
-80105f78:	6a 43                	push   $0x43
+80106d38:	6a 43                	push   $0x43
   jmp alltraps
-80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
+80106d3a:	e9 38 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f7f <vector68>:
+80106d3f <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7f:	6a 00                	push   $0x0
+80106d3f:	6a 00                	push   $0x0
   pushl $68
-80105f81:	6a 44                	push   $0x44
+80106d41:	6a 44                	push   $0x44
   jmp alltraps
-80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
+80106d43:	e9 2f f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f88 <vector69>:
+80106d48 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f88:	6a 00                	push   $0x0
+80106d48:	6a 00                	push   $0x0
   pushl $69
-80105f8a:	6a 45                	push   $0x45
+80106d4a:	6a 45                	push   $0x45
   jmp alltraps
-80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
+80106d4c:	e9 26 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f91 <vector70>:
+80106d51 <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f91:	6a 00                	push   $0x0
+80106d51:	6a 00                	push   $0x0
   pushl $70
-80105f93:	6a 46                	push   $0x46
+80106d53:	6a 46                	push   $0x46
   jmp alltraps
-80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
+80106d55:	e9 1d f8 ff ff       	jmp    80106577 <alltraps>
 
-80105f9a <vector71>:
+80106d5a <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f9a:	6a 00                	push   $0x0
+80106d5a:	6a 00                	push   $0x0
   pushl $71
-80105f9c:	6a 47                	push   $0x47
+80106d5c:	6a 47                	push   $0x47
   jmp alltraps
-80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
+80106d5e:	e9 14 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105fa3 <vector72>:
+80106d63 <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105fa3:	6a 00                	push   $0x0
+80106d63:	6a 00                	push   $0x0
   pushl $72
-80105fa5:	6a 48                	push   $0x48
+80106d65:	6a 48                	push   $0x48
   jmp alltraps
-80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
+80106d67:	e9 0b f8 ff ff       	jmp    80106577 <alltraps>
 
-80105fac <vector73>:
+80106d6c <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fac:	6a 00                	push   $0x0
+80106d6c:	6a 00                	push   $0x0
   pushl $73
-80105fae:	6a 49                	push   $0x49
+80106d6e:	6a 49                	push   $0x49
   jmp alltraps
-80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
+80106d70:	e9 02 f8 ff ff       	jmp    80106577 <alltraps>
 
-80105fb5 <vector74>:
+80106d75 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb5:	6a 00                	push   $0x0
+80106d75:	6a 00                	push   $0x0
   pushl $74
-80105fb7:	6a 4a                	push   $0x4a
+80106d77:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
+80106d79:	e9 f9 f7 ff ff       	jmp    80106577 <alltraps>
 
-80105fbe <vector75>:
+80106d7e <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fbe:	6a 00                	push   $0x0
+80106d7e:	6a 00                	push   $0x0
   pushl $75
-80105fc0:	6a 4b                	push   $0x4b
+80106d80:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
+80106d82:	e9 f0 f7 ff ff       	jmp    80106577 <alltraps>
 
-80105fc7 <vector76>:
+80106d87 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc7:	6a 00                	push   $0x0
+80106d87:	6a 00                	push   $0x0
   pushl $76
-80105fc9:	6a 4c                	push   $0x4c
+80106d89:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
+80106d8b:	e9 e7 f7 ff ff       	jmp    80106577 <alltraps>
 
-80105fd0 <vector77>:
+80106d90 <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fd0:	6a 00                	push   $0x0
+80106d90:	6a 00                	push   $0x0
   pushl $77
-80105fd2:	6a 4d                	push   $0x4d
+80106d92:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
+80106d94:	e9 de f7 ff ff       	jmp    80106577 <alltraps>
 
-80105fd9 <vector78>:
+80106d99 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd9:	6a 00                	push   $0x0
+80106d99:	6a 00                	push   $0x0
   pushl $78
-80105fdb:	6a 4e                	push   $0x4e
+80106d9b:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
+80106d9d:	e9 d5 f7 ff ff       	jmp    80106577 <alltraps>
 
-80105fe2 <vector79>:
+80106da2 <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fe2:	6a 00                	push   $0x0
+80106da2:	6a 00                	push   $0x0
   pushl $79
-80105fe4:	6a 4f                	push   $0x4f
+80106da4:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
+80106da6:	e9 cc f7 ff ff       	jmp    80106577 <alltraps>
 
-80105feb <vector80>:
+80106dab <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105feb:	6a 00                	push   $0x0
+80106dab:	6a 00                	push   $0x0
   pushl $80
-80105fed:	6a 50                	push   $0x50
+80106dad:	6a 50                	push   $0x50
   jmp alltraps
-80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
+80106daf:	e9 c3 f7 ff ff       	jmp    80106577 <alltraps>
 
-80105ff4 <vector81>:
+80106db4 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff4:	6a 00                	push   $0x0
+80106db4:	6a 00                	push   $0x0
   pushl $81
-80105ff6:	6a 51                	push   $0x51
+80106db6:	6a 51                	push   $0x51
   jmp alltraps
-80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
+80106db8:	e9 ba f7 ff ff       	jmp    80106577 <alltraps>
 
-80105ffd <vector82>:
+80106dbd <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ffd:	6a 00                	push   $0x0
+80106dbd:	6a 00                	push   $0x0
   pushl $82
-80105fff:	6a 52                	push   $0x52
+80106dbf:	6a 52                	push   $0x52
   jmp alltraps
-80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
+80106dc1:	e9 b1 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106006 <vector83>:
+80106dc6 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106006:	6a 00                	push   $0x0
+80106dc6:	6a 00                	push   $0x0
   pushl $83
-80106008:	6a 53                	push   $0x53
+80106dc8:	6a 53                	push   $0x53
   jmp alltraps
-8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
+80106dca:	e9 a8 f7 ff ff       	jmp    80106577 <alltraps>
 
-8010600f <vector84>:
+80106dcf <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600f:	6a 00                	push   $0x0
+80106dcf:	6a 00                	push   $0x0
   pushl $84
-80106011:	6a 54                	push   $0x54
+80106dd1:	6a 54                	push   $0x54
   jmp alltraps
-80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
+80106dd3:	e9 9f f7 ff ff       	jmp    80106577 <alltraps>
 
-80106018 <vector85>:
+80106dd8 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106018:	6a 00                	push   $0x0
+80106dd8:	6a 00                	push   $0x0
   pushl $85
-8010601a:	6a 55                	push   $0x55
+80106dda:	6a 55                	push   $0x55
   jmp alltraps
-8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
+80106ddc:	e9 96 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106021 <vector86>:
+80106de1 <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80106021:	6a 00                	push   $0x0
+80106de1:	6a 00                	push   $0x0
   pushl $86
-80106023:	6a 56                	push   $0x56
+80106de3:	6a 56                	push   $0x56
   jmp alltraps
-80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
+80106de5:	e9 8d f7 ff ff       	jmp    80106577 <alltraps>
 
-8010602a <vector87>:
+80106dea <vector87>:
 .globl vector87
 vector87:
   pushl $0
-8010602a:	6a 00                	push   $0x0
+80106dea:	6a 00                	push   $0x0
   pushl $87
-8010602c:	6a 57                	push   $0x57
+80106dec:	6a 57                	push   $0x57
   jmp alltraps
-8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
+80106dee:	e9 84 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106033 <vector88>:
+80106df3 <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80106033:	6a 00                	push   $0x0
+80106df3:	6a 00                	push   $0x0
   pushl $88
-80106035:	6a 58                	push   $0x58
+80106df5:	6a 58                	push   $0x58
   jmp alltraps
-80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
+80106df7:	e9 7b f7 ff ff       	jmp    80106577 <alltraps>
 
-8010603c <vector89>:
+80106dfc <vector89>:
 .globl vector89
 vector89:
   pushl $0
-8010603c:	6a 00                	push   $0x0
+80106dfc:	6a 00                	push   $0x0
   pushl $89
-8010603e:	6a 59                	push   $0x59
+80106dfe:	6a 59                	push   $0x59
   jmp alltraps
-80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
+80106e00:	e9 72 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106045 <vector90>:
+80106e05 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106045:	6a 00                	push   $0x0
+80106e05:	6a 00                	push   $0x0
   pushl $90
-80106047:	6a 5a                	push   $0x5a
+80106e07:	6a 5a                	push   $0x5a
   jmp alltraps
-80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
+80106e09:	e9 69 f7 ff ff       	jmp    80106577 <alltraps>
 
-8010604e <vector91>:
+80106e0e <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604e:	6a 00                	push   $0x0
+80106e0e:	6a 00                	push   $0x0
   pushl $91
-80106050:	6a 5b                	push   $0x5b
+80106e10:	6a 5b                	push   $0x5b
   jmp alltraps
-80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
+80106e12:	e9 60 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106057 <vector92>:
+80106e17 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106057:	6a 00                	push   $0x0
+80106e17:	6a 00                	push   $0x0
   pushl $92
-80106059:	6a 5c                	push   $0x5c
+80106e19:	6a 5c                	push   $0x5c
   jmp alltraps
-8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
+80106e1b:	e9 57 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106060 <vector93>:
+80106e20 <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80106060:	6a 00                	push   $0x0
+80106e20:	6a 00                	push   $0x0
   pushl $93
-80106062:	6a 5d                	push   $0x5d
+80106e22:	6a 5d                	push   $0x5d
   jmp alltraps
-80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
+80106e24:	e9 4e f7 ff ff       	jmp    80106577 <alltraps>
 
-80106069 <vector94>:
+80106e29 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106069:	6a 00                	push   $0x0
+80106e29:	6a 00                	push   $0x0
   pushl $94
-8010606b:	6a 5e                	push   $0x5e
+80106e2b:	6a 5e                	push   $0x5e
   jmp alltraps
-8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
+80106e2d:	e9 45 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106072 <vector95>:
+80106e32 <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80106072:	6a 00                	push   $0x0
+80106e32:	6a 00                	push   $0x0
   pushl $95
-80106074:	6a 5f                	push   $0x5f
+80106e34:	6a 5f                	push   $0x5f
   jmp alltraps
-80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
+80106e36:	e9 3c f7 ff ff       	jmp    80106577 <alltraps>
 
-8010607b <vector96>:
+80106e3b <vector96>:
 .globl vector96
 vector96:
   pushl $0
-8010607b:	6a 00                	push   $0x0
+80106e3b:	6a 00                	push   $0x0
   pushl $96
-8010607d:	6a 60                	push   $0x60
+80106e3d:	6a 60                	push   $0x60
   jmp alltraps
-8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
+80106e3f:	e9 33 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106084 <vector97>:
+80106e44 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106084:	6a 00                	push   $0x0
+80106e44:	6a 00                	push   $0x0
   pushl $97
-80106086:	6a 61                	push   $0x61
+80106e46:	6a 61                	push   $0x61
   jmp alltraps
-80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
+80106e48:	e9 2a f7 ff ff       	jmp    80106577 <alltraps>
 
-8010608d <vector98>:
+80106e4d <vector98>:
 .globl vector98
 vector98:
   pushl $0
-8010608d:	6a 00                	push   $0x0
+80106e4d:	6a 00                	push   $0x0
   pushl $98
-8010608f:	6a 62                	push   $0x62
+80106e4f:	6a 62                	push   $0x62
   jmp alltraps
-80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
+80106e51:	e9 21 f7 ff ff       	jmp    80106577 <alltraps>
 
-80106096 <vector99>:
+80106e56 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106096:	6a 00                	push   $0x0
+80106e56:	6a 00                	push   $0x0
   pushl $99
-80106098:	6a 63                	push   $0x63
+80106e58:	6a 63                	push   $0x63
   jmp alltraps
-8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
+80106e5a:	e9 18 f7 ff ff       	jmp    80106577 <alltraps>
 
-8010609f <vector100>:
+80106e5f <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609f:	6a 00                	push   $0x0
+80106e5f:	6a 00                	push   $0x0
   pushl $100
-801060a1:	6a 64                	push   $0x64
+80106e61:	6a 64                	push   $0x64
   jmp alltraps
-801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
+80106e63:	e9 0f f7 ff ff       	jmp    80106577 <alltraps>
 
-801060a8 <vector101>:
+80106e68 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a8:	6a 00                	push   $0x0
+80106e68:	6a 00                	push   $0x0
   pushl $101
-801060aa:	6a 65                	push   $0x65
+80106e6a:	6a 65                	push   $0x65
   jmp alltraps
-801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
+80106e6c:	e9 06 f7 ff ff       	jmp    80106577 <alltraps>
 
-801060b1 <vector102>:
+80106e71 <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060b1:	6a 00                	push   $0x0
+80106e71:	6a 00                	push   $0x0
   pushl $102
-801060b3:	6a 66                	push   $0x66
+80106e73:	6a 66                	push   $0x66
   jmp alltraps
-801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
+80106e75:	e9 fd f6 ff ff       	jmp    80106577 <alltraps>
 
-801060ba <vector103>:
+80106e7a <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060ba:	6a 00                	push   $0x0
+80106e7a:	6a 00                	push   $0x0
   pushl $103
-801060bc:	6a 67                	push   $0x67
+80106e7c:	6a 67                	push   $0x67
   jmp alltraps
-801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
+80106e7e:	e9 f4 f6 ff ff       	jmp    80106577 <alltraps>
 
-801060c3 <vector104>:
+80106e83 <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060c3:	6a 00                	push   $0x0
+80106e83:	6a 00                	push   $0x0
   pushl $104
-801060c5:	6a 68                	push   $0x68
+80106e85:	6a 68                	push   $0x68
   jmp alltraps
-801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
+80106e87:	e9 eb f6 ff ff       	jmp    80106577 <alltraps>
 
-801060cc <vector105>:
+80106e8c <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060cc:	6a 00                	push   $0x0
+80106e8c:	6a 00                	push   $0x0
   pushl $105
-801060ce:	6a 69                	push   $0x69
+80106e8e:	6a 69                	push   $0x69
   jmp alltraps
-801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
+80106e90:	e9 e2 f6 ff ff       	jmp    80106577 <alltraps>
 
-801060d5 <vector106>:
+80106e95 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d5:	6a 00                	push   $0x0
+80106e95:	6a 00                	push   $0x0
   pushl $106
-801060d7:	6a 6a                	push   $0x6a
+80106e97:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
+80106e99:	e9 d9 f6 ff ff       	jmp    80106577 <alltraps>
 
-801060de <vector107>:
+80106e9e <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060de:	6a 00                	push   $0x0
+80106e9e:	6a 00                	push   $0x0
   pushl $107
-801060e0:	6a 6b                	push   $0x6b
+80106ea0:	6a 6b                	push   $0x6b
   jmp alltraps
-801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
+80106ea2:	e9 d0 f6 ff ff       	jmp    80106577 <alltraps>
 
-801060e7 <vector108>:
+80106ea7 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e7:	6a 00                	push   $0x0
+80106ea7:	6a 00                	push   $0x0
   pushl $108
-801060e9:	6a 6c                	push   $0x6c
+80106ea9:	6a 6c                	push   $0x6c
   jmp alltraps
-801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
+80106eab:	e9 c7 f6 ff ff       	jmp    80106577 <alltraps>
 
-801060f0 <vector109>:
+80106eb0 <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060f0:	6a 00                	push   $0x0
+80106eb0:	6a 00                	push   $0x0
   pushl $109
-801060f2:	6a 6d                	push   $0x6d
+80106eb2:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
+80106eb4:	e9 be f6 ff ff       	jmp    80106577 <alltraps>
 
-801060f9 <vector110>:
+80106eb9 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f9:	6a 00                	push   $0x0
+80106eb9:	6a 00                	push   $0x0
   pushl $110
-801060fb:	6a 6e                	push   $0x6e
+80106ebb:	6a 6e                	push   $0x6e
   jmp alltraps
-801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
+80106ebd:	e9 b5 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106102 <vector111>:
+80106ec2 <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80106102:	6a 00                	push   $0x0
+80106ec2:	6a 00                	push   $0x0
   pushl $111
-80106104:	6a 6f                	push   $0x6f
+80106ec4:	6a 6f                	push   $0x6f
   jmp alltraps
-80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
+80106ec6:	e9 ac f6 ff ff       	jmp    80106577 <alltraps>
 
-8010610b <vector112>:
+80106ecb <vector112>:
 .globl vector112
 vector112:
   pushl $0
-8010610b:	6a 00                	push   $0x0
+80106ecb:	6a 00                	push   $0x0
   pushl $112
-8010610d:	6a 70                	push   $0x70
+80106ecd:	6a 70                	push   $0x70
   jmp alltraps
-8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
+80106ecf:	e9 a3 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106114 <vector113>:
+80106ed4 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106114:	6a 00                	push   $0x0
+80106ed4:	6a 00                	push   $0x0
   pushl $113
-80106116:	6a 71                	push   $0x71
+80106ed6:	6a 71                	push   $0x71
   jmp alltraps
-80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
+80106ed8:	e9 9a f6 ff ff       	jmp    80106577 <alltraps>
 
-8010611d <vector114>:
+80106edd <vector114>:
 .globl vector114
 vector114:
   pushl $0
-8010611d:	6a 00                	push   $0x0
+80106edd:	6a 00                	push   $0x0
   pushl $114
-8010611f:	6a 72                	push   $0x72
+80106edf:	6a 72                	push   $0x72
   jmp alltraps
-80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
+80106ee1:	e9 91 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106126 <vector115>:
+80106ee6 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106126:	6a 00                	push   $0x0
+80106ee6:	6a 00                	push   $0x0
   pushl $115
-80106128:	6a 73                	push   $0x73
+80106ee8:	6a 73                	push   $0x73
   jmp alltraps
-8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
+80106eea:	e9 88 f6 ff ff       	jmp    80106577 <alltraps>
 
-8010612f <vector116>:
+80106eef <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612f:	6a 00                	push   $0x0
+80106eef:	6a 00                	push   $0x0
   pushl $116
-80106131:	6a 74                	push   $0x74
+80106ef1:	6a 74                	push   $0x74
   jmp alltraps
-80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
+80106ef3:	e9 7f f6 ff ff       	jmp    80106577 <alltraps>
 
-80106138 <vector117>:
+80106ef8 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106138:	6a 00                	push   $0x0
+80106ef8:	6a 00                	push   $0x0
   pushl $117
-8010613a:	6a 75                	push   $0x75
+80106efa:	6a 75                	push   $0x75
   jmp alltraps
-8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
+80106efc:	e9 76 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106141 <vector118>:
+80106f01 <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80106141:	6a 00                	push   $0x0
+80106f01:	6a 00                	push   $0x0
   pushl $118
-80106143:	6a 76                	push   $0x76
+80106f03:	6a 76                	push   $0x76
   jmp alltraps
-80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
+80106f05:	e9 6d f6 ff ff       	jmp    80106577 <alltraps>
 
-8010614a <vector119>:
+80106f0a <vector119>:
 .globl vector119
 vector119:
   pushl $0
-8010614a:	6a 00                	push   $0x0
+80106f0a:	6a 00                	push   $0x0
   pushl $119
-8010614c:	6a 77                	push   $0x77
+80106f0c:	6a 77                	push   $0x77
   jmp alltraps
-8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
+80106f0e:	e9 64 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106153 <vector120>:
+80106f13 <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80106153:	6a 00                	push   $0x0
+80106f13:	6a 00                	push   $0x0
   pushl $120
-80106155:	6a 78                	push   $0x78
+80106f15:	6a 78                	push   $0x78
   jmp alltraps
-80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
+80106f17:	e9 5b f6 ff ff       	jmp    80106577 <alltraps>
 
-8010615c <vector121>:
+80106f1c <vector121>:
 .globl vector121
 vector121:
   pushl $0
-8010615c:	6a 00                	push   $0x0
+80106f1c:	6a 00                	push   $0x0
   pushl $121
-8010615e:	6a 79                	push   $0x79
+80106f1e:	6a 79                	push   $0x79
   jmp alltraps
-80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
+80106f20:	e9 52 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106165 <vector122>:
+80106f25 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106165:	6a 00                	push   $0x0
+80106f25:	6a 00                	push   $0x0
   pushl $122
-80106167:	6a 7a                	push   $0x7a
+80106f27:	6a 7a                	push   $0x7a
   jmp alltraps
-80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
+80106f29:	e9 49 f6 ff ff       	jmp    80106577 <alltraps>
 
-8010616e <vector123>:
+80106f2e <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616e:	6a 00                	push   $0x0
+80106f2e:	6a 00                	push   $0x0
   pushl $123
-80106170:	6a 7b                	push   $0x7b
+80106f30:	6a 7b                	push   $0x7b
   jmp alltraps
-80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
+80106f32:	e9 40 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106177 <vector124>:
+80106f37 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106177:	6a 00                	push   $0x0
+80106f37:	6a 00                	push   $0x0
   pushl $124
-80106179:	6a 7c                	push   $0x7c
+80106f39:	6a 7c                	push   $0x7c
   jmp alltraps
-8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
+80106f3b:	e9 37 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106180 <vector125>:
+80106f40 <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80106180:	6a 00                	push   $0x0
+80106f40:	6a 00                	push   $0x0
   pushl $125
-80106182:	6a 7d                	push   $0x7d
+80106f42:	6a 7d                	push   $0x7d
   jmp alltraps
-80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
+80106f44:	e9 2e f6 ff ff       	jmp    80106577 <alltraps>
 
-80106189 <vector126>:
+80106f49 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106189:	6a 00                	push   $0x0
+80106f49:	6a 00                	push   $0x0
   pushl $126
-8010618b:	6a 7e                	push   $0x7e
+80106f4b:	6a 7e                	push   $0x7e
   jmp alltraps
-8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
+80106f4d:	e9 25 f6 ff ff       	jmp    80106577 <alltraps>
 
-80106192 <vector127>:
+80106f52 <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80106192:	6a 00                	push   $0x0
+80106f52:	6a 00                	push   $0x0
   pushl $127
-80106194:	6a 7f                	push   $0x7f
+80106f54:	6a 7f                	push   $0x7f
   jmp alltraps
-80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
+80106f56:	e9 1c f6 ff ff       	jmp    80106577 <alltraps>
 
-8010619b <vector128>:
+80106f5b <vector128>:
 .globl vector128
 vector128:
   pushl $0
-8010619b:	6a 00                	push   $0x0
+80106f5b:	6a 00                	push   $0x0
   pushl $128
-8010619d:	68 80 00 00 00       	push   $0x80
+80106f5d:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
+80106f62:	e9 10 f6 ff ff       	jmp    80106577 <alltraps>
 
-801061a7 <vector129>:
+80106f67 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a7:	6a 00                	push   $0x0
+80106f67:	6a 00                	push   $0x0
   pushl $129
-801061a9:	68 81 00 00 00       	push   $0x81
+80106f69:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
+80106f6e:	e9 04 f6 ff ff       	jmp    80106577 <alltraps>
 
-801061b3 <vector130>:
+80106f73 <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061b3:	6a 00                	push   $0x0
+80106f73:	6a 00                	push   $0x0
   pushl $130
-801061b5:	68 82 00 00 00       	push   $0x82
+80106f75:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
+80106f7a:	e9 f8 f5 ff ff       	jmp    80106577 <alltraps>
 
-801061bf <vector131>:
+80106f7f <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bf:	6a 00                	push   $0x0
+80106f7f:	6a 00                	push   $0x0
   pushl $131
-801061c1:	68 83 00 00 00       	push   $0x83
+80106f81:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
+80106f86:	e9 ec f5 ff ff       	jmp    80106577 <alltraps>
 
-801061cb <vector132>:
+80106f8b <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061cb:	6a 00                	push   $0x0
+80106f8b:	6a 00                	push   $0x0
   pushl $132
-801061cd:	68 84 00 00 00       	push   $0x84
+80106f8d:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
+80106f92:	e9 e0 f5 ff ff       	jmp    80106577 <alltraps>
 
-801061d7 <vector133>:
+80106f97 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d7:	6a 00                	push   $0x0
+80106f97:	6a 00                	push   $0x0
   pushl $133
-801061d9:	68 85 00 00 00       	push   $0x85
+80106f99:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
+80106f9e:	e9 d4 f5 ff ff       	jmp    80106577 <alltraps>
 
-801061e3 <vector134>:
+80106fa3 <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061e3:	6a 00                	push   $0x0
+80106fa3:	6a 00                	push   $0x0
   pushl $134
-801061e5:	68 86 00 00 00       	push   $0x86
+80106fa5:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
+80106faa:	e9 c8 f5 ff ff       	jmp    80106577 <alltraps>
 
-801061ef <vector135>:
+80106faf <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061ef:	6a 00                	push   $0x0
+80106faf:	6a 00                	push   $0x0
   pushl $135
-801061f1:	68 87 00 00 00       	push   $0x87
+80106fb1:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
+80106fb6:	e9 bc f5 ff ff       	jmp    80106577 <alltraps>
 
-801061fb <vector136>:
+80106fbb <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061fb:	6a 00                	push   $0x0
+80106fbb:	6a 00                	push   $0x0
   pushl $136
-801061fd:	68 88 00 00 00       	push   $0x88
+80106fbd:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
+80106fc2:	e9 b0 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106207 <vector137>:
+80106fc7 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106207:	6a 00                	push   $0x0
+80106fc7:	6a 00                	push   $0x0
   pushl $137
-80106209:	68 89 00 00 00       	push   $0x89
+80106fc9:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
+80106fce:	e9 a4 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106213 <vector138>:
+80106fd3 <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80106213:	6a 00                	push   $0x0
+80106fd3:	6a 00                	push   $0x0
   pushl $138
-80106215:	68 8a 00 00 00       	push   $0x8a
+80106fd5:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
+80106fda:	e9 98 f5 ff ff       	jmp    80106577 <alltraps>
 
-8010621f <vector139>:
+80106fdf <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621f:	6a 00                	push   $0x0
+80106fdf:	6a 00                	push   $0x0
   pushl $139
-80106221:	68 8b 00 00 00       	push   $0x8b
+80106fe1:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
+80106fe6:	e9 8c f5 ff ff       	jmp    80106577 <alltraps>
 
-8010622b <vector140>:
+80106feb <vector140>:
 .globl vector140
 vector140:
   pushl $0
-8010622b:	6a 00                	push   $0x0
+80106feb:	6a 00                	push   $0x0
   pushl $140
-8010622d:	68 8c 00 00 00       	push   $0x8c
+80106fed:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
+80106ff2:	e9 80 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106237 <vector141>:
+80106ff7 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106237:	6a 00                	push   $0x0
+80106ff7:	6a 00                	push   $0x0
   pushl $141
-80106239:	68 8d 00 00 00       	push   $0x8d
+80106ff9:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
+80106ffe:	e9 74 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106243 <vector142>:
+80107003 <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80106243:	6a 00                	push   $0x0
+80107003:	6a 00                	push   $0x0
   pushl $142
-80106245:	68 8e 00 00 00       	push   $0x8e
+80107005:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
+8010700a:	e9 68 f5 ff ff       	jmp    80106577 <alltraps>
 
-8010624f <vector143>:
+8010700f <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624f:	6a 00                	push   $0x0
+8010700f:	6a 00                	push   $0x0
   pushl $143
-80106251:	68 8f 00 00 00       	push   $0x8f
+80107011:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
+80107016:	e9 5c f5 ff ff       	jmp    80106577 <alltraps>
 
-8010625b <vector144>:
+8010701b <vector144>:
 .globl vector144
 vector144:
   pushl $0
-8010625b:	6a 00                	push   $0x0
+8010701b:	6a 00                	push   $0x0
   pushl $144
-8010625d:	68 90 00 00 00       	push   $0x90
+8010701d:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
+80107022:	e9 50 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106267 <vector145>:
+80107027 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106267:	6a 00                	push   $0x0
+80107027:	6a 00                	push   $0x0
   pushl $145
-80106269:	68 91 00 00 00       	push   $0x91
+80107029:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
+8010702e:	e9 44 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106273 <vector146>:
+80107033 <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80106273:	6a 00                	push   $0x0
+80107033:	6a 00                	push   $0x0
   pushl $146
-80106275:	68 92 00 00 00       	push   $0x92
+80107035:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
+8010703a:	e9 38 f5 ff ff       	jmp    80106577 <alltraps>
 
-8010627f <vector147>:
+8010703f <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627f:	6a 00                	push   $0x0
+8010703f:	6a 00                	push   $0x0
   pushl $147
-80106281:	68 93 00 00 00       	push   $0x93
+80107041:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
+80107046:	e9 2c f5 ff ff       	jmp    80106577 <alltraps>
 
-8010628b <vector148>:
+8010704b <vector148>:
 .globl vector148
 vector148:
   pushl $0
-8010628b:	6a 00                	push   $0x0
+8010704b:	6a 00                	push   $0x0
   pushl $148
-8010628d:	68 94 00 00 00       	push   $0x94
+8010704d:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
+80107052:	e9 20 f5 ff ff       	jmp    80106577 <alltraps>
 
-80106297 <vector149>:
+80107057 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106297:	6a 00                	push   $0x0
+80107057:	6a 00                	push   $0x0
   pushl $149
-80106299:	68 95 00 00 00       	push   $0x95
+80107059:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
+8010705e:	e9 14 f5 ff ff       	jmp    80106577 <alltraps>
 
-801062a3 <vector150>:
+80107063 <vector150>:
 .globl vector150
 vector150:
   pushl $0
-801062a3:	6a 00                	push   $0x0
+80107063:	6a 00                	push   $0x0
   pushl $150
-801062a5:	68 96 00 00 00       	push   $0x96
+80107065:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
+8010706a:	e9 08 f5 ff ff       	jmp    80106577 <alltraps>
 
-801062af <vector151>:
+8010706f <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062af:	6a 00                	push   $0x0
+8010706f:	6a 00                	push   $0x0
   pushl $151
-801062b1:	68 97 00 00 00       	push   $0x97
+80107071:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
+80107076:	e9 fc f4 ff ff       	jmp    80106577 <alltraps>
 
-801062bb <vector152>:
+8010707b <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062bb:	6a 00                	push   $0x0
+8010707b:	6a 00                	push   $0x0
   pushl $152
-801062bd:	68 98 00 00 00       	push   $0x98
+8010707d:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
+80107082:	e9 f0 f4 ff ff       	jmp    80106577 <alltraps>
 
-801062c7 <vector153>:
+80107087 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c7:	6a 00                	push   $0x0
+80107087:	6a 00                	push   $0x0
   pushl $153
-801062c9:	68 99 00 00 00       	push   $0x99
+80107089:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
+8010708e:	e9 e4 f4 ff ff       	jmp    80106577 <alltraps>
 
-801062d3 <vector154>:
+80107093 <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062d3:	6a 00                	push   $0x0
+80107093:	6a 00                	push   $0x0
   pushl $154
-801062d5:	68 9a 00 00 00       	push   $0x9a
+80107095:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
+8010709a:	e9 d8 f4 ff ff       	jmp    80106577 <alltraps>
 
-801062df <vector155>:
+8010709f <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062df:	6a 00                	push   $0x0
+8010709f:	6a 00                	push   $0x0
   pushl $155
-801062e1:	68 9b 00 00 00       	push   $0x9b
+801070a1:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
+801070a6:	e9 cc f4 ff ff       	jmp    80106577 <alltraps>
 
-801062eb <vector156>:
+801070ab <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062eb:	6a 00                	push   $0x0
+801070ab:	6a 00                	push   $0x0
   pushl $156
-801062ed:	68 9c 00 00 00       	push   $0x9c
+801070ad:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
+801070b2:	e9 c0 f4 ff ff       	jmp    80106577 <alltraps>
 
-801062f7 <vector157>:
+801070b7 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f7:	6a 00                	push   $0x0
+801070b7:	6a 00                	push   $0x0
   pushl $157
-801062f9:	68 9d 00 00 00       	push   $0x9d
+801070b9:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
+801070be:	e9 b4 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106303 <vector158>:
+801070c3 <vector158>:
 .globl vector158
 vector158:
   pushl $0
-80106303:	6a 00                	push   $0x0
+801070c3:	6a 00                	push   $0x0
   pushl $158
-80106305:	68 9e 00 00 00       	push   $0x9e
+801070c5:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
+801070ca:	e9 a8 f4 ff ff       	jmp    80106577 <alltraps>
 
-8010630f <vector159>:
+801070cf <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630f:	6a 00                	push   $0x0
+801070cf:	6a 00                	push   $0x0
   pushl $159
-80106311:	68 9f 00 00 00       	push   $0x9f
+801070d1:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
+801070d6:	e9 9c f4 ff ff       	jmp    80106577 <alltraps>
 
-8010631b <vector160>:
+801070db <vector160>:
 .globl vector160
 vector160:
   pushl $0
-8010631b:	6a 00                	push   $0x0
+801070db:	6a 00                	push   $0x0
   pushl $160
-8010631d:	68 a0 00 00 00       	push   $0xa0
+801070dd:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
+801070e2:	e9 90 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106327 <vector161>:
+801070e7 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106327:	6a 00                	push   $0x0
+801070e7:	6a 00                	push   $0x0
   pushl $161
-80106329:	68 a1 00 00 00       	push   $0xa1
+801070e9:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
+801070ee:	e9 84 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106333 <vector162>:
+801070f3 <vector162>:
 .globl vector162
 vector162:
   pushl $0
-80106333:	6a 00                	push   $0x0
+801070f3:	6a 00                	push   $0x0
   pushl $162
-80106335:	68 a2 00 00 00       	push   $0xa2
+801070f5:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
+801070fa:	e9 78 f4 ff ff       	jmp    80106577 <alltraps>
 
-8010633f <vector163>:
+801070ff <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633f:	6a 00                	push   $0x0
+801070ff:	6a 00                	push   $0x0
   pushl $163
-80106341:	68 a3 00 00 00       	push   $0xa3
+80107101:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
+80107106:	e9 6c f4 ff ff       	jmp    80106577 <alltraps>
 
-8010634b <vector164>:
+8010710b <vector164>:
 .globl vector164
 vector164:
   pushl $0
-8010634b:	6a 00                	push   $0x0
+8010710b:	6a 00                	push   $0x0
   pushl $164
-8010634d:	68 a4 00 00 00       	push   $0xa4
+8010710d:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
+80107112:	e9 60 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106357 <vector165>:
+80107117 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106357:	6a 00                	push   $0x0
+80107117:	6a 00                	push   $0x0
   pushl $165
-80106359:	68 a5 00 00 00       	push   $0xa5
+80107119:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
+8010711e:	e9 54 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106363 <vector166>:
+80107123 <vector166>:
 .globl vector166
 vector166:
   pushl $0
-80106363:	6a 00                	push   $0x0
+80107123:	6a 00                	push   $0x0
   pushl $166
-80106365:	68 a6 00 00 00       	push   $0xa6
+80107125:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
+8010712a:	e9 48 f4 ff ff       	jmp    80106577 <alltraps>
 
-8010636f <vector167>:
+8010712f <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636f:	6a 00                	push   $0x0
+8010712f:	6a 00                	push   $0x0
   pushl $167
-80106371:	68 a7 00 00 00       	push   $0xa7
+80107131:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
+80107136:	e9 3c f4 ff ff       	jmp    80106577 <alltraps>
 
-8010637b <vector168>:
+8010713b <vector168>:
 .globl vector168
 vector168:
   pushl $0
-8010637b:	6a 00                	push   $0x0
+8010713b:	6a 00                	push   $0x0
   pushl $168
-8010637d:	68 a8 00 00 00       	push   $0xa8
+8010713d:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
+80107142:	e9 30 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106387 <vector169>:
+80107147 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106387:	6a 00                	push   $0x0
+80107147:	6a 00                	push   $0x0
   pushl $169
-80106389:	68 a9 00 00 00       	push   $0xa9
+80107149:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
+8010714e:	e9 24 f4 ff ff       	jmp    80106577 <alltraps>
 
-80106393 <vector170>:
+80107153 <vector170>:
 .globl vector170
 vector170:
   pushl $0
-80106393:	6a 00                	push   $0x0
+80107153:	6a 00                	push   $0x0
   pushl $170
-80106395:	68 aa 00 00 00       	push   $0xaa
+80107155:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
+8010715a:	e9 18 f4 ff ff       	jmp    80106577 <alltraps>
 
-8010639f <vector171>:
+8010715f <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639f:	6a 00                	push   $0x0
+8010715f:	6a 00                	push   $0x0
   pushl $171
-801063a1:	68 ab 00 00 00       	push   $0xab
+80107161:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
+80107166:	e9 0c f4 ff ff       	jmp    80106577 <alltraps>
 
-801063ab <vector172>:
+8010716b <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063ab:	6a 00                	push   $0x0
+8010716b:	6a 00                	push   $0x0
   pushl $172
-801063ad:	68 ac 00 00 00       	push   $0xac
+8010716d:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
+80107172:	e9 00 f4 ff ff       	jmp    80106577 <alltraps>
 
-801063b7 <vector173>:
+80107177 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b7:	6a 00                	push   $0x0
+80107177:	6a 00                	push   $0x0
   pushl $173
-801063b9:	68 ad 00 00 00       	push   $0xad
+80107179:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
+8010717e:	e9 f4 f3 ff ff       	jmp    80106577 <alltraps>
 
-801063c3 <vector174>:
+80107183 <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063c3:	6a 00                	push   $0x0
+80107183:	6a 00                	push   $0x0
   pushl $174
-801063c5:	68 ae 00 00 00       	push   $0xae
+80107185:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
+8010718a:	e9 e8 f3 ff ff       	jmp    80106577 <alltraps>
 
-801063cf <vector175>:
+8010718f <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cf:	6a 00                	push   $0x0
+8010718f:	6a 00                	push   $0x0
   pushl $175
-801063d1:	68 af 00 00 00       	push   $0xaf
+80107191:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
+80107196:	e9 dc f3 ff ff       	jmp    80106577 <alltraps>
 
-801063db <vector176>:
+8010719b <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063db:	6a 00                	push   $0x0
+8010719b:	6a 00                	push   $0x0
   pushl $176
-801063dd:	68 b0 00 00 00       	push   $0xb0
+8010719d:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
+801071a2:	e9 d0 f3 ff ff       	jmp    80106577 <alltraps>
 
-801063e7 <vector177>:
+801071a7 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e7:	6a 00                	push   $0x0
+801071a7:	6a 00                	push   $0x0
   pushl $177
-801063e9:	68 b1 00 00 00       	push   $0xb1
+801071a9:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
+801071ae:	e9 c4 f3 ff ff       	jmp    80106577 <alltraps>
 
-801063f3 <vector178>:
+801071b3 <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063f3:	6a 00                	push   $0x0
+801071b3:	6a 00                	push   $0x0
   pushl $178
-801063f5:	68 b2 00 00 00       	push   $0xb2
+801071b5:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
+801071ba:	e9 b8 f3 ff ff       	jmp    80106577 <alltraps>
 
-801063ff <vector179>:
+801071bf <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063ff:	6a 00                	push   $0x0
+801071bf:	6a 00                	push   $0x0
   pushl $179
-80106401:	68 b3 00 00 00       	push   $0xb3
+801071c1:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
+801071c6:	e9 ac f3 ff ff       	jmp    80106577 <alltraps>
 
-8010640b <vector180>:
+801071cb <vector180>:
 .globl vector180
 vector180:
   pushl $0
-8010640b:	6a 00                	push   $0x0
+801071cb:	6a 00                	push   $0x0
   pushl $180
-8010640d:	68 b4 00 00 00       	push   $0xb4
+801071cd:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
+801071d2:	e9 a0 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106417 <vector181>:
+801071d7 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106417:	6a 00                	push   $0x0
+801071d7:	6a 00                	push   $0x0
   pushl $181
-80106419:	68 b5 00 00 00       	push   $0xb5
+801071d9:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
+801071de:	e9 94 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106423 <vector182>:
+801071e3 <vector182>:
 .globl vector182
 vector182:
   pushl $0
-80106423:	6a 00                	push   $0x0
+801071e3:	6a 00                	push   $0x0
   pushl $182
-80106425:	68 b6 00 00 00       	push   $0xb6
+801071e5:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
+801071ea:	e9 88 f3 ff ff       	jmp    80106577 <alltraps>
 
-8010642f <vector183>:
+801071ef <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642f:	6a 00                	push   $0x0
+801071ef:	6a 00                	push   $0x0
   pushl $183
-80106431:	68 b7 00 00 00       	push   $0xb7
+801071f1:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
+801071f6:	e9 7c f3 ff ff       	jmp    80106577 <alltraps>
 
-8010643b <vector184>:
+801071fb <vector184>:
 .globl vector184
 vector184:
   pushl $0
-8010643b:	6a 00                	push   $0x0
+801071fb:	6a 00                	push   $0x0
   pushl $184
-8010643d:	68 b8 00 00 00       	push   $0xb8
+801071fd:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
+80107202:	e9 70 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106447 <vector185>:
+80107207 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106447:	6a 00                	push   $0x0
+80107207:	6a 00                	push   $0x0
   pushl $185
-80106449:	68 b9 00 00 00       	push   $0xb9
+80107209:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
+8010720e:	e9 64 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106453 <vector186>:
+80107213 <vector186>:
 .globl vector186
 vector186:
   pushl $0
-80106453:	6a 00                	push   $0x0
+80107213:	6a 00                	push   $0x0
   pushl $186
-80106455:	68 ba 00 00 00       	push   $0xba
+80107215:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
+8010721a:	e9 58 f3 ff ff       	jmp    80106577 <alltraps>
 
-8010645f <vector187>:
+8010721f <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645f:	6a 00                	push   $0x0
+8010721f:	6a 00                	push   $0x0
   pushl $187
-80106461:	68 bb 00 00 00       	push   $0xbb
+80107221:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
+80107226:	e9 4c f3 ff ff       	jmp    80106577 <alltraps>
 
-8010646b <vector188>:
+8010722b <vector188>:
 .globl vector188
 vector188:
   pushl $0
-8010646b:	6a 00                	push   $0x0
+8010722b:	6a 00                	push   $0x0
   pushl $188
-8010646d:	68 bc 00 00 00       	push   $0xbc
+8010722d:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
+80107232:	e9 40 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106477 <vector189>:
+80107237 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106477:	6a 00                	push   $0x0
+80107237:	6a 00                	push   $0x0
   pushl $189
-80106479:	68 bd 00 00 00       	push   $0xbd
+80107239:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
+8010723e:	e9 34 f3 ff ff       	jmp    80106577 <alltraps>
 
-80106483 <vector190>:
+80107243 <vector190>:
 .globl vector190
 vector190:
   pushl $0
-80106483:	6a 00                	push   $0x0
+80107243:	6a 00                	push   $0x0
   pushl $190
-80106485:	68 be 00 00 00       	push   $0xbe
+80107245:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
+8010724a:	e9 28 f3 ff ff       	jmp    80106577 <alltraps>
 
-8010648f <vector191>:
+8010724f <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648f:	6a 00                	push   $0x0
+8010724f:	6a 00                	push   $0x0
   pushl $191
-80106491:	68 bf 00 00 00       	push   $0xbf
+80107251:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
+80107256:	e9 1c f3 ff ff       	jmp    80106577 <alltraps>
 
-8010649b <vector192>:
+8010725b <vector192>:
 .globl vector192
 vector192:
   pushl $0
-8010649b:	6a 00                	push   $0x0
+8010725b:	6a 00                	push   $0x0
   pushl $192
-8010649d:	68 c0 00 00 00       	push   $0xc0
+8010725d:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
+80107262:	e9 10 f3 ff ff       	jmp    80106577 <alltraps>
 
-801064a7 <vector193>:
+80107267 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a7:	6a 00                	push   $0x0
+80107267:	6a 00                	push   $0x0
   pushl $193
-801064a9:	68 c1 00 00 00       	push   $0xc1
+80107269:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
+8010726e:	e9 04 f3 ff ff       	jmp    80106577 <alltraps>
 
-801064b3 <vector194>:
+80107273 <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064b3:	6a 00                	push   $0x0
+80107273:	6a 00                	push   $0x0
   pushl $194
-801064b5:	68 c2 00 00 00       	push   $0xc2
+80107275:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
+8010727a:	e9 f8 f2 ff ff       	jmp    80106577 <alltraps>
 
-801064bf <vector195>:
+8010727f <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bf:	6a 00                	push   $0x0
+8010727f:	6a 00                	push   $0x0
   pushl $195
-801064c1:	68 c3 00 00 00       	push   $0xc3
+80107281:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
+80107286:	e9 ec f2 ff ff       	jmp    80106577 <alltraps>
 
-801064cb <vector196>:
+8010728b <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064cb:	6a 00                	push   $0x0
+8010728b:	6a 00                	push   $0x0
   pushl $196
-801064cd:	68 c4 00 00 00       	push   $0xc4
+8010728d:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
+80107292:	e9 e0 f2 ff ff       	jmp    80106577 <alltraps>
 
-801064d7 <vector197>:
+80107297 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d7:	6a 00                	push   $0x0
+80107297:	6a 00                	push   $0x0
   pushl $197
-801064d9:	68 c5 00 00 00       	push   $0xc5
+80107299:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
+8010729e:	e9 d4 f2 ff ff       	jmp    80106577 <alltraps>
 
-801064e3 <vector198>:
+801072a3 <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064e3:	6a 00                	push   $0x0
+801072a3:	6a 00                	push   $0x0
   pushl $198
-801064e5:	68 c6 00 00 00       	push   $0xc6
+801072a5:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
+801072aa:	e9 c8 f2 ff ff       	jmp    80106577 <alltraps>
 
-801064ef <vector199>:
+801072af <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064ef:	6a 00                	push   $0x0
+801072af:	6a 00                	push   $0x0
   pushl $199
-801064f1:	68 c7 00 00 00       	push   $0xc7
+801072b1:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
+801072b6:	e9 bc f2 ff ff       	jmp    80106577 <alltraps>
 
-801064fb <vector200>:
+801072bb <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064fb:	6a 00                	push   $0x0
+801072bb:	6a 00                	push   $0x0
   pushl $200
-801064fd:	68 c8 00 00 00       	push   $0xc8
+801072bd:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
+801072c2:	e9 b0 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106507 <vector201>:
+801072c7 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106507:	6a 00                	push   $0x0
+801072c7:	6a 00                	push   $0x0
   pushl $201
-80106509:	68 c9 00 00 00       	push   $0xc9
+801072c9:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
+801072ce:	e9 a4 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106513 <vector202>:
+801072d3 <vector202>:
 .globl vector202
 vector202:
   pushl $0
-80106513:	6a 00                	push   $0x0
+801072d3:	6a 00                	push   $0x0
   pushl $202
-80106515:	68 ca 00 00 00       	push   $0xca
+801072d5:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
+801072da:	e9 98 f2 ff ff       	jmp    80106577 <alltraps>
 
-8010651f <vector203>:
+801072df <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651f:	6a 00                	push   $0x0
+801072df:	6a 00                	push   $0x0
   pushl $203
-80106521:	68 cb 00 00 00       	push   $0xcb
+801072e1:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
+801072e6:	e9 8c f2 ff ff       	jmp    80106577 <alltraps>
 
-8010652b <vector204>:
+801072eb <vector204>:
 .globl vector204
 vector204:
   pushl $0
-8010652b:	6a 00                	push   $0x0
+801072eb:	6a 00                	push   $0x0
   pushl $204
-8010652d:	68 cc 00 00 00       	push   $0xcc
+801072ed:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
+801072f2:	e9 80 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106537 <vector205>:
+801072f7 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106537:	6a 00                	push   $0x0
+801072f7:	6a 00                	push   $0x0
   pushl $205
-80106539:	68 cd 00 00 00       	push   $0xcd
+801072f9:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
+801072fe:	e9 74 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106543 <vector206>:
+80107303 <vector206>:
 .globl vector206
 vector206:
   pushl $0
-80106543:	6a 00                	push   $0x0
+80107303:	6a 00                	push   $0x0
   pushl $206
-80106545:	68 ce 00 00 00       	push   $0xce
+80107305:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
+8010730a:	e9 68 f2 ff ff       	jmp    80106577 <alltraps>
 
-8010654f <vector207>:
+8010730f <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654f:	6a 00                	push   $0x0
+8010730f:	6a 00                	push   $0x0
   pushl $207
-80106551:	68 cf 00 00 00       	push   $0xcf
+80107311:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
+80107316:	e9 5c f2 ff ff       	jmp    80106577 <alltraps>
 
-8010655b <vector208>:
+8010731b <vector208>:
 .globl vector208
 vector208:
   pushl $0
-8010655b:	6a 00                	push   $0x0
+8010731b:	6a 00                	push   $0x0
   pushl $208
-8010655d:	68 d0 00 00 00       	push   $0xd0
+8010731d:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
+80107322:	e9 50 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106567 <vector209>:
+80107327 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106567:	6a 00                	push   $0x0
+80107327:	6a 00                	push   $0x0
   pushl $209
-80106569:	68 d1 00 00 00       	push   $0xd1
+80107329:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
+8010732e:	e9 44 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106573 <vector210>:
+80107333 <vector210>:
 .globl vector210
 vector210:
   pushl $0
-80106573:	6a 00                	push   $0x0
+80107333:	6a 00                	push   $0x0
   pushl $210
-80106575:	68 d2 00 00 00       	push   $0xd2
+80107335:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
+8010733a:	e9 38 f2 ff ff       	jmp    80106577 <alltraps>
 
-8010657f <vector211>:
+8010733f <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657f:	6a 00                	push   $0x0
+8010733f:	6a 00                	push   $0x0
   pushl $211
-80106581:	68 d3 00 00 00       	push   $0xd3
+80107341:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
+80107346:	e9 2c f2 ff ff       	jmp    80106577 <alltraps>
 
-8010658b <vector212>:
+8010734b <vector212>:
 .globl vector212
 vector212:
   pushl $0
-8010658b:	6a 00                	push   $0x0
+8010734b:	6a 00                	push   $0x0
   pushl $212
-8010658d:	68 d4 00 00 00       	push   $0xd4
+8010734d:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
+80107352:	e9 20 f2 ff ff       	jmp    80106577 <alltraps>
 
-80106597 <vector213>:
+80107357 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106597:	6a 00                	push   $0x0
+80107357:	6a 00                	push   $0x0
   pushl $213
-80106599:	68 d5 00 00 00       	push   $0xd5
+80107359:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
+8010735e:	e9 14 f2 ff ff       	jmp    80106577 <alltraps>
 
-801065a3 <vector214>:
+80107363 <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801065a3:	6a 00                	push   $0x0
+80107363:	6a 00                	push   $0x0
   pushl $214
-801065a5:	68 d6 00 00 00       	push   $0xd6
+80107365:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
+8010736a:	e9 08 f2 ff ff       	jmp    80106577 <alltraps>
 
-801065af <vector215>:
+8010736f <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065af:	6a 00                	push   $0x0
+8010736f:	6a 00                	push   $0x0
   pushl $215
-801065b1:	68 d7 00 00 00       	push   $0xd7
+80107371:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
+80107376:	e9 fc f1 ff ff       	jmp    80106577 <alltraps>
 
-801065bb <vector216>:
+8010737b <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065bb:	6a 00                	push   $0x0
+8010737b:	6a 00                	push   $0x0
   pushl $216
-801065bd:	68 d8 00 00 00       	push   $0xd8
+8010737d:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
+80107382:	e9 f0 f1 ff ff       	jmp    80106577 <alltraps>
 
-801065c7 <vector217>:
+80107387 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c7:	6a 00                	push   $0x0
+80107387:	6a 00                	push   $0x0
   pushl $217
-801065c9:	68 d9 00 00 00       	push   $0xd9
+80107389:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
+8010738e:	e9 e4 f1 ff ff       	jmp    80106577 <alltraps>
 
-801065d3 <vector218>:
+80107393 <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065d3:	6a 00                	push   $0x0
+80107393:	6a 00                	push   $0x0
   pushl $218
-801065d5:	68 da 00 00 00       	push   $0xda
+80107395:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
+8010739a:	e9 d8 f1 ff ff       	jmp    80106577 <alltraps>
 
-801065df <vector219>:
+8010739f <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065df:	6a 00                	push   $0x0
+8010739f:	6a 00                	push   $0x0
   pushl $219
-801065e1:	68 db 00 00 00       	push   $0xdb
+801073a1:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
+801073a6:	e9 cc f1 ff ff       	jmp    80106577 <alltraps>
 
-801065eb <vector220>:
+801073ab <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065eb:	6a 00                	push   $0x0
+801073ab:	6a 00                	push   $0x0
   pushl $220
-801065ed:	68 dc 00 00 00       	push   $0xdc
+801073ad:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
+801073b2:	e9 c0 f1 ff ff       	jmp    80106577 <alltraps>
 
-801065f7 <vector221>:
+801073b7 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f7:	6a 00                	push   $0x0
+801073b7:	6a 00                	push   $0x0
   pushl $221
-801065f9:	68 dd 00 00 00       	push   $0xdd
+801073b9:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
+801073be:	e9 b4 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106603 <vector222>:
+801073c3 <vector222>:
 .globl vector222
 vector222:
   pushl $0
-80106603:	6a 00                	push   $0x0
+801073c3:	6a 00                	push   $0x0
   pushl $222
-80106605:	68 de 00 00 00       	push   $0xde
+801073c5:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
+801073ca:	e9 a8 f1 ff ff       	jmp    80106577 <alltraps>
 
-8010660f <vector223>:
+801073cf <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660f:	6a 00                	push   $0x0
+801073cf:	6a 00                	push   $0x0
   pushl $223
-80106611:	68 df 00 00 00       	push   $0xdf
+801073d1:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
+801073d6:	e9 9c f1 ff ff       	jmp    80106577 <alltraps>
 
-8010661b <vector224>:
+801073db <vector224>:
 .globl vector224
 vector224:
   pushl $0
-8010661b:	6a 00                	push   $0x0
+801073db:	6a 00                	push   $0x0
   pushl $224
-8010661d:	68 e0 00 00 00       	push   $0xe0
+801073dd:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
+801073e2:	e9 90 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106627 <vector225>:
+801073e7 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106627:	6a 00                	push   $0x0
+801073e7:	6a 00                	push   $0x0
   pushl $225
-80106629:	68 e1 00 00 00       	push   $0xe1
+801073e9:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
+801073ee:	e9 84 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106633 <vector226>:
+801073f3 <vector226>:
 .globl vector226
 vector226:
   pushl $0
-80106633:	6a 00                	push   $0x0
+801073f3:	6a 00                	push   $0x0
   pushl $226
-80106635:	68 e2 00 00 00       	push   $0xe2
+801073f5:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
+801073fa:	e9 78 f1 ff ff       	jmp    80106577 <alltraps>
 
-8010663f <vector227>:
+801073ff <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663f:	6a 00                	push   $0x0
+801073ff:	6a 00                	push   $0x0
   pushl $227
-80106641:	68 e3 00 00 00       	push   $0xe3
+80107401:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
+80107406:	e9 6c f1 ff ff       	jmp    80106577 <alltraps>
 
-8010664b <vector228>:
+8010740b <vector228>:
 .globl vector228
 vector228:
   pushl $0
-8010664b:	6a 00                	push   $0x0
+8010740b:	6a 00                	push   $0x0
   pushl $228
-8010664d:	68 e4 00 00 00       	push   $0xe4
+8010740d:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
+80107412:	e9 60 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106657 <vector229>:
+80107417 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106657:	6a 00                	push   $0x0
+80107417:	6a 00                	push   $0x0
   pushl $229
-80106659:	68 e5 00 00 00       	push   $0xe5
+80107419:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
+8010741e:	e9 54 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106663 <vector230>:
+80107423 <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80106663:	6a 00                	push   $0x0
+80107423:	6a 00                	push   $0x0
   pushl $230
-80106665:	68 e6 00 00 00       	push   $0xe6
+80107425:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
+8010742a:	e9 48 f1 ff ff       	jmp    80106577 <alltraps>
 
-8010666f <vector231>:
+8010742f <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666f:	6a 00                	push   $0x0
+8010742f:	6a 00                	push   $0x0
   pushl $231
-80106671:	68 e7 00 00 00       	push   $0xe7
+80107431:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
+80107436:	e9 3c f1 ff ff       	jmp    80106577 <alltraps>
 
-8010667b <vector232>:
+8010743b <vector232>:
 .globl vector232
 vector232:
   pushl $0
-8010667b:	6a 00                	push   $0x0
+8010743b:	6a 00                	push   $0x0
   pushl $232
-8010667d:	68 e8 00 00 00       	push   $0xe8
+8010743d:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
+80107442:	e9 30 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106687 <vector233>:
+80107447 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106687:	6a 00                	push   $0x0
+80107447:	6a 00                	push   $0x0
   pushl $233
-80106689:	68 e9 00 00 00       	push   $0xe9
+80107449:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
+8010744e:	e9 24 f1 ff ff       	jmp    80106577 <alltraps>
 
-80106693 <vector234>:
+80107453 <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80106693:	6a 00                	push   $0x0
+80107453:	6a 00                	push   $0x0
   pushl $234
-80106695:	68 ea 00 00 00       	push   $0xea
+80107455:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
+8010745a:	e9 18 f1 ff ff       	jmp    80106577 <alltraps>
 
-8010669f <vector235>:
+8010745f <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669f:	6a 00                	push   $0x0
+8010745f:	6a 00                	push   $0x0
   pushl $235
-801066a1:	68 eb 00 00 00       	push   $0xeb
+80107461:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
+80107466:	e9 0c f1 ff ff       	jmp    80106577 <alltraps>
 
-801066ab <vector236>:
+8010746b <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066ab:	6a 00                	push   $0x0
+8010746b:	6a 00                	push   $0x0
   pushl $236
-801066ad:	68 ec 00 00 00       	push   $0xec
+8010746d:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
+80107472:	e9 00 f1 ff ff       	jmp    80106577 <alltraps>
 
-801066b7 <vector237>:
+80107477 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b7:	6a 00                	push   $0x0
+80107477:	6a 00                	push   $0x0
   pushl $237
-801066b9:	68 ed 00 00 00       	push   $0xed
+80107479:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
+8010747e:	e9 f4 f0 ff ff       	jmp    80106577 <alltraps>
 
-801066c3 <vector238>:
+80107483 <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066c3:	6a 00                	push   $0x0
+80107483:	6a 00                	push   $0x0
   pushl $238
-801066c5:	68 ee 00 00 00       	push   $0xee
+80107485:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
+8010748a:	e9 e8 f0 ff ff       	jmp    80106577 <alltraps>
 
-801066cf <vector239>:
+8010748f <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cf:	6a 00                	push   $0x0
+8010748f:	6a 00                	push   $0x0
   pushl $239
-801066d1:	68 ef 00 00 00       	push   $0xef
+80107491:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
+80107496:	e9 dc f0 ff ff       	jmp    80106577 <alltraps>
 
-801066db <vector240>:
+8010749b <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066db:	6a 00                	push   $0x0
+8010749b:	6a 00                	push   $0x0
   pushl $240
-801066dd:	68 f0 00 00 00       	push   $0xf0
+8010749d:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
+801074a2:	e9 d0 f0 ff ff       	jmp    80106577 <alltraps>
 
-801066e7 <vector241>:
+801074a7 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e7:	6a 00                	push   $0x0
+801074a7:	6a 00                	push   $0x0
   pushl $241
-801066e9:	68 f1 00 00 00       	push   $0xf1
+801074a9:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
+801074ae:	e9 c4 f0 ff ff       	jmp    80106577 <alltraps>
 
-801066f3 <vector242>:
+801074b3 <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066f3:	6a 00                	push   $0x0
+801074b3:	6a 00                	push   $0x0
   pushl $242
-801066f5:	68 f2 00 00 00       	push   $0xf2
+801074b5:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
+801074ba:	e9 b8 f0 ff ff       	jmp    80106577 <alltraps>
 
-801066ff <vector243>:
+801074bf <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066ff:	6a 00                	push   $0x0
+801074bf:	6a 00                	push   $0x0
   pushl $243
-80106701:	68 f3 00 00 00       	push   $0xf3
+801074c1:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
+801074c6:	e9 ac f0 ff ff       	jmp    80106577 <alltraps>
 
-8010670b <vector244>:
+801074cb <vector244>:
 .globl vector244
 vector244:
   pushl $0
-8010670b:	6a 00                	push   $0x0
+801074cb:	6a 00                	push   $0x0
   pushl $244
-8010670d:	68 f4 00 00 00       	push   $0xf4
+801074cd:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
+801074d2:	e9 a0 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106717 <vector245>:
+801074d7 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106717:	6a 00                	push   $0x0
+801074d7:	6a 00                	push   $0x0
   pushl $245
-80106719:	68 f5 00 00 00       	push   $0xf5
+801074d9:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
+801074de:	e9 94 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106723 <vector246>:
+801074e3 <vector246>:
 .globl vector246
 vector246:
   pushl $0
-80106723:	6a 00                	push   $0x0
+801074e3:	6a 00                	push   $0x0
   pushl $246
-80106725:	68 f6 00 00 00       	push   $0xf6
+801074e5:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
+801074ea:	e9 88 f0 ff ff       	jmp    80106577 <alltraps>
 
-8010672f <vector247>:
+801074ef <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672f:	6a 00                	push   $0x0
+801074ef:	6a 00                	push   $0x0
   pushl $247
-80106731:	68 f7 00 00 00       	push   $0xf7
+801074f1:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
+801074f6:	e9 7c f0 ff ff       	jmp    80106577 <alltraps>
 
-8010673b <vector248>:
+801074fb <vector248>:
 .globl vector248
 vector248:
   pushl $0
-8010673b:	6a 00                	push   $0x0
+801074fb:	6a 00                	push   $0x0
   pushl $248
-8010673d:	68 f8 00 00 00       	push   $0xf8
+801074fd:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
+80107502:	e9 70 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106747 <vector249>:
+80107507 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106747:	6a 00                	push   $0x0
+80107507:	6a 00                	push   $0x0
   pushl $249
-80106749:	68 f9 00 00 00       	push   $0xf9
+80107509:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
+8010750e:	e9 64 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106753 <vector250>:
+80107513 <vector250>:
 .globl vector250
 vector250:
   pushl $0
-80106753:	6a 00                	push   $0x0
+80107513:	6a 00                	push   $0x0
   pushl $250
-80106755:	68 fa 00 00 00       	push   $0xfa
+80107515:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
+8010751a:	e9 58 f0 ff ff       	jmp    80106577 <alltraps>
 
-8010675f <vector251>:
+8010751f <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675f:	6a 00                	push   $0x0
+8010751f:	6a 00                	push   $0x0
   pushl $251
-80106761:	68 fb 00 00 00       	push   $0xfb
+80107521:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
+80107526:	e9 4c f0 ff ff       	jmp    80106577 <alltraps>
 
-8010676b <vector252>:
+8010752b <vector252>:
 .globl vector252
 vector252:
   pushl $0
-8010676b:	6a 00                	push   $0x0
+8010752b:	6a 00                	push   $0x0
   pushl $252
-8010676d:	68 fc 00 00 00       	push   $0xfc
+8010752d:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
+80107532:	e9 40 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106777 <vector253>:
+80107537 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106777:	6a 00                	push   $0x0
+80107537:	6a 00                	push   $0x0
   pushl $253
-80106779:	68 fd 00 00 00       	push   $0xfd
+80107539:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
+8010753e:	e9 34 f0 ff ff       	jmp    80106577 <alltraps>
 
-80106783 <vector254>:
+80107543 <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80106783:	6a 00                	push   $0x0
+80107543:	6a 00                	push   $0x0
   pushl $254
-80106785:	68 fe 00 00 00       	push   $0xfe
+80107545:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
+8010754a:	e9 28 f0 ff ff       	jmp    80106577 <alltraps>
 
-8010678f <vector255>:
+8010754f <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678f:	6a 00                	push   $0x0
+8010754f:	6a 00                	push   $0x0
   pushl $255
-80106791:	68 ff 00 00 00       	push   $0xff
+80107551:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80107556:	e9 1c f0 ff ff       	jmp    80106577 <alltraps>
+8010755b:	66 90                	xchg   %ax,%ax
+8010755d:	66 90                	xchg   %ax,%ax
+8010755f:	90                   	nop
 
-801067a0 <walkpgdir>:
+80107560 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	89 d6                	mov    %edx,%esi
+80107560:	55                   	push   %ebp
+80107561:	89 e5                	mov    %esp,%ebp
+80107563:	57                   	push   %edi
+80107564:	56                   	push   %esi
+80107565:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801067a7:	c1 ea 16             	shr    $0x16,%edx
+80107567:	c1 ea 16             	shr    $0x16,%edx
 {
-801067aa:	53                   	push   %ebx
+8010756a:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+8010756b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-801067ae:	83 ec 0c             	sub    $0xc,%esp
+8010756e:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801067b1:	8b 1f                	mov    (%edi),%ebx
-801067b3:	f6 c3 01             	test   $0x1,%bl
-801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
+80107571:	8b 1f                	mov    (%edi),%ebx
+80107573:	f6 c3 01             	test   $0x1,%bl
+80107576:	74 28                	je     801075a0 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80107578:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010757e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-801067c4:	89 f0                	mov    %esi,%eax
+80107584:	89 f0                	mov    %esi,%eax
 }
-801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107586:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-801067c9:	c1 e8 0a             	shr    $0xa,%eax
-801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
-801067d1:	01 d8                	add    %ebx,%eax
-}
-801067d3:	5b                   	pop    %ebx
-801067d4:	5e                   	pop    %esi
-801067d5:	5f                   	pop    %edi
-801067d6:	5d                   	pop    %ebp
-801067d7:	c3                   	ret    
-801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067df:	90                   	nop
+80107589:	c1 e8 0a             	shr    $0xa,%eax
+8010758c:	25 fc 0f 00 00       	and    $0xffc,%eax
+80107591:	01 d8                	add    %ebx,%eax
+}
+80107593:	5b                   	pop    %ebx
+80107594:	5e                   	pop    %esi
+80107595:	5f                   	pop    %edi
+80107596:	5d                   	pop    %ebp
+80107597:	c3                   	ret    
+80107598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010759f:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801067e0:	85 c9                	test   %ecx,%ecx
-801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
-801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
-801067e9:	89 c3                	mov    %eax,%ebx
-801067eb:	85 c0                	test   %eax,%eax
-801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
+801075a0:	85 c9                	test   %ecx,%ecx
+801075a2:	74 2c                	je     801075d0 <walkpgdir+0x70>
+801075a4:	e8 87 b0 ff ff       	call   80102630 <kalloc>
+801075a9:	89 c3                	mov    %eax,%ebx
+801075ab:	85 c0                	test   %eax,%eax
+801075ad:	74 21                	je     801075d0 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-801067ef:	83 ec 04             	sub    $0x4,%esp
-801067f2:	68 00 10 00 00       	push   $0x1000
-801067f7:	6a 00                	push   $0x0
-801067f9:	50                   	push   %eax
-801067fa:	e8 71 de ff ff       	call   80104670 <memset>
+801075af:	83 ec 04             	sub    $0x4,%esp
+801075b2:	68 00 10 00 00       	push   $0x1000
+801075b7:	6a 00                	push   $0x0
+801075b9:	50                   	push   %eax
+801075ba:	e8 91 dc ff ff       	call   80105250 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106805:	83 c4 10             	add    $0x10,%esp
-80106808:	83 c8 07             	or     $0x7,%eax
-8010680b:	89 07                	mov    %eax,(%edi)
-8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
-8010680f:	90                   	nop
+801075bf:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801075c5:	83 c4 10             	add    $0x10,%esp
+801075c8:	83 c8 07             	or     $0x7,%eax
+801075cb:	89 07                	mov    %eax,(%edi)
+801075cd:	eb b5                	jmp    80107584 <walkpgdir+0x24>
+801075cf:	90                   	nop
 }
-80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106813:	31 c0                	xor    %eax,%eax
+801075d3:	31 c0                	xor    %eax,%eax
 }
-80106815:	5b                   	pop    %ebx
-80106816:	5e                   	pop    %esi
-80106817:	5f                   	pop    %edi
-80106818:	5d                   	pop    %ebp
-80106819:	c3                   	ret    
-8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801075d5:	5b                   	pop    %ebx
+801075d6:	5e                   	pop    %esi
+801075d7:	5f                   	pop    %edi
+801075d8:	5d                   	pop    %ebp
+801075d9:	c3                   	ret    
+801075da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106820 <mappages>:
+801075e0 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106820:	55                   	push   %ebp
-80106821:	89 e5                	mov    %esp,%ebp
-80106823:	57                   	push   %edi
-80106824:	89 c7                	mov    %eax,%edi
+801075e0:	55                   	push   %ebp
+801075e1:	89 e5                	mov    %esp,%ebp
+801075e3:	57                   	push   %edi
+801075e4:	89 c7                	mov    %eax,%edi
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+801075e6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
 {
-8010682a:	56                   	push   %esi
+801075ea:	56                   	push   %esi
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801075eb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   a = (char*)PGROUNDDOWN((uint)va);
-80106830:	89 d6                	mov    %edx,%esi
+801075f0:	89 d6                	mov    %edx,%esi
 {
-80106832:	53                   	push   %ebx
+801075f2:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+801075f3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 {
-80106839:	83 ec 1c             	sub    $0x1c,%esp
+801075f9:	83 ec 1c             	sub    $0x1c,%esp
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106842:	29 f0                	sub    %esi,%eax
-80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801075fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801075ff:	8b 45 08             	mov    0x8(%ebp),%eax
+80107602:	29 f0                	sub    %esi,%eax
+80107604:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107607:	eb 1f                	jmp    80107628 <mappages+0x48>
+80107609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
-80106850:	f6 00 01             	testb  $0x1,(%eax)
-80106853:	75 45                	jne    8010689a <mappages+0x7a>
+80107610:	f6 00 01             	testb  $0x1,(%eax)
+80107613:	75 45                	jne    8010765a <mappages+0x7a>
       panic("remap");
     *pte = pa | perm | PTE_P;
-80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106858:	83 cb 01             	or     $0x1,%ebx
-8010685b:	89 18                	mov    %ebx,(%eax)
+80107615:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80107618:	83 cb 01             	or     $0x1,%ebx
+8010761b:	89 18                	mov    %ebx,(%eax)
     if(a == last)
-8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106860:	74 2e                	je     80106890 <mappages+0x70>
+8010761d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80107620:	74 2e                	je     80107650 <mappages+0x70>
       break;
     a += PGSIZE;
-80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107622:	81 c6 00 10 00 00    	add    $0x1000,%esi
   for(;;){
-80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106870:	89 f2                	mov    %esi,%edx
-80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106875:	89 f8                	mov    %edi,%eax
-80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
-8010687c:	85 c0                	test   %eax,%eax
-8010687e:	75 d0                	jne    80106850 <mappages+0x30>
+8010762b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80107630:	89 f2                	mov    %esi,%edx
+80107632:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80107635:	89 f8                	mov    %edi,%eax
+80107637:	e8 24 ff ff ff       	call   80107560 <walkpgdir>
+8010763c:	85 c0                	test   %eax,%eax
+8010763e:	75 d0                	jne    80107610 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107640:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107643:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106888:	5b                   	pop    %ebx
-80106889:	5e                   	pop    %esi
-8010688a:	5f                   	pop    %edi
-8010688b:	5d                   	pop    %ebp
-8010688c:	c3                   	ret    
-8010688d:	8d 76 00             	lea    0x0(%esi),%esi
-80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107648:	5b                   	pop    %ebx
+80107649:	5e                   	pop    %esi
+8010764a:	5f                   	pop    %edi
+8010764b:	5d                   	pop    %ebp
+8010764c:	c3                   	ret    
+8010764d:	8d 76 00             	lea    0x0(%esi),%esi
+80107650:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106893:	31 c0                	xor    %eax,%eax
+80107653:	31 c0                	xor    %eax,%eax
 }
-80106895:	5b                   	pop    %ebx
-80106896:	5e                   	pop    %esi
-80106897:	5f                   	pop    %edi
-80106898:	5d                   	pop    %ebp
-80106899:	c3                   	ret    
+80107655:	5b                   	pop    %ebx
+80107656:	5e                   	pop    %esi
+80107657:	5f                   	pop    %edi
+80107658:	5d                   	pop    %ebp
+80107659:	c3                   	ret    
       panic("remap");
-8010689a:	83 ec 0c             	sub    $0xc,%esp
-8010689d:	68 88 79 10 80       	push   $0x80107988
-801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
-801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068ae:	66 90                	xchg   %ax,%ax
+8010765a:	83 ec 0c             	sub    $0xc,%esp
+8010765d:	68 dc 87 10 80       	push   $0x801087dc
+80107662:	e8 29 8d ff ff       	call   80100390 <panic>
+80107667:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010766e:	66 90                	xchg   %ax,%ax
 
-801068b0 <deallocuvm.part.0>:
+80107670 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068b0:	55                   	push   %ebp
-801068b1:	89 e5                	mov    %esp,%ebp
-801068b3:	57                   	push   %edi
-801068b4:	56                   	push   %esi
-801068b5:	89 c6                	mov    %eax,%esi
-801068b7:	53                   	push   %ebx
-801068b8:	89 d3                	mov    %edx,%ebx
+80107670:	55                   	push   %ebp
+80107671:	89 e5                	mov    %esp,%ebp
+80107673:	57                   	push   %edi
+80107674:	56                   	push   %esi
+80107675:	89 c6                	mov    %eax,%esi
+80107677:	53                   	push   %ebx
+80107678:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010767a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80107680:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068c6:	83 ec 1c             	sub    $0x1c,%esp
-801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80107686:	83 ec 1c             	sub    $0x1c,%esp
+80107689:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068cc:	39 da                	cmp    %ebx,%edx
-801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
-801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801068d3:	89 d7                	mov    %edx,%edi
-801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
-801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068de:	66 90                	xchg   %ax,%ax
-801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
+8010768c:	39 da                	cmp    %ebx,%edx
+8010768e:	73 5b                	jae    801076eb <deallocuvm.part.0+0x7b>
+80107690:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80107693:	89 d7                	mov    %edx,%edi
+80107695:	eb 14                	jmp    801076ab <deallocuvm.part.0+0x3b>
+80107697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010769e:	66 90                	xchg   %ax,%ax
+801076a0:	81 c7 00 10 00 00    	add    $0x1000,%edi
+801076a6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801076a9:	76 40                	jbe    801076eb <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-801068eb:	31 c9                	xor    %ecx,%ecx
-801068ed:	89 fa                	mov    %edi,%edx
-801068ef:	89 f0                	mov    %esi,%eax
-801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
-801068f6:	89 c3                	mov    %eax,%ebx
+801076ab:	31 c9                	xor    %ecx,%ecx
+801076ad:	89 fa                	mov    %edi,%edx
+801076af:	89 f0                	mov    %esi,%eax
+801076b1:	e8 aa fe ff ff       	call   80107560 <walkpgdir>
+801076b6:	89 c3                	mov    %eax,%ebx
     if(!pte)
-801068f8:	85 c0                	test   %eax,%eax
-801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
+801076b8:	85 c0                	test   %eax,%eax
+801076ba:	74 44                	je     80107700 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-801068fc:	8b 00                	mov    (%eax),%eax
-801068fe:	a8 01                	test   $0x1,%al
-80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
+801076bc:	8b 00                	mov    (%eax),%eax
+801076be:	a8 01                	test   $0x1,%al
+801076c0:	74 de                	je     801076a0 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
+801076c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801076c7:	74 47                	je     80107710 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106909:	83 ec 0c             	sub    $0xc,%esp
+801076c9:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
+801076cc:	05 00 00 00 80       	add    $0x80000000,%eax
+801076d1:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-80106917:	50                   	push   %eax
-80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
+801076d7:	50                   	push   %eax
+801076d8:	e8 93 ad ff ff       	call   80102470 <kfree>
       *pte = 0;
-8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106923:	83 c4 10             	add    $0x10,%esp
+801076dd:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801076e3:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
+801076e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801076e9:	77 c0                	ja     801076ab <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106931:	5b                   	pop    %ebx
-80106932:	5e                   	pop    %esi
-80106933:	5f                   	pop    %edi
-80106934:	5d                   	pop    %ebp
-80106935:	c3                   	ret    
-80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693d:	8d 76 00             	lea    0x0(%esi),%esi
+801076eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801076ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801076f1:	5b                   	pop    %ebx
+801076f2:	5e                   	pop    %esi
+801076f3:	5f                   	pop    %edi
+801076f4:	5d                   	pop    %ebp
+801076f5:	c3                   	ret    
+801076f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801076fd:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106940:	89 fa                	mov    %edi,%edx
-80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
+80107700:	89 fa                	mov    %edi,%edx
+80107702:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80107708:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+8010770e:	eb 96                	jmp    801076a6 <deallocuvm.part.0+0x36>
         panic("kfree");
-80106950:	83 ec 0c             	sub    $0xc,%esp
-80106953:	68 46 73 10 80       	push   $0x80107346
-80106958:	e8 33 9a ff ff       	call   80100390 <panic>
-8010695d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106960 <seginit>:
-{
-80106960:	f3 0f 1e fb          	endbr32 
-80106964:	55                   	push   %ebp
-80106965:	89 e5                	mov    %esp,%ebp
-80106967:	83 ec 18             	sub    $0x18,%esp
+80107710:	83 ec 0c             	sub    $0xc,%esp
+80107713:	68 06 81 10 80       	push   $0x80108106
+80107718:	e8 73 8c ff ff       	call   80100390 <panic>
+8010771d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107720 <seginit>:
+{
+80107720:	f3 0f 1e fb          	endbr32 
+80107724:	55                   	push   %ebp
+80107725:	89 e5                	mov    %esp,%ebp
+80107727:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
+8010772a:	e8 21 c9 ff ff       	call   80104050 <cpuid>
   pd[0] = size-1;
-8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010772f:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80107734:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+8010773a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106985:	ff 00 00 
-80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-8010698f:	9a cf 00 
+8010773e:	c7 80 18 38 11 80 ff 	movl   $0xffff,-0x7feec7e8(%eax)
+80107745:	ff 00 00 
+80107748:	c7 80 1c 38 11 80 00 	movl   $0xcf9a00,-0x7feec7e4(%eax)
+8010774f:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106999:	ff 00 00 
-8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-801069a3:	92 cf 00 
+80107752:	c7 80 20 38 11 80 ff 	movl   $0xffff,-0x7feec7e0(%eax)
+80107759:	ff 00 00 
+8010775c:	c7 80 24 38 11 80 00 	movl   $0xcf9200,-0x7feec7dc(%eax)
+80107763:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-801069ad:	ff 00 00 
-801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-801069b7:	fa cf 00 
+80107766:	c7 80 28 38 11 80 ff 	movl   $0xffff,-0x7feec7d8(%eax)
+8010776d:	ff 00 00 
+80107770:	c7 80 2c 38 11 80 00 	movl   $0xcffa00,-0x7feec7d4(%eax)
+80107777:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-801069c1:	ff 00 00 
-801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-801069cb:	f2 cf 00 
+8010777a:	c7 80 30 38 11 80 ff 	movl   $0xffff,-0x7feec7d0(%eax)
+80107781:	ff 00 00 
+80107784:	c7 80 34 38 11 80 00 	movl   $0xcff200,-0x7feec7cc(%eax)
+8010778b:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
+8010778e:	05 10 38 11 80       	add    $0x80113810,%eax
   pd[1] = (uint)p;
-801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80107793:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069d7:	c1 e8 10             	shr    $0x10,%eax
-801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80107797:	c1 e8 10             	shr    $0x10,%eax
+8010779a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069e1:	0f 01 10             	lgdtl  (%eax)
+8010779e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+801077a1:	0f 01 10             	lgdtl  (%eax)
 }
-801069e4:	c9                   	leave  
-801069e5:	c3                   	ret    
-801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+801077a4:	c9                   	leave  
+801077a5:	c3                   	ret    
+801077a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801077ad:	8d 76 00             	lea    0x0(%esi),%esi
 
-801069f0 <switchkvm>:
+801077b0 <switchkvm>:
 {
-801069f0:	f3 0f 1e fb          	endbr32 
+801077b0:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
-801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
+801077b4:	a1 04 63 11 80       	mov    0x80116304,%eax
+801077b9:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069fe:	0f 22 d8             	mov    %eax,%cr3
+801077be:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a01:	c3                   	ret    
-80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106a10 <switchuvm>:
-{
-80106a10:	f3 0f 1e fb          	endbr32 
-80106a14:	55                   	push   %ebp
-80106a15:	89 e5                	mov    %esp,%ebp
-80106a17:	57                   	push   %edi
-80106a18:	56                   	push   %esi
-80106a19:	53                   	push   %ebx
-80106a1a:	83 ec 1c             	sub    $0x1c,%esp
-80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
+801077c1:	c3                   	ret    
+801077c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801077c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801077d0 <switchuvm>:
+{
+801077d0:	f3 0f 1e fb          	endbr32 
+801077d4:	55                   	push   %ebp
+801077d5:	89 e5                	mov    %esp,%ebp
+801077d7:	57                   	push   %edi
+801077d8:	56                   	push   %esi
+801077d9:	53                   	push   %ebx
+801077da:	83 ec 1c             	sub    $0x1c,%esp
+801077dd:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a20:	85 f6                	test   %esi,%esi
-80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
+801077e0:	85 f6                	test   %esi,%esi
+801077e2:	0f 84 cb 00 00 00    	je     801078b3 <switchuvm+0xe3>
   if(p->kstack == 0)
-80106a28:	8b 46 08             	mov    0x8(%esi),%eax
-80106a2b:	85 c0                	test   %eax,%eax
-80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
+801077e8:	8b 46 08             	mov    0x8(%esi),%eax
+801077eb:	85 c0                	test   %eax,%eax
+801077ed:	0f 84 da 00 00 00    	je     801078cd <switchuvm+0xfd>
   if(p->pgdir == 0)
-80106a33:	8b 46 04             	mov    0x4(%esi),%eax
-80106a36:	85 c0                	test   %eax,%eax
-80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
+801077f3:	8b 46 04             	mov    0x4(%esi),%eax
+801077f6:	85 c0                	test   %eax,%eax
+801077f8:	0f 84 c2 00 00 00    	je     801078c0 <switchuvm+0xf0>
   pushcli();
-80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
+801077fe:	e8 3d d8 ff ff       	call   80105040 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
-80106a48:	89 c3                	mov    %eax,%ebx
-80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
-80106a4f:	89 c7                	mov    %eax,%edi
-80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
-80106a56:	83 c7 08             	add    $0x8,%edi
-80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
-80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a70:	83 c0 08             	add    $0x8,%eax
-80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80107803:	e8 e8 c7 ff ff       	call   80103ff0 <mycpu>
+80107808:	89 c3                	mov    %eax,%ebx
+8010780a:	e8 e1 c7 ff ff       	call   80103ff0 <mycpu>
+8010780f:	89 c7                	mov    %eax,%edi
+80107811:	e8 da c7 ff ff       	call   80103ff0 <mycpu>
+80107816:	83 c7 08             	add    $0x8,%edi
+80107819:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010781c:	e8 cf c7 ff ff       	call   80103ff0 <mycpu>
+80107821:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107824:	ba 67 00 00 00       	mov    $0x67,%edx
+80107829:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107830:	83 c0 08             	add    $0x8,%eax
+80107833:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+8010783a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a7f:	83 c1 08             	add    $0x8,%ecx
-80106a82:	c1 e8 18             	shr    $0x18,%eax
-80106a85:	c1 e9 10             	shr    $0x10,%ecx
-80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+8010783f:	83 c1 08             	add    $0x8,%ecx
+80107842:	c1 e8 18             	shr    $0x18,%eax
+80107845:	c1 e9 10             	shr    $0x10,%ecx
+80107848:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+8010784e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107854:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107859:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
+80107860:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
-80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80107865:	e8 86 c7 ff ff       	call   80103ff0 <mycpu>
+8010786a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
-80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
+80107871:	e8 7a c7 ff ff       	call   80103ff0 <mycpu>
+80107876:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
-80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
+8010787a:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010787d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107883:	e8 68 c7 ff ff       	call   80103ff0 <mycpu>
+80107888:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
-80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+8010788b:	e8 60 c7 ff ff       	call   80103ff0 <mycpu>
+80107890:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
-80106ad9:	0f 00 d8             	ltr    %ax
+80107894:	b8 28 00 00 00       	mov    $0x28,%eax
+80107899:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106adc:	8b 46 04             	mov    0x4(%esi),%eax
-80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
+8010789c:	8b 46 04             	mov    0x4(%esi),%eax
+8010789f:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ae4:	0f 22 d8             	mov    %eax,%cr3
+801078a4:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106aea:	5b                   	pop    %ebx
-80106aeb:	5e                   	pop    %esi
-80106aec:	5f                   	pop    %edi
-80106aed:	5d                   	pop    %ebp
+801078a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801078aa:	5b                   	pop    %ebx
+801078ab:	5e                   	pop    %esi
+801078ac:	5f                   	pop    %edi
+801078ad:	5d                   	pop    %ebp
   popcli();
-80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
+801078ae:	e9 dd d7 ff ff       	jmp    80105090 <popcli>
     panic("switchuvm: no process");
-80106af3:	83 ec 0c             	sub    $0xc,%esp
-80106af6:	68 8e 79 10 80       	push   $0x8010798e
-80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
+801078b3:	83 ec 0c             	sub    $0xc,%esp
+801078b6:	68 e2 87 10 80       	push   $0x801087e2
+801078bb:	e8 d0 8a ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106b00:	83 ec 0c             	sub    $0xc,%esp
-80106b03:	68 b9 79 10 80       	push   $0x801079b9
-80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
+801078c0:	83 ec 0c             	sub    $0xc,%esp
+801078c3:	68 0d 88 10 80       	push   $0x8010880d
+801078c8:	e8 c3 8a ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106b0d:	83 ec 0c             	sub    $0xc,%esp
-80106b10:	68 a4 79 10 80       	push   $0x801079a4
-80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
-80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106b20 <inituvm>:
-{
-80106b20:	f3 0f 1e fb          	endbr32 
-80106b24:	55                   	push   %ebp
-80106b25:	89 e5                	mov    %esp,%ebp
-80106b27:	57                   	push   %edi
-80106b28:	56                   	push   %esi
-80106b29:	53                   	push   %ebx
-80106b2a:	83 ec 1c             	sub    $0x1c,%esp
-80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801078cd:	83 ec 0c             	sub    $0xc,%esp
+801078d0:	68 f8 87 10 80       	push   $0x801087f8
+801078d5:	e8 b6 8a ff ff       	call   80100390 <panic>
+801078da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801078e0 <inituvm>:
+{
+801078e0:	f3 0f 1e fb          	endbr32 
+801078e4:	55                   	push   %ebp
+801078e5:	89 e5                	mov    %esp,%ebp
+801078e7:	57                   	push   %edi
+801078e8:	56                   	push   %esi
+801078e9:	53                   	push   %ebx
+801078ea:	83 ec 1c             	sub    $0x1c,%esp
+801078ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+801078f0:	8b 75 10             	mov    0x10(%ebp),%esi
+801078f3:	8b 7d 08             	mov    0x8(%ebp),%edi
+801078f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
+801078f9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801078ff:	77 4b                	ja     8010794c <inituvm+0x6c>
   mem = kalloc();
-80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
+80107901:	e8 2a ad ff ff       	call   80102630 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b46:	83 ec 04             	sub    $0x4,%esp
-80106b49:	68 00 10 00 00       	push   $0x1000
+80107906:	83 ec 04             	sub    $0x4,%esp
+80107909:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b4e:	89 c3                	mov    %eax,%ebx
+8010790e:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b50:	6a 00                	push   $0x0
-80106b52:	50                   	push   %eax
-80106b53:	e8 18 db ff ff       	call   80104670 <memset>
+80107910:	6a 00                	push   $0x0
+80107912:	50                   	push   %eax
+80107913:	e8 38 d9 ff ff       	call   80105250 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b58:	58                   	pop    %eax
-80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b5f:	5a                   	pop    %edx
-80106b60:	6a 06                	push   $0x6
-80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b67:	31 d2                	xor    %edx,%edx
-80106b69:	50                   	push   %eax
-80106b6a:	89 f8                	mov    %edi,%eax
-80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
+80107918:	58                   	pop    %eax
+80107919:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010791f:	5a                   	pop    %edx
+80107920:	6a 06                	push   $0x6
+80107922:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107927:	31 d2                	xor    %edx,%edx
+80107929:	50                   	push   %eax
+8010792a:	89 f8                	mov    %edi,%eax
+8010792c:	e8 af fc ff ff       	call   801075e0 <mappages>
   memmove(mem, init, sz);
-80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b77:	83 c4 10             	add    $0x10,%esp
-80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b83:	5b                   	pop    %ebx
-80106b84:	5e                   	pop    %esi
-80106b85:	5f                   	pop    %edi
-80106b86:	5d                   	pop    %ebp
+80107931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107934:	89 75 10             	mov    %esi,0x10(%ebp)
+80107937:	83 c4 10             	add    $0x10,%esp
+8010793a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010793d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80107940:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107943:	5b                   	pop    %ebx
+80107944:	5e                   	pop    %esi
+80107945:	5f                   	pop    %edi
+80107946:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
+80107947:	e9 a4 d9 ff ff       	jmp    801052f0 <memmove>
     panic("inituvm: more than a page");
-80106b8c:	83 ec 0c             	sub    $0xc,%esp
-80106b8f:	68 cd 79 10 80       	push   $0x801079cd
-80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
-80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ba0 <loaduvm>:
-{
-80106ba0:	f3 0f 1e fb          	endbr32 
-80106ba4:	55                   	push   %ebp
-80106ba5:	89 e5                	mov    %esp,%ebp
-80106ba7:	57                   	push   %edi
-80106ba8:	56                   	push   %esi
-80106ba9:	53                   	push   %ebx
-80106baa:	83 ec 1c             	sub    $0x1c,%esp
-80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
+8010794c:	83 ec 0c             	sub    $0xc,%esp
+8010794f:	68 21 88 10 80       	push   $0x80108821
+80107954:	e8 37 8a ff ff       	call   80100390 <panic>
+80107959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107960 <loaduvm>:
+{
+80107960:	f3 0f 1e fb          	endbr32 
+80107964:	55                   	push   %ebp
+80107965:	89 e5                	mov    %esp,%ebp
+80107967:	57                   	push   %edi
+80107968:	56                   	push   %esi
+80107969:	53                   	push   %ebx
+8010796a:	83 ec 1c             	sub    $0x1c,%esp
+8010796d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107970:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
+80107973:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80107978:	0f 85 99 00 00 00    	jne    80107a17 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-80106bbe:	01 f0                	add    %esi,%eax
-80106bc0:	89 f3                	mov    %esi,%ebx
-80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010797e:	01 f0                	add    %esi,%eax
+80107980:	89 f3                	mov    %esi,%ebx
+80107982:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
-80106bc8:	01 f0                	add    %esi,%eax
-80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107985:	8b 45 14             	mov    0x14(%ebp),%eax
+80107988:	01 f0                	add    %esi,%eax
+8010798a:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106bcd:	85 f6                	test   %esi,%esi
-80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
-80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
-80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106bd7:	90                   	nop
-80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106bde:	89 f0                	mov    %esi,%eax
-80106be0:	29 d8                	sub    %ebx,%eax
-80106be2:	39 c6                	cmp    %eax,%esi
-80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
+8010798d:	85 f6                	test   %esi,%esi
+8010798f:	75 15                	jne    801079a6 <loaduvm+0x46>
+80107991:	eb 6d                	jmp    80107a00 <loaduvm+0xa0>
+80107993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107997:	90                   	nop
+80107998:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+8010799e:	89 f0                	mov    %esi,%eax
+801079a0:	29 d8                	sub    %ebx,%eax
+801079a2:	39 c6                	cmp    %eax,%esi
+801079a4:	76 5a                	jbe    80107a00 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	31 c9                	xor    %ecx,%ecx
-80106bee:	29 da                	sub    %ebx,%edx
-80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
-80106bf5:	85 c0                	test   %eax,%eax
-80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
+801079a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801079a9:	8b 45 08             	mov    0x8(%ebp),%eax
+801079ac:	31 c9                	xor    %ecx,%ecx
+801079ae:	29 da                	sub    %ebx,%edx
+801079b0:	e8 ab fb ff ff       	call   80107560 <walkpgdir>
+801079b5:	85 c0                	test   %eax,%eax
+801079b7:	74 51                	je     80107a0a <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80106bf9:	8b 00                	mov    (%eax),%eax
+801079b9:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+801079bb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
+801079be:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801079c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
+801079c8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+801079ce:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c11:	29 d9                	sub    %ebx,%ecx
-80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c18:	57                   	push   %edi
-80106c19:	51                   	push   %ecx
-80106c1a:	50                   	push   %eax
-80106c1b:	ff 75 10             	pushl  0x10(%ebp)
-80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
-80106c23:	83 c4 10             	add    $0x10,%esp
-80106c26:	39 f8                	cmp    %edi,%eax
-80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
+801079d1:	29 d9                	sub    %ebx,%ecx
+801079d3:	05 00 00 00 80       	add    $0x80000000,%eax
+801079d8:	57                   	push   %edi
+801079d9:	51                   	push   %ecx
+801079da:	50                   	push   %eax
+801079db:	ff 75 10             	pushl  0x10(%ebp)
+801079de:	e8 7d a0 ff ff       	call   80101a60 <readi>
+801079e3:	83 c4 10             	add    $0x10,%esp
+801079e6:	39 f8                	cmp    %edi,%eax
+801079e8:	74 ae                	je     80107998 <loaduvm+0x38>
 }
-80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801079ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801079ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c32:	5b                   	pop    %ebx
-80106c33:	5e                   	pop    %esi
-80106c34:	5f                   	pop    %edi
-80106c35:	5d                   	pop    %ebp
-80106c36:	c3                   	ret    
-80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c3e:	66 90                	xchg   %ax,%ax
-80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801079f2:	5b                   	pop    %ebx
+801079f3:	5e                   	pop    %esi
+801079f4:	5f                   	pop    %edi
+801079f5:	5d                   	pop    %ebp
+801079f6:	c3                   	ret    
+801079f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801079fe:	66 90                	xchg   %ax,%ax
+80107a00:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c43:	31 c0                	xor    %eax,%eax
+80107a03:	31 c0                	xor    %eax,%eax
 }
-80106c45:	5b                   	pop    %ebx
-80106c46:	5e                   	pop    %esi
-80106c47:	5f                   	pop    %edi
-80106c48:	5d                   	pop    %ebp
-80106c49:	c3                   	ret    
+80107a05:	5b                   	pop    %ebx
+80107a06:	5e                   	pop    %esi
+80107a07:	5f                   	pop    %edi
+80107a08:	5d                   	pop    %ebp
+80107a09:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106c4a:	83 ec 0c             	sub    $0xc,%esp
-80106c4d:	68 e7 79 10 80       	push   $0x801079e7
-80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
+80107a0a:	83 ec 0c             	sub    $0xc,%esp
+80107a0d:	68 3b 88 10 80       	push   $0x8010883b
+80107a12:	e8 79 89 ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106c57:	83 ec 0c             	sub    $0xc,%esp
-80106c5a:	68 88 7a 10 80       	push   $0x80107a88
-80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
-80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c6f:	90                   	nop
-
-80106c70 <allocuvm>:
-{
-80106c70:	f3 0f 1e fb          	endbr32 
-80106c74:	55                   	push   %ebp
-80106c75:	89 e5                	mov    %esp,%ebp
-80106c77:	57                   	push   %edi
-80106c78:	56                   	push   %esi
-80106c79:	53                   	push   %ebx
-80106c7a:	83 ec 1c             	sub    $0x1c,%esp
+80107a17:	83 ec 0c             	sub    $0xc,%esp
+80107a1a:	68 dc 88 10 80       	push   $0x801088dc
+80107a1f:	e8 6c 89 ff ff       	call   80100390 <panic>
+80107a24:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107a2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107a2f:	90                   	nop
+
+80107a30 <allocuvm>:
+{
+80107a30:	f3 0f 1e fb          	endbr32 
+80107a34:	55                   	push   %ebp
+80107a35:	89 e5                	mov    %esp,%ebp
+80107a37:	57                   	push   %edi
+80107a38:	56                   	push   %esi
+80107a39:	53                   	push   %ebx
+80107a3a:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
+80107a3d:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107a40:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c86:	85 c0                	test   %eax,%eax
-80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
+80107a43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107a46:	85 c0                	test   %eax,%eax
+80107a48:	0f 88 b2 00 00 00    	js     80107b00 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80107a4e:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107a51:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
+80107a54:	0f 82 96 00 00 00    	jb     80107af0 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80107a5a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80107a60:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
-80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
+80107a66:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107a69:	77 40                	ja     80107aab <allocuvm+0x7b>
+80107a6b:	e9 83 00 00 00       	jmp    80107af3 <allocuvm+0xc3>
     memset(mem, 0, PGSIZE);
-80106cb0:	83 ec 04             	sub    $0x4,%esp
-80106cb3:	68 00 10 00 00       	push   $0x1000
-80106cb8:	6a 00                	push   $0x0
-80106cba:	50                   	push   %eax
-80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
+80107a70:	83 ec 04             	sub    $0x4,%esp
+80107a73:	68 00 10 00 00       	push   $0x1000
+80107a78:	6a 00                	push   $0x0
+80107a7a:	50                   	push   %eax
+80107a7b:	e8 d0 d7 ff ff       	call   80105250 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cc0:	58                   	pop    %eax
-80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cc7:	5a                   	pop    %edx
-80106cc8:	6a 06                	push   $0x6
-80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106ccf:	89 f2                	mov    %esi,%edx
-80106cd1:	50                   	push   %eax
-80106cd2:	89 f8                	mov    %edi,%eax
-80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
-80106cd9:	83 c4 10             	add    $0x10,%esp
-80106cdc:	85 c0                	test   %eax,%eax
-80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
+80107a80:	58                   	pop    %eax
+80107a81:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107a87:	5a                   	pop    %edx
+80107a88:	6a 06                	push   $0x6
+80107a8a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107a8f:	89 f2                	mov    %esi,%edx
+80107a91:	50                   	push   %eax
+80107a92:	89 f8                	mov    %edi,%eax
+80107a94:	e8 47 fb ff ff       	call   801075e0 <mappages>
+80107a99:	83 c4 10             	add    $0x10,%esp
+80107a9c:	85 c0                	test   %eax,%eax
+80107a9e:	78 78                	js     80107b18 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
+80107aa0:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107aa6:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107aa9:	76 48                	jbe    80107af3 <allocuvm+0xc3>
     mem = kalloc();
-80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
-80106cf0:	89 c3                	mov    %eax,%ebx
+80107aab:	e8 80 ab ff ff       	call   80102630 <kalloc>
+80107ab0:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106cf2:	85 c0                	test   %eax,%eax
-80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
+80107ab2:	85 c0                	test   %eax,%eax
+80107ab4:	75 ba                	jne    80107a70 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106cf6:	83 ec 0c             	sub    $0xc,%esp
-80106cf9:	68 05 7a 10 80       	push   $0x80107a05
-80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
+80107ab6:	83 ec 0c             	sub    $0xc,%esp
+80107ab9:	68 59 88 10 80       	push   $0x80108859
+80107abe:	e8 ed 8b ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d06:	83 c4 10             	add    $0x10,%esp
-80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
-80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d11:	89 c1                	mov    %eax,%ecx
-80106d13:	89 f8                	mov    %edi,%eax
-80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107ac6:	83 c4 10             	add    $0x10,%esp
+80107ac9:	39 45 10             	cmp    %eax,0x10(%ebp)
+80107acc:	74 32                	je     80107b00 <allocuvm+0xd0>
+80107ace:	8b 55 10             	mov    0x10(%ebp),%edx
+80107ad1:	89 c1                	mov    %eax,%ecx
+80107ad3:	89 f8                	mov    %edi,%eax
+80107ad5:	e8 96 fb ff ff       	call   80107670 <deallocuvm.part.0>
       return 0;
-80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80107ada:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d27:	5b                   	pop    %ebx
-80106d28:	5e                   	pop    %esi
-80106d29:	5f                   	pop    %edi
-80106d2a:	5d                   	pop    %ebp
-80106d2b:	c3                   	ret    
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107ae4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107ae7:	5b                   	pop    %ebx
+80107ae8:	5e                   	pop    %esi
+80107ae9:	5f                   	pop    %edi
+80107aea:	5d                   	pop    %ebp
+80107aeb:	c3                   	ret    
+80107aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107af0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d39:	5b                   	pop    %ebx
-80106d3a:	5e                   	pop    %esi
-80106d3b:	5f                   	pop    %edi
-80106d3c:	5d                   	pop    %ebp
-80106d3d:	c3                   	ret    
-80106d3e:	66 90                	xchg   %ax,%ax
+80107af3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107af6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107af9:	5b                   	pop    %ebx
+80107afa:	5e                   	pop    %esi
+80107afb:	5f                   	pop    %edi
+80107afc:	5d                   	pop    %ebp
+80107afd:	c3                   	ret    
+80107afe:	66 90                	xchg   %ax,%ax
     return 0;
-80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80107b00:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d4d:	5b                   	pop    %ebx
-80106d4e:	5e                   	pop    %esi
-80106d4f:	5f                   	pop    %edi
-80106d50:	5d                   	pop    %ebp
-80106d51:	c3                   	ret    
-80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107b07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107b0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107b0d:	5b                   	pop    %ebx
+80107b0e:	5e                   	pop    %esi
+80107b0f:	5f                   	pop    %edi
+80107b10:	5d                   	pop    %ebp
+80107b11:	c3                   	ret    
+80107b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d58:	83 ec 0c             	sub    $0xc,%esp
-80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
-80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
+80107b18:	83 ec 0c             	sub    $0xc,%esp
+80107b1b:	68 71 88 10 80       	push   $0x80108871
+80107b20:	e8 8b 8b ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d68:	83 c4 10             	add    $0x10,%esp
-80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
-80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d73:	89 c1                	mov    %eax,%ecx
-80106d75:	89 f8                	mov    %edi,%eax
-80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107b25:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107b28:	83 c4 10             	add    $0x10,%esp
+80107b2b:	39 45 10             	cmp    %eax,0x10(%ebp)
+80107b2e:	74 0c                	je     80107b3c <allocuvm+0x10c>
+80107b30:	8b 55 10             	mov    0x10(%ebp),%edx
+80107b33:	89 c1                	mov    %eax,%ecx
+80107b35:	89 f8                	mov    %edi,%eax
+80107b37:	e8 34 fb ff ff       	call   80107670 <deallocuvm.part.0>
       kfree(mem);
-80106d7c:	83 ec 0c             	sub    $0xc,%esp
-80106d7f:	53                   	push   %ebx
-80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
+80107b3c:	83 ec 0c             	sub    $0xc,%esp
+80107b3f:	53                   	push   %ebx
+80107b40:	e8 2b a9 ff ff       	call   80102470 <kfree>
       return 0;
-80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d8c:	83 c4 10             	add    $0x10,%esp
+80107b45:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80107b4c:	83 c4 10             	add    $0x10,%esp
 }
-80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
-80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106da0 <deallocuvm>:
-{
-80106da0:	f3 0f 1e fb          	endbr32 
-80106da4:	55                   	push   %ebp
-80106da5:	89 e5                	mov    %esp,%ebp
-80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
+80107b4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107b52:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107b55:	5b                   	pop    %ebx
+80107b56:	5e                   	pop    %esi
+80107b57:	5f                   	pop    %edi
+80107b58:	5d                   	pop    %ebp
+80107b59:	c3                   	ret    
+80107b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107b60 <deallocuvm>:
+{
+80107b60:	f3 0f 1e fb          	endbr32 
+80107b64:	55                   	push   %ebp
+80107b65:	89 e5                	mov    %esp,%ebp
+80107b67:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107b6a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106db0:	39 d1                	cmp    %edx,%ecx
-80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
+80107b70:	39 d1                	cmp    %edx,%ecx
+80107b72:	73 0c                	jae    80107b80 <deallocuvm+0x20>
 }
-80106db4:	5d                   	pop    %ebp
-80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
-80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc0:	89 d0                	mov    %edx,%eax
-80106dc2:	5d                   	pop    %ebp
-80106dc3:	c3                   	ret    
-80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dcf:	90                   	nop
+80107b74:	5d                   	pop    %ebp
+80107b75:	e9 f6 fa ff ff       	jmp    80107670 <deallocuvm.part.0>
+80107b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107b80:	89 d0                	mov    %edx,%eax
+80107b82:	5d                   	pop    %ebp
+80107b83:	c3                   	ret    
+80107b84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107b8f:	90                   	nop
 
-80106dd0 <freevm>:
+80107b90 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dd0:	f3 0f 1e fb          	endbr32 
-80106dd4:	55                   	push   %ebp
-80106dd5:	89 e5                	mov    %esp,%ebp
-80106dd7:	57                   	push   %edi
-80106dd8:	56                   	push   %esi
-80106dd9:	53                   	push   %ebx
-80106dda:	83 ec 0c             	sub    $0xc,%esp
-80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
+80107b90:	f3 0f 1e fb          	endbr32 
+80107b94:	55                   	push   %ebp
+80107b95:	89 e5                	mov    %esp,%ebp
+80107b97:	57                   	push   %edi
+80107b98:	56                   	push   %esi
+80107b99:	53                   	push   %ebx
+80107b9a:	83 ec 0c             	sub    $0xc,%esp
+80107b9d:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106de0:	85 f6                	test   %esi,%esi
-80106de2:	74 55                	je     80106e39 <freevm+0x69>
+80107ba0:	85 f6                	test   %esi,%esi
+80107ba2:	74 55                	je     80107bf9 <freevm+0x69>
   if(newsz >= oldsz)
-80106de4:	31 c9                	xor    %ecx,%ecx
-80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106deb:	89 f0                	mov    %esi,%eax
-80106ded:	89 f3                	mov    %esi,%ebx
-80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
+80107ba4:	31 c9                	xor    %ecx,%ecx
+80107ba6:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107bab:	89 f0                	mov    %esi,%eax
+80107bad:	89 f3                	mov    %esi,%ebx
+80107baf:	e8 bc fa ff ff       	call   80107670 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c3 04             	add    $0x4,%ebx
-80106e03:	39 df                	cmp    %ebx,%edi
-80106e05:	74 23                	je     80106e2a <freevm+0x5a>
+80107bb4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107bba:	eb 0b                	jmp    80107bc7 <freevm+0x37>
+80107bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107bc0:	83 c3 04             	add    $0x4,%ebx
+80107bc3:	39 df                	cmp    %ebx,%edi
+80107bc5:	74 23                	je     80107bea <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e07:	8b 03                	mov    (%ebx),%eax
-80106e09:	a8 01                	test   $0x1,%al
-80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
+80107bc7:	8b 03                	mov    (%ebx),%eax
+80107bc9:	a8 01                	test   $0x1,%al
+80107bcb:	74 f3                	je     80107bc0 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e12:	83 ec 0c             	sub    $0xc,%esp
-80106e15:	83 c3 04             	add    $0x4,%ebx
+80107bd2:	83 ec 0c             	sub    $0xc,%esp
+80107bd5:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
+80107bd8:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e1d:	50                   	push   %eax
-80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
-80106e23:	83 c4 10             	add    $0x10,%esp
+80107bdd:	50                   	push   %eax
+80107bde:	e8 8d a8 ff ff       	call   80102470 <kfree>
+80107be3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e26:	39 df                	cmp    %ebx,%edi
-80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
+80107be6:	39 df                	cmp    %ebx,%edi
+80107be8:	75 dd                	jne    80107bc7 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
+80107bea:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e30:	5b                   	pop    %ebx
-80106e31:	5e                   	pop    %esi
-80106e32:	5f                   	pop    %edi
-80106e33:	5d                   	pop    %ebp
+80107bed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107bf0:	5b                   	pop    %ebx
+80107bf1:	5e                   	pop    %esi
+80107bf2:	5f                   	pop    %edi
+80107bf3:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
+80107bf4:	e9 77 a8 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-80106e39:	83 ec 0c             	sub    $0xc,%esp
-80106e3c:	68 39 7a 10 80       	push   $0x80107a39
-80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
-80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <setupkvm>:
-{
-80106e50:	f3 0f 1e fb          	endbr32 
-80106e54:	55                   	push   %ebp
-80106e55:	89 e5                	mov    %esp,%ebp
-80106e57:	56                   	push   %esi
-80106e58:	53                   	push   %ebx
+80107bf9:	83 ec 0c             	sub    $0xc,%esp
+80107bfc:	68 8d 88 10 80       	push   $0x8010888d
+80107c01:	e8 8a 87 ff ff       	call   80100390 <panic>
+80107c06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107c0d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107c10 <setupkvm>:
+{
+80107c10:	f3 0f 1e fb          	endbr32 
+80107c14:	55                   	push   %ebp
+80107c15:	89 e5                	mov    %esp,%ebp
+80107c17:	56                   	push   %esi
+80107c18:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
-80106e5e:	89 c6                	mov    %eax,%esi
-80106e60:	85 c0                	test   %eax,%eax
-80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
+80107c19:	e8 12 aa ff ff       	call   80102630 <kalloc>
+80107c1e:	89 c6                	mov    %eax,%esi
+80107c20:	85 c0                	test   %eax,%eax
+80107c22:	74 42                	je     80107c66 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80106e64:	83 ec 04             	sub    $0x4,%esp
+80107c24:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+80107c27:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e6c:	68 00 10 00 00       	push   $0x1000
-80106e71:	6a 00                	push   $0x0
-80106e73:	50                   	push   %eax
-80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
-80106e79:	83 c4 10             	add    $0x10,%esp
+80107c2c:	68 00 10 00 00       	push   $0x1000
+80107c31:	6a 00                	push   $0x0
+80107c33:	50                   	push   %eax
+80107c34:	e8 17 d6 ff ff       	call   80105250 <memset>
+80107c39:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
+80107c3c:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e7f:	83 ec 08             	sub    $0x8,%esp
-80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e85:	ff 73 0c             	pushl  0xc(%ebx)
-80106e88:	8b 13                	mov    (%ebx),%edx
-80106e8a:	50                   	push   %eax
-80106e8b:	29 c1                	sub    %eax,%ecx
-80106e8d:	89 f0                	mov    %esi,%eax
-80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
-80106e94:	83 c4 10             	add    $0x10,%esp
-80106e97:	85 c0                	test   %eax,%eax
-80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
+80107c3f:	83 ec 08             	sub    $0x8,%esp
+80107c42:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107c45:	ff 73 0c             	pushl  0xc(%ebx)
+80107c48:	8b 13                	mov    (%ebx),%edx
+80107c4a:	50                   	push   %eax
+80107c4b:	29 c1                	sub    %eax,%ecx
+80107c4d:	89 f0                	mov    %esi,%eax
+80107c4f:	e8 8c f9 ff ff       	call   801075e0 <mappages>
+80107c54:	83 c4 10             	add    $0x10,%esp
+80107c57:	85 c0                	test   %eax,%eax
+80107c59:	78 15                	js     80107c70 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e9b:	83 c3 10             	add    $0x10,%ebx
-80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
-}
-80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ea9:	89 f0                	mov    %esi,%eax
-80106eab:	5b                   	pop    %ebx
-80106eac:	5e                   	pop    %esi
-80106ead:	5d                   	pop    %ebp
-80106eae:	c3                   	ret    
-80106eaf:	90                   	nop
+80107c5b:	83 c3 10             	add    $0x10,%ebx
+80107c5e:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+80107c64:	75 d6                	jne    80107c3c <setupkvm+0x2c>
+}
+80107c66:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107c69:	89 f0                	mov    %esi,%eax
+80107c6b:	5b                   	pop    %ebx
+80107c6c:	5e                   	pop    %esi
+80107c6d:	5d                   	pop    %ebp
+80107c6e:	c3                   	ret    
+80107c6f:	90                   	nop
       freevm(pgdir);
-80106eb0:	83 ec 0c             	sub    $0xc,%esp
-80106eb3:	56                   	push   %esi
+80107c70:	83 ec 0c             	sub    $0xc,%esp
+80107c73:	56                   	push   %esi
       return 0;
-80106eb4:	31 f6                	xor    %esi,%esi
+80107c74:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
+80107c76:	e8 15 ff ff ff       	call   80107b90 <freevm>
       return 0;
-80106ebb:	83 c4 10             	add    $0x10,%esp
+80107c7b:	83 c4 10             	add    $0x10,%esp
 }
-80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ec1:	89 f0                	mov    %esi,%eax
-80106ec3:	5b                   	pop    %ebx
-80106ec4:	5e                   	pop    %esi
-80106ec5:	5d                   	pop    %ebp
-80106ec6:	c3                   	ret    
-80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ece:	66 90                	xchg   %ax,%ax
-
-80106ed0 <kvmalloc>:
-{
-80106ed0:	f3 0f 1e fb          	endbr32 
-80106ed4:	55                   	push   %ebp
-80106ed5:	89 e5                	mov    %esp,%ebp
-80106ed7:	83 ec 08             	sub    $0x8,%esp
+80107c7e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107c81:	89 f0                	mov    %esi,%eax
+80107c83:	5b                   	pop    %ebx
+80107c84:	5e                   	pop    %esi
+80107c85:	5d                   	pop    %ebp
+80107c86:	c3                   	ret    
+80107c87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107c8e:	66 90                	xchg   %ax,%ax
+
+80107c90 <kvmalloc>:
+{
+80107c90:	f3 0f 1e fb          	endbr32 
+80107c94:	55                   	push   %ebp
+80107c95:	89 e5                	mov    %esp,%ebp
+80107c97:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
-80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+80107c9a:	e8 71 ff ff ff       	call   80107c10 <setupkvm>
+80107c9f:	a3 04 63 11 80       	mov    %eax,0x80116304
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ee9:	0f 22 d8             	mov    %eax,%cr3
+80107ca4:	05 00 00 00 80       	add    $0x80000000,%eax
+80107ca9:	0f 22 d8             	mov    %eax,%cr3
 }
-80106eec:	c9                   	leave  
-80106eed:	c3                   	ret    
-80106eee:	66 90                	xchg   %ax,%ax
+80107cac:	c9                   	leave  
+80107cad:	c3                   	ret    
+80107cae:	66 90                	xchg   %ax,%ax
 
-80106ef0 <clearpteu>:
+80107cb0 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ef0:	f3 0f 1e fb          	endbr32 
-80106ef4:	55                   	push   %ebp
+80107cb0:	f3 0f 1e fb          	endbr32 
+80107cb4:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106ef5:	31 c9                	xor    %ecx,%ecx
+80107cb5:	31 c9                	xor    %ecx,%ecx
 {
-80106ef7:	89 e5                	mov    %esp,%ebp
-80106ef9:	83 ec 08             	sub    $0x8,%esp
+80107cb7:	89 e5                	mov    %esp,%ebp
+80107cb9:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
+80107cbc:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107cbf:	8b 45 08             	mov    0x8(%ebp),%eax
+80107cc2:	e8 99 f8 ff ff       	call   80107560 <walkpgdir>
   if(pte == 0)
-80106f07:	85 c0                	test   %eax,%eax
-80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
+80107cc7:	85 c0                	test   %eax,%eax
+80107cc9:	74 05                	je     80107cd0 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80107ccb:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f0e:	c9                   	leave  
-80106f0f:	c3                   	ret    
+80107cce:	c9                   	leave  
+80107ccf:	c3                   	ret    
     panic("clearpteu");
-80106f10:	83 ec 0c             	sub    $0xc,%esp
-80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
-80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
-80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
+80107cd0:	83 ec 0c             	sub    $0xc,%esp
+80107cd3:	68 9e 88 10 80       	push   $0x8010889e
+80107cd8:	e8 b3 86 ff ff       	call   80100390 <panic>
+80107cdd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106f20 <copyuvm>:
+80107ce0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f20:	f3 0f 1e fb          	endbr32 
-80106f24:	55                   	push   %ebp
-80106f25:	89 e5                	mov    %esp,%ebp
-80106f27:	57                   	push   %edi
-80106f28:	56                   	push   %esi
-80106f29:	53                   	push   %ebx
-80106f2a:	83 ec 1c             	sub    $0x1c,%esp
+80107ce0:	f3 0f 1e fb          	endbr32 
+80107ce4:	55                   	push   %ebp
+80107ce5:	89 e5                	mov    %esp,%ebp
+80107ce7:	57                   	push   %edi
+80107ce8:	56                   	push   %esi
+80107ce9:	53                   	push   %ebx
+80107cea:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
-80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f35:	85 c0                	test   %eax,%eax
-80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+80107ced:	e8 1e ff ff ff       	call   80107c10 <setupkvm>
+80107cf2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107cf5:	85 c0                	test   %eax,%eax
+80107cf7:	0f 84 9b 00 00 00    	je     80107d98 <copyuvm+0xb8>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f40:	85 c9                	test   %ecx,%ecx
-80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
-80106f48:	31 f6                	xor    %esi,%esi
-80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
-80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107cfd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80107d00:	85 c9                	test   %ecx,%ecx
+80107d02:	0f 84 90 00 00 00    	je     80107d98 <copyuvm+0xb8>
+80107d08:	31 f6                	xor    %esi,%esi
+80107d0a:	eb 46                	jmp    80107d52 <copyuvm+0x72>
+80107d0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106f50:	83 ec 04             	sub    $0x4,%esp
-80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106f59:	68 00 10 00 00       	push   $0x1000
-80106f5e:	57                   	push   %edi
-80106f5f:	50                   	push   %eax
-80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
+80107d10:	83 ec 04             	sub    $0x4,%esp
+80107d13:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80107d19:	68 00 10 00 00       	push   $0x1000
+80107d1e:	57                   	push   %edi
+80107d1f:	50                   	push   %eax
+80107d20:	e8 cb d5 ff ff       	call   801052f0 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106f65:	58                   	pop    %eax
-80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f6c:	5a                   	pop    %edx
-80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106f75:	89 f2                	mov    %esi,%edx
-80106f77:	50                   	push   %eax
-80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
-80106f80:	83 c4 10             	add    $0x10,%esp
-80106f83:	85 c0                	test   %eax,%eax
-80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
+80107d25:	58                   	pop    %eax
+80107d26:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107d2c:	5a                   	pop    %edx
+80107d2d:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107d30:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107d35:	89 f2                	mov    %esi,%edx
+80107d37:	50                   	push   %eax
+80107d38:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107d3b:	e8 a0 f8 ff ff       	call   801075e0 <mappages>
+80107d40:	83 c4 10             	add    $0x10,%esp
+80107d43:	85 c0                	test   %eax,%eax
+80107d45:	78 61                	js     80107da8 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
+80107d47:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107d4d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107d50:	76 46                	jbe    80107d98 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f95:	31 c9                	xor    %ecx,%ecx
-80106f97:	89 f2                	mov    %esi,%edx
-80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
-80106f9e:	85 c0                	test   %eax,%eax
-80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
+80107d52:	8b 45 08             	mov    0x8(%ebp),%eax
+80107d55:	31 c9                	xor    %ecx,%ecx
+80107d57:	89 f2                	mov    %esi,%edx
+80107d59:	e8 02 f8 ff ff       	call   80107560 <walkpgdir>
+80107d5e:	85 c0                	test   %eax,%eax
+80107d60:	74 61                	je     80107dc3 <copyuvm+0xe3>
     if(!(*pte & PTE_P))
-80106fa2:	8b 00                	mov    (%eax),%eax
-80106fa4:	a8 01                	test   $0x1,%al
-80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
+80107d62:	8b 00                	mov    (%eax),%eax
+80107d64:	a8 01                	test   $0x1,%al
+80107d66:	74 4e                	je     80107db6 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106fa8:	89 c7                	mov    %eax,%edi
+80107d68:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107d6a:	25 ff 0f 00 00       	and    $0xfff,%eax
+80107d6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107d72:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
-80106fbd:	89 c3                	mov    %eax,%ebx
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
+80107d78:	e8 b3 a8 ff ff       	call   80102630 <kalloc>
+80107d7d:	89 c3                	mov    %eax,%ebx
+80107d7f:	85 c0                	test   %eax,%eax
+80107d81:	75 8d                	jne    80107d10 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106fc3:	83 ec 0c             	sub    $0xc,%esp
-80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
-80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
+80107d83:	83 ec 0c             	sub    $0xc,%esp
+80107d86:	ff 75 e0             	pushl  -0x20(%ebp)
+80107d89:	e8 02 fe ff ff       	call   80107b90 <freevm>
   return 0;
-80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80106fd5:	83 c4 10             	add    $0x10,%esp
+80107d8e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107d95:	83 c4 10             	add    $0x10,%esp
 }
-80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fde:	5b                   	pop    %ebx
-80106fdf:	5e                   	pop    %esi
-80106fe0:	5f                   	pop    %edi
-80106fe1:	5d                   	pop    %ebp
-80106fe2:	c3                   	ret    
-80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106fe7:	90                   	nop
+80107d98:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107d9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107d9e:	5b                   	pop    %ebx
+80107d9f:	5e                   	pop    %esi
+80107da0:	5f                   	pop    %edi
+80107da1:	5d                   	pop    %ebp
+80107da2:	c3                   	ret    
+80107da3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107da7:	90                   	nop
       kfree(mem);
-80106fe8:	83 ec 0c             	sub    $0xc,%esp
-80106feb:	53                   	push   %ebx
-80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
+80107da8:	83 ec 0c             	sub    $0xc,%esp
+80107dab:	53                   	push   %ebx
+80107dac:	e8 bf a6 ff ff       	call   80102470 <kfree>
       goto bad;
-80106ff1:	83 c4 10             	add    $0x10,%esp
-80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
+80107db1:	83 c4 10             	add    $0x10,%esp
+80107db4:	eb cd                	jmp    80107d83 <copyuvm+0xa3>
       panic("copyuvm: page not present");
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
-80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
+80107db6:	83 ec 0c             	sub    $0xc,%esp
+80107db9:	68 c2 88 10 80       	push   $0x801088c2
+80107dbe:	e8 cd 85 ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107003:	83 ec 0c             	sub    $0xc,%esp
-80107006:	68 54 7a 10 80       	push   $0x80107a54
-8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
+80107dc3:	83 ec 0c             	sub    $0xc,%esp
+80107dc6:	68 a8 88 10 80       	push   $0x801088a8
+80107dcb:	e8 c0 85 ff ff       	call   80100390 <panic>
 
-80107010 <uva2ka>:
+80107dd0 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107010:	f3 0f 1e fb          	endbr32 
-80107014:	55                   	push   %ebp
+80107dd0:	f3 0f 1e fb          	endbr32 
+80107dd4:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107015:	31 c9                	xor    %ecx,%ecx
+80107dd5:	31 c9                	xor    %ecx,%ecx
 {
-80107017:	89 e5                	mov    %esp,%ebp
-80107019:	83 ec 08             	sub    $0x8,%esp
+80107dd7:	89 e5                	mov    %esp,%ebp
+80107dd9:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
+80107ddc:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107ddf:	8b 45 08             	mov    0x8(%ebp),%eax
+80107de2:	e8 79 f7 ff ff       	call   80107560 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107027:	8b 00                	mov    (%eax),%eax
+80107de7:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107029:	c9                   	leave  
+80107de9:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-8010702a:	89 c2                	mov    %eax,%edx
+80107dea:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107dec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107031:	83 e2 05             	and    $0x5,%edx
+80107df1:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107034:	05 00 00 00 80       	add    $0x80000000,%eax
-80107039:	83 fa 05             	cmp    $0x5,%edx
-8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107041:	0f 45 c2             	cmovne %edx,%eax
-}
-80107044:	c3                   	ret    
-80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107df4:	05 00 00 00 80       	add    $0x80000000,%eax
+80107df9:	83 fa 05             	cmp    $0x5,%edx
+80107dfc:	ba 00 00 00 00       	mov    $0x0,%edx
+80107e01:	0f 45 c2             	cmovne %edx,%eax
+}
+80107e04:	c3                   	ret    
+80107e05:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107050 <copyout>:
+80107e10 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107050:	f3 0f 1e fb          	endbr32 
-80107054:	55                   	push   %ebp
-80107055:	89 e5                	mov    %esp,%ebp
-80107057:	57                   	push   %edi
-80107058:	56                   	push   %esi
-80107059:	53                   	push   %ebx
-8010705a:	83 ec 0c             	sub    $0xc,%esp
-8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
-80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107e10:	f3 0f 1e fb          	endbr32 
+80107e14:	55                   	push   %ebp
+80107e15:	89 e5                	mov    %esp,%ebp
+80107e17:	57                   	push   %edi
+80107e18:	56                   	push   %esi
+80107e19:	53                   	push   %ebx
+80107e1a:	83 ec 0c             	sub    $0xc,%esp
+80107e1d:	8b 75 14             	mov    0x14(%ebp),%esi
+80107e20:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107063:	85 f6                	test   %esi,%esi
-80107065:	75 3c                	jne    801070a3 <copyout+0x53>
-80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
-80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107e23:	85 f6                	test   %esi,%esi
+80107e25:	75 3c                	jne    80107e63 <copyout+0x53>
+80107e27:	eb 67                	jmp    80107e90 <copyout+0x80>
+80107e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107073:	89 fb                	mov    %edi,%ebx
-80107075:	29 d3                	sub    %edx,%ebx
-80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107e30:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107e33:	89 fb                	mov    %edi,%ebx
+80107e35:	29 d3                	sub    %edx,%ebx
+80107e37:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-8010707d:	39 f3                	cmp    %esi,%ebx
-8010707f:	0f 47 de             	cmova  %esi,%ebx
+80107e3d:	39 f3                	cmp    %esi,%ebx
+80107e3f:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107082:	29 fa                	sub    %edi,%edx
-80107084:	83 ec 04             	sub    $0x4,%esp
-80107087:	01 c2                	add    %eax,%edx
-80107089:	53                   	push   %ebx
-8010708a:	ff 75 10             	pushl  0x10(%ebp)
-8010708d:	52                   	push   %edx
-8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
+80107e42:	29 fa                	sub    %edi,%edx
+80107e44:	83 ec 04             	sub    $0x4,%esp
+80107e47:	01 c2                	add    %eax,%edx
+80107e49:	53                   	push   %ebx
+80107e4a:	ff 75 10             	pushl  0x10(%ebp)
+80107e4d:	52                   	push   %edx
+80107e4e:	e8 9d d4 ff ff       	call   801052f0 <memmove>
     len -= n;
     buf += n;
-80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107e53:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+80107e56:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-8010709c:	83 c4 10             	add    $0x10,%esp
-8010709f:	29 de                	sub    %ebx,%esi
-801070a1:	74 2d                	je     801070d0 <copyout+0x80>
+80107e5c:	83 c4 10             	add    $0x10,%esp
+80107e5f:	29 de                	sub    %ebx,%esi
+80107e61:	74 2d                	je     80107e90 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-801070a3:	89 d7                	mov    %edx,%edi
+80107e63:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070a5:	83 ec 08             	sub    $0x8,%esp
+80107e65:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107e68:	89 55 0c             	mov    %edx,0xc(%ebp)
+80107e6b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070b1:	57                   	push   %edi
-801070b2:	ff 75 08             	pushl  0x8(%ebp)
-801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
+80107e71:	57                   	push   %edi
+80107e72:	ff 75 08             	pushl  0x8(%ebp)
+80107e75:	e8 56 ff ff ff       	call   80107dd0 <uva2ka>
     if(pa0 == 0)
-801070ba:	83 c4 10             	add    $0x10,%esp
-801070bd:	85 c0                	test   %eax,%eax
-801070bf:	75 af                	jne    80107070 <copyout+0x20>
+80107e7a:	83 c4 10             	add    $0x10,%esp
+80107e7d:	85 c0                	test   %eax,%eax
+80107e7f:	75 af                	jne    80107e30 <copyout+0x20>
   }
   return 0;
 }
-801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107e81:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107e84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070c9:	5b                   	pop    %ebx
-801070ca:	5e                   	pop    %esi
-801070cb:	5f                   	pop    %edi
-801070cc:	5d                   	pop    %ebp
-801070cd:	c3                   	ret    
-801070ce:	66 90                	xchg   %ax,%ax
-801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107e89:	5b                   	pop    %ebx
+80107e8a:	5e                   	pop    %esi
+80107e8b:	5f                   	pop    %edi
+80107e8c:	5d                   	pop    %ebp
+80107e8d:	c3                   	ret    
+80107e8e:	66 90                	xchg   %ax,%ax
+80107e90:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801070d3:	31 c0                	xor    %eax,%eax
+80107e93:	31 c0                	xor    %eax,%eax
 }
-801070d5:	5b                   	pop    %ebx
-801070d6:	5e                   	pop    %esi
-801070d7:	5f                   	pop    %edi
-801070d8:	5d                   	pop    %ebp
-801070d9:	c3                   	ret    
+80107e95:	5b                   	pop    %ebx
+80107e96:	5e                   	pop    %esi
+80107e97:	5f                   	pop    %edi
+80107e98:	5d                   	pop    %ebp
+80107e99:	c3                   	ret    
diff -u xv6-public/kernel.sym xv6-public-hybrid/kernel.sym
--- xv6-public/kernel.sym	2022-10-07 20:00:55.093195122 +0530
+++ xv6-public-hybrid/kernel.sym	2022-10-07 18:39:42.642561000 +0530
@@ -1,7 +1,7 @@
 80100000 .text
-801070e0 .rodata
-80108000 .data
-8010a520 .bss
+80107ea0 .rodata
+80109000 .data
+8010b520 .bss
 00000000 .debug_line
 00000000 .debug_info
 00000000 .debug_abbrev
@@ -12,11 +12,11 @@
 00000000 .comment
 00000000 bio.c
 00000000 console.c
-8010a520 cons
-8010a558 panicked
+8010b520 cons
+8010b558 panicked
 80100410 consputc.part.0
 801005a0 printint
-80107150 digits.1577
+80107f10 digits.1594
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -27,19 +27,19 @@
 80101d70 namex
 00000000 ide.c
 80102070 idestart
-8010a580 idelock
-8010a560 havedisk1
-8010a564 idequeue
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1418
-80107480 shiftcode
-80107380 togglecode
-80107360 charcode.1419
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
+8010b5b4 shift.1431
+80108240 shiftcode
+80108140 togglecode
+80108120 charcode.1432
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
 00000000 lapic.c
 00000000 log.c
 80102b90 install_trans
@@ -53,464 +53,489 @@
 00000000 pipe.c
 00000000 proc.c
 80103790 allocproc
-8010a000 first.1619
-8010a5b8 initproc
-8010772c states.1645
+8010b000 first.1686
+80103f30 wakeup1
+8010b5c0 initproc
+80108570 states.1712
+80104e6d set_burst_time.cold
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801077a0 syscalls
+801085e0 syscalls
 00000000 sysfile.c
-80104ab0 create
-80104c50 argfd.constprop.0
+80105690 create
+80105830 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
+8010b5d0 time_slice_initializing.1557
+8010b5c8 last_proc.1558
+8010b5cc time_slice.1556
+8010b5c4 ticks_since_last_yield.1555
 00000000 uart.c
-80105ba0 uartgetc
-8010a5bc uart
-80105bd0 uartputc.part.0
+80106960 uartgetc
+8010b5d4 uart
+80106990 uartputc.part.0
 00000000 vm.c
-801067a0 walkpgdir
-80106820 mappages
-801068b0 deallocuvm.part.0
-8010a420 kmap
+80107560 walkpgdir
+801075e0 mappages
+80107670 deallocuvm.part.0
+8010b420 kmap
 80100290 consoleread
-801066f3 vector242
-8010614a vector119
+801074b3 vector242
+80106f0a vector119
 8010000c entry
-8010602a vector87
-80106021 vector86
-80104830 safestrcpy
-80104df0 sys_close
-8010675f vector251
-8010604e vector91
-80105e44 vector33
-80106333 vector162
-80103ed0 yield
-80112680 log
-80112640 kmem
-80106597 vector213
-801060e7 vector108
-80105c20 uartinit
-80105e9e vector43
+80106dea vector87
+80106de1 vector86
+80105410 safestrcpy
+801059d0 sys_close
+8010751f vector251
+80106e0e vector91
+80106c04 vector33
+801070f3 vector162
+80104690 yield
+801136a0 log
+80113660 kmem
+80107357 vector213
+80106ea7 vector108
+801069e0 uartinit
+80106c5e vector43
 801028c0 lapiceoi
-80106357 vector165
-80106447 vector185
+80103f80 makeProcRunnable
+80107117 vector165
+80107207 vector185
 80102380 ioapicinit
-80106126 vector115
+80106ee6 vector115
 80100ff0 fileread
-80106165 vector122
-80105740 sys_sbrk
-80112760 ioapicid
-801062eb vector156
-80106717 vector245
-80112634 ioapic
-80106477 vector189
-80105d68 vector7
-80105f40 vector61
-80105df3 vector24
-80106102 vector111
-801064fb vector200
-80105f76 vector67
-80106213 vector138
-80105fb5 vector74
-80103cd0 sched
-80104710 memmove
-80105f1c vector57
-80104a40 syscall
-801065a3 vector214
-80106096 vector99
-80103940 cpuid
+80106f25 vector122
+80106320 sys_sbrk
+80113780 ioapicid
+801070ab vector156
+801074d7 vector245
+80113654 ioapic
+80107237 vector189
+80106b28 vector7
+80106d00 vector61
+80106bb3 vector24
+80106ec2 vector111
+801072bb vector200
+80106d36 vector67
+80106510 sys_getMaxPid
+80106fd3 vector138
+80106d75 vector74
+801044d0 sched
+801052f0 memmove
+80106cdc vector57
+80105620 syscall
+80107363 vector214
+80106e56 vector99
+80104050 cpuid
 80101b60 writei
-80106237 vector141
-801056a0 sys_fork
-8010b5c0 bcache
-801063ab vector172
-801066e7 vector241
-80104400 getcallerpcs
-80105300 sys_mkdir
-80106777 vector253
-80105d44 vector3
-80105d3b vector2
+80106ff7 vector141
+80106280 sys_fork
+8010c5e0 bcache
+8010716b vector172
+801074a7 vector241
+80104fe0 getcallerpcs
+80105ee0 sys_mkdir
+80107537 vector253
+80106b04 vector3
+80106afb vector2
 80101c90 namecmp
-8010663f vector227
-80106573 vector210
-80104a00 argstr
-8010661b vector224
-80105e8c vector41
+801073ff vector227
+80107333 vector210
+801055e0 argstr
+801073db vector224
+80106c4c vector41
 801006b0 cprintf
 80100e70 filedup
 80102030 namei
-80105dd8 vector21
+80106b98 vector21
 80100040 binit
-801063e7 vector177
-80106141 vector118
-80105f91 vector70
-80105f88 vector69
-801066b7 vector237
-80105f5b vector64
-80105e0e vector27
-801061cb vector132
-80106453 vector186
-80104d10 sys_read
-801065c7 vector217
-801048b0 fetchint
-80106e50 setupkvm
-80104770 memcpy
-80106dd0 freevm
-80105d32 vector1
-801063f3 vector178
-80105e71 vector38
+801071a7 vector177
+80106f01 vector118
+80106d51 vector70
+80106d48 vector69
+80107477 vector237
+80106d1b vector64
+80106bce vector27
+80106f8b vector132
+80107213 vector186
+801058f0 sys_read
+80107387 vector217
+80105490 fetchint
+80107c10 setupkvm
+80105350 memcpy
+80107b90 freevm
+80106af2 vector1
+801071b3 vector178
+80106c31 vector38
 80102470 kfree
-801066c3 vector238
-801038d0 mycpu
+80107483 vector238
+80103ff0 mycpu
 80101890 iput
-801061d7 vector133
-80105fac vector73
-8010625b vector144
-80106783 vector254
+80106f97 vector133
+80106d6c vector73
+8010701b vector144
+80107543 vector254
 80101500 readsb
-8010a004 nextpid
-801060a8 vector101
-8010657f vector211
+8010b004 nextpid
+80106e68 vector101
+8010733f vector211
 801031f0 mpinit
-801063c3 vector174
-801066ff vector243
+80107183 vector174
+801074bf vector243
 80100de0 fileinit
-801043e0 initlock
-8010619b vector128
-80107050 copyout
-80105ff4 vector81
-80103f20 sleep
+80106540 sys_set_burst_time
+80104fc0 initlock
+80106f5b vector128
+80107e10 copyout
+80106db4 vector81
+80104720 sleep
+80104bd0 get_burst_time
 801028e0 microdelay
-80105d96 vector13
-80105ee6 vector51
-80105dad vector16
-8010ff20 input
-801066db vector240
-80105f01 vector54
-80105dc6 vector19
-80106057 vector92
-8010670b vector244
+80106b56 vector13
+80106ca6 vector51
+80106b6d vector16
+80110f40 input
+8010749b vector240
+80106cc1 vector54
+80106b86 vector19
+80106e17 vector92
+8010b5b8 base_process_pid
+801074cb vector244
 80101a30 stati
-8010622b vector140
-801056e0 sys_kill
-80105eb0 vector45
-80105fe2 vector79
+80106feb vector140
+801062c0 sys_kill
+80106c70 vector45
+80106da2 vector79
 80103500 pipeclose
-80106657 vector229
-80106303 vector158
-80104e40 sys_fstat
+80107417 vector229
+801070c3 vector158
+80105a20 sys_fstat
 80100640 consolewrite
-80105e7a vector39
-8010637b vector168
+80106c3a vector39
+8010713b vector168
 80102da0 end_op
-80105e56 vector35
-80106114 vector113
+80106c16 vector35
+80106ed4 vector113
 80102510 freerange
-80106180 vector125
-80106c70 allocuvm
-80105886 trapret
-801065bb vector216
-80105f52 vector63
-80105e05 vector26
-801064a7 vector193
+80113860 rqueue
+80106f40 vector125
+80107a30 allocuvm
+8010658f trapret
+8010737b vector216
+80106d12 vector63
+80106bc5 vector26
+80107267 vector193
 801027a0 lapicinit
-801064cb vector196
-80106567 vector209
-80105d4d vector4
-80106393 vector170
-8010a5c0 stack
-801061fb vector136
-80105d81 vector10
-80106543 vector206
+8010728b vector196
+80107327 vector209
+80106b0d vector4
+80107153 vector170
+8010b5e0 stack
+80106fbb vector136
+80106b41 vector10
+80107303 vector206
 80101840 iunlock
-80105790 sys_sleep
-8010678f vector255
-80106417 vector181
-80105f2e vector59
-80106018 vector85
-8010600f vector84
-8010642f vector183
-8010630f vector159
-8010658b vector212
-80104e90 sys_link
-80105ec2 vector47
-8010664b vector228
-80105e95 vector42
-8010611d vector114
-80107010 uva2ka
-801063cf vector175
-8010624f vector143
+80106370 sys_sleep
+8010754f vector255
+801071d7 vector181
+80106cee vector59
+80106dd8 vector85
+80106dcf vector84
+801071ef vector183
+801070cf vector159
+8010734b vector212
+80105a70 sys_link
+80106c82 vector47
+8010740b vector228
+80106c55 vector42
+80106edd vector114
+80107dd0 uva2ka
+8010718f vector175
+8010700f vector143
 80100e00 filealloc
-801040e0 wakeup
-801061b3 vector130
-80106723 vector246
-80105d78 vector9
-80106243 vector142
-8010609f vector100
-80106507 vector201
-80106ef0 clearpteu
-80103960 myproc
-801058a0 tvinit
-80105f37 vector60
-80105dea vector23
+801048e0 wakeup
+80106f73 vector130
+801074e3 vector246
+80106b38 vector9
+80107003 vector142
+80106e5f vector100
+801072c7 vector201
+80107cb0 clearpteu
+80104070 myproc
+801065a0 tvinit
+80106530 sys_get_burst_time
+80106cf7 vector60
+80106baa vector23
 80101730 idup
-801066ab vector236
+8010746b vector236
 80102780 kbdintr
-801051c0 sys_open
-8010666f vector231
-80105f6d vector66
-80105e20 vector29
+80105da0 sys_open
+8010742f vector231
+80106d2d vector66
+80106be0 vector29
 80101a60 readi
-801061ef vector135
+80106faf vector135
 80100860 consoleintr
-80104140 kill
-80105fd0 vector77
+80104920 kill
+80106d90 vector77
 801015e0 ialloc
-8010640b vector180
-801154a4 kpgdir
-8010655b vector208
+801071cb vector180
+80116304 kpgdir
+8010731b vector208
 80102990 cmostime
-80105d10 uartintr
-8010608d vector98
-80106084 vector97
-801063db vector176
-801064b3 vector194
-80105e3b vector32
-801154a8 end
-801064ef vector199
-801061bf vector131
-8010676b vector252
+80106ad0 uartintr
+80106e4d vector98
+80106e44 vector97
+8010719b vector176
+80107273 vector194
+80106bfb vector32
+80106520 sys_getProcInfo
+80116308 end
+801072af vector199
+80106f7f vector131
+8010752b vector252
 80101090 filewrite
-80105d29 vector0
-80104950 argint
+80106ae9 vector0
+80105530 argint
+80103c00 insert_rqueue_sorted
 80100a80 exec
-80106267 vector145
-80104d80 sys_write
-80104620 release
-801048f0 fetchstr
-801060de vector107
-80105e83 vector40
-80103fe0 wait
-801060b1 vector102
-80109000 entrypgdir
+80107027 vector145
+80105960 sys_write
+80105200 release
+801054d0 fetchstr
+80106e9e vector107
+80106c43 vector40
+801047e0 wait
+80106e71 vector102
+8010a000 entrypgdir
 0010000c _start
-80105f13 vector56
-80105f7f vector68
-80105d5f vector6
-8010a48c _binary_initcode_end
+80106cd3 vector56
+80106d3f vector68
+80106b1f vector6
+8010b48c _binary_initcode_end
 80100000 multiboot_header
-801061a7 vector129
-80103c30 scheduler
+80106f67 vector129
+801043b0 scheduler
 80101cb0 dirlookup
-801064d7 vector197
+80107297 vector197
 80100ec0 fileclose
 80102d30 begin_op
-801062bb vector152
-80106ed0 kvmalloc
-80106663 vector230
-80104780 strncmp
-80105e68 vector37
-80106537 vector205
-80106327 vector161
-80114c60 tickslock
+8010707b vector152
+80107c90 kvmalloc
+80107423 vector230
+80105360 strncmp
+80106c28 vector37
+801072f7 vector205
+801070e7 vector161
+80115ac0 tickslock
 801035a0 pipewrite
-801047d0 strncpy
-80105f9a vector71
-80106f20 copyuvm
-8010ffc0 ftable
-8010631b vector160
-801049a0 argptr
-801065af vector215
-801062f7 vector157
-80104ca0 sys_dup
-8010610b vector112
+801053b0 strncpy
+80106d5a vector71
+80107ce0 copyuvm
+80110fe0 ftable
+801070db vector160
+80105580 argptr
+8010736f vector215
+801070b7 vector157
+80105880 sys_dup
+80106ecb vector112
 80100390 panic
-80103860 forkret
-80106423 vector182
-80105d8f vector12
-801046c0 memcmp
+80103880 forkret
+801071e3 vector182
+80106b4f vector12
+801052a0 memcmp
 801026a0 kbdgetc
-801060f0 vector109
-80105dcf vector20
-80103b10 fork
-80105ef8 vector53
-80105dbd vector18
+80106eb0 vector109
+80106b8f vector20
+80104270 fork
+80106cb8 vector53
+80106b7d vector18
 0000008a _binary_entryother_size
-80112780 cpus
-80104340 releasesleep
-80106072 vector95
-80104510 holding
-801109c0 sb
-80104560 acquire
-80106633 vector226
+801137a0 cpus
+80104f20 releasesleep
+80106e32 vector95
+801050f0 holding
+801119e0 sb
+80105140 acquire
+801073f3 vector226
 80102050 nameiparent
-80105ed4 vector49
-80105ea7 vector44
-8011267c lapic
-80105fd9 vector78
-8010586e alltraps
-801063b7 vector173
-80106138 vector117
-80105ffd vector82
-80106603 vector222
-80105d71 vector8
-80106297 vector149
+80106c94 vector49
+80106c67 vector44
+8011369c lapic
+80106d99 vector78
+80106577 alltraps
+80107177 vector173
+80106ef8 vector117
+80106dbd vector82
+801073c3 vector222
+80106500 sys_getNumProc
+80106b31 vector8
+80107057 vector149
 801016a0 iupdate
-80108000 data
-80104670 memset
-8010667b vector232
+80109000 data
+80105250 memset
+8010743b vector232
 80103040 main
-801069f0 switchkvm
-801060d5 vector106
-801065eb vector220
-80106045 vector90
-8010633f vector163
-80106693 vector234
+801077b0 switchkvm
+80106e95 vector106
+801073ab vector220
+80106e05 vector90
+801070ff vector163
+80107453 vector234
 80102f10 log_write
-801042e0 acquiresleep
-80104fe0 sys_unlink
-80105f49 vector62
-80105dfc vector25
-801064e3 vector198
-80106153 vector120
-8010a48c _binary_entryother_start
+80104ec0 acquiresleep
+80105bc0 sys_unlink
+80106d09 vector62
+80106bbc vector25
+801072a3 vector198
+80104c00 set_burst_time
+80106f13 vector120
+8010b48c _binary_entryother_start
+80103990 insert_rqueue
 80102560 kinit1
-80105edd vector50
-80105da4 vector15
-801062af vector151
-80106006 vector83
-8010603c vector89
-80106033 vector88
-80105950 trap
-80105840 sys_uptime
-801063ff vector179
-80105e4d vector34
-80105eb9 vector46
-801061e3 vector134
-8010660f vector223
-80114ca0 idt
-801065d3 vector218
-801038b0 pinit
-80106da0 deallocuvm
-80106627 vector225
+80106c9d vector50
+80106b64 vector15
+8010706f vector151
+80106dc6 vector83
+80106dfc vector89
+80106df3 vector88
+80106650 trap
+80106420 sys_uptime
+801071bf vector179
+80106c0d vector34
+80106c79 vector46
+80106fa3 vector134
+801073cf vector223
+80115b00 idt
+80107393 vector218
+80103fd0 pinit
+80106450 sys_wolfie
+80107b60 deallocuvm
+801073e7 vector225
 801028a0 lapicid
-8010645f vector187
-80103a90 growproc
-80104380 holdingsleep
-80112d00 ncpu
-80105e29 vector30
-80103990 userinit
+8010721f vector187
+801041f0 growproc
+80104f60 holdingsleep
+80104b20 getMaxPid
+80113850 ncpu
+80106be9 vector30
+801040a0 userinit
 801000d0 bread
-80106192 vector127
+80106f52 vector127
 801036a0 piperead
-801154a0 ticks
-8010649b vector192
-80106363 vector166
+80116300 ticks
+8010725b vector192
+80107123 vector166
 80100a30 consoleinit
-80105fc7 vector76
-80105fbe vector75
+80106d87 vector76
+80106d7e vector75
 801021e0 ideintr
-801064bf vector195
-801062a3 vector150
-80105f25 vector58
-8010673b vector248
-8010616e vector123
-8010607b vector96
-80105e32 vector31
-8010651f vector203
-8010621f vector139
-801062c7 vector153
-8010634b vector164
-801041d0 procdump
-8010615c vector121
-80105ce0 uartputc
-80105d56 vector5
-8010636f vector167
-801062df vector155
-80106747 vector249
+8010727f vector195
+80107063 vector150
+80106ce5 vector58
+801074fb vector248
+80106f2e vector123
+80106e3b vector96
+80106bf2 vector31
+801072df vector203
+80106fdf vector139
+80107087 vector153
+8010710b vector164
+801049f0 procdump
+80106f1c vector121
+80106aa0 uartputc
+80106b16 vector5
+8010712f vector167
+801038d0 enqueue
+8010709f vector155
+80104ad0 getNumProc
+80107507 vector249
 801001f0 brelse
-80106753 vector250
-80106177 vector124
-801060f9 vector110
-8010652b vector204
+80104b70 getProcInfo
+80107513 vector250
+80106f37 vector124
+80106eb9 vector110
+801072eb vector204
 80101760 ilock
-801054c0 sys_exec
-80106207 vector137
-8010a460 _binary_initcode_start
-80104893 swtch
-8010672f vector247
-80105de1 vector22
-80106513 vector202
-80106960 seginit
+801060a0 sys_exec
+80103920 dequeue
+80106fc7 vector137
+8010b460 _binary_initcode_start
+80105473 swtch
+801074ef vector247
+80106ba1 vector22
+801072d3 vector202
+80107720 seginit
 80101a00 iunlockput
-80105fa3 vector72
-80105f0a vector55
-80106189 vector126
-80105f64 vector65
-80105e17 vector28
-8010a516 _binary_entryother_end
-80106387 vector169
+80106d63 vector72
+80106cca vector55
+80106f49 vector126
+80106d24 vector65
+80106bd7 vector28
+8010b516 _binary_entryother_end
+80107147 vector169
 801001b0 bwrite
-80106687 vector233
-80105920 idtinit
-80103d90 exit
-801056d0 sys_wait
-801056b0 sys_exit
+80107447 vector233
+80106620 idtinit
+80104590 exit
+801062b0 sys_wait
+80106290 sys_exit
 80101f70 dirlink
 0000002c _binary_initcode_size
-8010627f vector147
-801042a0 initsleeplock
+8010703f vector147
+80104e80 initsleeplock
 80102150 ideinit
-80106ba0 loaduvm
-801060c3 vector104
-8010612f vector116
-80112d20 ptable
+80107960 loaduvm
+80106e83 vector104
+80106eef vector116
+80113980 ptable
 80102430 ioapicenable
-801044b0 popcli
-8010a008 vectors
-80105eef vector52
-80105db6 vector17
-8010643b vector184
-80104870 strlen
-801055c0 sys_pipe
+80105090 popcli
+8010b008 vectors
+80106caf vector52
+80106b76 vector17
+801071fb vector184
+80105450 strlen
+801061a0 sys_pipe
 80101540 iinit
 801033d0 picinit
-8010654f vector207
-80106b20 inituvm
-80106483 vector190
-801066cf vector239
-80106069 vector94
-80106060 vector93
+8010730f vector207
+801078e0 inituvm
+80107243 vector190
+8010748f vector239
+80106e29 vector94
+80106e20 vector93
 80102c90 initlog
-8010646b vector188
-80105ecb vector48
+8010722b vector188
+80106c8b vector48
 80102280 iderw
-801065df vector219
-8010628b vector148
-801065f7 vector221
+8010739f vector219
+8010704b vector148
+801073b7 vector221
 80102630 kalloc
-80110960 devsw
-80105720 sys_getpid
-80105feb vector80
-8010639f vector171
-801062d3 vector154
-80105e5f vector36
+80111980 devsw
+80106300 sys_getpid
+80106dab vector80
+8010715f vector171
+80107093 vector154
+80106c1f vector36
 801033f0 pipealloc
-8010669f vector235
-801060cc vector105
-80105410 sys_chdir
-801109e0 icache
-80106273 vector146
-8010648f vector191
-801060ba vector103
-80105370 sys_mknod
+8010745f vector235
+80106e8c vector105
+80105ff0 sys_chdir
+80111a00 icache
+80107033 vector146
+8010724f vector191
+8010b5bc base_process
+80106e7a vector103
+80105f50 sys_mknod
 801028f0 lapicstartap
-80106a10 switchuvm
-80104460 pushcli
+801077d0 switchuvm
+80105040 pushcli
 801025d0 kinit2
-80105d88 vector11
-80105d9d vector14
+80106b48 vector11
+80106b5d vector14
 80100fa0 filestat
Binary files xv6-public/_kill and xv6-public-hybrid/_kill differ
diff -u xv6-public/kill.asm xv6-public-hybrid/kill.asm
--- xv6-public/kill.asm	2022-10-07 20:01:01.182029217 +0530
+++ xv6-public-hybrid/kill.asm	2022-10-07 18:39:47.152680000 +0530
@@ -52,9 +52,9 @@
     printf(2, "usage: kill pid...\n");
   51:	50                   	push   %eax
   52:	50                   	push   %eax
-  53:	68 98 07 00 00       	push   $0x798
+  53:	68 c8 07 00 00       	push   $0x7c8
   58:	6a 02                	push   $0x2
-  5a:	e8 d1 03 00 00       	call   430 <printf>
+  5a:	e8 01 04 00 00       	call   460 <printf>
     exit();
   5f:	e8 6f 02 00 00       	call   2d3 <exit>
   64:	66 90                	xchg   %ax,%ax
@@ -590,609 +590,645 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <wolfie>:
+SYSCALL(wolfie)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getNumProc>:
+SYSCALL(getNumProc)
+ 37b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 383:	b8 17 00 00 00       	mov    $0x17,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 38b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 393:	b8 19 00 00 00       	mov    $0x19,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+ 3a3:	66 90                	xchg   %ax,%ax
+ 3a5:	66 90                	xchg   %ax,%ax
+ 3a7:	66 90                	xchg   %ax,%ax
+ 3a9:	66 90                	xchg   %ax,%ax
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 3bc:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3d6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 b4 07 00 00 	movzbl 0x7b4(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 40f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ee fe ff ff       	call   2f3 <write>
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 be fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
     putc(fd, buf[i]);
 }
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
 
-00000430 <printf>:
+00000460 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	f3 0f 1e fb          	endbr32 
- 434:	55                   	push   %ebp
- 435:	89 e5                	mov    %esp,%ebp
- 437:	57                   	push   %edi
- 438:	56                   	push   %esi
- 439:	53                   	push   %ebx
- 43a:	83 ec 2c             	sub    $0x2c,%esp
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 43d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 440:	0f b6 1e             	movzbl (%esi),%ebx
- 443:	84 db                	test   %bl,%bl
- 445:	0f 84 b4 00 00 00    	je     4ff <printf+0xcf>
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 44b:	8d 45 10             	lea    0x10(%ebp),%eax
- 44e:	83 c6 01             	add    $0x1,%esi
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 451:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 454:	31 d2                	xor    %edx,%edx
+ 484:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 456:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 459:	eb 33                	jmp    48e <printf+0x5e>
- 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 45f:	90                   	nop
- 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	ba 25 00 00 00       	mov    $0x25,%edx
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 17                	je     484 <printf+0x54>
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	ff 75 08             	pushl  0x8(%ebp)
- 479:	e8 75 fe ff ff       	call   2f3 <write>
- 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 45 fe ff ff       	call   2f3 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 481:	83 c4 10             	add    $0x10,%esp
+ 4b1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 484:	0f b6 1e             	movzbl (%esi),%ebx
- 487:	83 c6 01             	add    $0x1,%esi
- 48a:	84 db                	test   %bl,%bl
- 48c:	74 71                	je     4ff <printf+0xcf>
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
     c = fmt[i] & 0xff;
- 48e:	0f be cb             	movsbl %bl,%ecx
- 491:	0f b6 c3             	movzbl %bl,%eax
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 494:	85 d2                	test   %edx,%edx
- 496:	74 c8                	je     460 <printf+0x30>
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
       }
     } else if(state == '%'){
- 498:	83 fa 25             	cmp    $0x25,%edx
- 49b:	75 e7                	jne    484 <printf+0x54>
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
       if(c == 'd'){
- 49d:	83 f8 64             	cmp    $0x64,%eax
- 4a0:	0f 84 9a 00 00 00    	je     540 <printf+0x110>
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4ac:	83 f9 70             	cmp    $0x70,%ecx
- 4af:	74 5f                	je     510 <printf+0xe0>
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4b1:	83 f8 73             	cmp    $0x73,%eax
- 4b4:	0f 84 d6 00 00 00    	je     590 <printf+0x160>
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ba:	83 f8 63             	cmp    $0x63,%eax
- 4bd:	0f 84 8d 00 00 00    	je     550 <printf+0x120>
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4c3:	83 f8 25             	cmp    $0x25,%eax
- 4c6:	0f 84 b4 00 00 00    	je     580 <printf+0x150>
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
   write(fd, &c, 1);
- 4cc:	83 ec 04             	sub    $0x4,%esp
- 4cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4d3:	6a 01                	push   $0x1
- 4d5:	57                   	push   %edi
- 4d6:	ff 75 08             	pushl  0x8(%ebp)
- 4d9:	e8 15 fe ff ff       	call   2f3 <write>
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 e5 fd ff ff       	call   2f3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4e1:	83 c4 0c             	add    $0xc,%esp
- 4e4:	6a 01                	push   $0x1
- 4e6:	83 c6 01             	add    $0x1,%esi
- 4e9:	57                   	push   %edi
- 4ea:	ff 75 08             	pushl  0x8(%ebp)
- 4ed:	e8 01 fe ff ff       	call   2f3 <write>
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 d1 fd ff ff       	call   2f3 <write>
   for(i = 0; fmt[i]; i++){
- 4f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4f6:	83 c4 10             	add    $0x10,%esp
+ 526:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4f9:	31 d2                	xor    %edx,%edx
+ 529:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4fb:	84 db                	test   %bl,%bl
- 4fd:	75 8f                	jne    48e <printf+0x5e>
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
     }
   }
 }
- 4ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 502:	5b                   	pop    %ebx
- 503:	5e                   	pop    %esi
- 504:	5f                   	pop    %edi
- 505:	5d                   	pop    %ebp
- 506:	c3                   	ret    
- 507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 50e:	66 90                	xchg   %ax,%ax
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 510:	83 ec 0c             	sub    $0xc,%esp
- 513:	b9 10 00 00 00       	mov    $0x10,%ecx
- 518:	6a 00                	push   $0x0
- 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 51d:	8b 45 08             	mov    0x8(%ebp),%eax
- 520:	8b 13                	mov    (%ebx),%edx
- 522:	e8 59 fe ff ff       	call   380 <printint>
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
         ap++;
- 527:	89 d8                	mov    %ebx,%eax
- 529:	83 c4 10             	add    $0x10,%esp
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52c:	31 d2                	xor    %edx,%edx
+ 55c:	31 d2                	xor    %edx,%edx
         ap++;
- 52e:	83 c0 04             	add    $0x4,%eax
- 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
- 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 548:	6a 01                	push   $0x1
- 54a:	eb ce                	jmp    51a <printf+0xea>
- 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 553:	83 ec 04             	sub    $0x4,%esp
+ 583:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 556:	8b 03                	mov    (%ebx),%eax
+ 586:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 558:	6a 01                	push   $0x1
+ 588:	6a 01                	push   $0x1
         ap++;
- 55a:	83 c3 04             	add    $0x4,%ebx
+ 58a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 55d:	57                   	push   %edi
- 55e:	ff 75 08             	pushl  0x8(%ebp)
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 564:	e8 8a fd ff ff       	call   2f3 <write>
+ 594:	e8 5a fd ff ff       	call   2f3 <write>
         ap++;
- 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 56c:	83 c4 10             	add    $0x10,%esp
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 56f:	31 d2                	xor    %edx,%edx
- 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
- 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
- 586:	e9 59 ff ff ff       	jmp    4e4 <printf+0xb4>
- 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 58f:	90                   	nop
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
         s = (char*)*ap;
- 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 593:	8b 18                	mov    (%eax),%ebx
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 595:	83 c0 04             	add    $0x4,%eax
- 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 59b:	85 db                	test   %ebx,%ebx
- 59d:	74 17                	je     5b6 <printf+0x186>
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
         while(*s != 0){
- 59f:	0f b6 03             	movzbl (%ebx),%eax
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5a2:	31 d2                	xor    %edx,%edx
+ 5d2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5a4:	84 c0                	test   %al,%al
- 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
- 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5af:	89 de                	mov    %ebx,%esi
- 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
           s = "(null)";
- 5b6:	bb ac 07 00 00       	mov    $0x7ac,%ebx
+ 5e6:	bb dc 07 00 00       	mov    $0x7dc,%ebx
         while(*s != 0){
- 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5be:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c3:	89 de                	mov    %ebx,%esi
- 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5cf:	90                   	nop
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
   write(fd, &c, 1);
- 5d0:	83 ec 04             	sub    $0x4,%esp
+ 600:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5d3:	83 c6 01             	add    $0x1,%esi
- 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5d9:	6a 01                	push   $0x1
- 5db:	57                   	push   %edi
- 5dc:	53                   	push   %ebx
- 5dd:	e8 11 fd ff ff       	call   2f3 <write>
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 e1 fc ff ff       	call   2f3 <write>
         while(*s != 0){
- 5e2:	0f b6 06             	movzbl (%esi),%eax
- 5e5:	83 c4 10             	add    $0x10,%esp
- 5e8:	84 c0                	test   %al,%al
- 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
- 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ef:	31 d2                	xor    %edx,%edx
- 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
- 5f6:	66 90                	xchg   %ax,%ax
- 5f8:	66 90                	xchg   %ax,%ax
- 5fa:	66 90                	xchg   %ax,%ax
- 5fc:	66 90                	xchg   %ax,%ax
- 5fe:	66 90                	xchg   %ax,%ax
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
 
-00000600 <free>:
+00000630 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 600:	f3 0f 1e fb          	endbr32 
- 604:	55                   	push   %ebp
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 605:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 635:	a1 94 0a 00 00       	mov    0xa94,%eax
 {
- 60a:	89 e5                	mov    %esp,%ebp
- 60c:	57                   	push   %edi
- 60d:	56                   	push   %esi
- 60e:	53                   	push   %ebx
- 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 612:	8b 10                	mov    (%eax),%edx
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 614:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 617:	39 c8                	cmp    %ecx,%eax
- 619:	73 15                	jae    630 <free+0x30>
- 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 61f:	90                   	nop
- 620:	39 d1                	cmp    %edx,%ecx
- 622:	72 14                	jb     638 <free+0x38>
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 624:	39 d0                	cmp    %edx,%eax
- 626:	73 10                	jae    638 <free+0x38>
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
 {
- 628:	89 d0                	mov    %edx,%eax
+ 658:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 62a:	8b 10                	mov    (%eax),%edx
- 62c:	39 c8                	cmp    %ecx,%eax
- 62e:	72 f0                	jb     620 <free+0x20>
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 630:	39 d0                	cmp    %edx,%eax
- 632:	72 f4                	jb     628 <free+0x28>
- 634:	39 d1                	cmp    %edx,%ecx
- 636:	73 f0                	jae    628 <free+0x28>
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63e:	39 fa                	cmp    %edi,%edx
- 640:	74 1e                	je     660 <free+0x60>
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 50 04             	mov    0x4(%eax),%edx
- 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 64b:	39 f1                	cmp    %esi,%ecx
- 64d:	74 28                	je     677 <free+0x77>
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 64f:	89 08                	mov    %ecx,(%eax)
+ 67f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 651:	5b                   	pop    %ebx
+ 681:	5b                   	pop    %ebx
   freep = p;
- 652:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 682:	a3 94 0a 00 00       	mov    %eax,0xa94
 }
- 657:	5e                   	pop    %esi
- 658:	5f                   	pop    %edi
- 659:	5d                   	pop    %ebp
- 65a:	c3                   	ret    
- 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 660:	03 72 04             	add    0x4(%edx),%esi
- 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 666:	8b 10                	mov    (%eax),%edx
- 668:	8b 12                	mov    (%edx),%edx
- 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 66d:	8b 50 04             	mov    0x4(%eax),%edx
- 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 673:	39 f1                	cmp    %esi,%ecx
- 675:	75 d8                	jne    64f <free+0x4f>
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
     p->s.size += bp->s.size;
- 677:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 67a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 6aa:	a3 94 0a 00 00       	mov    %eax,0xa94
     p->s.size += bp->s.size;
- 67f:	89 50 04             	mov    %edx,0x4(%eax)
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 685:	89 10                	mov    %edx,(%eax)
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
 }
- 687:	5b                   	pop    %ebx
- 688:	5e                   	pop    %esi
- 689:	5f                   	pop    %edi
- 68a:	5d                   	pop    %ebp
- 68b:	c3                   	ret    
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000690 <malloc>:
+000006c0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 690:	f3 0f 1e fb          	endbr32 
- 694:	55                   	push   %ebp
- 695:	89 e5                	mov    %esp,%ebp
- 697:	57                   	push   %edi
- 698:	56                   	push   %esi
- 699:	53                   	push   %ebx
- 69a:	83 ec 1c             	sub    $0x1c,%esp
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 69d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6a0:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6d0:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a6:	8d 70 07             	lea    0x7(%eax),%esi
- 6a9:	c1 ee 03             	shr    $0x3,%esi
- 6ac:	83 c6 01             	add    $0x1,%esi
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6af:	85 ff                	test   %edi,%edi
- 6b1:	0f 84 a9 00 00 00    	je     760 <malloc+0xd0>
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b7:	8b 07                	mov    (%edi),%eax
+ 6e7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6b9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6bc:	39 f1                	cmp    %esi,%ecx
- 6be:	73 6d                	jae    72d <malloc+0x9d>
- 6c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6cb:	0f 43 de             	cmovae %esi,%ebx
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6d8:	eb 17                	jmp    6f1 <malloc+0x61>
- 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e0:	8b 10                	mov    (%eax),%edx
+ 710:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6e5:	39 f1                	cmp    %esi,%ecx
- 6e7:	73 4f                	jae    738 <malloc+0xa8>
- 6e9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 6ef:	89 d0                	mov    %edx,%eax
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 71f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6f1:	39 c7                	cmp    %eax,%edi
- 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6f5:	83 ec 0c             	sub    $0xc,%esp
- 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6fb:	e8 5b fc ff ff       	call   35b <sbrk>
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 2b fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 700:	83 c4 10             	add    $0x10,%esp
- 703:	83 f8 ff             	cmp    $0xffffffff,%eax
- 706:	74 1b                	je     723 <malloc+0x93>
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
   hp->s.size = nu;
- 708:	89 58 04             	mov    %ebx,0x4(%eax)
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 70b:	83 ec 0c             	sub    $0xc,%esp
- 70e:	83 c0 08             	add    $0x8,%eax
- 711:	50                   	push   %eax
- 712:	e8 e9 fe ff ff       	call   600 <free>
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
   return freep;
- 717:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 747:	a1 94 0a 00 00       	mov    0xa94,%eax
       if((p = morecore(nunits)) == 0)
- 71c:	83 c4 10             	add    $0x10,%esp
- 71f:	85 c0                	test   %eax,%eax
- 721:	75 bd                	jne    6e0 <malloc+0x50>
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
         return 0;
   }
 }
- 723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 726:	31 c0                	xor    %eax,%eax
+ 756:	31 c0                	xor    %eax,%eax
 }
- 728:	5b                   	pop    %ebx
- 729:	5e                   	pop    %esi
- 72a:	5f                   	pop    %edi
- 72b:	5d                   	pop    %ebp
- 72c:	c3                   	ret    
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
     if(p->s.size >= nunits){
- 72d:	89 c2                	mov    %eax,%edx
- 72f:	89 f8                	mov    %edi,%eax
- 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 738:	39 ce                	cmp    %ecx,%esi
- 73a:	74 54                	je     790 <malloc+0x100>
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
         p->s.size -= nunits;
- 73c:	29 f1                	sub    %esi,%ecx
- 73e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 741:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 744:	89 72 04             	mov    %esi,0x4(%edx)
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 747:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 777:	a3 94 0a 00 00       	mov    %eax,0xa94
 }
- 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 74f:	8d 42 08             	lea    0x8(%edx),%eax
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 752:	5b                   	pop    %ebx
- 753:	5e                   	pop    %esi
- 754:	5f                   	pop    %edi
- 755:	5d                   	pop    %ebp
- 756:	c3                   	ret    
- 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 75e:	66 90                	xchg   %ax,%ax
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 760:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 767:	0a 00 00 
+ 790:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
+ 797:	0a 00 00 
     base.s.size = 0;
- 76a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 79a:	bf 98 0a 00 00       	mov    $0xa98,%edi
     base.s.ptr = freep = prevp = &base;
- 76f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 776:	0a 00 00 
+ 79f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
+ 7a6:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 779:	89 f8                	mov    %edi,%eax
+ 7a9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 77b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 782:	00 00 00 
+ 7ab:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
+ 7b2:	00 00 00 
     if(p->s.size >= nunits){
- 785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
- 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 790:	8b 0a                	mov    (%edx),%ecx
- 792:	89 08                	mov    %ecx,(%eax)
- 794:	eb b1                	jmp    747 <malloc+0xb7>
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
Binary files xv6-public/kill.o and xv6-public-hybrid/kill.o differ
diff -u xv6-public/kill.sym xv6-public-hybrid/kill.sym
--- xv6-public/kill.sym	2022-10-07 20:01:01.198031371 +0530
+++ xv6-public-hybrid/kill.sym	2022-10-07 18:39:47.152680000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000798 .rodata
-000007c8 .eh_frame
-00000a64 .bss
+000007c8 .rodata
+000007f8 .eh_frame
+00000a94 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007b4 digits.1085
+000003b0 printint
+000007e4 digits.1100
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a94 freep
+00000a98 base
 00000070 strcpy
-00000430 printf
+00000460 printf
 000002a0 memmove
 0000031b mknod
+00000373 wolfie
 00000190 gets
 00000353 getpid
-00000690 malloc
+000006c0 malloc
 00000363 sleep
+00000393 get_burst_time
 000002e3 pipe
 000002f3 write
 0000032b fstat
@@ -38,14 +40,18 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000a64 __bss_start
+00000a94 __bss_start
 00000130 memset
 00000000 main
+0000039b set_burst_time
 000000a0 strcmp
 0000034b dup
+00000383 getMaxPid
+0000037b getNumProc
+0000038b getProcInfo
 00000210 stat
-00000a64 _edata
-00000a70 _end
+00000a94 _edata
+00000aa0 _end
 00000333 link
 000002d3 exit
 00000260 atoi
@@ -54,4 +60,4 @@
 00000150 strchr
 0000033b mkdir
 000002fb close
-00000600 free
+00000630 free
Binary files xv6-public/lapic.o and xv6-public-hybrid/lapic.o differ
Binary files xv6-public/_ln and xv6-public-hybrid/_ln differ
diff -u xv6-public/ln.asm xv6-public-hybrid/ln.asm
--- xv6-public/ln.asm	2022-10-07 20:01:01.262039989 +0530
+++ xv6-public-hybrid/ln.asm	2022-10-07 18:39:47.204704000 +0530
@@ -28,9 +28,9 @@
     printf(2, "Usage: ln old new\n");
   1b:	52                   	push   %edx
   1c:	52                   	push   %edx
-  1d:	68 88 07 00 00       	push   $0x788
+  1d:	68 b8 07 00 00       	push   $0x7b8
   22:	6a 02                	push   $0x2
-  24:	e8 f7 03 00 00       	call   420 <printf>
+  24:	e8 27 04 00 00       	call   450 <printf>
     exit();
   29:	e8 95 02 00 00       	call   2c3 <exit>
   }
@@ -49,9 +49,9 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   47:	ff 73 08             	pushl  0x8(%ebx)
   4a:	ff 73 04             	pushl  0x4(%ebx)
-  4d:	68 9b 07 00 00       	push   $0x79b
+  4d:	68 cb 07 00 00       	push   $0x7cb
   52:	6a 02                	push   $0x2
-  54:	e8 c7 03 00 00       	call   420 <printf>
+  54:	e8 f7 03 00 00       	call   450 <printf>
   59:	83 c4 10             	add    $0x10,%esp
   5c:	eb e4                	jmp    42 <main+0x42>
   5e:	66 90                	xchg   %ax,%ax
@@ -582,609 +582,645 @@
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
 
-00000370 <printint>:
+00000363 <wolfie>:
+SYSCALL(wolfie)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getNumProc>:
+SYSCALL(getNumProc)
+ 36b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 373:	b8 17 00 00 00       	mov    $0x17,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 37b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 383:	b8 19 00 00 00       	mov    $0x19,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	83 ec 3c             	sub    $0x3c,%esp
- 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 37c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 381:	85 d2                	test   %edx,%edx
- 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
- 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38d:	74 79                	je     408 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 396:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 398:	31 db                	xor    %ebx,%ebx
- 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 cf                	mov    %ecx,%edi
- 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3a9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
- 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3b3:	89 d8                	mov    %ebx,%eax
- 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 e8 07 00 00 	movzbl 0x7e8(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3c6:	85 c9                	test   %ecx,%ecx
- 3c8:	74 0c                	je     3d6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3cf:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3dd:	eb 07                	jmp    3e6 <printint+0x76>
- 3df:	90                   	nop
- 3e0:	0f b6 13             	movzbl (%ebx),%edx
- 3e3:	83 eb 01             	sub    $0x1,%ebx
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3e6:	83 ec 04             	sub    $0x4,%esp
- 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3ec:	6a 01                	push   $0x1
- 3ee:	56                   	push   %esi
- 3ef:	57                   	push   %edi
- 3f0:	e8 ee fe ff ff       	call   2e3 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 be fe ff ff       	call   2e3 <write>
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x70>
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
     putc(fd, buf[i]);
 }
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 40f:	eb 87                	jmp    398 <printint+0x28>
- 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000420 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	f3 0f 1e fb          	endbr32 
- 424:	55                   	push   %ebp
- 425:	89 e5                	mov    %esp,%ebp
- 427:	57                   	push   %edi
- 428:	56                   	push   %esi
- 429:	53                   	push   %ebx
- 42a:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 430:	0f b6 1e             	movzbl (%esi),%ebx
- 433:	84 db                	test   %bl,%bl
- 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 43b:	8d 45 10             	lea    0x10(%ebp),%eax
- 43e:	83 c6 01             	add    $0x1,%esi
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 444:	31 d2                	xor    %edx,%edx
+ 474:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 449:	eb 33                	jmp    47e <printf+0x5e>
- 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
- 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 453:	ba 25 00 00 00       	mov    $0x25,%edx
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 458:	83 f8 25             	cmp    $0x25,%eax
- 45b:	74 17                	je     474 <printf+0x54>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
   write(fd, &c, 1);
- 45d:	83 ec 04             	sub    $0x4,%esp
- 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 463:	6a 01                	push   $0x1
- 465:	57                   	push   %edi
- 466:	ff 75 08             	pushl  0x8(%ebp)
- 469:	e8 75 fe ff ff       	call   2e3 <write>
- 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 45 fe ff ff       	call   2e3 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 471:	83 c4 10             	add    $0x10,%esp
+ 4a1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 474:	0f b6 1e             	movzbl (%esi),%ebx
- 477:	83 c6 01             	add    $0x1,%esi
- 47a:	84 db                	test   %bl,%bl
- 47c:	74 71                	je     4ef <printf+0xcf>
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
     c = fmt[i] & 0xff;
- 47e:	0f be cb             	movsbl %bl,%ecx
- 481:	0f b6 c3             	movzbl %bl,%eax
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 484:	85 d2                	test   %edx,%edx
- 486:	74 c8                	je     450 <printf+0x30>
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 488:	83 fa 25             	cmp    $0x25,%edx
- 48b:	75 e7                	jne    474 <printf+0x54>
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
       if(c == 'd'){
- 48d:	83 f8 64             	cmp    $0x64,%eax
- 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 49c:	83 f9 70             	cmp    $0x70,%ecx
- 49f:	74 5f                	je     500 <printf+0xe0>
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4a1:	83 f8 73             	cmp    $0x73,%eax
- 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4aa:	83 f8 63             	cmp    $0x63,%eax
- 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4b3:	83 f8 25             	cmp    $0x25,%eax
- 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
   write(fd, &c, 1);
- 4bc:	83 ec 04             	sub    $0x4,%esp
- 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4c3:	6a 01                	push   $0x1
- 4c5:	57                   	push   %edi
- 4c6:	ff 75 08             	pushl  0x8(%ebp)
- 4c9:	e8 15 fe ff ff       	call   2e3 <write>
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 e5 fd ff ff       	call   2e3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4d1:	83 c4 0c             	add    $0xc,%esp
- 4d4:	6a 01                	push   $0x1
- 4d6:	83 c6 01             	add    $0x1,%esi
- 4d9:	57                   	push   %edi
- 4da:	ff 75 08             	pushl  0x8(%ebp)
- 4dd:	e8 01 fe ff ff       	call   2e3 <write>
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 d1 fd ff ff       	call   2e3 <write>
   for(i = 0; fmt[i]; i++){
- 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4e9:	31 d2                	xor    %edx,%edx
+ 519:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4eb:	84 db                	test   %bl,%bl
- 4ed:	75 8f                	jne    47e <printf+0x5e>
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
     }
   }
 }
- 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4f2:	5b                   	pop    %ebx
- 4f3:	5e                   	pop    %esi
- 4f4:	5f                   	pop    %edi
- 4f5:	5d                   	pop    %ebp
- 4f6:	c3                   	ret    
- 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4fe:	66 90                	xchg   %ax,%ax
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 10 00 00 00       	mov    $0x10,%ecx
- 508:	6a 00                	push   $0x0
- 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 50d:	8b 45 08             	mov    0x8(%ebp),%eax
- 510:	8b 13                	mov    (%ebx),%edx
- 512:	e8 59 fe ff ff       	call   370 <printint>
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
         ap++;
- 517:	89 d8                	mov    %ebx,%eax
- 519:	83 c4 10             	add    $0x10,%esp
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 51c:	31 d2                	xor    %edx,%edx
+ 54c:	31 d2                	xor    %edx,%edx
         ap++;
- 51e:	83 c0 04             	add    $0x4,%eax
- 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
- 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 530:	83 ec 0c             	sub    $0xc,%esp
- 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 538:	6a 01                	push   $0x1
- 53a:	eb ce                	jmp    50a <printf+0xea>
- 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 543:	83 ec 04             	sub    $0x4,%esp
+ 573:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 546:	8b 03                	mov    (%ebx),%eax
+ 576:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 548:	6a 01                	push   $0x1
+ 578:	6a 01                	push   $0x1
         ap++;
- 54a:	83 c3 04             	add    $0x4,%ebx
+ 57a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 54d:	57                   	push   %edi
- 54e:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 554:	e8 8a fd ff ff       	call   2e3 <write>
+ 584:	e8 5a fd ff ff       	call   2e3 <write>
         ap++;
- 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 55c:	83 c4 10             	add    $0x10,%esp
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 55f:	31 d2                	xor    %edx,%edx
- 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
- 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
- 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
         s = (char*)*ap;
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 583:	8b 18                	mov    (%eax),%ebx
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 585:	83 c0 04             	add    $0x4,%eax
- 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 58b:	85 db                	test   %ebx,%ebx
- 58d:	74 17                	je     5a6 <printf+0x186>
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
         while(*s != 0){
- 58f:	0f b6 03             	movzbl (%ebx),%eax
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 592:	31 d2                	xor    %edx,%edx
+ 5c2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 594:	84 c0                	test   %al,%al
- 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
- 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 59f:	89 de                	mov    %ebx,%esi
- 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
           s = "(null)";
- 5a6:	bb af 07 00 00       	mov    $0x7af,%ebx
+ 5d6:	bb df 07 00 00       	mov    $0x7df,%ebx
         while(*s != 0){
- 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 5b3:	89 de                	mov    %ebx,%esi
- 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
   write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5c3:	83 c6 01             	add    $0x1,%esi
- 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5c9:	6a 01                	push   $0x1
- 5cb:	57                   	push   %edi
- 5cc:	53                   	push   %ebx
- 5cd:	e8 11 fd ff ff       	call   2e3 <write>
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 e1 fc ff ff       	call   2e3 <write>
         while(*s != 0){
- 5d2:	0f b6 06             	movzbl (%esi),%eax
- 5d5:	83 c4 10             	add    $0x10,%esp
- 5d8:	84 c0                	test   %al,%al
- 5da:	75 e4                	jne    5c0 <printf+0x1a0>
- 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5df:	31 d2                	xor    %edx,%edx
- 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
- 5e6:	66 90                	xchg   %ax,%ax
- 5e8:	66 90                	xchg   %ax,%ax
- 5ea:	66 90                	xchg   %ax,%ax
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	f3 0f 1e fb          	endbr32 
- 5f4:	55                   	push   %ebp
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f5:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 625:	a1 94 0a 00 00       	mov    0xa94,%eax
 {
- 5fa:	89 e5                	mov    %esp,%ebp
- 5fc:	57                   	push   %edi
- 5fd:	56                   	push   %esi
- 5fe:	53                   	push   %ebx
- 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 602:	8b 10                	mov    (%eax),%edx
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 607:	39 c8                	cmp    %ecx,%eax
- 609:	73 15                	jae    620 <free+0x30>
- 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 60f:	90                   	nop
- 610:	39 d1                	cmp    %edx,%ecx
- 612:	72 14                	jb     628 <free+0x38>
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 614:	39 d0                	cmp    %edx,%eax
- 616:	73 10                	jae    628 <free+0x38>
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
 {
- 618:	89 d0                	mov    %edx,%eax
+ 648:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 61a:	8b 10                	mov    (%eax),%edx
- 61c:	39 c8                	cmp    %ecx,%eax
- 61e:	72 f0                	jb     610 <free+0x20>
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 d0                	cmp    %edx,%eax
- 622:	72 f4                	jb     618 <free+0x28>
- 624:	39 d1                	cmp    %edx,%ecx
- 626:	73 f0                	jae    618 <free+0x28>
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 fa                	cmp    %edi,%edx
- 630:	74 1e                	je     650 <free+0x60>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 635:	8b 50 04             	mov    0x4(%eax),%edx
- 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 63b:	39 f1                	cmp    %esi,%ecx
- 63d:	74 28                	je     667 <free+0x77>
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 63f:	89 08                	mov    %ecx,(%eax)
+ 66f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 641:	5b                   	pop    %ebx
+ 671:	5b                   	pop    %ebx
   freep = p;
- 642:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 672:	a3 94 0a 00 00       	mov    %eax,0xa94
 }
- 647:	5e                   	pop    %esi
- 648:	5f                   	pop    %edi
- 649:	5d                   	pop    %ebp
- 64a:	c3                   	ret    
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 650:	03 72 04             	add    0x4(%edx),%esi
- 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 656:	8b 10                	mov    (%eax),%edx
- 658:	8b 12                	mov    (%edx),%edx
- 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65d:	8b 50 04             	mov    0x4(%eax),%edx
- 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 663:	39 f1                	cmp    %esi,%ecx
- 665:	75 d8                	jne    63f <free+0x4f>
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
     p->s.size += bp->s.size;
- 667:	03 53 fc             	add    -0x4(%ebx),%edx
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 66a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 69a:	a3 94 0a 00 00       	mov    %eax,0xa94
     p->s.size += bp->s.size;
- 66f:	89 50 04             	mov    %edx,0x4(%eax)
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 675:	89 10                	mov    %edx,(%eax)
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
 }
- 677:	5b                   	pop    %ebx
- 678:	5e                   	pop    %esi
- 679:	5f                   	pop    %edi
- 67a:	5d                   	pop    %ebp
- 67b:	c3                   	ret    
- 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000680 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	f3 0f 1e fb          	endbr32 
- 684:	55                   	push   %ebp
- 685:	89 e5                	mov    %esp,%ebp
- 687:	57                   	push   %edi
- 688:	56                   	push   %esi
- 689:	53                   	push   %ebx
- 68a:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 690:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6c0:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 696:	8d 70 07             	lea    0x7(%eax),%esi
- 699:	c1 ee 03             	shr    $0x3,%esi
- 69c:	83 c6 01             	add    $0x1,%esi
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 69f:	85 ff                	test   %edi,%edi
- 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a7:	8b 07                	mov    (%edi),%eax
+ 6d7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ac:	39 f1                	cmp    %esi,%ecx
- 6ae:	73 6d                	jae    71d <malloc+0x9d>
- 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6bb:	0f 43 de             	cmovae %esi,%ebx
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
- 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6d0:	8b 10                	mov    (%eax),%edx
+ 700:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6d5:	39 f1                	cmp    %esi,%ecx
- 6d7:	73 4f                	jae    728 <malloc+0xa8>
- 6d9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 6df:	89 d0                	mov    %edx,%eax
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 70f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6e1:	39 c7                	cmp    %eax,%edi
- 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6e5:	83 ec 0c             	sub    $0xc,%esp
- 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6eb:	e8 5b fc ff ff       	call   34b <sbrk>
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 2b fc ff ff       	call   34b <sbrk>
   if(p == (char*)-1)
- 6f0:	83 c4 10             	add    $0x10,%esp
- 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6f6:	74 1b                	je     713 <malloc+0x93>
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
   hp->s.size = nu;
- 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6fb:	83 ec 0c             	sub    $0xc,%esp
- 6fe:	83 c0 08             	add    $0x8,%eax
- 701:	50                   	push   %eax
- 702:	e8 e9 fe ff ff       	call   5f0 <free>
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
   return freep;
- 707:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 737:	a1 94 0a 00 00       	mov    0xa94,%eax
       if((p = morecore(nunits)) == 0)
- 70c:	83 c4 10             	add    $0x10,%esp
- 70f:	85 c0                	test   %eax,%eax
- 711:	75 bd                	jne    6d0 <malloc+0x50>
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
         return 0;
   }
 }
- 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 716:	31 c0                	xor    %eax,%eax
+ 746:	31 c0                	xor    %eax,%eax
 }
- 718:	5b                   	pop    %ebx
- 719:	5e                   	pop    %esi
- 71a:	5f                   	pop    %edi
- 71b:	5d                   	pop    %ebp
- 71c:	c3                   	ret    
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
     if(p->s.size >= nunits){
- 71d:	89 c2                	mov    %eax,%edx
- 71f:	89 f8                	mov    %edi,%eax
- 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 728:	39 ce                	cmp    %ecx,%esi
- 72a:	74 54                	je     780 <malloc+0x100>
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
         p->s.size -= nunits;
- 72c:	29 f1                	sub    %esi,%ecx
- 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 734:	89 72 04             	mov    %esi,0x4(%edx)
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 737:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 767:	a3 94 0a 00 00       	mov    %eax,0xa94
 }
- 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 73f:	8d 42 08             	lea    0x8(%edx),%eax
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 742:	5b                   	pop    %ebx
- 743:	5e                   	pop    %esi
- 744:	5f                   	pop    %edi
- 745:	5d                   	pop    %ebp
- 746:	c3                   	ret    
- 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 74e:	66 90                	xchg   %ax,%ax
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 750:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 757:	0a 00 00 
+ 780:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
+ 787:	0a 00 00 
     base.s.size = 0;
- 75a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 78a:	bf 98 0a 00 00       	mov    $0xa98,%edi
     base.s.ptr = freep = prevp = &base;
- 75f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 766:	0a 00 00 
+ 78f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
+ 796:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 769:	89 f8                	mov    %edi,%eax
+ 799:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 76b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 772:	00 00 00 
+ 79b:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
+ 7a2:	00 00 00 
     if(p->s.size >= nunits){
- 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
- 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 780:	8b 0a                	mov    (%edx),%ecx
- 782:	89 08                	mov    %ecx,(%eax)
- 784:	eb b1                	jmp    737 <malloc+0xb7>
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
Binary files xv6-public/ln.o and xv6-public-hybrid/ln.o differ
diff -u xv6-public/ln.sym xv6-public-hybrid/ln.sym
--- xv6-public/ln.sym	2022-10-07 20:01:01.274041604 +0530
+++ xv6-public-hybrid/ln.sym	2022-10-07 18:39:47.208706000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000788 .rodata
-000007cc .eh_frame
-00000a64 .bss
+000007b8 .rodata
+000007fc .eh_frame
+00000a94 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000370 printint
-000007b8 digits.1085
+000003a0 printint
+000007e8 digits.1100
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a94 freep
+00000a98 base
 00000060 strcpy
-00000420 printf
+00000450 printf
 00000290 memmove
 0000030b mknod
+00000363 wolfie
 00000180 gets
 00000343 getpid
-00000680 malloc
+000006b0 malloc
 00000353 sleep
+00000383 get_burst_time
 000002d3 pipe
 000002e3 write
 0000031b fstat
@@ -38,14 +40,18 @@
 000002bb fork
 0000034b sbrk
 0000035b uptime
-00000a64 __bss_start
+00000a94 __bss_start
 00000120 memset
 00000000 main
+0000038b set_burst_time
 00000090 strcmp
 0000033b dup
+00000373 getMaxPid
+0000036b getNumProc
+0000037b getProcInfo
 00000200 stat
-00000a64 _edata
-00000a70 _end
+00000a94 _edata
+00000aa0 _end
 00000323 link
 000002c3 exit
 00000250 atoi
@@ -54,4 +60,4 @@
 00000140 strchr
 0000032b mkdir
 000002eb close
-000005f0 free
+00000620 free
Binary files xv6-public/log.o and xv6-public-hybrid/log.o differ
Binary files xv6-public/_ls and xv6-public-hybrid/_ls differ
diff -u xv6-public/ls.asm xv6-public-hybrid/ls.asm
--- xv6-public/ls.asm	2022-10-07 20:01:01.382056145 +0530
+++ xv6-public-hybrid/ls.asm	2022-10-07 18:39:47.268734000 +0530
@@ -49,7 +49,7 @@
   44:	e8 5a 05 00 00       	call   5a3 <exit>
     ls(".");
   49:	83 ec 0c             	sub    $0xc,%esp
-  4c:	68 b0 0a 00 00       	push   $0xab0
+  4c:	68 e0 0a 00 00       	push   $0xae0
   51:	e8 aa 00 00 00       	call   100 <ls>
     exit();
   56:	e8 48 05 00 00       	call   5a3 <exit>
@@ -95,21 +95,21 @@
   ab:	83 c4 0c             	add    $0xc,%esp
   ae:	50                   	push   %eax
   af:	53                   	push   %ebx
-  b0:	68 e4 0d 00 00       	push   $0xde4
+  b0:	68 14 0e 00 00       	push   $0xe14
   b5:	e8 b6 04 00 00       	call   570 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ba:	89 1c 24             	mov    %ebx,(%esp)
   bd:	e8 fe 02 00 00       	call   3c0 <strlen>
   c2:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c5:	bb e4 0d 00 00       	mov    $0xde4,%ebx
+  c5:	bb 14 0e 00 00       	mov    $0xe14,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	89 c6                	mov    %eax,%esi
   cc:	e8 ef 02 00 00       	call   3c0 <strlen>
   d1:	ba 0e 00 00 00       	mov    $0xe,%edx
   d6:	83 c4 0c             	add    $0xc,%esp
   d9:	29 f2                	sub    %esi,%edx
-  db:	05 e4 0d 00 00       	add    $0xde4,%eax
+  db:	05 14 0e 00 00       	add    $0xe14,%eax
   e0:	52                   	push   %edx
   e1:	6a 20                	push   $0x20
   e3:	50                   	push   %eax
@@ -186,9 +186,9 @@
  194:	56                   	push   %esi
  195:	6a 02                	push   $0x2
  197:	50                   	push   %eax
- 198:	68 90 0a 00 00       	push   $0xa90
+ 198:	68 c0 0a 00 00       	push   $0xac0
  19d:	6a 01                	push   $0x1
- 19f:	e8 5c 05 00 00       	call   700 <printf>
+ 19f:	e8 8c 05 00 00       	call   730 <printf>
     break;
  1a4:	83 c4 20             	add    $0x20,%esp
  1a7:	eb ad                	jmp    156 <ls+0x56>
@@ -273,9 +273,9 @@
  29a:	52                   	push   %edx
  29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  2a1:	50                   	push   %eax
- 2a2:	68 90 0a 00 00       	push   $0xa90
+ 2a2:	68 c0 0a 00 00       	push   $0xac0
  2a7:	6a 01                	push   $0x1
- 2a9:	e8 52 04 00 00       	call   700 <printf>
+ 2a9:	e8 82 04 00 00       	call   730 <printf>
  2ae:	83 c4 20             	add    $0x20,%esp
  2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
  2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -283,9 +283,9 @@
     printf(2, "ls: cannot open %s\n", path);
  2c0:	83 ec 04             	sub    $0x4,%esp
  2c3:	57                   	push   %edi
- 2c4:	68 68 0a 00 00       	push   $0xa68
+ 2c4:	68 98 0a 00 00       	push   $0xa98
  2c9:	6a 02                	push   $0x2
- 2cb:	e8 30 04 00 00       	call   700 <printf>
+ 2cb:	e8 60 04 00 00       	call   730 <printf>
     return;
  2d0:	83 c4 10             	add    $0x10,%esp
 }
@@ -299,9 +299,9 @@
  2df:	90                   	nop
       printf(1, "ls: path too long\n");
  2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 9d 0a 00 00       	push   $0xa9d
+ 2e3:	68 cd 0a 00 00       	push   $0xacd
  2e8:	6a 01                	push   $0x1
- 2ea:	e8 11 04 00 00       	call   700 <printf>
+ 2ea:	e8 41 04 00 00       	call   730 <printf>
       break;
  2ef:	83 c4 10             	add    $0x10,%esp
  2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
@@ -310,9 +310,9 @@
     printf(2, "ls: cannot stat %s\n", path);
  300:	83 ec 04             	sub    $0x4,%esp
  303:	57                   	push   %edi
- 304:	68 7c 0a 00 00       	push   $0xa7c
+ 304:	68 ac 0a 00 00       	push   $0xaac
  309:	6a 02                	push   $0x2
- 30b:	e8 f0 03 00 00       	call   700 <printf>
+ 30b:	e8 20 04 00 00       	call   730 <printf>
     close(fd);
  310:	89 1c 24             	mov    %ebx,(%esp)
  313:	e8 b3 02 00 00       	call   5cb <close>
@@ -330,9 +330,9 @@
         printf(1, "ls: cannot stat %s\n", buf);
  328:	83 ec 04             	sub    $0x4,%esp
  32b:	57                   	push   %edi
- 32c:	68 7c 0a 00 00       	push   $0xa7c
+ 32c:	68 ac 0a 00 00       	push   $0xaac
  331:	6a 01                	push   $0x1
- 333:	e8 c8 03 00 00       	call   700 <printf>
+ 333:	e8 f8 03 00 00       	call   730 <printf>
         continue;
  338:	83 c4 10             	add    $0x10,%esp
  33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
@@ -863,609 +863,645 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
- 643:	66 90                	xchg   %ax,%ax
- 645:	66 90                	xchg   %ax,%ax
- 647:	66 90                	xchg   %ax,%ax
- 649:	66 90                	xchg   %ax,%ax
- 64b:	66 90                	xchg   %ax,%ax
- 64d:	66 90                	xchg   %ax,%ax
- 64f:	90                   	nop
 
-00000650 <printint>:
+00000643 <wolfie>:
+SYSCALL(wolfie)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getNumProc>:
+SYSCALL(getNumProc)
+ 64b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 653:	b8 17 00 00 00       	mov    $0x17,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 65b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 663:	b8 19 00 00 00       	mov    $0x19,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 66b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+ 673:	66 90                	xchg   %ax,%ax
+ 675:	66 90                	xchg   %ax,%ax
+ 677:	66 90                	xchg   %ax,%ax
+ 679:	66 90                	xchg   %ax,%ax
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
- 659:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 3c             	sub    $0x3c,%esp
+ 689:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 65c:	89 d1                	mov    %edx,%ecx
+ 68c:	89 d1                	mov    %edx,%ecx
 {
- 65e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 661:	85 d2                	test   %edx,%edx
- 663:	0f 89 7f 00 00 00    	jns    6e8 <printint+0x98>
- 669:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 66d:	74 79                	je     6e8 <printint+0x98>
+ 691:	85 d2                	test   %edx,%edx
+ 693:	0f 89 7f 00 00 00    	jns    718 <printint+0x98>
+ 699:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 69d:	74 79                	je     718 <printint+0x98>
     neg = 1;
- 66f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 69f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 676:	f7 d9                	neg    %ecx
+ 6a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 678:	31 db                	xor    %ebx,%ebx
- 67a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 67d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6a8:	31 db                	xor    %ebx,%ebx
+ 6aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 c8                	mov    %ecx,%eax
- 682:	31 d2                	xor    %edx,%edx
- 684:	89 cf                	mov    %ecx,%edi
- 686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 bc 0a 00 00 	movzbl 0xabc(%edx),%edx
- 690:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 693:	89 d8                	mov    %ebx,%eax
- 695:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 6b0:	89 c8                	mov    %ecx,%eax
+ 6b2:	31 d2                	xor    %edx,%edx
+ 6b4:	89 cf                	mov    %ecx,%edi
+ 6b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6b9:	0f b6 92 ec 0a 00 00 	movzbl 0xaec(%edx),%edx
+ 6c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6c3:	89 d8                	mov    %ebx,%eax
+ 6c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 698:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 69b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 69e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6a1:	76 dd                	jbe    680 <printint+0x30>
+ 6ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6d1:	76 dd                	jbe    6b0 <printint+0x30>
   if(neg)
- 6a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6a6:	85 c9                	test   %ecx,%ecx
- 6a8:	74 0c                	je     6b6 <printint+0x66>
+ 6d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6d6:	85 c9                	test   %ecx,%ecx
+ 6d8:	74 0c                	je     6e6 <printint+0x66>
     buf[i++] = '-';
- 6aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6af:	89 d8                	mov    %ebx,%eax
+ 6df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6bd:	eb 07                	jmp    6c6 <printint+0x76>
- 6bf:	90                   	nop
- 6c0:	0f b6 13             	movzbl (%ebx),%edx
- 6c3:	83 eb 01             	sub    $0x1,%ebx
+ 6e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ed:	eb 07                	jmp    6f6 <printint+0x76>
+ 6ef:	90                   	nop
+ 6f0:	0f b6 13             	movzbl (%ebx),%edx
+ 6f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6c6:	83 ec 04             	sub    $0x4,%esp
- 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6cc:	6a 01                	push   $0x1
- 6ce:	56                   	push   %esi
- 6cf:	57                   	push   %edi
- 6d0:	e8 ee fe ff ff       	call   5c3 <write>
+ 6f6:	83 ec 04             	sub    $0x4,%esp
+ 6f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6fc:	6a 01                	push   $0x1
+ 6fe:	56                   	push   %esi
+ 6ff:	57                   	push   %edi
+ 700:	e8 be fe ff ff       	call   5c3 <write>
   while(--i >= 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	39 de                	cmp    %ebx,%esi
- 6da:	75 e4                	jne    6c0 <printint+0x70>
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	39 de                	cmp    %ebx,%esi
+ 70a:	75 e4                	jne    6f0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6df:	5b                   	pop    %ebx
- 6e0:	5e                   	pop    %esi
- 6e1:	5f                   	pop    %edi
- 6e2:	5d                   	pop    %ebp
- 6e3:	c3                   	ret    
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6ef:	eb 87                	jmp    678 <printint+0x28>
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 718:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 71f:	eb 87                	jmp    6a8 <printint+0x28>
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
 
-00000700 <printf>:
+00000730 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 700:	f3 0f 1e fb          	endbr32 
- 704:	55                   	push   %ebp
- 705:	89 e5                	mov    %esp,%ebp
- 707:	57                   	push   %edi
- 708:	56                   	push   %esi
- 709:	53                   	push   %ebx
- 70a:	83 ec 2c             	sub    $0x2c,%esp
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 70d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 710:	0f b6 1e             	movzbl (%esi),%ebx
- 713:	84 db                	test   %bl,%bl
- 715:	0f 84 b4 00 00 00    	je     7cf <printf+0xcf>
+ 73d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 740:	0f b6 1e             	movzbl (%esi),%ebx
+ 743:	84 db                	test   %bl,%bl
+ 745:	0f 84 b4 00 00 00    	je     7ff <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 71b:	8d 45 10             	lea    0x10(%ebp),%eax
- 71e:	83 c6 01             	add    $0x1,%esi
+ 74b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 74e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 721:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 751:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 724:	31 d2                	xor    %edx,%edx
+ 754:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 726:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 729:	eb 33                	jmp    75e <printf+0x5e>
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
- 730:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 756:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 759:	eb 33                	jmp    78e <printf+0x5e>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 733:	ba 25 00 00 00       	mov    $0x25,%edx
+ 763:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 738:	83 f8 25             	cmp    $0x25,%eax
- 73b:	74 17                	je     754 <printf+0x54>
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	74 17                	je     784 <printf+0x54>
   write(fd, &c, 1);
- 73d:	83 ec 04             	sub    $0x4,%esp
- 740:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 743:	6a 01                	push   $0x1
- 745:	57                   	push   %edi
- 746:	ff 75 08             	pushl  0x8(%ebp)
- 749:	e8 75 fe ff ff       	call   5c3 <write>
- 74e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 76d:	83 ec 04             	sub    $0x4,%esp
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	6a 01                	push   $0x1
+ 775:	57                   	push   %edi
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 45 fe ff ff       	call   5c3 <write>
+ 77e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 751:	83 c4 10             	add    $0x10,%esp
+ 781:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 754:	0f b6 1e             	movzbl (%esi),%ebx
- 757:	83 c6 01             	add    $0x1,%esi
- 75a:	84 db                	test   %bl,%bl
- 75c:	74 71                	je     7cf <printf+0xcf>
+ 784:	0f b6 1e             	movzbl (%esi),%ebx
+ 787:	83 c6 01             	add    $0x1,%esi
+ 78a:	84 db                	test   %bl,%bl
+ 78c:	74 71                	je     7ff <printf+0xcf>
     c = fmt[i] & 0xff;
- 75e:	0f be cb             	movsbl %bl,%ecx
- 761:	0f b6 c3             	movzbl %bl,%eax
+ 78e:	0f be cb             	movsbl %bl,%ecx
+ 791:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 764:	85 d2                	test   %edx,%edx
- 766:	74 c8                	je     730 <printf+0x30>
+ 794:	85 d2                	test   %edx,%edx
+ 796:	74 c8                	je     760 <printf+0x30>
       }
     } else if(state == '%'){
- 768:	83 fa 25             	cmp    $0x25,%edx
- 76b:	75 e7                	jne    754 <printf+0x54>
+ 798:	83 fa 25             	cmp    $0x25,%edx
+ 79b:	75 e7                	jne    784 <printf+0x54>
       if(c == 'd'){
- 76d:	83 f8 64             	cmp    $0x64,%eax
- 770:	0f 84 9a 00 00 00    	je     810 <printf+0x110>
+ 79d:	83 f8 64             	cmp    $0x64,%eax
+ 7a0:	0f 84 9a 00 00 00    	je     840 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 776:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 77c:	83 f9 70             	cmp    $0x70,%ecx
- 77f:	74 5f                	je     7e0 <printf+0xe0>
+ 7a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7ac:	83 f9 70             	cmp    $0x70,%ecx
+ 7af:	74 5f                	je     810 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 781:	83 f8 73             	cmp    $0x73,%eax
- 784:	0f 84 d6 00 00 00    	je     860 <printf+0x160>
+ 7b1:	83 f8 73             	cmp    $0x73,%eax
+ 7b4:	0f 84 d6 00 00 00    	je     890 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 78a:	83 f8 63             	cmp    $0x63,%eax
- 78d:	0f 84 8d 00 00 00    	je     820 <printf+0x120>
+ 7ba:	83 f8 63             	cmp    $0x63,%eax
+ 7bd:	0f 84 8d 00 00 00    	je     850 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 793:	83 f8 25             	cmp    $0x25,%eax
- 796:	0f 84 b4 00 00 00    	je     850 <printf+0x150>
+ 7c3:	83 f8 25             	cmp    $0x25,%eax
+ 7c6:	0f 84 b4 00 00 00    	je     880 <printf+0x150>
   write(fd, &c, 1);
- 79c:	83 ec 04             	sub    $0x4,%esp
- 79f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7a3:	6a 01                	push   $0x1
- 7a5:	57                   	push   %edi
- 7a6:	ff 75 08             	pushl  0x8(%ebp)
- 7a9:	e8 15 fe ff ff       	call   5c3 <write>
+ 7cc:	83 ec 04             	sub    $0x4,%esp
+ 7cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7d3:	6a 01                	push   $0x1
+ 7d5:	57                   	push   %edi
+ 7d6:	ff 75 08             	pushl  0x8(%ebp)
+ 7d9:	e8 e5 fd ff ff       	call   5c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 7ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 7de:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 7b1:	83 c4 0c             	add    $0xc,%esp
- 7b4:	6a 01                	push   $0x1
- 7b6:	83 c6 01             	add    $0x1,%esi
- 7b9:	57                   	push   %edi
- 7ba:	ff 75 08             	pushl  0x8(%ebp)
- 7bd:	e8 01 fe ff ff       	call   5c3 <write>
+ 7e1:	83 c4 0c             	add    $0xc,%esp
+ 7e4:	6a 01                	push   $0x1
+ 7e6:	83 c6 01             	add    $0x1,%esi
+ 7e9:	57                   	push   %edi
+ 7ea:	ff 75 08             	pushl  0x8(%ebp)
+ 7ed:	e8 d1 fd ff ff       	call   5c3 <write>
   for(i = 0; fmt[i]; i++){
- 7c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 7f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 7c6:	83 c4 10             	add    $0x10,%esp
+ 7f6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 7c9:	31 d2                	xor    %edx,%edx
+ 7f9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 7cb:	84 db                	test   %bl,%bl
- 7cd:	75 8f                	jne    75e <printf+0x5e>
+ 7fb:	84 db                	test   %bl,%bl
+ 7fd:	75 8f                	jne    78e <printf+0x5e>
     }
   }
 }
- 7cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 7e0:	83 ec 0c             	sub    $0xc,%esp
- 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e8:	6a 00                	push   $0x0
- 7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 7f0:	8b 13                	mov    (%ebx),%edx
- 7f2:	e8 59 fe ff ff       	call   650 <printint>
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 818:	6a 00                	push   $0x0
+ 81a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 81d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 820:	8b 13                	mov    (%ebx),%edx
+ 822:	e8 59 fe ff ff       	call   680 <printint>
         ap++;
- 7f7:	89 d8                	mov    %ebx,%eax
- 7f9:	83 c4 10             	add    $0x10,%esp
+ 827:	89 d8                	mov    %ebx,%eax
+ 829:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7fc:	31 d2                	xor    %edx,%edx
+ 82c:	31 d2                	xor    %edx,%edx
         ap++;
- 7fe:	83 c0 04             	add    $0x4,%eax
- 801:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 804:	e9 4b ff ff ff       	jmp    754 <printf+0x54>
- 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82e:	83 c0 04             	add    $0x4,%eax
+ 831:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 834:	e9 4b ff ff ff       	jmp    784 <printf+0x54>
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 810:	83 ec 0c             	sub    $0xc,%esp
- 813:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 818:	6a 01                	push   $0x1
- 81a:	eb ce                	jmp    7ea <printf+0xea>
- 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	eb ce                	jmp    81a <printf+0xea>
+ 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 850:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 823:	83 ec 04             	sub    $0x4,%esp
+ 853:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 826:	8b 03                	mov    (%ebx),%eax
+ 856:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 828:	6a 01                	push   $0x1
+ 858:	6a 01                	push   $0x1
         ap++;
- 82a:	83 c3 04             	add    $0x4,%ebx
+ 85a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 82d:	57                   	push   %edi
- 82e:	ff 75 08             	pushl  0x8(%ebp)
+ 85d:	57                   	push   %edi
+ 85e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 831:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 861:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 834:	e8 8a fd ff ff       	call   5c3 <write>
+ 864:	e8 5a fd ff ff       	call   5c3 <write>
         ap++;
- 839:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 83c:	83 c4 10             	add    $0x10,%esp
+ 869:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 86c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 83f:	31 d2                	xor    %edx,%edx
- 841:	e9 0e ff ff ff       	jmp    754 <printf+0x54>
- 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 86f:	31 d2                	xor    %edx,%edx
+ 871:	e9 0e ff ff ff       	jmp    784 <printf+0x54>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 850:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 880:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 853:	83 ec 04             	sub    $0x4,%esp
- 856:	e9 59 ff ff ff       	jmp    7b4 <printf+0xb4>
- 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 85f:	90                   	nop
+ 883:	83 ec 04             	sub    $0x4,%esp
+ 886:	e9 59 ff ff ff       	jmp    7e4 <printf+0xb4>
+ 88b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 88f:	90                   	nop
         s = (char*)*ap;
- 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 863:	8b 18                	mov    (%eax),%ebx
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 893:	8b 18                	mov    (%eax),%ebx
         ap++;
- 865:	83 c0 04             	add    $0x4,%eax
- 868:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 895:	83 c0 04             	add    $0x4,%eax
+ 898:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 86b:	85 db                	test   %ebx,%ebx
- 86d:	74 17                	je     886 <printf+0x186>
+ 89b:	85 db                	test   %ebx,%ebx
+ 89d:	74 17                	je     8b6 <printf+0x186>
         while(*s != 0){
- 86f:	0f b6 03             	movzbl (%ebx),%eax
+ 89f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 872:	31 d2                	xor    %edx,%edx
+ 8a2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 874:	84 c0                	test   %al,%al
- 876:	0f 84 d8 fe ff ff    	je     754 <printf+0x54>
- 87c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 87f:	89 de                	mov    %ebx,%esi
- 881:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 884:	eb 1a                	jmp    8a0 <printf+0x1a0>
+ 8a4:	84 c0                	test   %al,%al
+ 8a6:	0f 84 d8 fe ff ff    	je     784 <printf+0x54>
+ 8ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8af:	89 de                	mov    %ebx,%esi
+ 8b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b4:	eb 1a                	jmp    8d0 <printf+0x1a0>
           s = "(null)";
- 886:	bb b2 0a 00 00       	mov    $0xab2,%ebx
+ 8b6:	bb e2 0a 00 00       	mov    $0xae2,%ebx
         while(*s != 0){
- 88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 88e:	b8 28 00 00 00       	mov    $0x28,%eax
- 893:	89 de                	mov    %ebx,%esi
- 895:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 89f:	90                   	nop
+ 8bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8c3:	89 de                	mov    %ebx,%esi
+ 8c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
   write(fd, &c, 1);
- 8a0:	83 ec 04             	sub    $0x4,%esp
+ 8d0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 8a3:	83 c6 01             	add    $0x1,%esi
- 8a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 8d3:	83 c6 01             	add    $0x1,%esi
+ 8d6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 8a9:	6a 01                	push   $0x1
- 8ab:	57                   	push   %edi
- 8ac:	53                   	push   %ebx
- 8ad:	e8 11 fd ff ff       	call   5c3 <write>
+ 8d9:	6a 01                	push   $0x1
+ 8db:	57                   	push   %edi
+ 8dc:	53                   	push   %ebx
+ 8dd:	e8 e1 fc ff ff       	call   5c3 <write>
         while(*s != 0){
- 8b2:	0f b6 06             	movzbl (%esi),%eax
- 8b5:	83 c4 10             	add    $0x10,%esp
- 8b8:	84 c0                	test   %al,%al
- 8ba:	75 e4                	jne    8a0 <printf+0x1a0>
- 8bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 8e2:	0f b6 06             	movzbl (%esi),%eax
+ 8e5:	83 c4 10             	add    $0x10,%esp
+ 8e8:	84 c0                	test   %al,%al
+ 8ea:	75 e4                	jne    8d0 <printf+0x1a0>
+ 8ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 8bf:	31 d2                	xor    %edx,%edx
- 8c1:	e9 8e fe ff ff       	jmp    754 <printf+0x54>
- 8c6:	66 90                	xchg   %ax,%ax
- 8c8:	66 90                	xchg   %ax,%ax
- 8ca:	66 90                	xchg   %ax,%ax
- 8cc:	66 90                	xchg   %ax,%ax
- 8ce:	66 90                	xchg   %ax,%ax
+ 8ef:	31 d2                	xor    %edx,%edx
+ 8f1:	e9 8e fe ff ff       	jmp    784 <printf+0x54>
+ 8f6:	66 90                	xchg   %ax,%ax
+ 8f8:	66 90                	xchg   %ax,%ax
+ 8fa:	66 90                	xchg   %ax,%ax
+ 8fc:	66 90                	xchg   %ax,%ax
+ 8fe:	66 90                	xchg   %ax,%ax
 
-000008d0 <free>:
+00000900 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8d0:	f3 0f 1e fb          	endbr32 
- 8d4:	55                   	push   %ebp
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ 905:	a1 24 0e 00 00       	mov    0xe24,%eax
 {
- 8da:	89 e5                	mov    %esp,%ebp
- 8dc:	57                   	push   %edi
- 8dd:	56                   	push   %esi
- 8de:	53                   	push   %ebx
- 8df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8e2:	8b 10                	mov    (%eax),%edx
+ 90a:	89 e5                	mov    %esp,%ebp
+ 90c:	57                   	push   %edi
+ 90d:	56                   	push   %esi
+ 90e:	53                   	push   %ebx
+ 90f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 912:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 8e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 914:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e7:	39 c8                	cmp    %ecx,%eax
- 8e9:	73 15                	jae    900 <free+0x30>
- 8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8ef:	90                   	nop
- 8f0:	39 d1                	cmp    %edx,%ecx
- 8f2:	72 14                	jb     908 <free+0x38>
+ 917:	39 c8                	cmp    %ecx,%eax
+ 919:	73 15                	jae    930 <free+0x30>
+ 91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 91f:	90                   	nop
+ 920:	39 d1                	cmp    %edx,%ecx
+ 922:	72 14                	jb     938 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8f4:	39 d0                	cmp    %edx,%eax
- 8f6:	73 10                	jae    908 <free+0x38>
+ 924:	39 d0                	cmp    %edx,%eax
+ 926:	73 10                	jae    938 <free+0x38>
 {
- 8f8:	89 d0                	mov    %edx,%eax
+ 928:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8fa:	8b 10                	mov    (%eax),%edx
- 8fc:	39 c8                	cmp    %ecx,%eax
- 8fe:	72 f0                	jb     8f0 <free+0x20>
+ 92a:	8b 10                	mov    (%eax),%edx
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 900:	39 d0                	cmp    %edx,%eax
- 902:	72 f4                	jb     8f8 <free+0x28>
- 904:	39 d1                	cmp    %edx,%ecx
- 906:	73 f0                	jae    8f8 <free+0x28>
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 f4                	jb     928 <free+0x28>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	73 f0                	jae    928 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 fa                	cmp    %edi,%edx
- 910:	74 1e                	je     930 <free+0x60>
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 fa                	cmp    %edi,%edx
+ 940:	74 1e                	je     960 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 912:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 942:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 915:	8b 50 04             	mov    0x4(%eax),%edx
- 918:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 91b:	39 f1                	cmp    %esi,%ecx
- 91d:	74 28                	je     947 <free+0x77>
+ 945:	8b 50 04             	mov    0x4(%eax),%edx
+ 948:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 28                	je     977 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 91f:	89 08                	mov    %ecx,(%eax)
+ 94f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 921:	5b                   	pop    %ebx
+ 951:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 952:	a3 24 0e 00 00       	mov    %eax,0xe24
 }
- 927:	5e                   	pop    %esi
- 928:	5f                   	pop    %edi
- 929:	5d                   	pop    %ebp
- 92a:	c3                   	ret    
- 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 92f:	90                   	nop
+ 957:	5e                   	pop    %esi
+ 958:	5f                   	pop    %edi
+ 959:	5d                   	pop    %ebp
+ 95a:	c3                   	ret    
+ 95b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 930:	03 72 04             	add    0x4(%edx),%esi
- 933:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 960:	03 72 04             	add    0x4(%edx),%esi
+ 963:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 936:	8b 10                	mov    (%eax),%edx
- 938:	8b 12                	mov    (%edx),%edx
- 93a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 966:	8b 10                	mov    (%eax),%edx
+ 968:	8b 12                	mov    (%edx),%edx
+ 96a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 93d:	8b 50 04             	mov    0x4(%eax),%edx
- 940:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 943:	39 f1                	cmp    %esi,%ecx
- 945:	75 d8                	jne    91f <free+0x4f>
+ 96d:	8b 50 04             	mov    0x4(%eax),%edx
+ 970:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 973:	39 f1                	cmp    %esi,%ecx
+ 975:	75 d8                	jne    94f <free+0x4f>
     p->s.size += bp->s.size;
- 947:	03 53 fc             	add    -0x4(%ebx),%edx
+ 977:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 97a:	a3 24 0e 00 00       	mov    %eax,0xe24
     p->s.size += bp->s.size;
- 94f:	89 50 04             	mov    %edx,0x4(%eax)
+ 97f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 952:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 955:	89 10                	mov    %edx,(%eax)
+ 982:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 985:	89 10                	mov    %edx,(%eax)
 }
- 957:	5b                   	pop    %ebx
- 958:	5e                   	pop    %esi
- 959:	5f                   	pop    %edi
- 95a:	5d                   	pop    %ebp
- 95b:	c3                   	ret    
- 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 987:	5b                   	pop    %ebx
+ 988:	5e                   	pop    %esi
+ 989:	5f                   	pop    %edi
+ 98a:	5d                   	pop    %ebp
+ 98b:	c3                   	ret    
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000960 <malloc>:
+00000990 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 960:	f3 0f 1e fb          	endbr32 
- 964:	55                   	push   %ebp
- 965:	89 e5                	mov    %esp,%ebp
- 967:	57                   	push   %edi
- 968:	56                   	push   %esi
- 969:	53                   	push   %ebx
- 96a:	83 ec 1c             	sub    $0x1c,%esp
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 96d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 99d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
+ 9a0:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 976:	8d 70 07             	lea    0x7(%eax),%esi
- 979:	c1 ee 03             	shr    $0x3,%esi
- 97c:	83 c6 01             	add    $0x1,%esi
+ 9a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9a9:	c1 ee 03             	shr    $0x3,%esi
+ 9ac:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 97f:	85 ff                	test   %edi,%edi
- 981:	0f 84 a9 00 00 00    	je     a30 <malloc+0xd0>
+ 9af:	85 ff                	test   %edi,%edi
+ 9b1:	0f 84 a9 00 00 00    	je     a60 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 987:	8b 07                	mov    (%edi),%eax
+ 9b7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 989:	8b 48 04             	mov    0x4(%eax),%ecx
- 98c:	39 f1                	cmp    %esi,%ecx
- 98e:	73 6d                	jae    9fd <malloc+0x9d>
- 990:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 996:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 99b:	0f 43 de             	cmovae %esi,%ebx
+ 9b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bc:	39 f1                	cmp    %esi,%ecx
+ 9be:	73 6d                	jae    a2d <malloc+0x9d>
+ 9c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9cb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 99e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9a8:	eb 17                	jmp    9c1 <malloc+0x61>
- 9aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9d8:	eb 17                	jmp    9f1 <malloc+0x61>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b0:	8b 10                	mov    (%eax),%edx
+ 9e0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9b5:	39 f1                	cmp    %esi,%ecx
- 9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
- 9bf:	89 d0                	mov    %edx,%eax
+ 9e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9e5:	39 f1                	cmp    %esi,%ecx
+ 9e7:	73 4f                	jae    a38 <malloc+0xa8>
+ 9e9:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
+ 9ef:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9c1:	39 c7                	cmp    %eax,%edi
- 9c3:	75 eb                	jne    9b0 <malloc+0x50>
+ 9f1:	39 c7                	cmp    %eax,%edi
+ 9f3:	75 eb                	jne    9e0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 9c5:	83 ec 0c             	sub    $0xc,%esp
- 9c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9cb:	e8 5b fc ff ff       	call   62b <sbrk>
+ 9f5:	83 ec 0c             	sub    $0xc,%esp
+ 9f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9fb:	e8 2b fc ff ff       	call   62b <sbrk>
   if(p == (char*)-1)
- 9d0:	83 c4 10             	add    $0x10,%esp
- 9d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9d6:	74 1b                	je     9f3 <malloc+0x93>
+ a00:	83 c4 10             	add    $0x10,%esp
+ a03:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a06:	74 1b                	je     a23 <malloc+0x93>
   hp->s.size = nu;
- 9d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ a08:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9db:	83 ec 0c             	sub    $0xc,%esp
- 9de:	83 c0 08             	add    $0x8,%eax
- 9e1:	50                   	push   %eax
- 9e2:	e8 e9 fe ff ff       	call   8d0 <free>
+ a0b:	83 ec 0c             	sub    $0xc,%esp
+ a0e:	83 c0 08             	add    $0x8,%eax
+ a11:	50                   	push   %eax
+ a12:	e8 e9 fe ff ff       	call   900 <free>
   return freep;
- 9e7:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ a17:	a1 24 0e 00 00       	mov    0xe24,%eax
       if((p = morecore(nunits)) == 0)
- 9ec:	83 c4 10             	add    $0x10,%esp
- 9ef:	85 c0                	test   %eax,%eax
- 9f1:	75 bd                	jne    9b0 <malloc+0x50>
+ a1c:	83 c4 10             	add    $0x10,%esp
+ a1f:	85 c0                	test   %eax,%eax
+ a21:	75 bd                	jne    9e0 <malloc+0x50>
         return 0;
   }
 }
- 9f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9f6:	31 c0                	xor    %eax,%eax
+ a26:	31 c0                	xor    %eax,%eax
 }
- 9f8:	5b                   	pop    %ebx
- 9f9:	5e                   	pop    %esi
- 9fa:	5f                   	pop    %edi
- 9fb:	5d                   	pop    %ebp
- 9fc:	c3                   	ret    
+ a28:	5b                   	pop    %ebx
+ a29:	5e                   	pop    %esi
+ a2a:	5f                   	pop    %edi
+ a2b:	5d                   	pop    %ebp
+ a2c:	c3                   	ret    
     if(p->s.size >= nunits){
- 9fd:	89 c2                	mov    %eax,%edx
- 9ff:	89 f8                	mov    %edi,%eax
- a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a2d:	89 c2                	mov    %eax,%edx
+ a2f:	89 f8                	mov    %edi,%eax
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- a08:	39 ce                	cmp    %ecx,%esi
- a0a:	74 54                	je     a60 <malloc+0x100>
+ a38:	39 ce                	cmp    %ecx,%esi
+ a3a:	74 54                	je     a90 <malloc+0x100>
         p->s.size -= nunits;
- a0c:	29 f1                	sub    %esi,%ecx
- a0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ a3c:	29 f1                	sub    %esi,%ecx
+ a3e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- a11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ a41:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- a14:	89 72 04             	mov    %esi,0x4(%edx)
+ a44:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ a47:	a3 24 0e 00 00       	mov    %eax,0xe24
 }
- a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a1f:	8d 42 08             	lea    0x8(%edx),%eax
+ a4f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- a22:	5b                   	pop    %ebx
- a23:	5e                   	pop    %esi
- a24:	5f                   	pop    %edi
- a25:	5d                   	pop    %ebp
- a26:	c3                   	ret    
- a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a2e:	66 90                	xchg   %ax,%ax
+ a52:	5b                   	pop    %ebx
+ a53:	5e                   	pop    %esi
+ a54:	5f                   	pop    %edi
+ a55:	5d                   	pop    %ebp
+ a56:	c3                   	ret    
+ a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 f4 0d 00 00 f8 	movl   $0xdf8,0xdf4
- a37:	0d 00 00 
+ a60:	c7 05 24 0e 00 00 28 	movl   $0xe28,0xe24
+ a67:	0e 00 00 
     base.s.size = 0;
- a3a:	bf f8 0d 00 00       	mov    $0xdf8,%edi
+ a6a:	bf 28 0e 00 00       	mov    $0xe28,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 f8 0d 00 00 f8 	movl   $0xdf8,0xdf8
- a46:	0d 00 00 
+ a6f:	c7 05 28 0e 00 00 28 	movl   $0xe28,0xe28
+ a76:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a49:	89 f8                	mov    %edi,%eax
+ a79:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 fc 0d 00 00 00 	movl   $0x0,0xdfc
- a52:	00 00 00 
+ a7b:	c7 05 2c 0e 00 00 00 	movl   $0x0,0xe2c
+ a82:	00 00 00 
     if(p->s.size >= nunits){
- a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
- a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a85:	e9 36 ff ff ff       	jmp    9c0 <malloc+0x30>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a60:	8b 0a                	mov    (%edx),%ecx
- a62:	89 08                	mov    %ecx,(%eax)
- a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a90:	8b 0a                	mov    (%edx),%ecx
+ a92:	89 08                	mov    %ecx,(%eax)
+ a94:	eb b1                	jmp    a47 <malloc+0xb7>
Binary files xv6-public/ls.o and xv6-public-hybrid/ls.o differ
diff -u xv6-public/ls.sym xv6-public-hybrid/ls.sym
--- xv6-public/ls.sym	2022-10-07 20:01:01.386056683 +0530
+++ xv6-public-hybrid/ls.sym	2022-10-07 18:39:47.272736000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000a68 .rodata
-00000ad0 .eh_frame
-00000de4 .bss
+00000a98 .rodata
+00000b00 .eh_frame
+00000e14 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -11,23 +11,25 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000de4 buf.1096
+00000e14 buf.1111
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000abc digits.1085
+00000680 printint
+00000aec digits.1100
 00000000 umalloc.c
-00000df4 freep
-00000df8 base
+00000e24 freep
+00000e28 base
 00000340 strcpy
 00000060 fmtname
-00000700 printf
+00000730 printf
 00000570 memmove
 000005eb mknod
+00000643 wolfie
 00000460 gets
 00000623 getpid
-00000960 malloc
+00000990 malloc
 00000633 sleep
+00000663 get_burst_time
 000005b3 pipe
 000005c3 write
 000005fb fstat
@@ -40,14 +42,18 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000de4 __bss_start
+00000e14 __bss_start
 00000400 memset
 00000000 main
+0000066b set_burst_time
 00000370 strcmp
 0000061b dup
+00000653 getMaxPid
+0000064b getNumProc
+0000065b getProcInfo
 000004e0 stat
-00000de4 _edata
-00000e00 _end
+00000e14 _edata
+00000e30 _end
 00000603 link
 00000100 ls
 000005a3 exit
@@ -57,4 +63,4 @@
 00000420 strchr
 0000060b mkdir
 000005cb close
-000008d0 free
+00000900 free
Binary files xv6-public/main.o and xv6-public-hybrid/main.o differ
diff -u xv6-public/Makefile xv6-public-hybrid/Makefile
--- xv6-public/Makefile	2022-10-07 20:00:17.163374639 +0530
+++ xv6-public-hybrid/Makefile	2022-10-07 07:27:39.892754000 +0530
@@ -181,6 +181,8 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_testCase1\
+	_testCase2
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +252,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c testCase1.c testCase2.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Only in xv6-public-hybrid: _maxPidTest
Only in xv6-public-hybrid: maxPidTest.c
Binary files xv6-public/_mkdir and xv6-public-hybrid/_mkdir differ
diff -u xv6-public/mkdir.asm xv6-public-hybrid/mkdir.asm
--- xv6-public/mkdir.asm	2022-10-07 20:01:01.454065838 +0530
+++ xv6-public-hybrid/mkdir.asm	2022-10-07 18:39:47.320758000 +0530
@@ -59,18 +59,18 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bf 07 00 00       	push   $0x7bf
+  53:	68 ef 07 00 00       	push   $0x7ef
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 11 04 00 00       	call   470 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 d8 07 00 00       	push   $0x7d8
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 fe 03 00 00       	call   470 <printf>
     exit();
   72:	e8 6c 02 00 00       	call   2e3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -605,609 +605,645 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <wolfie>:
+SYSCALL(wolfie)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getNumProc>:
+SYSCALL(getNumProc)
+ 38b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 393:	b8 17 00 00 00       	mov    $0x17,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 39b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3ab:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+ 3b3:	66 90                	xchg   %ax,%ax
+ 3b5:	66 90                	xchg   %ax,%ax
+ 3b7:	66 90                	xchg   %ax,%ax
+ 3b9:	66 90                	xchg   %ax,%ax
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3cc:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3e6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 14 08 00 00 	movzbl 0x814(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 41f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
 
-00000440 <printf>:
+00000470 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 494:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4c1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 536:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 539:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 56c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 596:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 598:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 59a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5e2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb db 07 00 00       	mov    $0x7db,%ebx
+ 5f6:	bb 0b 08 00 00       	mov    $0x80b,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 610:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000640 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 645:	a1 cc 0a 00 00       	mov    0xacc,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 668:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 68f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 691:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 692:	a3 cc 0a 00 00       	mov    %eax,0xacc
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 6ba:	a3 cc 0a 00 00       	mov    %eax,0xacc
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006d0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6e0:	8b 3d cc 0a 00 00    	mov    0xacc,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6f7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 720:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d cc 0a 00 00    	mov    0xacc,%edi
+ 72f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
   return freep;
- 727:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 757:	a1 cc 0a 00 00       	mov    0xacc,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 766:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 787:	a3 cc 0a 00 00       	mov    %eax,0xacc
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
- 777:	0a 00 00 
+ 7a0:	c7 05 cc 0a 00 00 d0 	movl   $0xad0,0xacc
+ 7a7:	0a 00 00 
     base.s.size = 0;
- 77a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+ 7aa:	bf d0 0a 00 00       	mov    $0xad0,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
- 786:	0a 00 00 
+ 7af:	c7 05 d0 0a 00 00 d0 	movl   $0xad0,0xad0
+ 7b6:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 7b9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
- 792:	00 00 00 
+ 7bb:	c7 05 d4 0a 00 00 00 	movl   $0x0,0xad4
+ 7c2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
Binary files xv6-public/mkdir.o and xv6-public-hybrid/mkdir.o differ
diff -u xv6-public/mkdir.sym xv6-public-hybrid/mkdir.sym
--- xv6-public/mkdir.sym	2022-10-07 20:01:01.462066915 +0530
+++ xv6-public-hybrid/mkdir.sym	2022-10-07 18:39:47.320758000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007f8 .eh_frame
-00000a9c .bss
+000007d8 .rodata
+00000828 .eh_frame
+00000acc .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007e4 digits.1085
+000003c0 printint
+00000814 digits.1100
 00000000 umalloc.c
-00000a9c freep
-00000aa0 base
+00000acc freep
+00000ad0 base
 00000080 strcpy
-00000440 printf
+00000470 printf
 000002b0 memmove
 0000032b mknod
+00000383 wolfie
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006d0 malloc
 00000373 sleep
+000003a3 get_burst_time
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,14 +40,18 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a9c __bss_start
+00000acc __bss_start
 00000140 memset
 00000000 main
+000003ab set_burst_time
 000000b0 strcmp
 0000035b dup
+00000393 getMaxPid
+0000038b getNumProc
+0000039b getProcInfo
 00000220 stat
-00000a9c _edata
-00000aa8 _end
+00000acc _edata
+00000ad8 _end
 00000343 link
 000002e3 exit
 00000270 atoi
@@ -54,4 +60,4 @@
 00000160 strchr
 0000034b mkdir
 0000030b close
-00000610 free
+00000640 free
Binary files xv6-public/mp.o and xv6-public-hybrid/mp.o differ
Only in xv6-public-hybrid: _numProcTest
Only in xv6-public-hybrid: numProcTest.c
diff -u xv6-public/param.h xv6-public-hybrid/param.h
--- xv6-public/param.h	2022-10-07 20:00:17.163374639 +0530
+++ xv6-public-hybrid/param.h	2022-10-07 01:17:59.917988000 +0530
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
Binary files xv6-public/picirq.o and xv6-public-hybrid/picirq.o differ
Binary files xv6-public/pipe.o and xv6-public-hybrid/pipe.o differ
Binary files xv6-public/printf.o and xv6-public-hybrid/printf.o differ
diff -u xv6-public/proc.c xv6-public-hybrid/proc.c
--- xv6-public/proc.c	2022-10-07 20:00:17.163374639 +0530
+++ xv6-public-hybrid/proc.c	2022-10-07 08:29:50.966613000 +0530
@@ -6,12 +6,125 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+struct {
+  struct proc* array[NPROC];             
+  int front;
+  int rear; 
+  int size;  
+} rqueue; // Running Queue
+
+struct proc* base_process = 0;
+int base_process_pid = 0;
+
+void enqueue(struct proc* np){
+  if(rqueue.size == NPROC) return; 
+  rqueue.rear = (rqueue.rear + 1) % NPROC;
+  rqueue.array[rqueue.rear] = np; 
+  rqueue.size = rqueue.size + 1;  
+}
+
+struct proc* dequeue(){
+  if (rqueue.size == 0) return 0; 
+  struct proc* next = rqueue.array[rqueue.front]; 
+  rqueue.front = (rqueue.front + 1) % NPROC; 
+  rqueue.size = rqueue.size - 1; 
+
+  if(rqueue.size == 0){
+    rqueue.front = 0;
+    rqueue.rear = NPROC - 1;
+  }
+
+  return next; 
+}
+
+// This is used to insert a new process with default burst time (0)
+void insert_rqueue(struct proc* np){
+  // int proc_inserted = 0;
+  const int size = rqueue.size;
+
+
+  // [0, ]
+
+  if(size == 0 || rqueue.array[rqueue.front]->burstTime == 0){
+    enqueue(np);
+    return;
+  }
+
+  struct proc* min_proc = 0;
+  for(int i = 0; i < size; ++i){
+    struct proc* cur = dequeue();
+    if(min_proc == 0 || min_proc->burstTime >= cur->burstTime){
+      min_proc = cur;
+    }
+    enqueue(cur);
+  }
+
+  for(int i = 0; i < size; ++i){
+    struct proc* cur = dequeue();
+    if(cur == min_proc){
+      enqueue(np);
+    }
+    enqueue(cur);
+  }
+}
+
+void insert_rqueue_sorted(struct proc* cur){
+  const int size = rqueue.size;
+
+  // at this instant rqueue looks like this
+  // [0] + [0, 0, 0, non-zero, non-zero, ....., non-zero, 0, 0, 0]
+  struct proc* first_proc = rqueue.array[rqueue.front];
+
+  // Step 1: place all 0 burstTime process at end
+  for(int i = 0; i < size; ++i){
+    if(rqueue.array[rqueue.front]->burstTime > 0) break;
+    enqueue(dequeue());
+  }
+
+  if(rqueue.array[rqueue.front]->burstTime == 0){
+    // all processes have zero burst time
+    enqueue(cur);
+    return;
+  }
+
+  // Step 2: Rotate array and place our process at correct spot
+  int proc_inserted = 0;
+  for(int i = 0; i < size; ++i){
+    struct proc* p = dequeue();
+    if(p->burstTime == 0 || p->burstTime > cur->burstTime){
+      enqueue(cur);
+      enqueue(p);
+      proc_inserted = 1;
+      break;
+    }
+    enqueue(p);
+  }
+
+  if(proc_inserted == 0){
+    // all process have non-zero burst time and current process has max burst time;
+    enqueue(cur);
+    return;
+  }
+
+  // Step 3: Return to original state with first_proc in front;
+  while(rqueue.array[rqueue.front] != first_proc) enqueue(dequeue());
+}
+
+
+// helper function called when a process is added to ready queue(priority queue)
+void makeProcRunnable(struct proc* proc){
+  proc->state = RUNNABLE;
+  enqueue(proc);
+}
+
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -89,6 +202,10 @@
   p->state = EMBRYO;
   p->pid = nextpid++;
 
+  // Initialise number of context switches with 0
+  p->numcs = 0;
+  p->burstTime = 0;
+
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -148,7 +265,10 @@
   // because the assignment might not be atomic.
   acquire(&ptable.lock);
 
-  p->state = RUNNABLE;
+  rqueue.front = rqueue.size = 0; 
+  rqueue.rear = NPROC - 1;
+
+  makeProcRunnable(p);
 
   release(&ptable.lock);
 }
@@ -215,8 +335,25 @@
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
+  insert_rqueue(np);
 
-  release(&ptable.lock);
+
+  if(np->parent->pid == 2){
+    base_process = np;
+    base_process_pid = np->pid;
+  }
+
+  // if(rqueue.size == 1 && np->pid >= 3){
+  //   // this is the only process in queue
+  //   if(base_process_pid == 0){
+  //       base_process = np;
+  //       base_process_pid = np->pid;
+  //   }
+  // }
+
+
+
+ release(&ptable.lock);
 
   return pid;
 }
@@ -231,6 +368,8 @@
   struct proc *p;
   int fd;
 
+// cprintf("Exiting PID: %d\n", curproc->pid);
+
   if(curproc == initproc)
     panic("init exiting");
 
@@ -250,6 +389,7 @@
   acquire(&ptable.lock);
 
   // Parent might be sleeping in wait().
+  cprintf("Waking up parent\n");
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
@@ -322,34 +462,57 @@
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *reqp=0;
+  // struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
+    reqp = 0;    
+
+    // Choose a process from ready queue to run
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+    reqp = dequeue(); 
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+    if(reqp == 0) {
+      // if(base_process != 0){
+      //   // cprintf("No running processes");
+      //   // debug_queue();
+      //   base_process = 0;
+      //   base_process_pid = 0;
+      // }
+      release(&ptable.lock); // No process is curently runnable
+      continue;
     }
+
+    // debug_queue();
+
+    // if(rqueue.size == 0 && reqp->pid >= 3){
+    //   // this is the only process in queue
+    //   if(base_process_pid == 0){
+    //     base_process = reqp;
+    //     base_process_pid = reqp->pid;
+    //   }
+    // }
+
+    // int pid = base_process == 0 ? 0 : base_process->pid;
+    if(reqp->pid>=3)    //donot print for shell and userinit
+      cprintf("SCHEDULING - pid: %d  burstTime: %d baseprocess: %d\n", reqp->pid, reqp->burstTime, base_process_pid);
+    // debug_queue();
+
+    c->proc = reqp;
+    switchuvm(reqp);
+    reqp->state = RUNNING;
+    reqp->numcs++; // Number of Context Switch Increment
+    swtch(&(c->scheduler), reqp->context);
+    switchkvm();
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+
     release(&ptable.lock);
 
   }
@@ -386,7 +549,7 @@
 yield(void)
 {
   acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
+  makeProcRunnable(myproc());
   sched();
   release(&ptable.lock);
 }
@@ -460,8 +623,11 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
       p->state = RUNNABLE;
+      insert_rqueue_sorted(p);
+      // makeProcRunnable(p);
+}
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +652,9 @@
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
+      if(p->state == SLEEPING){
+        makeProcRunnable(p);
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -532,3 +699,103 @@
     cprintf("\n");
   }
 }
+
+int 
+getNumProc(void)
+{
+	int used = 0;
+	struct proc *p;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state != UNUSED)
+      used++;
+
+  release(&ptable.lock);
+	return used;
+}
+
+int 
+getMaxPid(void)
+{
+	int maxPid = 0;
+	struct proc *p;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state != UNUSED)
+      maxPid = (maxPid < p->pid) ? p->pid : maxPid;
+
+  release(&ptable.lock);
+	return maxPid;
+}
+
+int 
+getProcInfo()
+{
+  int ret = -1;
+  struct proc *p = myproc();
+  
+  acquire(&ptable.lock);
+
+  cprintf(" PID: %d   NCS: %d    BurstTime: %d \n", p->pid, p->numcs, p->burstTime);
+  
+
+  release(&ptable.lock);
+  return ret;
+}
+
+int
+get_burst_time()
+{
+  struct proc *p = myproc();
+  return p->burstTime;
+}
+
+
+int
+set_burst_time(int n)
+{
+  struct proc* cur = myproc();
+
+  // can't use this system call more than once for one process
+  if(cur->burstTime != 0) return -1;
+
+  cprintf("Setting burst time\n");
+
+  cur->burstTime = n;
+  acquire(&ptable.lock);
+  
+  // Reposition this process in rqueue
+  insert_rqueue_sorted(cur);
+
+  // Check if burst time of all processes have been set 
+  const int size = rqueue.size;
+  int should_rotate = 1;
+  struct proc* minBurstproc = 0;
+  for(int i = 0; i < size; ++i){
+    struct proc* p = dequeue();
+    if(p->burstTime == 0){
+      should_rotate = 0;
+    }
+    if(minBurstproc == 0 || minBurstproc->burstTime > p->burstTime){
+      minBurstproc = p;
+    }
+    enqueue(p);
+  }
+
+  // Choose base process if burst time of all processes have been set 
+  if(should_rotate){
+    while(rqueue.array[rqueue.front] != minBurstproc) enqueue(dequeue());
+    base_process = minBurstproc;
+    base_process_pid = minBurstproc->pid;
+  }
+
+  cur->state = RUNNABLE;
+  sched();
+  release(&ptable.lock);
+  return 0;
+}
+
diff -u xv6-public/proc.d xv6-public-hybrid/proc.d
--- xv6-public/proc.d	2022-10-07 20:00:53.917030960 +0530
+++ xv6-public-hybrid/proc.d	2022-10-07 18:39:41.774147000 +0530
@@ -1,2 +1,2 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
Only in xv6-public-hybrid: processInfo.h
diff -u xv6-public/proc.h xv6-public-hybrid/proc.h
--- xv6-public/proc.h	2022-10-07 20:00:17.163374639 +0530
+++ xv6-public-hybrid/proc.h	2022-10-07 08:08:28.893657000 +0530
@@ -10,6 +10,10 @@
   struct proc *proc;           // The process running on this cpu or null
 };
 
+// int time_slice = 0;
+extern struct proc* base_process;
+extern int base_process_pid;
+
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
@@ -49,6 +53,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int numcs;                   // Number of IN context switches
+  int burstTime;               // Burst time (set by user)
 };
 
 // Process memory is laid out contiguously, low addresses first:
Only in xv6-public-hybrid: _procInfoTest
Only in xv6-public-hybrid: procInfoTest.c
Binary files xv6-public/proc.o and xv6-public-hybrid/proc.o differ
Binary files xv6-public/_rm and xv6-public-hybrid/_rm differ
diff -u xv6-public/rm.asm xv6-public-hybrid/rm.asm
--- xv6-public/rm.asm	2022-10-07 20:01:01.530076070 +0530
+++ xv6-public-hybrid/rm.asm	2022-10-07 18:39:47.372782000 +0530
@@ -59,18 +59,18 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bc 07 00 00       	push   $0x7bc
+  53:	68 ec 07 00 00       	push   $0x7ec
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 11 04 00 00       	call   470 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 d8 07 00 00       	push   $0x7d8
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 fe 03 00 00       	call   470 <printf>
     exit();
   72:	e8 6c 02 00 00       	call   2e3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -605,609 +605,645 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <wolfie>:
+SYSCALL(wolfie)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getNumProc>:
+SYSCALL(getNumProc)
+ 38b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 393:	b8 17 00 00 00       	mov    $0x17,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 39b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3ab:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+ 3b3:	66 90                	xchg   %ax,%ax
+ 3b5:	66 90                	xchg   %ax,%ax
+ 3b7:	66 90                	xchg   %ax,%ax
+ 3b9:	66 90                	xchg   %ax,%ax
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3cc:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3e6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 dc 07 00 00 	movzbl 0x7dc(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 0c 08 00 00 	movzbl 0x80c(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 41f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
 
-00000440 <printf>:
+00000470 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 494:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4c1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 536:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 539:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 56c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 596:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 598:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 59a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5e2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb d5 07 00 00       	mov    $0x7d5,%ebx
+ 5f6:	bb 05 08 00 00       	mov    $0x805,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 610:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000640 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 645:	a1 c4 0a 00 00       	mov    0xac4,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 668:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 68f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 691:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 692:	a3 c4 0a 00 00       	mov    %eax,0xac4
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 6ba:	a3 c4 0a 00 00       	mov    %eax,0xac4
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006d0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 6e0:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6f7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 720:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
+ 72f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
   return freep;
- 727:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 757:	a1 c4 0a 00 00       	mov    0xac4,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 766:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 787:	a3 c4 0a 00 00       	mov    %eax,0xac4
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
- 777:	0a 00 00 
+ 7a0:	c7 05 c4 0a 00 00 c8 	movl   $0xac8,0xac4
+ 7a7:	0a 00 00 
     base.s.size = 0;
- 77a:	bf 98 0a 00 00       	mov    $0xa98,%edi
+ 7aa:	bf c8 0a 00 00       	mov    $0xac8,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
- 786:	0a 00 00 
+ 7af:	c7 05 c8 0a 00 00 c8 	movl   $0xac8,0xac8
+ 7b6:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 7b9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
- 792:	00 00 00 
+ 7bb:	c7 05 cc 0a 00 00 00 	movl   $0x0,0xacc
+ 7c2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
Binary files xv6-public/rm.o and xv6-public-hybrid/rm.o differ
diff -u xv6-public/rm.sym xv6-public-hybrid/rm.sym
--- xv6-public/rm.sym	2022-10-07 20:01:01.542077686 +0530
+++ xv6-public-hybrid/rm.sym	2022-10-07 18:39:47.380786000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007f0 .eh_frame
-00000a94 .bss
+000007d8 .rodata
+00000820 .eh_frame
+00000ac4 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007dc digits.1085
+000003c0 printint
+0000080c digits.1100
 00000000 umalloc.c
-00000a94 freep
-00000a98 base
+00000ac4 freep
+00000ac8 base
 00000080 strcpy
-00000440 printf
+00000470 printf
 000002b0 memmove
 0000032b mknod
+00000383 wolfie
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006d0 malloc
 00000373 sleep
+000003a3 get_burst_time
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,14 +40,18 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a94 __bss_start
+00000ac4 __bss_start
 00000140 memset
 00000000 main
+000003ab set_burst_time
 000000b0 strcmp
 0000035b dup
+00000393 getMaxPid
+0000038b getNumProc
+0000039b getProcInfo
 00000220 stat
-00000a94 _edata
-00000aa0 _end
+00000ac4 _edata
+00000ad0 _end
 00000343 link
 000002e3 exit
 00000270 atoi
@@ -54,4 +60,4 @@
 00000160 strchr
 0000034b mkdir
 0000030b close
-00000610 free
+00000640 free
Binary files xv6-public/_sh and xv6-public-hybrid/_sh differ
diff -u xv6-public/sh.asm xv6-public-hybrid/sh.asm
--- xv6-public/sh.asm	2022-10-07 20:01:01.702099227 +0530
+++ xv6-public-hybrid/sh.asm	2022-10-07 18:39:47.508845000 +0530
@@ -33,7 +33,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       29:	83 ec 08             	sub    $0x8,%esp
       2c:	6a 02                	push   $0x2
-      2e:	68 f9 12 00 00       	push   $0x12f9
+      2e:	68 29 13 00 00       	push   $0x1329
       33:	e8 9b 0d 00 00       	call   dd3 <open>
       38:	83 c4 10             	add    $0x10,%esp
       3b:	85 c0                	test   %eax,%eax
@@ -46,7 +46,7 @@
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      48:	80 3d 42 19 00 00 20 	cmpb   $0x20,0x1942
+      48:	80 3d 62 19 00 00 20 	cmpb   $0x20,0x1962
       4f:	74 51                	je     a2 <main+0xa2>
       51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 int
@@ -67,27 +67,27 @@
   while(getcmd(buf, sizeof(buf)) >= 0){
       73:	83 ec 08             	sub    $0x8,%esp
       76:	6a 64                	push   $0x64
-      78:	68 40 19 00 00       	push   $0x1940
+      78:	68 60 19 00 00       	push   $0x1960
       7d:	e8 8e 00 00 00       	call   110 <getcmd>
       82:	83 c4 10             	add    $0x10,%esp
       85:	85 c0                	test   %eax,%eax
       87:	78 14                	js     9d <main+0x9d>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      89:	80 3d 40 19 00 00 63 	cmpb   $0x63,0x1940
+      89:	80 3d 60 19 00 00 63 	cmpb   $0x63,0x1960
       90:	75 c6                	jne    58 <main+0x58>
-      92:	80 3d 41 19 00 00 64 	cmpb   $0x64,0x1941
+      92:	80 3d 61 19 00 00 64 	cmpb   $0x64,0x1961
       99:	75 bd                	jne    58 <main+0x58>
       9b:	eb ab                	jmp    48 <main+0x48>
   exit();
       9d:	e8 f1 0c 00 00       	call   d93 <exit>
       buf[strlen(buf)-1] = 0;  // chop \n
       a2:	83 ec 0c             	sub    $0xc,%esp
-      a5:	68 40 19 00 00       	push   $0x1940
+      a5:	68 60 19 00 00       	push   $0x1960
       aa:	e8 01 0b 00 00       	call   bb0 <strlen>
       if(chdir(buf+3) < 0)
-      af:	c7 04 24 43 19 00 00 	movl   $0x1943,(%esp)
+      af:	c7 04 24 63 19 00 00 	movl   $0x1963,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      b6:	c6 80 3f 19 00 00 00 	movb   $0x0,0x193f(%eax)
+      b6:	c6 80 5f 19 00 00 00 	movb   $0x0,0x195f(%eax)
       if(chdir(buf+3) < 0)
       bd:	e8 41 0d 00 00       	call   e03 <chdir>
       c2:	83 c4 10             	add    $0x10,%esp
@@ -95,10 +95,10 @@
       c7:	79 aa                	jns    73 <main+0x73>
         printf(2, "cannot cd %s\n", buf+3);
       c9:	50                   	push   %eax
-      ca:	68 43 19 00 00       	push   $0x1943
-      cf:	68 01 13 00 00       	push   $0x1301
+      ca:	68 63 19 00 00       	push   $0x1963
+      cf:	68 31 13 00 00       	push   $0x1331
       d4:	6a 02                	push   $0x2
-      d6:	e8 15 0e 00 00       	call   ef0 <printf>
+      d6:	e8 45 0e 00 00       	call   f20 <printf>
       db:	83 c4 10             	add    $0x10,%esp
       de:	eb 93                	jmp    73 <main+0x73>
       close(fd);
@@ -110,13 +110,13 @@
       ec:	eb 85                	jmp    73 <main+0x73>
       runcmd(parsecmd(buf));
       ee:	83 ec 0c             	sub    $0xc,%esp
-      f1:	68 40 19 00 00       	push   $0x1940
+      f1:	68 60 19 00 00       	push   $0x1960
       f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
       fb:	89 04 24             	mov    %eax,(%esp)
       fe:	e8 7d 00 00 00       	call   180 <runcmd>
     panic("fork");
      103:	83 ec 0c             	sub    $0xc,%esp
-     106:	68 82 12 00 00       	push   $0x1282
+     106:	68 b2 12 00 00       	push   $0x12b2
      10b:	e8 50 00 00 00       	call   160 <panic>
 
 00000110 <getcmd>:
@@ -130,9 +130,9 @@
      11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      11f:	83 ec 08             	sub    $0x8,%esp
-     122:	68 58 12 00 00       	push   $0x1258
+     122:	68 88 12 00 00       	push   $0x1288
      127:	6a 02                	push   $0x2
-     129:	e8 c2 0d 00 00       	call   ef0 <printf>
+     129:	e8 f2 0d 00 00       	call   f20 <printf>
   memset(buf, 0, nbuf);
      12e:	83 c4 0c             	add    $0xc,%esp
      131:	56                   	push   %esi
@@ -170,9 +170,9 @@
      167:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      16a:	ff 75 08             	pushl  0x8(%ebp)
-     16d:	68 f5 12 00 00       	push   $0x12f5
+     16d:	68 25 13 00 00       	push   $0x1325
      172:	6a 02                	push   $0x2
-     174:	e8 77 0d 00 00       	call   ef0 <printf>
+     174:	e8 a7 0d 00 00       	call   f20 <printf>
   exit();
      179:	e8 15 0c 00 00       	call   d93 <exit>
      17e:	66 90                	xchg   %ax,%ax
@@ -192,7 +192,7 @@
      192:	83 3b 05             	cmpl   $0x5,(%ebx)
      195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
      19b:	8b 03                	mov    (%ebx),%eax
-     19d:	3e ff 24 85 10 13 00 	notrack jmp *0x1310(,%eax,4)
+     19d:	3e ff 24 85 40 13 00 	notrack jmp *0x1340(,%eax,4)
      1a4:	00 
     if(pipe(p) < 0)
      1a5:	83 ec 0c             	sub    $0xc,%esp
@@ -258,9 +258,9 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      23c:	83 c4 0c             	add    $0xc,%esp
      23f:	ff 73 04             	pushl  0x4(%ebx)
-     242:	68 62 12 00 00       	push   $0x1262
+     242:	68 92 12 00 00       	push   $0x1292
      247:	6a 02                	push   $0x2
-     249:	e8 a2 0c 00 00       	call   ef0 <printf>
+     249:	e8 d2 0c 00 00       	call   f20 <printf>
     break;
      24e:	83 c4 10             	add    $0x10,%esp
      251:	eb bd                	jmp    210 <runcmd+0x90>
@@ -297,19 +297,19 @@
      29a:	e8 e1 fe ff ff       	call   180 <runcmd>
     panic("runcmd");
      29f:	83 ec 0c             	sub    $0xc,%esp
-     2a2:	68 5b 12 00 00       	push   $0x125b
+     2a2:	68 8b 12 00 00       	push   $0x128b
      2a7:	e8 b4 fe ff ff       	call   160 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2ac:	51                   	push   %ecx
      2ad:	ff 73 08             	pushl  0x8(%ebx)
-     2b0:	68 72 12 00 00       	push   $0x1272
+     2b0:	68 a2 12 00 00       	push   $0x12a2
      2b5:	6a 02                	push   $0x2
-     2b7:	e8 34 0c 00 00       	call   ef0 <printf>
+     2b7:	e8 64 0c 00 00       	call   f20 <printf>
       exit();
      2bc:	e8 d2 0a 00 00       	call   d93 <exit>
       panic("pipe");
      2c1:	83 ec 0c             	sub    $0xc,%esp
-     2c4:	68 87 12 00 00       	push   $0x1287
+     2c4:	68 b7 12 00 00       	push   $0x12b7
      2c9:	e8 92 fe ff ff       	call   160 <panic>
       close(1);
      2ce:	83 ec 0c             	sub    $0xc,%esp
@@ -353,7 +353,7 @@
      325:	e8 56 fe ff ff       	call   180 <runcmd>
     panic("fork");
      32a:	83 ec 0c             	sub    $0xc,%esp
-     32d:	68 82 12 00 00       	push   $0x1282
+     32d:	68 b2 12 00 00       	push   $0x12b2
      332:	e8 29 fe ff ff       	call   160 <panic>
      337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      33e:	66 90                	xchg   %ax,%ax
@@ -375,7 +375,7 @@
      355:	c3                   	ret    
     panic("fork");
      356:	83 ec 0c             	sub    $0xc,%esp
-     359:	68 82 12 00 00       	push   $0x1282
+     359:	68 b2 12 00 00       	push   $0x12b2
      35e:	e8 fd fd ff ff       	call   160 <panic>
      363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -396,7 +396,7 @@
 
   cmd = malloc(sizeof(*cmd));
      37b:	6a 54                	push   $0x54
-     37d:	e8 ce 0d 00 00       	call   1150 <malloc>
+     37d:	e8 fe 0d 00 00       	call   1180 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      382:	83 c4 0c             	add    $0xc,%esp
      385:	6a 54                	push   $0x54
@@ -430,7 +430,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3ab:	6a 18                	push   $0x18
-     3ad:	e8 9e 0d 00 00       	call   1150 <malloc>
+     3ad:	e8 ce 0d 00 00       	call   1180 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3b2:	83 c4 0c             	add    $0xc,%esp
      3b5:	6a 18                	push   $0x18
@@ -481,7 +481,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3fb:	6a 0c                	push   $0xc
-     3fd:	e8 4e 0d 00 00       	call   1150 <malloc>
+     3fd:	e8 7e 0d 00 00       	call   1180 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      402:	83 c4 0c             	add    $0xc,%esp
      405:	6a 0c                	push   $0xc
@@ -523,7 +523,7 @@
 
   cmd = malloc(sizeof(*cmd));
      43b:	6a 0c                	push   $0xc
-     43d:	e8 0e 0d 00 00       	call   1150 <malloc>
+     43d:	e8 3e 0d 00 00       	call   1180 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      442:	83 c4 0c             	add    $0xc,%esp
      445:	6a 0c                	push   $0xc
@@ -565,7 +565,7 @@
 
   cmd = malloc(sizeof(*cmd));
      47b:	6a 08                	push   $0x8
-     47d:	e8 ce 0c 00 00       	call   1150 <malloc>
+     47d:	e8 fe 0c 00 00       	call   1180 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      482:	83 c4 0c             	add    $0xc,%esp
      485:	6a 08                	push   $0x8
@@ -629,7 +629,7 @@
      4d7:	0f be 07             	movsbl (%edi),%eax
      4da:	83 ec 08             	sub    $0x8,%esp
      4dd:	50                   	push   %eax
-     4de:	68 20 19 00 00       	push   $0x1920
+     4de:	68 50 19 00 00       	push   $0x1950
      4e3:	e8 28 07 00 00       	call   c10 <strchr>
      4e8:	83 c4 10             	add    $0x10,%esp
      4eb:	85 c0                	test   %eax,%eax
@@ -674,7 +674,7 @@
      527:	0f be 07             	movsbl (%edi),%eax
      52a:	83 ec 08             	sub    $0x8,%esp
      52d:	50                   	push   %eax
-     52e:	68 20 19 00 00       	push   $0x1920
+     52e:	68 50 19 00 00       	push   $0x1950
      533:	e8 d8 06 00 00       	call   c10 <strchr>
      538:	83 c4 10             	add    $0x10,%esp
      53b:	85 c0                	test   %eax,%eax
@@ -708,7 +708,7 @@
      568:	0f be 07             	movsbl (%edi),%eax
      56b:	83 ec 08             	sub    $0x8,%esp
      56e:	50                   	push   %eax
-     56f:	68 18 19 00 00       	push   $0x1918
+     56f:	68 48 19 00 00       	push   $0x1948
      574:	e8 97 06 00 00       	call   c10 <strchr>
      579:	83 c4 10             	add    $0x10,%esp
      57c:	85 c0                	test   %eax,%eax
@@ -722,7 +722,7 @@
      58a:	83 ec 08             	sub    $0x8,%esp
      58d:	0f be f0             	movsbl %al,%esi
      590:	56                   	push   %esi
-     591:	68 20 19 00 00       	push   $0x1920
+     591:	68 50 19 00 00       	push   $0x1950
      596:	e8 75 06 00 00       	call   c10 <strchr>
      59b:	83 c4 10             	add    $0x10,%esp
      59e:	85 c0                	test   %eax,%eax
@@ -803,7 +803,7 @@
      637:	0f be 03             	movsbl (%ebx),%eax
      63a:	83 ec 08             	sub    $0x8,%esp
      63d:	50                   	push   %eax
-     63e:	68 20 19 00 00       	push   $0x1920
+     63e:	68 50 19 00 00       	push   $0x1950
      643:	e8 c8 05 00 00       	call   c10 <strchr>
      648:	83 c4 10             	add    $0x10,%esp
      64b:	85 c0                	test   %eax,%eax
@@ -867,7 +867,7 @@
      6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      6a7:	90                   	nop
      6a8:	83 ec 04             	sub    $0x4,%esp
-     6ab:	68 a9 12 00 00       	push   $0x12a9
+     6ab:	68 d9 12 00 00       	push   $0x12d9
      6b0:	53                   	push   %ebx
      6b1:	56                   	push   %esi
      6b2:	e8 59 ff ff ff       	call   610 <peek>
@@ -939,7 +939,7 @@
      732:	c3                   	ret    
       panic("missing file for redirection");
      733:	83 ec 0c             	sub    $0xc,%esp
-     736:	68 8c 12 00 00       	push   $0x128c
+     736:	68 bc 12 00 00       	push   $0x12bc
      73b:	e8 20 fa ff ff       	call   160 <panic>
 
 00000740 <parseexec>:
@@ -964,7 +964,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     753:	68 ac 12 00 00       	push   $0x12ac
+     753:	68 dc 12 00 00       	push   $0x12dc
      758:	57                   	push   %edi
      759:	56                   	push   %esi
      75a:	e8 b1 fe ff ff       	call   610 <peek>
@@ -1011,7 +1011,7 @@
      7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      7a3:	83 ec 04             	sub    $0x4,%esp
-     7a6:	68 c3 12 00 00       	push   $0x12c3
+     7a6:	68 f3 12 00 00       	push   $0x12f3
      7ab:	57                   	push   %edi
      7ac:	56                   	push   %esi
      7ad:	e8 5e fe ff ff       	call   610 <peek>
@@ -1046,7 +1046,7 @@
      7eb:	75 a3                	jne    790 <parseexec+0x50>
       panic("too many args");
      7ed:	83 ec 0c             	sub    $0xc,%esp
-     7f0:	68 b5 12 00 00       	push   $0x12b5
+     7f0:	68 e5 12 00 00       	push   $0x12e5
      7f5:	e8 66 f9 ff ff       	call   160 <panic>
      7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1086,7 +1086,7 @@
      83e:	c3                   	ret    
       panic("syntax");
      83f:	83 ec 0c             	sub    $0xc,%esp
-     842:	68 ae 12 00 00       	push   $0x12ae
+     842:	68 de 12 00 00       	push   $0x12de
      847:	e8 14 f9 ff ff       	call   160 <panic>
      84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1107,7 +1107,7 @@
      865:	e8 d6 fe ff ff       	call   740 <parseexec>
   if(peek(ps, es, "|")){
      86a:	83 c4 0c             	add    $0xc,%esp
-     86d:	68 c8 12 00 00       	push   $0x12c8
+     86d:	68 f8 12 00 00       	push   $0x12f8
   cmd = parseexec(ps, es);
      872:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
@@ -1186,7 +1186,7 @@
      8fe:	89 c3                	mov    %eax,%ebx
   while(peek(ps, es, "&")){
      900:	83 ec 04             	sub    $0x4,%esp
-     903:	68 ca 12 00 00       	push   $0x12ca
+     903:	68 fa 12 00 00       	push   $0x12fa
      908:	57                   	push   %edi
      909:	56                   	push   %esi
      90a:	e8 01 fd ff ff       	call   610 <peek>
@@ -1195,7 +1195,7 @@
      914:	75 d2                	jne    8e8 <parseline+0x28>
   if(peek(ps, es, ";")){
      916:	83 ec 04             	sub    $0x4,%esp
-     919:	68 c6 12 00 00       	push   $0x12c6
+     919:	68 f6 12 00 00       	push   $0x12f6
      91e:	57                   	push   %edi
      91f:	56                   	push   %esi
      920:	e8 eb fc ff ff       	call   610 <peek>
@@ -1249,7 +1249,7 @@
      97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
      980:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     983:	68 ac 12 00 00       	push   $0x12ac
+     983:	68 dc 12 00 00       	push   $0x12dc
      988:	56                   	push   %esi
      989:	53                   	push   %ebx
      98a:	e8 81 fc ff ff       	call   610 <peek>
@@ -1270,7 +1270,7 @@
      9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
   if(!peek(ps, es, ")"))
      9aa:	83 c4 0c             	add    $0xc,%esp
-     9ad:	68 e8 12 00 00       	push   $0x12e8
+     9ad:	68 18 13 00 00       	push   $0x1318
   cmd = parseline(ps, es);
      9b2:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
@@ -1301,11 +1301,11 @@
      9df:	c3                   	ret    
     panic("parseblock");
      9e0:	83 ec 0c             	sub    $0xc,%esp
-     9e3:	68 cc 12 00 00       	push   $0x12cc
+     9e3:	68 fc 12 00 00       	push   $0x12fc
      9e8:	e8 73 f7 ff ff       	call   160 <panic>
     panic("syntax - missing )");
      9ed:	83 ec 0c             	sub    $0xc,%esp
-     9f0:	68 d7 12 00 00       	push   $0x12d7
+     9f0:	68 07 13 00 00       	push   $0x1307
      9f5:	e8 66 f7 ff ff       	call   160 <panic>
      9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -1335,7 +1335,7 @@
      a16:	83 3b 05             	cmpl   $0x5,(%ebx)
      a19:	77 6d                	ja     a88 <nulterminate+0x88>
      a1b:	8b 03                	mov    (%ebx),%eax
-     a1d:	3e ff 24 85 28 13 00 	notrack jmp *0x1328(,%eax,4)
+     a1d:	3e ff 24 85 58 13 00 	notrack jmp *0x1358(,%eax,4)
      a24:	00 
      a25:	8d 76 00             	lea    0x0(%esi),%esi
     nulterminate(pcmd->right);
@@ -1451,7 +1451,7 @@
      ae6:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
      ae8:	8d 45 08             	lea    0x8(%ebp),%eax
-     aeb:	68 71 12 00 00       	push   $0x1271
+     aeb:	68 a1 12 00 00       	push   $0x12a1
      af0:	53                   	push   %ebx
      af1:	50                   	push   %eax
      af2:	e8 19 fb ff ff       	call   610 <peek>
@@ -1474,11 +1474,11 @@
     printf(2, "leftovers: %s\n", s);
      b13:	52                   	push   %edx
      b14:	50                   	push   %eax
-     b15:	68 ea 12 00 00       	push   $0x12ea
+     b15:	68 1a 13 00 00       	push   $0x131a
      b1a:	6a 02                	push   $0x2
-     b1c:	e8 cf 03 00 00       	call   ef0 <printf>
+     b1c:	e8 ff 03 00 00       	call   f20 <printf>
     panic("syntax");
-     b21:	c7 04 24 ae 12 00 00 	movl   $0x12ae,(%esp)
+     b21:	c7 04 24 de 12 00 00 	movl   $0x12de,(%esp)
      b28:	e8 33 f6 ff ff       	call   160 <panic>
      b2d:	66 90                	xchg   %ax,%ax
      b2f:	90                   	nop
@@ -2009,609 +2009,645 @@
      e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
      e30:	cd 40                	int    $0x40
      e32:	c3                   	ret    
-     e33:	66 90                	xchg   %ax,%ax
-     e35:	66 90                	xchg   %ax,%ax
-     e37:	66 90                	xchg   %ax,%ax
-     e39:	66 90                	xchg   %ax,%ax
-     e3b:	66 90                	xchg   %ax,%ax
-     e3d:	66 90                	xchg   %ax,%ax
-     e3f:	90                   	nop
 
-00000e40 <printint>:
+00000e33 <wolfie>:
+SYSCALL(wolfie)
+     e33:	b8 16 00 00 00       	mov    $0x16,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <getNumProc>:
+SYSCALL(getNumProc)
+     e3b:	b8 16 00 00 00       	mov    $0x16,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <getMaxPid>:
+SYSCALL(getMaxPid)
+     e43:	b8 17 00 00 00       	mov    $0x17,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+
+00000e4b <getProcInfo>:
+SYSCALL(getProcInfo)
+     e4b:	b8 18 00 00 00       	mov    $0x18,%eax
+     e50:	cd 40                	int    $0x40
+     e52:	c3                   	ret    
+
+00000e53 <get_burst_time>:
+SYSCALL(get_burst_time)
+     e53:	b8 19 00 00 00       	mov    $0x19,%eax
+     e58:	cd 40                	int    $0x40
+     e5a:	c3                   	ret    
+
+00000e5b <set_burst_time>:
+SYSCALL(set_burst_time)
+     e5b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+     e63:	66 90                	xchg   %ax,%ax
+     e65:	66 90                	xchg   %ax,%ax
+     e67:	66 90                	xchg   %ax,%ax
+     e69:	66 90                	xchg   %ax,%ax
+     e6b:	66 90                	xchg   %ax,%ax
+     e6d:	66 90                	xchg   %ax,%ax
+     e6f:	90                   	nop
+
+00000e70 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     e40:	55                   	push   %ebp
-     e41:	89 e5                	mov    %esp,%ebp
-     e43:	57                   	push   %edi
-     e44:	56                   	push   %esi
-     e45:	53                   	push   %ebx
-     e46:	83 ec 3c             	sub    $0x3c,%esp
-     e49:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+     e70:	55                   	push   %ebp
+     e71:	89 e5                	mov    %esp,%ebp
+     e73:	57                   	push   %edi
+     e74:	56                   	push   %esi
+     e75:	53                   	push   %ebx
+     e76:	83 ec 3c             	sub    $0x3c,%esp
+     e79:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-     e4c:	89 d1                	mov    %edx,%ecx
+     e7c:	89 d1                	mov    %edx,%ecx
 {
-     e4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     e7e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-     e51:	85 d2                	test   %edx,%edx
-     e53:	0f 89 7f 00 00 00    	jns    ed8 <printint+0x98>
-     e59:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     e5d:	74 79                	je     ed8 <printint+0x98>
+     e81:	85 d2                	test   %edx,%edx
+     e83:	0f 89 7f 00 00 00    	jns    f08 <printint+0x98>
+     e89:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e8d:	74 79                	je     f08 <printint+0x98>
     neg = 1;
-     e5f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+     e8f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-     e66:	f7 d9                	neg    %ecx
+     e96:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-     e68:	31 db                	xor    %ebx,%ebx
-     e6a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     e6d:	8d 76 00             	lea    0x0(%esi),%esi
+     e98:	31 db                	xor    %ebx,%ebx
+     e9a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e9d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-     e70:	89 c8                	mov    %ecx,%eax
-     e72:	31 d2                	xor    %edx,%edx
-     e74:	89 cf                	mov    %ecx,%edi
-     e76:	f7 75 c4             	divl   -0x3c(%ebp)
-     e79:	0f b6 92 48 13 00 00 	movzbl 0x1348(%edx),%edx
-     e80:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     e83:	89 d8                	mov    %ebx,%eax
-     e85:	8d 5b 01             	lea    0x1(%ebx),%ebx
+     ea0:	89 c8                	mov    %ecx,%eax
+     ea2:	31 d2                	xor    %edx,%edx
+     ea4:	89 cf                	mov    %ecx,%edi
+     ea6:	f7 75 c4             	divl   -0x3c(%ebp)
+     ea9:	0f b6 92 78 13 00 00 	movzbl 0x1378(%edx),%edx
+     eb0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     eb3:	89 d8                	mov    %ebx,%eax
+     eb5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-     e88:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+     eb8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-     e8b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+     ebb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-     e8e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     e91:	76 dd                	jbe    e70 <printint+0x30>
+     ebe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     ec1:	76 dd                	jbe    ea0 <printint+0x30>
   if(neg)
-     e93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     e96:	85 c9                	test   %ecx,%ecx
-     e98:	74 0c                	je     ea6 <printint+0x66>
+     ec3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     ec6:	85 c9                	test   %ecx,%ecx
+     ec8:	74 0c                	je     ed6 <printint+0x66>
     buf[i++] = '-';
-     e9a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+     eca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-     e9f:	89 d8                	mov    %ebx,%eax
+     ecf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-     ea1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+     ed1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-     ea6:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     ea9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     ead:	eb 07                	jmp    eb6 <printint+0x76>
-     eaf:	90                   	nop
-     eb0:	0f b6 13             	movzbl (%ebx),%edx
-     eb3:	83 eb 01             	sub    $0x1,%ebx
+     ed6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     ed9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     edd:	eb 07                	jmp    ee6 <printint+0x76>
+     edf:	90                   	nop
+     ee0:	0f b6 13             	movzbl (%ebx),%edx
+     ee3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-     eb6:	83 ec 04             	sub    $0x4,%esp
-     eb9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     ebc:	6a 01                	push   $0x1
-     ebe:	56                   	push   %esi
-     ebf:	57                   	push   %edi
-     ec0:	e8 ee fe ff ff       	call   db3 <write>
+     ee6:	83 ec 04             	sub    $0x4,%esp
+     ee9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     eec:	6a 01                	push   $0x1
+     eee:	56                   	push   %esi
+     eef:	57                   	push   %edi
+     ef0:	e8 be fe ff ff       	call   db3 <write>
   while(--i >= 0)
-     ec5:	83 c4 10             	add    $0x10,%esp
-     ec8:	39 de                	cmp    %ebx,%esi
-     eca:	75 e4                	jne    eb0 <printint+0x70>
+     ef5:	83 c4 10             	add    $0x10,%esp
+     ef8:	39 de                	cmp    %ebx,%esi
+     efa:	75 e4                	jne    ee0 <printint+0x70>
     putc(fd, buf[i]);
 }
-     ecc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     ecf:	5b                   	pop    %ebx
-     ed0:	5e                   	pop    %esi
-     ed1:	5f                   	pop    %edi
-     ed2:	5d                   	pop    %ebp
-     ed3:	c3                   	ret    
-     ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     efc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     eff:	5b                   	pop    %ebx
+     f00:	5e                   	pop    %esi
+     f01:	5f                   	pop    %edi
+     f02:	5d                   	pop    %ebp
+     f03:	c3                   	ret    
+     f04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     ed8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     edf:	eb 87                	jmp    e68 <printint+0x28>
-     ee1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     ee8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     eef:	90                   	nop
+     f08:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     f0f:	eb 87                	jmp    e98 <printint+0x28>
+     f11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f1f:	90                   	nop
 
-00000ef0 <printf>:
+00000f20 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     ef0:	f3 0f 1e fb          	endbr32 
-     ef4:	55                   	push   %ebp
-     ef5:	89 e5                	mov    %esp,%ebp
-     ef7:	57                   	push   %edi
-     ef8:	56                   	push   %esi
-     ef9:	53                   	push   %ebx
-     efa:	83 ec 2c             	sub    $0x2c,%esp
+     f20:	f3 0f 1e fb          	endbr32 
+     f24:	55                   	push   %ebp
+     f25:	89 e5                	mov    %esp,%ebp
+     f27:	57                   	push   %edi
+     f28:	56                   	push   %esi
+     f29:	53                   	push   %ebx
+     f2a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     efd:	8b 75 0c             	mov    0xc(%ebp),%esi
-     f00:	0f b6 1e             	movzbl (%esi),%ebx
-     f03:	84 db                	test   %bl,%bl
-     f05:	0f 84 b4 00 00 00    	je     fbf <printf+0xcf>
+     f2d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     f30:	0f b6 1e             	movzbl (%esi),%ebx
+     f33:	84 db                	test   %bl,%bl
+     f35:	0f 84 b4 00 00 00    	je     fef <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
-     f0b:	8d 45 10             	lea    0x10(%ebp),%eax
-     f0e:	83 c6 01             	add    $0x1,%esi
+     f3b:	8d 45 10             	lea    0x10(%ebp),%eax
+     f3e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
-     f11:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     f41:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-     f14:	31 d2                	xor    %edx,%edx
+     f44:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
-     f16:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     f19:	eb 33                	jmp    f4e <printf+0x5e>
-     f1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     f1f:	90                   	nop
-     f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f46:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f49:	eb 33                	jmp    f7e <printf+0x5e>
+     f4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f4f:	90                   	nop
+     f50:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-     f23:	ba 25 00 00 00       	mov    $0x25,%edx
+     f53:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
-     f28:	83 f8 25             	cmp    $0x25,%eax
-     f2b:	74 17                	je     f44 <printf+0x54>
+     f58:	83 f8 25             	cmp    $0x25,%eax
+     f5b:	74 17                	je     f74 <printf+0x54>
   write(fd, &c, 1);
-     f2d:	83 ec 04             	sub    $0x4,%esp
-     f30:	88 5d e7             	mov    %bl,-0x19(%ebp)
-     f33:	6a 01                	push   $0x1
-     f35:	57                   	push   %edi
-     f36:	ff 75 08             	pushl  0x8(%ebp)
-     f39:	e8 75 fe ff ff       	call   db3 <write>
-     f3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f5d:	83 ec 04             	sub    $0x4,%esp
+     f60:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f63:	6a 01                	push   $0x1
+     f65:	57                   	push   %edi
+     f66:	ff 75 08             	pushl  0x8(%ebp)
+     f69:	e8 45 fe ff ff       	call   db3 <write>
+     f6e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
-     f41:	83 c4 10             	add    $0x10,%esp
+     f71:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-     f44:	0f b6 1e             	movzbl (%esi),%ebx
-     f47:	83 c6 01             	add    $0x1,%esi
-     f4a:	84 db                	test   %bl,%bl
-     f4c:	74 71                	je     fbf <printf+0xcf>
+     f74:	0f b6 1e             	movzbl (%esi),%ebx
+     f77:	83 c6 01             	add    $0x1,%esi
+     f7a:	84 db                	test   %bl,%bl
+     f7c:	74 71                	je     fef <printf+0xcf>
     c = fmt[i] & 0xff;
-     f4e:	0f be cb             	movsbl %bl,%ecx
-     f51:	0f b6 c3             	movzbl %bl,%eax
+     f7e:	0f be cb             	movsbl %bl,%ecx
+     f81:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-     f54:	85 d2                	test   %edx,%edx
-     f56:	74 c8                	je     f20 <printf+0x30>
+     f84:	85 d2                	test   %edx,%edx
+     f86:	74 c8                	je     f50 <printf+0x30>
       }
     } else if(state == '%'){
-     f58:	83 fa 25             	cmp    $0x25,%edx
-     f5b:	75 e7                	jne    f44 <printf+0x54>
+     f88:	83 fa 25             	cmp    $0x25,%edx
+     f8b:	75 e7                	jne    f74 <printf+0x54>
       if(c == 'd'){
-     f5d:	83 f8 64             	cmp    $0x64,%eax
-     f60:	0f 84 9a 00 00 00    	je     1000 <printf+0x110>
+     f8d:	83 f8 64             	cmp    $0x64,%eax
+     f90:	0f 84 9a 00 00 00    	je     1030 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-     f66:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-     f6c:	83 f9 70             	cmp    $0x70,%ecx
-     f6f:	74 5f                	je     fd0 <printf+0xe0>
+     f96:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f9c:	83 f9 70             	cmp    $0x70,%ecx
+     f9f:	74 5f                	je     1000 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-     f71:	83 f8 73             	cmp    $0x73,%eax
-     f74:	0f 84 d6 00 00 00    	je     1050 <printf+0x160>
+     fa1:	83 f8 73             	cmp    $0x73,%eax
+     fa4:	0f 84 d6 00 00 00    	je     1080 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     f7a:	83 f8 63             	cmp    $0x63,%eax
-     f7d:	0f 84 8d 00 00 00    	je     1010 <printf+0x120>
+     faa:	83 f8 63             	cmp    $0x63,%eax
+     fad:	0f 84 8d 00 00 00    	je     1040 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-     f83:	83 f8 25             	cmp    $0x25,%eax
-     f86:	0f 84 b4 00 00 00    	je     1040 <printf+0x150>
+     fb3:	83 f8 25             	cmp    $0x25,%eax
+     fb6:	0f 84 b4 00 00 00    	je     1070 <printf+0x150>
   write(fd, &c, 1);
-     f8c:	83 ec 04             	sub    $0x4,%esp
-     f8f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-     f93:	6a 01                	push   $0x1
-     f95:	57                   	push   %edi
-     f96:	ff 75 08             	pushl  0x8(%ebp)
-     f99:	e8 15 fe ff ff       	call   db3 <write>
+     fbc:	83 ec 04             	sub    $0x4,%esp
+     fbf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     fc3:	6a 01                	push   $0x1
+     fc5:	57                   	push   %edi
+     fc6:	ff 75 08             	pushl  0x8(%ebp)
+     fc9:	e8 e5 fd ff ff       	call   db3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
-     f9e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     fce:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-     fa1:	83 c4 0c             	add    $0xc,%esp
-     fa4:	6a 01                	push   $0x1
-     fa6:	83 c6 01             	add    $0x1,%esi
-     fa9:	57                   	push   %edi
-     faa:	ff 75 08             	pushl  0x8(%ebp)
-     fad:	e8 01 fe ff ff       	call   db3 <write>
+     fd1:	83 c4 0c             	add    $0xc,%esp
+     fd4:	6a 01                	push   $0x1
+     fd6:	83 c6 01             	add    $0x1,%esi
+     fd9:	57                   	push   %edi
+     fda:	ff 75 08             	pushl  0x8(%ebp)
+     fdd:	e8 d1 fd ff ff       	call   db3 <write>
   for(i = 0; fmt[i]; i++){
-     fb2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     fe2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
-     fb6:	83 c4 10             	add    $0x10,%esp
+     fe6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
-     fb9:	31 d2                	xor    %edx,%edx
+     fe9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
-     fbb:	84 db                	test   %bl,%bl
-     fbd:	75 8f                	jne    f4e <printf+0x5e>
+     feb:	84 db                	test   %bl,%bl
+     fed:	75 8f                	jne    f7e <printf+0x5e>
     }
   }
 }
-     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fc2:	5b                   	pop    %ebx
-     fc3:	5e                   	pop    %esi
-     fc4:	5f                   	pop    %edi
-     fc5:	5d                   	pop    %ebp
-     fc6:	c3                   	ret    
-     fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fce:	66 90                	xchg   %ax,%ax
+     fef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ff2:	5b                   	pop    %ebx
+     ff3:	5e                   	pop    %esi
+     ff4:	5f                   	pop    %edi
+     ff5:	5d                   	pop    %ebp
+     ff6:	c3                   	ret    
+     ff7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ffe:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
-     fd0:	83 ec 0c             	sub    $0xc,%esp
-     fd3:	b9 10 00 00 00       	mov    $0x10,%ecx
-     fd8:	6a 00                	push   $0x0
-     fda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-     fdd:	8b 45 08             	mov    0x8(%ebp),%eax
-     fe0:	8b 13                	mov    (%ebx),%edx
-     fe2:	e8 59 fe ff ff       	call   e40 <printint>
+    1000:	83 ec 0c             	sub    $0xc,%esp
+    1003:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1008:	6a 00                	push   $0x0
+    100a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    100d:	8b 45 08             	mov    0x8(%ebp),%eax
+    1010:	8b 13                	mov    (%ebx),%edx
+    1012:	e8 59 fe ff ff       	call   e70 <printint>
         ap++;
-     fe7:	89 d8                	mov    %ebx,%eax
-     fe9:	83 c4 10             	add    $0x10,%esp
+    1017:	89 d8                	mov    %ebx,%eax
+    1019:	83 c4 10             	add    $0x10,%esp
       state = 0;
-     fec:	31 d2                	xor    %edx,%edx
+    101c:	31 d2                	xor    %edx,%edx
         ap++;
-     fee:	83 c0 04             	add    $0x4,%eax
-     ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     ff4:	e9 4b ff ff ff       	jmp    f44 <printf+0x54>
-     ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    101e:	83 c0 04             	add    $0x4,%eax
+    1021:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1024:	e9 4b ff ff ff       	jmp    f74 <printf+0x54>
+    1029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
-    1000:	83 ec 0c             	sub    $0xc,%esp
-    1003:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    1008:	6a 01                	push   $0x1
-    100a:	eb ce                	jmp    fda <printf+0xea>
-    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1030:	83 ec 0c             	sub    $0xc,%esp
+    1033:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1038:	6a 01                	push   $0x1
+    103a:	eb ce                	jmp    100a <printf+0xea>
+    103c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
-    1010:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    1040:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
-    1013:	83 ec 04             	sub    $0x4,%esp
+    1043:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    1016:	8b 03                	mov    (%ebx),%eax
+    1046:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
-    1018:	6a 01                	push   $0x1
+    1048:	6a 01                	push   $0x1
         ap++;
-    101a:	83 c3 04             	add    $0x4,%ebx
+    104a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
-    101d:	57                   	push   %edi
-    101e:	ff 75 08             	pushl  0x8(%ebp)
+    104d:	57                   	push   %edi
+    104e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
-    1021:	88 45 e7             	mov    %al,-0x19(%ebp)
+    1051:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1024:	e8 8a fd ff ff       	call   db3 <write>
+    1054:	e8 5a fd ff ff       	call   db3 <write>
         ap++;
-    1029:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    102c:	83 c4 10             	add    $0x10,%esp
+    1059:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    105c:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    102f:	31 d2                	xor    %edx,%edx
-    1031:	e9 0e ff ff ff       	jmp    f44 <printf+0x54>
-    1036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    103d:	8d 76 00             	lea    0x0(%esi),%esi
+    105f:	31 d2                	xor    %edx,%edx
+    1061:	e9 0e ff ff ff       	jmp    f74 <printf+0x54>
+    1066:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
-    1040:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    1070:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    1043:	83 ec 04             	sub    $0x4,%esp
-    1046:	e9 59 ff ff ff       	jmp    fa4 <printf+0xb4>
-    104b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    104f:	90                   	nop
+    1073:	83 ec 04             	sub    $0x4,%esp
+    1076:	e9 59 ff ff ff       	jmp    fd4 <printf+0xb4>
+    107b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    107f:	90                   	nop
         s = (char*)*ap;
-    1050:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    1053:	8b 18                	mov    (%eax),%ebx
+    1080:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1083:	8b 18                	mov    (%eax),%ebx
         ap++;
-    1055:	83 c0 04             	add    $0x4,%eax
-    1058:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1085:	83 c0 04             	add    $0x4,%eax
+    1088:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    105b:	85 db                	test   %ebx,%ebx
-    105d:	74 17                	je     1076 <printf+0x186>
+    108b:	85 db                	test   %ebx,%ebx
+    108d:	74 17                	je     10a6 <printf+0x186>
         while(*s != 0){
-    105f:	0f b6 03             	movzbl (%ebx),%eax
+    108f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
-    1062:	31 d2                	xor    %edx,%edx
+    1092:	31 d2                	xor    %edx,%edx
         while(*s != 0){
-    1064:	84 c0                	test   %al,%al
-    1066:	0f 84 d8 fe ff ff    	je     f44 <printf+0x54>
-    106c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    106f:	89 de                	mov    %ebx,%esi
-    1071:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1074:	eb 1a                	jmp    1090 <printf+0x1a0>
+    1094:	84 c0                	test   %al,%al
+    1096:	0f 84 d8 fe ff ff    	je     f74 <printf+0x54>
+    109c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    109f:	89 de                	mov    %ebx,%esi
+    10a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10a4:	eb 1a                	jmp    10c0 <printf+0x1a0>
           s = "(null)";
-    1076:	bb 40 13 00 00       	mov    $0x1340,%ebx
+    10a6:	bb 70 13 00 00       	mov    $0x1370,%ebx
         while(*s != 0){
-    107b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    107e:	b8 28 00 00 00       	mov    $0x28,%eax
-    1083:	89 de                	mov    %ebx,%esi
-    1085:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1088:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    108f:	90                   	nop
+    10ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    10ae:	b8 28 00 00 00       	mov    $0x28,%eax
+    10b3:	89 de                	mov    %ebx,%esi
+    10b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10bf:	90                   	nop
   write(fd, &c, 1);
-    1090:	83 ec 04             	sub    $0x4,%esp
+    10c0:	83 ec 04             	sub    $0x4,%esp
           s++;
-    1093:	83 c6 01             	add    $0x1,%esi
-    1096:	88 45 e7             	mov    %al,-0x19(%ebp)
+    10c3:	83 c6 01             	add    $0x1,%esi
+    10c6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1099:	6a 01                	push   $0x1
-    109b:	57                   	push   %edi
-    109c:	53                   	push   %ebx
-    109d:	e8 11 fd ff ff       	call   db3 <write>
+    10c9:	6a 01                	push   $0x1
+    10cb:	57                   	push   %edi
+    10cc:	53                   	push   %ebx
+    10cd:	e8 e1 fc ff ff       	call   db3 <write>
         while(*s != 0){
-    10a2:	0f b6 06             	movzbl (%esi),%eax
-    10a5:	83 c4 10             	add    $0x10,%esp
-    10a8:	84 c0                	test   %al,%al
-    10aa:	75 e4                	jne    1090 <printf+0x1a0>
-    10ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    10d2:	0f b6 06             	movzbl (%esi),%eax
+    10d5:	83 c4 10             	add    $0x10,%esp
+    10d8:	84 c0                	test   %al,%al
+    10da:	75 e4                	jne    10c0 <printf+0x1a0>
+    10dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
-    10af:	31 d2                	xor    %edx,%edx
-    10b1:	e9 8e fe ff ff       	jmp    f44 <printf+0x54>
-    10b6:	66 90                	xchg   %ax,%ax
-    10b8:	66 90                	xchg   %ax,%ax
-    10ba:	66 90                	xchg   %ax,%ax
-    10bc:	66 90                	xchg   %ax,%ax
-    10be:	66 90                	xchg   %ax,%ax
+    10df:	31 d2                	xor    %edx,%edx
+    10e1:	e9 8e fe ff ff       	jmp    f74 <printf+0x54>
+    10e6:	66 90                	xchg   %ax,%ax
+    10e8:	66 90                	xchg   %ax,%ax
+    10ea:	66 90                	xchg   %ax,%ax
+    10ec:	66 90                	xchg   %ax,%ax
+    10ee:	66 90                	xchg   %ax,%ax
 
-000010c0 <free>:
+000010f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    10c0:	f3 0f 1e fb          	endbr32 
-    10c4:	55                   	push   %ebp
+    10f0:	f3 0f 1e fb          	endbr32 
+    10f4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10c5:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    10f5:	a1 c4 19 00 00       	mov    0x19c4,%eax
 {
-    10ca:	89 e5                	mov    %esp,%ebp
-    10cc:	57                   	push   %edi
-    10cd:	56                   	push   %esi
-    10ce:	53                   	push   %ebx
-    10cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    10d2:	8b 10                	mov    (%eax),%edx
+    10fa:	89 e5                	mov    %esp,%ebp
+    10fc:	57                   	push   %edi
+    10fd:	56                   	push   %esi
+    10fe:	53                   	push   %ebx
+    10ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1102:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
-    10d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    1104:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10d7:	39 c8                	cmp    %ecx,%eax
-    10d9:	73 15                	jae    10f0 <free+0x30>
-    10db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    10df:	90                   	nop
-    10e0:	39 d1                	cmp    %edx,%ecx
-    10e2:	72 14                	jb     10f8 <free+0x38>
+    1107:	39 c8                	cmp    %ecx,%eax
+    1109:	73 15                	jae    1120 <free+0x30>
+    110b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    110f:	90                   	nop
+    1110:	39 d1                	cmp    %edx,%ecx
+    1112:	72 14                	jb     1128 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10e4:	39 d0                	cmp    %edx,%eax
-    10e6:	73 10                	jae    10f8 <free+0x38>
+    1114:	39 d0                	cmp    %edx,%eax
+    1116:	73 10                	jae    1128 <free+0x38>
 {
-    10e8:	89 d0                	mov    %edx,%eax
+    1118:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10ea:	8b 10                	mov    (%eax),%edx
-    10ec:	39 c8                	cmp    %ecx,%eax
-    10ee:	72 f0                	jb     10e0 <free+0x20>
+    111a:	8b 10                	mov    (%eax),%edx
+    111c:	39 c8                	cmp    %ecx,%eax
+    111e:	72 f0                	jb     1110 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10f0:	39 d0                	cmp    %edx,%eax
-    10f2:	72 f4                	jb     10e8 <free+0x28>
-    10f4:	39 d1                	cmp    %edx,%ecx
-    10f6:	73 f0                	jae    10e8 <free+0x28>
+    1120:	39 d0                	cmp    %edx,%eax
+    1122:	72 f4                	jb     1118 <free+0x28>
+    1124:	39 d1                	cmp    %edx,%ecx
+    1126:	73 f0                	jae    1118 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    10f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    10fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    10fe:	39 fa                	cmp    %edi,%edx
-    1100:	74 1e                	je     1120 <free+0x60>
+    1128:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    112b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    112e:	39 fa                	cmp    %edi,%edx
+    1130:	74 1e                	je     1150 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    1102:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1132:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    1105:	8b 50 04             	mov    0x4(%eax),%edx
-    1108:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    110b:	39 f1                	cmp    %esi,%ecx
-    110d:	74 28                	je     1137 <free+0x77>
+    1135:	8b 50 04             	mov    0x4(%eax),%edx
+    1138:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    113b:	39 f1                	cmp    %esi,%ecx
+    113d:	74 28                	je     1167 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    110f:	89 08                	mov    %ecx,(%eax)
+    113f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
-    1111:	5b                   	pop    %ebx
+    1141:	5b                   	pop    %ebx
   freep = p;
-    1112:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1142:	a3 c4 19 00 00       	mov    %eax,0x19c4
 }
-    1117:	5e                   	pop    %esi
-    1118:	5f                   	pop    %edi
-    1119:	5d                   	pop    %ebp
-    111a:	c3                   	ret    
-    111b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    111f:	90                   	nop
+    1147:	5e                   	pop    %esi
+    1148:	5f                   	pop    %edi
+    1149:	5d                   	pop    %ebp
+    114a:	c3                   	ret    
+    114b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    114f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
-    1120:	03 72 04             	add    0x4(%edx),%esi
-    1123:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    1150:	03 72 04             	add    0x4(%edx),%esi
+    1153:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    1126:	8b 10                	mov    (%eax),%edx
-    1128:	8b 12                	mov    (%edx),%edx
-    112a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1156:	8b 10                	mov    (%eax),%edx
+    1158:	8b 12                	mov    (%edx),%edx
+    115a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    112d:	8b 50 04             	mov    0x4(%eax),%edx
-    1130:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1133:	39 f1                	cmp    %esi,%ecx
-    1135:	75 d8                	jne    110f <free+0x4f>
+    115d:	8b 50 04             	mov    0x4(%eax),%edx
+    1160:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1163:	39 f1                	cmp    %esi,%ecx
+    1165:	75 d8                	jne    113f <free+0x4f>
     p->s.size += bp->s.size;
-    1137:	03 53 fc             	add    -0x4(%ebx),%edx
+    1167:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    113a:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    116a:	a3 c4 19 00 00       	mov    %eax,0x19c4
     p->s.size += bp->s.size;
-    113f:	89 50 04             	mov    %edx,0x4(%eax)
+    116f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    1142:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    1145:	89 10                	mov    %edx,(%eax)
+    1172:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1175:	89 10                	mov    %edx,(%eax)
 }
-    1147:	5b                   	pop    %ebx
-    1148:	5e                   	pop    %esi
-    1149:	5f                   	pop    %edi
-    114a:	5d                   	pop    %ebp
-    114b:	c3                   	ret    
-    114c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1177:	5b                   	pop    %ebx
+    1178:	5e                   	pop    %esi
+    1179:	5f                   	pop    %edi
+    117a:	5d                   	pop    %ebp
+    117b:	c3                   	ret    
+    117c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00001150 <malloc>:
+00001180 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    1150:	f3 0f 1e fb          	endbr32 
-    1154:	55                   	push   %ebp
-    1155:	89 e5                	mov    %esp,%ebp
-    1157:	57                   	push   %edi
-    1158:	56                   	push   %esi
-    1159:	53                   	push   %ebx
-    115a:	83 ec 1c             	sub    $0x1c,%esp
+    1180:	f3 0f 1e fb          	endbr32 
+    1184:	55                   	push   %ebp
+    1185:	89 e5                	mov    %esp,%ebp
+    1187:	57                   	push   %edi
+    1188:	56                   	push   %esi
+    1189:	53                   	push   %ebx
+    118a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    115d:	8b 45 08             	mov    0x8(%ebp),%eax
+    118d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    1160:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    1190:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1166:	8d 70 07             	lea    0x7(%eax),%esi
-    1169:	c1 ee 03             	shr    $0x3,%esi
-    116c:	83 c6 01             	add    $0x1,%esi
+    1196:	8d 70 07             	lea    0x7(%eax),%esi
+    1199:	c1 ee 03             	shr    $0x3,%esi
+    119c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    116f:	85 ff                	test   %edi,%edi
-    1171:	0f 84 a9 00 00 00    	je     1220 <malloc+0xd0>
+    119f:	85 ff                	test   %edi,%edi
+    11a1:	0f 84 a9 00 00 00    	je     1250 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1177:	8b 07                	mov    (%edi),%eax
+    11a7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
-    1179:	8b 48 04             	mov    0x4(%eax),%ecx
-    117c:	39 f1                	cmp    %esi,%ecx
-    117e:	73 6d                	jae    11ed <malloc+0x9d>
-    1180:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    1186:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    118b:	0f 43 de             	cmovae %esi,%ebx
+    11a9:	8b 48 04             	mov    0x4(%eax),%ecx
+    11ac:	39 f1                	cmp    %esi,%ecx
+    11ae:	73 6d                	jae    121d <malloc+0x9d>
+    11b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    11b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    11bb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    118e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    1195:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    1198:	eb 17                	jmp    11b1 <malloc+0x61>
-    119a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    11be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    11c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    11c8:	eb 17                	jmp    11e1 <malloc+0x61>
+    11ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11a0:	8b 10                	mov    (%eax),%edx
+    11d0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
-    11a2:	8b 4a 04             	mov    0x4(%edx),%ecx
-    11a5:	39 f1                	cmp    %esi,%ecx
-    11a7:	73 4f                	jae    11f8 <malloc+0xa8>
-    11a9:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
-    11af:	89 d0                	mov    %edx,%eax
+    11d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11d5:	39 f1                	cmp    %esi,%ecx
+    11d7:	73 4f                	jae    1228 <malloc+0xa8>
+    11d9:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
+    11df:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    11b1:	39 c7                	cmp    %eax,%edi
-    11b3:	75 eb                	jne    11a0 <malloc+0x50>
+    11e1:	39 c7                	cmp    %eax,%edi
+    11e3:	75 eb                	jne    11d0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
-    11b5:	83 ec 0c             	sub    $0xc,%esp
-    11b8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    11bb:	e8 5b fc ff ff       	call   e1b <sbrk>
+    11e5:	83 ec 0c             	sub    $0xc,%esp
+    11e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11eb:	e8 2b fc ff ff       	call   e1b <sbrk>
   if(p == (char*)-1)
-    11c0:	83 c4 10             	add    $0x10,%esp
-    11c3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    11c6:	74 1b                	je     11e3 <malloc+0x93>
+    11f0:	83 c4 10             	add    $0x10,%esp
+    11f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    11f6:	74 1b                	je     1213 <malloc+0x93>
   hp->s.size = nu;
-    11c8:	89 58 04             	mov    %ebx,0x4(%eax)
+    11f8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    11cb:	83 ec 0c             	sub    $0xc,%esp
-    11ce:	83 c0 08             	add    $0x8,%eax
-    11d1:	50                   	push   %eax
-    11d2:	e8 e9 fe ff ff       	call   10c0 <free>
+    11fb:	83 ec 0c             	sub    $0xc,%esp
+    11fe:	83 c0 08             	add    $0x8,%eax
+    1201:	50                   	push   %eax
+    1202:	e8 e9 fe ff ff       	call   10f0 <free>
   return freep;
-    11d7:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    1207:	a1 c4 19 00 00       	mov    0x19c4,%eax
       if((p = morecore(nunits)) == 0)
-    11dc:	83 c4 10             	add    $0x10,%esp
-    11df:	85 c0                	test   %eax,%eax
-    11e1:	75 bd                	jne    11a0 <malloc+0x50>
+    120c:	83 c4 10             	add    $0x10,%esp
+    120f:	85 c0                	test   %eax,%eax
+    1211:	75 bd                	jne    11d0 <malloc+0x50>
         return 0;
   }
 }
-    11e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1213:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    11e6:	31 c0                	xor    %eax,%eax
+    1216:	31 c0                	xor    %eax,%eax
 }
-    11e8:	5b                   	pop    %ebx
-    11e9:	5e                   	pop    %esi
-    11ea:	5f                   	pop    %edi
-    11eb:	5d                   	pop    %ebp
-    11ec:	c3                   	ret    
+    1218:	5b                   	pop    %ebx
+    1219:	5e                   	pop    %esi
+    121a:	5f                   	pop    %edi
+    121b:	5d                   	pop    %ebp
+    121c:	c3                   	ret    
     if(p->s.size >= nunits){
-    11ed:	89 c2                	mov    %eax,%edx
-    11ef:	89 f8                	mov    %edi,%eax
-    11f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    121d:	89 c2                	mov    %eax,%edx
+    121f:	89 f8                	mov    %edi,%eax
+    1221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    11f8:	39 ce                	cmp    %ecx,%esi
-    11fa:	74 54                	je     1250 <malloc+0x100>
+    1228:	39 ce                	cmp    %ecx,%esi
+    122a:	74 54                	je     1280 <malloc+0x100>
         p->s.size -= nunits;
-    11fc:	29 f1                	sub    %esi,%ecx
-    11fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+    122c:	29 f1                	sub    %esi,%ecx
+    122e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
-    1201:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+    1231:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
-    1204:	89 72 04             	mov    %esi,0x4(%edx)
+    1234:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    1207:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1237:	a3 c4 19 00 00       	mov    %eax,0x19c4
 }
-    120c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    123c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    120f:	8d 42 08             	lea    0x8(%edx),%eax
+    123f:	8d 42 08             	lea    0x8(%edx),%eax
 }
-    1212:	5b                   	pop    %ebx
-    1213:	5e                   	pop    %esi
-    1214:	5f                   	pop    %edi
-    1215:	5d                   	pop    %ebp
-    1216:	c3                   	ret    
-    1217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    121e:	66 90                	xchg   %ax,%ax
+    1242:	5b                   	pop    %ebx
+    1243:	5e                   	pop    %esi
+    1244:	5f                   	pop    %edi
+    1245:	5d                   	pop    %ebp
+    1246:	c3                   	ret    
+    1247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    124e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    1220:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
-    1227:	19 00 00 
+    1250:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
+    1257:	19 00 00 
     base.s.size = 0;
-    122a:	bf a8 19 00 00       	mov    $0x19a8,%edi
+    125a:	bf c8 19 00 00       	mov    $0x19c8,%edi
     base.s.ptr = freep = prevp = &base;
-    122f:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
-    1236:	19 00 00 
+    125f:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
+    1266:	19 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1239:	89 f8                	mov    %edi,%eax
+    1269:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    123b:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
-    1242:	00 00 00 
+    126b:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
+    1272:	00 00 00 
     if(p->s.size >= nunits){
-    1245:	e9 36 ff ff ff       	jmp    1180 <malloc+0x30>
-    124a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1275:	e9 36 ff ff ff       	jmp    11b0 <malloc+0x30>
+    127a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    1250:	8b 0a                	mov    (%edx),%ecx
-    1252:	89 08                	mov    %ecx,(%eax)
-    1254:	eb b1                	jmp    1207 <malloc+0xb7>
+    1280:	8b 0a                	mov    (%edx),%ecx
+    1282:	89 08                	mov    %ecx,(%eax)
+    1284:	eb b1                	jmp    1237 <malloc+0xb7>
Binary files xv6-public/sh.o and xv6-public-hybrid/sh.o differ
diff -u xv6-public/sh.sym xv6-public-hybrid/sh.sym
--- xv6-public/sh.sym	2022-10-07 20:01:01.706099765 +0530
+++ xv6-public-hybrid/sh.sym	2022-10-07 18:39:47.512847000 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00001258 .rodata
-0000135c .eh_frame
-00001918 .data
-00001940 .bss
+00001288 .rodata
+0000138c .eh_frame
+00001948 .data
+00001960 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,19 +12,20 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001940 buf.1123
+00001960 buf.1138
 00000000 ulib.c
 00000000 printf.c
-00000e40 printint
-00001348 digits.1085
+00000e70 printint
+00001378 digits.1100
 00000000 umalloc.c
-000019a4 freep
-000019a8 base
+000019c4 freep
+000019c8 base
 00000b30 strcpy
-00000ef0 printf
+00000f20 printf
 00000d60 memmove
 00000ddb mknod
 00000370 execcmd
+00000e33 wolfie
 00000c50 gets
 00000e13 getpid
 00000850 parsepipe
@@ -33,9 +34,10 @@
 00000610 peek
 00000690 parseredirs
 000004b0 gettoken
-00001150 malloc
+00001180 malloc
 00000e23 sleep
-00001920 whitespace
+00000e53 get_burst_time
+00001950 whitespace
 00000340 fork1
 00000a00 nulterminate
 00000da3 pipe
@@ -49,7 +51,7 @@
 00000970 parseblock
 00000dcb exec
 00000d9b wait
-00001918 symbols
+00001948 symbols
 00000dab read
 00000740 parseexec
 00000de3 unlink
@@ -57,16 +59,20 @@
 00000d8b fork
 00000e1b sbrk
 00000e2b uptime
-00001926 __bss_start
+00001956 __bss_start
 00000bf0 memset
 00000000 main
+00000e5b set_burst_time
 00000b60 strcmp
 00000e0b dup
 000003f0 pipecmd
 000003a0 redircmd
+00000e43 getMaxPid
+00000e3b getNumProc
+00000e4b getProcInfo
 00000cd0 stat
-00001926 _edata
-000019b0 _end
+00001956 _edata
+000019d0 _end
 00000df3 link
 00000d93 exit
 00000d20 atoi
@@ -76,4 +82,4 @@
 00000dfb mkdir
 00000dbb close
 00000430 listcmd
-000010c0 free
+000010f0 free
Binary files xv6-public/sleeplock.o and xv6-public-hybrid/sleeplock.o differ
Binary files xv6-public/spinlock.o and xv6-public-hybrid/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public-hybrid/_stressfs differ
diff -u xv6-public/stressfs.asm xv6-public-hybrid/stressfs.asm
--- xv6-public/stressfs.asm	2022-10-07 20:01:01.794111614 +0530
+++ xv6-public-hybrid/stressfs.asm	2022-10-07 18:39:47.576877000 +0530
@@ -39,7 +39,7 @@
   char path[] = "stressfs0";
   28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
   printf(1, "stressfs starting\n");
-  2f:	68 68 08 00 00       	push   $0x868
+  2f:	68 98 08 00 00       	push   $0x898
   34:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
@@ -47,7 +47,7 @@
   40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
   47:	73 66 73 
   printf(1, "stressfs starting\n");
-  4a:	e8 b1 04 00 00       	call   500 <printf>
+  4a:	e8 e1 04 00 00       	call   530 <printf>
   memset(data, 'a', sizeof(data));
   4f:	83 c4 0c             	add    $0xc,%esp
   52:	68 00 02 00 00       	push   $0x200
@@ -74,9 +74,9 @@
   fd = open(path, O_CREATE | O_RDWR);
   80:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  85:	68 7b 08 00 00       	push   $0x87b
+  85:	68 ab 08 00 00       	push   $0x8ab
   8a:	6a 01                	push   $0x1
-  8c:	e8 6f 04 00 00       	call   500 <printf>
+  8c:	e8 9f 04 00 00       	call   530 <printf>
   path[8] += i;
   91:	89 f8                	mov    %edi,%eax
   fd = open(path, O_CREATE | O_RDWR);
@@ -112,9 +112,9 @@
   printf(1, "read\n");
   d8:	58                   	pop    %eax
   d9:	5a                   	pop    %edx
-  da:	68 85 08 00 00       	push   $0x885
+  da:	68 b5 08 00 00       	push   $0x8b5
   df:	6a 01                	push   $0x1
-  e1:	e8 1a 04 00 00       	call   500 <printf>
+  e1:	e8 4a 04 00 00       	call   530 <printf>
 
   fd = open(path, O_RDONLY);
   e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
@@ -684,609 +684,645 @@
  43b:	b8 0e 00 00 00       	mov    $0xe,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
- 443:	66 90                	xchg   %ax,%ax
- 445:	66 90                	xchg   %ax,%ax
- 447:	66 90                	xchg   %ax,%ax
- 449:	66 90                	xchg   %ax,%ax
- 44b:	66 90                	xchg   %ax,%ax
- 44d:	66 90                	xchg   %ax,%ax
- 44f:	90                   	nop
 
-00000450 <printint>:
+00000443 <wolfie>:
+SYSCALL(wolfie)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <getNumProc>:
+SYSCALL(getNumProc)
+ 44b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 453:	b8 17 00 00 00       	mov    $0x17,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 45b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 463:	b8 19 00 00 00       	mov    $0x19,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 46b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+ 473:	66 90                	xchg   %ax,%ax
+ 475:	66 90                	xchg   %ax,%ax
+ 477:	66 90                	xchg   %ax,%ax
+ 479:	66 90                	xchg   %ax,%ax
+ 47b:	66 90                	xchg   %ax,%ax
+ 47d:	66 90                	xchg   %ax,%ax
+ 47f:	90                   	nop
+
+00000480 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 450:	55                   	push   %ebp
- 451:	89 e5                	mov    %esp,%ebp
- 453:	57                   	push   %edi
- 454:	56                   	push   %esi
- 455:	53                   	push   %ebx
- 456:	83 ec 3c             	sub    $0x3c,%esp
- 459:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 3c             	sub    $0x3c,%esp
+ 489:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 45c:	89 d1                	mov    %edx,%ecx
+ 48c:	89 d1                	mov    %edx,%ecx
 {
- 45e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 48e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 461:	85 d2                	test   %edx,%edx
- 463:	0f 89 7f 00 00 00    	jns    4e8 <printint+0x98>
- 469:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 46d:	74 79                	je     4e8 <printint+0x98>
+ 491:	85 d2                	test   %edx,%edx
+ 493:	0f 89 7f 00 00 00    	jns    518 <printint+0x98>
+ 499:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 49d:	74 79                	je     518 <printint+0x98>
     neg = 1;
- 46f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 49f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 476:	f7 d9                	neg    %ecx
+ 4a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 478:	31 db                	xor    %ebx,%ebx
- 47a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a8:	31 db                	xor    %ebx,%ebx
+ 4aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 480:	89 c8                	mov    %ecx,%eax
- 482:	31 d2                	xor    %edx,%edx
- 484:	89 cf                	mov    %ecx,%edi
- 486:	f7 75 c4             	divl   -0x3c(%ebp)
- 489:	0f b6 92 94 08 00 00 	movzbl 0x894(%edx),%edx
- 490:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 493:	89 d8                	mov    %ebx,%eax
- 495:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 4b0:	89 c8                	mov    %ecx,%eax
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	89 cf                	mov    %ecx,%edi
+ 4b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4b9:	0f b6 92 c4 08 00 00 	movzbl 0x8c4(%edx),%edx
+ 4c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4c3:	89 d8                	mov    %ebx,%eax
+ 4c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 498:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 49b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 49e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4a1:	76 dd                	jbe    480 <printint+0x30>
+ 4ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4d1:	76 dd                	jbe    4b0 <printint+0x30>
   if(neg)
- 4a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4a6:	85 c9                	test   %ecx,%ecx
- 4a8:	74 0c                	je     4b6 <printint+0x66>
+ 4d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4d6:	85 c9                	test   %ecx,%ecx
+ 4d8:	74 0c                	je     4e6 <printint+0x66>
     buf[i++] = '-';
- 4aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4af:	89 d8                	mov    %ebx,%eax
+ 4df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 4b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 4b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4bd:	eb 07                	jmp    4c6 <printint+0x76>
- 4bf:	90                   	nop
- 4c0:	0f b6 13             	movzbl (%ebx),%edx
- 4c3:	83 eb 01             	sub    $0x1,%ebx
+ 4e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ed:	eb 07                	jmp    4f6 <printint+0x76>
+ 4ef:	90                   	nop
+ 4f0:	0f b6 13             	movzbl (%ebx),%edx
+ 4f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4c6:	83 ec 04             	sub    $0x4,%esp
- 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4cc:	6a 01                	push   $0x1
- 4ce:	56                   	push   %esi
- 4cf:	57                   	push   %edi
- 4d0:	e8 ee fe ff ff       	call   3c3 <write>
+ 4f6:	83 ec 04             	sub    $0x4,%esp
+ 4f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4fc:	6a 01                	push   $0x1
+ 4fe:	56                   	push   %esi
+ 4ff:	57                   	push   %edi
+ 500:	e8 be fe ff ff       	call   3c3 <write>
   while(--i >= 0)
- 4d5:	83 c4 10             	add    $0x10,%esp
- 4d8:	39 de                	cmp    %ebx,%esi
- 4da:	75 e4                	jne    4c0 <printint+0x70>
+ 505:	83 c4 10             	add    $0x10,%esp
+ 508:	39 de                	cmp    %ebx,%esi
+ 50a:	75 e4                	jne    4f0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4df:	5b                   	pop    %ebx
- 4e0:	5e                   	pop    %esi
- 4e1:	5f                   	pop    %edi
- 4e2:	5d                   	pop    %ebp
- 4e3:	c3                   	ret    
- 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50f:	5b                   	pop    %ebx
+ 510:	5e                   	pop    %esi
+ 511:	5f                   	pop    %edi
+ 512:	5d                   	pop    %ebp
+ 513:	c3                   	ret    
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4ef:	eb 87                	jmp    478 <printint+0x28>
- 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ff:	90                   	nop
+ 518:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 51f:	eb 87                	jmp    4a8 <printint+0x28>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
 
-00000500 <printf>:
+00000530 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 500:	f3 0f 1e fb          	endbr32 
- 504:	55                   	push   %ebp
- 505:	89 e5                	mov    %esp,%ebp
- 507:	57                   	push   %edi
- 508:	56                   	push   %esi
- 509:	53                   	push   %ebx
- 50a:	83 ec 2c             	sub    $0x2c,%esp
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	57                   	push   %edi
+ 538:	56                   	push   %esi
+ 539:	53                   	push   %ebx
+ 53a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 50d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 510:	0f b6 1e             	movzbl (%esi),%ebx
- 513:	84 db                	test   %bl,%bl
- 515:	0f 84 b4 00 00 00    	je     5cf <printf+0xcf>
+ 53d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 540:	0f b6 1e             	movzbl (%esi),%ebx
+ 543:	84 db                	test   %bl,%bl
+ 545:	0f 84 b4 00 00 00    	je     5ff <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 51b:	8d 45 10             	lea    0x10(%ebp),%eax
- 51e:	83 c6 01             	add    $0x1,%esi
+ 54b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 54e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 521:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 551:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 524:	31 d2                	xor    %edx,%edx
+ 554:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 526:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 529:	eb 33                	jmp    55e <printf+0x5e>
- 52b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 52f:	90                   	nop
- 530:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 556:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 559:	eb 33                	jmp    58e <printf+0x5e>
+ 55b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+ 560:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 533:	ba 25 00 00 00       	mov    $0x25,%edx
+ 563:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 538:	83 f8 25             	cmp    $0x25,%eax
- 53b:	74 17                	je     554 <printf+0x54>
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	74 17                	je     584 <printf+0x54>
   write(fd, &c, 1);
- 53d:	83 ec 04             	sub    $0x4,%esp
- 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 543:	6a 01                	push   $0x1
- 545:	57                   	push   %edi
- 546:	ff 75 08             	pushl  0x8(%ebp)
- 549:	e8 75 fe ff ff       	call   3c3 <write>
- 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 56d:	83 ec 04             	sub    $0x4,%esp
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 573:	6a 01                	push   $0x1
+ 575:	57                   	push   %edi
+ 576:	ff 75 08             	pushl  0x8(%ebp)
+ 579:	e8 45 fe ff ff       	call   3c3 <write>
+ 57e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 551:	83 c4 10             	add    $0x10,%esp
+ 581:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 554:	0f b6 1e             	movzbl (%esi),%ebx
- 557:	83 c6 01             	add    $0x1,%esi
- 55a:	84 db                	test   %bl,%bl
- 55c:	74 71                	je     5cf <printf+0xcf>
+ 584:	0f b6 1e             	movzbl (%esi),%ebx
+ 587:	83 c6 01             	add    $0x1,%esi
+ 58a:	84 db                	test   %bl,%bl
+ 58c:	74 71                	je     5ff <printf+0xcf>
     c = fmt[i] & 0xff;
- 55e:	0f be cb             	movsbl %bl,%ecx
- 561:	0f b6 c3             	movzbl %bl,%eax
+ 58e:	0f be cb             	movsbl %bl,%ecx
+ 591:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 564:	85 d2                	test   %edx,%edx
- 566:	74 c8                	je     530 <printf+0x30>
+ 594:	85 d2                	test   %edx,%edx
+ 596:	74 c8                	je     560 <printf+0x30>
       }
     } else if(state == '%'){
- 568:	83 fa 25             	cmp    $0x25,%edx
- 56b:	75 e7                	jne    554 <printf+0x54>
+ 598:	83 fa 25             	cmp    $0x25,%edx
+ 59b:	75 e7                	jne    584 <printf+0x54>
       if(c == 'd'){
- 56d:	83 f8 64             	cmp    $0x64,%eax
- 570:	0f 84 9a 00 00 00    	je     610 <printf+0x110>
+ 59d:	83 f8 64             	cmp    $0x64,%eax
+ 5a0:	0f 84 9a 00 00 00    	je     640 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 576:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 57c:	83 f9 70             	cmp    $0x70,%ecx
- 57f:	74 5f                	je     5e0 <printf+0xe0>
+ 5a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5ac:	83 f9 70             	cmp    $0x70,%ecx
+ 5af:	74 5f                	je     610 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 581:	83 f8 73             	cmp    $0x73,%eax
- 584:	0f 84 d6 00 00 00    	je     660 <printf+0x160>
+ 5b1:	83 f8 73             	cmp    $0x73,%eax
+ 5b4:	0f 84 d6 00 00 00    	je     690 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 58a:	83 f8 63             	cmp    $0x63,%eax
- 58d:	0f 84 8d 00 00 00    	je     620 <printf+0x120>
+ 5ba:	83 f8 63             	cmp    $0x63,%eax
+ 5bd:	0f 84 8d 00 00 00    	je     650 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 593:	83 f8 25             	cmp    $0x25,%eax
- 596:	0f 84 b4 00 00 00    	je     650 <printf+0x150>
+ 5c3:	83 f8 25             	cmp    $0x25,%eax
+ 5c6:	0f 84 b4 00 00 00    	je     680 <printf+0x150>
   write(fd, &c, 1);
- 59c:	83 ec 04             	sub    $0x4,%esp
- 59f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5a3:	6a 01                	push   $0x1
- 5a5:	57                   	push   %edi
- 5a6:	ff 75 08             	pushl  0x8(%ebp)
- 5a9:	e8 15 fe ff ff       	call   3c3 <write>
+ 5cc:	83 ec 04             	sub    $0x4,%esp
+ 5cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5d3:	6a 01                	push   $0x1
+ 5d5:	57                   	push   %edi
+ 5d6:	ff 75 08             	pushl  0x8(%ebp)
+ 5d9:	e8 e5 fd ff ff       	call   3c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 5ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5de:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 5b1:	83 c4 0c             	add    $0xc,%esp
- 5b4:	6a 01                	push   $0x1
- 5b6:	83 c6 01             	add    $0x1,%esi
- 5b9:	57                   	push   %edi
- 5ba:	ff 75 08             	pushl  0x8(%ebp)
- 5bd:	e8 01 fe ff ff       	call   3c3 <write>
+ 5e1:	83 c4 0c             	add    $0xc,%esp
+ 5e4:	6a 01                	push   $0x1
+ 5e6:	83 c6 01             	add    $0x1,%esi
+ 5e9:	57                   	push   %edi
+ 5ea:	ff 75 08             	pushl  0x8(%ebp)
+ 5ed:	e8 d1 fd ff ff       	call   3c3 <write>
   for(i = 0; fmt[i]; i++){
- 5c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 5c6:	83 c4 10             	add    $0x10,%esp
+ 5f6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 5c9:	31 d2                	xor    %edx,%edx
+ 5f9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 5cb:	84 db                	test   %bl,%bl
- 5cd:	75 8f                	jne    55e <printf+0x5e>
+ 5fb:	84 db                	test   %bl,%bl
+ 5fd:	75 8f                	jne    58e <printf+0x5e>
     }
   }
 }
- 5cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5d2:	5b                   	pop    %ebx
- 5d3:	5e                   	pop    %esi
- 5d4:	5f                   	pop    %edi
- 5d5:	5d                   	pop    %ebp
- 5d6:	c3                   	ret    
- 5d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5de:	66 90                	xchg   %ax,%ax
+ 5ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 602:	5b                   	pop    %ebx
+ 603:	5e                   	pop    %esi
+ 604:	5f                   	pop    %edi
+ 605:	5d                   	pop    %ebp
+ 606:	c3                   	ret    
+ 607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5e8:	6a 00                	push   $0x0
- 5ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 5f0:	8b 13                	mov    (%ebx),%edx
- 5f2:	e8 59 fe ff ff       	call   450 <printint>
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 618:	6a 00                	push   $0x0
+ 61a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 61d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 620:	8b 13                	mov    (%ebx),%edx
+ 622:	e8 59 fe ff ff       	call   480 <printint>
         ap++;
- 5f7:	89 d8                	mov    %ebx,%eax
- 5f9:	83 c4 10             	add    $0x10,%esp
+ 627:	89 d8                	mov    %ebx,%eax
+ 629:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5fc:	31 d2                	xor    %edx,%edx
+ 62c:	31 d2                	xor    %edx,%edx
         ap++;
- 5fe:	83 c0 04             	add    $0x4,%eax
- 601:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 604:	e9 4b ff ff ff       	jmp    554 <printf+0x54>
- 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62e:	83 c0 04             	add    $0x4,%eax
+ 631:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 634:	e9 4b ff ff ff       	jmp    584 <printf+0x54>
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 610:	83 ec 0c             	sub    $0xc,%esp
- 613:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 618:	6a 01                	push   $0x1
- 61a:	eb ce                	jmp    5ea <printf+0xea>
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 648:	6a 01                	push   $0x1
+ 64a:	eb ce                	jmp    61a <printf+0xea>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 650:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 623:	83 ec 04             	sub    $0x4,%esp
+ 653:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 626:	8b 03                	mov    (%ebx),%eax
+ 656:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 628:	6a 01                	push   $0x1
+ 658:	6a 01                	push   $0x1
         ap++;
- 62a:	83 c3 04             	add    $0x4,%ebx
+ 65a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 62d:	57                   	push   %edi
- 62e:	ff 75 08             	pushl  0x8(%ebp)
+ 65d:	57                   	push   %edi
+ 65e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 631:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 661:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 634:	e8 8a fd ff ff       	call   3c3 <write>
+ 664:	e8 5a fd ff ff       	call   3c3 <write>
         ap++;
- 639:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 63c:	83 c4 10             	add    $0x10,%esp
+ 669:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 66c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 63f:	31 d2                	xor    %edx,%edx
- 641:	e9 0e ff ff ff       	jmp    554 <printf+0x54>
- 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64d:	8d 76 00             	lea    0x0(%esi),%esi
+ 66f:	31 d2                	xor    %edx,%edx
+ 671:	e9 0e ff ff ff       	jmp    584 <printf+0x54>
+ 676:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 650:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 680:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 653:	83 ec 04             	sub    $0x4,%esp
- 656:	e9 59 ff ff ff       	jmp    5b4 <printf+0xb4>
- 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
+ 683:	83 ec 04             	sub    $0x4,%esp
+ 686:	e9 59 ff ff ff       	jmp    5e4 <printf+0xb4>
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
         s = (char*)*ap;
- 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 663:	8b 18                	mov    (%eax),%ebx
+ 690:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 693:	8b 18                	mov    (%eax),%ebx
         ap++;
- 665:	83 c0 04             	add    $0x4,%eax
- 668:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 695:	83 c0 04             	add    $0x4,%eax
+ 698:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 66b:	85 db                	test   %ebx,%ebx
- 66d:	74 17                	je     686 <printf+0x186>
+ 69b:	85 db                	test   %ebx,%ebx
+ 69d:	74 17                	je     6b6 <printf+0x186>
         while(*s != 0){
- 66f:	0f b6 03             	movzbl (%ebx),%eax
+ 69f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 672:	31 d2                	xor    %edx,%edx
+ 6a2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 674:	84 c0                	test   %al,%al
- 676:	0f 84 d8 fe ff ff    	je     554 <printf+0x54>
- 67c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 67f:	89 de                	mov    %ebx,%esi
- 681:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 684:	eb 1a                	jmp    6a0 <printf+0x1a0>
+ 6a4:	84 c0                	test   %al,%al
+ 6a6:	0f 84 d8 fe ff ff    	je     584 <printf+0x54>
+ 6ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6af:	89 de                	mov    %ebx,%esi
+ 6b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b4:	eb 1a                	jmp    6d0 <printf+0x1a0>
           s = "(null)";
- 686:	bb 8b 08 00 00       	mov    $0x88b,%ebx
+ 6b6:	bb bb 08 00 00       	mov    $0x8bb,%ebx
         while(*s != 0){
- 68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 68e:	b8 28 00 00 00       	mov    $0x28,%eax
- 693:	89 de                	mov    %ebx,%esi
- 695:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 698:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 69f:	90                   	nop
+ 6bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6c3:	89 de                	mov    %ebx,%esi
+ 6c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
   write(fd, &c, 1);
- 6a0:	83 ec 04             	sub    $0x4,%esp
+ 6d0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 6a3:	83 c6 01             	add    $0x1,%esi
- 6a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6d3:	83 c6 01             	add    $0x1,%esi
+ 6d6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 6a9:	6a 01                	push   $0x1
- 6ab:	57                   	push   %edi
- 6ac:	53                   	push   %ebx
- 6ad:	e8 11 fd ff ff       	call   3c3 <write>
+ 6d9:	6a 01                	push   $0x1
+ 6db:	57                   	push   %edi
+ 6dc:	53                   	push   %ebx
+ 6dd:	e8 e1 fc ff ff       	call   3c3 <write>
         while(*s != 0){
- 6b2:	0f b6 06             	movzbl (%esi),%eax
- 6b5:	83 c4 10             	add    $0x10,%esp
- 6b8:	84 c0                	test   %al,%al
- 6ba:	75 e4                	jne    6a0 <printf+0x1a0>
- 6bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 6e2:	0f b6 06             	movzbl (%esi),%eax
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	84 c0                	test   %al,%al
+ 6ea:	75 e4                	jne    6d0 <printf+0x1a0>
+ 6ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 6bf:	31 d2                	xor    %edx,%edx
- 6c1:	e9 8e fe ff ff       	jmp    554 <printf+0x54>
- 6c6:	66 90                	xchg   %ax,%ax
- 6c8:	66 90                	xchg   %ax,%ax
- 6ca:	66 90                	xchg   %ax,%ax
- 6cc:	66 90                	xchg   %ax,%ax
- 6ce:	66 90                	xchg   %ax,%ax
+ 6ef:	31 d2                	xor    %edx,%edx
+ 6f1:	e9 8e fe ff ff       	jmp    584 <printf+0x54>
+ 6f6:	66 90                	xchg   %ax,%ax
+ 6f8:	66 90                	xchg   %ax,%ax
+ 6fa:	66 90                	xchg   %ax,%ax
+ 6fc:	66 90                	xchg   %ax,%ax
+ 6fe:	66 90                	xchg   %ax,%ax
 
-000006d0 <free>:
+00000700 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6d0:	f3 0f 1e fb          	endbr32 
- 6d4:	55                   	push   %ebp
+ 700:	f3 0f 1e fb          	endbr32 
+ 704:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d5:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 705:	a1 7c 0b 00 00       	mov    0xb7c,%eax
 {
- 6da:	89 e5                	mov    %esp,%ebp
- 6dc:	57                   	push   %edi
- 6dd:	56                   	push   %esi
- 6de:	53                   	push   %ebx
- 6df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6e2:	8b 10                	mov    (%eax),%edx
+ 70a:	89 e5                	mov    %esp,%ebp
+ 70c:	57                   	push   %edi
+ 70d:	56                   	push   %esi
+ 70e:	53                   	push   %ebx
+ 70f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 712:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 6e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 714:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6e7:	39 c8                	cmp    %ecx,%eax
- 6e9:	73 15                	jae    700 <free+0x30>
- 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
- 6f0:	39 d1                	cmp    %edx,%ecx
- 6f2:	72 14                	jb     708 <free+0x38>
+ 717:	39 c8                	cmp    %ecx,%eax
+ 719:	73 15                	jae    730 <free+0x30>
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+ 720:	39 d1                	cmp    %edx,%ecx
+ 722:	72 14                	jb     738 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f4:	39 d0                	cmp    %edx,%eax
- 6f6:	73 10                	jae    708 <free+0x38>
+ 724:	39 d0                	cmp    %edx,%eax
+ 726:	73 10                	jae    738 <free+0x38>
 {
- 6f8:	89 d0                	mov    %edx,%eax
+ 728:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6fa:	8b 10                	mov    (%eax),%edx
- 6fc:	39 c8                	cmp    %ecx,%eax
- 6fe:	72 f0                	jb     6f0 <free+0x20>
+ 72a:	8b 10                	mov    (%eax),%edx
+ 72c:	39 c8                	cmp    %ecx,%eax
+ 72e:	72 f0                	jb     720 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 700:	39 d0                	cmp    %edx,%eax
- 702:	72 f4                	jb     6f8 <free+0x28>
- 704:	39 d1                	cmp    %edx,%ecx
- 706:	73 f0                	jae    6f8 <free+0x28>
+ 730:	39 d0                	cmp    %edx,%eax
+ 732:	72 f4                	jb     728 <free+0x28>
+ 734:	39 d1                	cmp    %edx,%ecx
+ 736:	73 f0                	jae    728 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 70e:	39 fa                	cmp    %edi,%edx
- 710:	74 1e                	je     730 <free+0x60>
+ 738:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 73b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 73e:	39 fa                	cmp    %edi,%edx
+ 740:	74 1e                	je     760 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 712:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 742:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 715:	8b 50 04             	mov    0x4(%eax),%edx
- 718:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 71b:	39 f1                	cmp    %esi,%ecx
- 71d:	74 28                	je     747 <free+0x77>
+ 745:	8b 50 04             	mov    0x4(%eax),%edx
+ 748:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 74b:	39 f1                	cmp    %esi,%ecx
+ 74d:	74 28                	je     777 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 71f:	89 08                	mov    %ecx,(%eax)
+ 74f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 721:	5b                   	pop    %ebx
+ 751:	5b                   	pop    %ebx
   freep = p;
- 722:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 752:	a3 7c 0b 00 00       	mov    %eax,0xb7c
 }
- 727:	5e                   	pop    %esi
- 728:	5f                   	pop    %edi
- 729:	5d                   	pop    %ebp
- 72a:	c3                   	ret    
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
+ 757:	5e                   	pop    %esi
+ 758:	5f                   	pop    %edi
+ 759:	5d                   	pop    %ebp
+ 75a:	c3                   	ret    
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 730:	03 72 04             	add    0x4(%edx),%esi
- 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 760:	03 72 04             	add    0x4(%edx),%esi
+ 763:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 736:	8b 10                	mov    (%eax),%edx
- 738:	8b 12                	mov    (%edx),%edx
- 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 766:	8b 10                	mov    (%eax),%edx
+ 768:	8b 12                	mov    (%edx),%edx
+ 76a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 73d:	8b 50 04             	mov    0x4(%eax),%edx
- 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 743:	39 f1                	cmp    %esi,%ecx
- 745:	75 d8                	jne    71f <free+0x4f>
+ 76d:	8b 50 04             	mov    0x4(%eax),%edx
+ 770:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 773:	39 f1                	cmp    %esi,%ecx
+ 775:	75 d8                	jne    74f <free+0x4f>
     p->s.size += bp->s.size;
- 747:	03 53 fc             	add    -0x4(%ebx),%edx
+ 777:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 74a:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 77a:	a3 7c 0b 00 00       	mov    %eax,0xb7c
     p->s.size += bp->s.size;
- 74f:	89 50 04             	mov    %edx,0x4(%eax)
+ 77f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 755:	89 10                	mov    %edx,(%eax)
+ 782:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 785:	89 10                	mov    %edx,(%eax)
 }
- 757:	5b                   	pop    %ebx
- 758:	5e                   	pop    %esi
- 759:	5f                   	pop    %edi
- 75a:	5d                   	pop    %ebp
- 75b:	c3                   	ret    
- 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 787:	5b                   	pop    %ebx
+ 788:	5e                   	pop    %esi
+ 789:	5f                   	pop    %edi
+ 78a:	5d                   	pop    %ebp
+ 78b:	c3                   	ret    
+ 78c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000760 <malloc>:
+00000790 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 760:	f3 0f 1e fb          	endbr32 
- 764:	55                   	push   %ebp
- 765:	89 e5                	mov    %esp,%ebp
- 767:	57                   	push   %edi
- 768:	56                   	push   %esi
- 769:	53                   	push   %ebx
- 76a:	83 ec 1c             	sub    $0x1c,%esp
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	89 e5                	mov    %esp,%ebp
+ 797:	57                   	push   %edi
+ 798:	56                   	push   %esi
+ 799:	53                   	push   %ebx
+ 79a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 76d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 79d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 770:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 7a0:	8b 3d 7c 0b 00 00    	mov    0xb7c,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 776:	8d 70 07             	lea    0x7(%eax),%esi
- 779:	c1 ee 03             	shr    $0x3,%esi
- 77c:	83 c6 01             	add    $0x1,%esi
+ 7a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7a9:	c1 ee 03             	shr    $0x3,%esi
+ 7ac:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 77f:	85 ff                	test   %edi,%edi
- 781:	0f 84 a9 00 00 00    	je     830 <malloc+0xd0>
+ 7af:	85 ff                	test   %edi,%edi
+ 7b1:	0f 84 a9 00 00 00    	je     860 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 787:	8b 07                	mov    (%edi),%eax
+ 7b7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 789:	8b 48 04             	mov    0x4(%eax),%ecx
- 78c:	39 f1                	cmp    %esi,%ecx
- 78e:	73 6d                	jae    7fd <malloc+0x9d>
- 790:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 796:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 79b:	0f 43 de             	cmovae %esi,%ebx
+ 7b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bc:	39 f1                	cmp    %esi,%ecx
+ 7be:	73 6d                	jae    82d <malloc+0x9d>
+ 7c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7cb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 79e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7a8:	eb 17                	jmp    7c1 <malloc+0x61>
- 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7d8:	eb 17                	jmp    7f1 <malloc+0x61>
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7b0:	8b 10                	mov    (%eax),%edx
+ 7e0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 7b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 7b5:	39 f1                	cmp    %esi,%ecx
- 7b7:	73 4f                	jae    808 <malloc+0xa8>
- 7b9:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
- 7bf:	89 d0                	mov    %edx,%eax
+ 7e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7e5:	39 f1                	cmp    %esi,%ecx
+ 7e7:	73 4f                	jae    838 <malloc+0xa8>
+ 7e9:	8b 3d 7c 0b 00 00    	mov    0xb7c,%edi
+ 7ef:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7c1:	39 c7                	cmp    %eax,%edi
- 7c3:	75 eb                	jne    7b0 <malloc+0x50>
+ 7f1:	39 c7                	cmp    %eax,%edi
+ 7f3:	75 eb                	jne    7e0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 7c5:	83 ec 0c             	sub    $0xc,%esp
- 7c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 7cb:	e8 5b fc ff ff       	call   42b <sbrk>
+ 7f5:	83 ec 0c             	sub    $0xc,%esp
+ 7f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7fb:	e8 2b fc ff ff       	call   42b <sbrk>
   if(p == (char*)-1)
- 7d0:	83 c4 10             	add    $0x10,%esp
- 7d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7d6:	74 1b                	je     7f3 <malloc+0x93>
+ 800:	83 c4 10             	add    $0x10,%esp
+ 803:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 806:	74 1b                	je     823 <malloc+0x93>
   hp->s.size = nu;
- 7d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 808:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7db:	83 ec 0c             	sub    $0xc,%esp
- 7de:	83 c0 08             	add    $0x8,%eax
- 7e1:	50                   	push   %eax
- 7e2:	e8 e9 fe ff ff       	call   6d0 <free>
+ 80b:	83 ec 0c             	sub    $0xc,%esp
+ 80e:	83 c0 08             	add    $0x8,%eax
+ 811:	50                   	push   %eax
+ 812:	e8 e9 fe ff ff       	call   700 <free>
   return freep;
- 7e7:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 817:	a1 7c 0b 00 00       	mov    0xb7c,%eax
       if((p = morecore(nunits)) == 0)
- 7ec:	83 c4 10             	add    $0x10,%esp
- 7ef:	85 c0                	test   %eax,%eax
- 7f1:	75 bd                	jne    7b0 <malloc+0x50>
+ 81c:	83 c4 10             	add    $0x10,%esp
+ 81f:	85 c0                	test   %eax,%eax
+ 821:	75 bd                	jne    7e0 <malloc+0x50>
         return 0;
   }
 }
- 7f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 823:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7f6:	31 c0                	xor    %eax,%eax
+ 826:	31 c0                	xor    %eax,%eax
 }
- 7f8:	5b                   	pop    %ebx
- 7f9:	5e                   	pop    %esi
- 7fa:	5f                   	pop    %edi
- 7fb:	5d                   	pop    %ebp
- 7fc:	c3                   	ret    
+ 828:	5b                   	pop    %ebx
+ 829:	5e                   	pop    %esi
+ 82a:	5f                   	pop    %edi
+ 82b:	5d                   	pop    %ebp
+ 82c:	c3                   	ret    
     if(p->s.size >= nunits){
- 7fd:	89 c2                	mov    %eax,%edx
- 7ff:	89 f8                	mov    %edi,%eax
- 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82d:	89 c2                	mov    %eax,%edx
+ 82f:	89 f8                	mov    %edi,%eax
+ 831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 808:	39 ce                	cmp    %ecx,%esi
- 80a:	74 54                	je     860 <malloc+0x100>
+ 838:	39 ce                	cmp    %ecx,%esi
+ 83a:	74 54                	je     890 <malloc+0x100>
         p->s.size -= nunits;
- 80c:	29 f1                	sub    %esi,%ecx
- 80e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 83c:	29 f1                	sub    %esi,%ecx
+ 83e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 811:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 841:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 814:	89 72 04             	mov    %esi,0x4(%edx)
+ 844:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 817:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 847:	a3 7c 0b 00 00       	mov    %eax,0xb7c
 }
- 81c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 84c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 81f:	8d 42 08             	lea    0x8(%edx),%eax
+ 84f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 822:	5b                   	pop    %ebx
- 823:	5e                   	pop    %esi
- 824:	5f                   	pop    %edi
- 825:	5d                   	pop    %ebp
- 826:	c3                   	ret    
- 827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 82e:	66 90                	xchg   %ax,%ax
+ 852:	5b                   	pop    %ebx
+ 853:	5e                   	pop    %esi
+ 854:	5f                   	pop    %edi
+ 855:	5d                   	pop    %ebp
+ 856:	c3                   	ret    
+ 857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 830:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
- 837:	0b 00 00 
+ 860:	c7 05 7c 0b 00 00 80 	movl   $0xb80,0xb7c
+ 867:	0b 00 00 
     base.s.size = 0;
- 83a:	bf 50 0b 00 00       	mov    $0xb50,%edi
+ 86a:	bf 80 0b 00 00       	mov    $0xb80,%edi
     base.s.ptr = freep = prevp = &base;
- 83f:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
- 846:	0b 00 00 
+ 86f:	c7 05 80 0b 00 00 80 	movl   $0xb80,0xb80
+ 876:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 849:	89 f8                	mov    %edi,%eax
+ 879:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 84b:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
- 852:	00 00 00 
+ 87b:	c7 05 84 0b 00 00 00 	movl   $0x0,0xb84
+ 882:	00 00 00 
     if(p->s.size >= nunits){
- 855:	e9 36 ff ff ff       	jmp    790 <malloc+0x30>
- 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 885:	e9 36 ff ff ff       	jmp    7c0 <malloc+0x30>
+ 88a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 860:	8b 0a                	mov    (%edx),%ecx
- 862:	89 08                	mov    %ecx,(%eax)
- 864:	eb b1                	jmp    817 <malloc+0xb7>
+ 890:	8b 0a                	mov    (%edx),%ecx
+ 892:	89 08                	mov    %ecx,(%eax)
+ 894:	eb b1                	jmp    847 <malloc+0xb7>
Binary files xv6-public/stressfs.o and xv6-public-hybrid/stressfs.o differ
diff -u xv6-public/stressfs.sym xv6-public-hybrid/stressfs.sym
--- xv6-public/stressfs.sym	2022-10-07 20:01:01.798112152 +0530
+++ xv6-public-hybrid/stressfs.sym	2022-10-07 18:39:47.580879000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000868 .rodata
-000008a8 .eh_frame
-00000b4c .bss
+00000898 .rodata
+000008d8 .eh_frame
+00000b7c .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000450 printint
-00000894 digits.1085
+00000480 printint
+000008c4 digits.1100
 00000000 umalloc.c
-00000b4c freep
-00000b50 base
+00000b7c freep
+00000b80 base
 00000140 strcpy
-00000500 printf
+00000530 printf
 00000370 memmove
 000003eb mknod
+00000443 wolfie
 00000260 gets
 00000423 getpid
-00000760 malloc
+00000790 malloc
 00000433 sleep
+00000463 get_burst_time
 000003b3 pipe
 000003c3 write
 000003fb fstat
@@ -38,14 +40,18 @@
 0000039b fork
 0000042b sbrk
 0000043b uptime
-00000b4c __bss_start
+00000b7c __bss_start
 00000200 memset
 00000000 main
+0000046b set_burst_time
 00000170 strcmp
 0000041b dup
+00000453 getMaxPid
+0000044b getNumProc
+0000045b getProcInfo
 000002e0 stat
-00000b4c _edata
-00000b58 _end
+00000b7c _edata
+00000b88 _end
 00000403 link
 000003a3 exit
 00000330 atoi
@@ -54,4 +60,4 @@
 00000220 strchr
 0000040b mkdir
 000003cb close
-000006d0 free
+00000700 free
Binary files xv6-public/string.o and xv6-public-hybrid/string.o differ
Binary files xv6-public/swtch.o and xv6-public-hybrid/swtch.o differ
diff -u xv6-public/syscall.c xv6-public-hybrid/syscall.c
--- xv6-public/syscall.c	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/syscall.c	2022-10-07 06:25:16.115102000 +0530
@@ -103,6 +103,12 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_wolfie(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_get_burst_time(void);
+extern int sys_set_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,12 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_wolfie]  sys_wolfie,
+[SYS_getNumProc]   sys_getNumProc,
+[SYS_getMaxPid]   sys_getMaxPid,
+[SYS_getProcInfo]   sys_getProcInfo,
+[SYS_get_burst_time] sys_get_burst_time,
+[SYS_set_burst_time] sys_set_burst_time,
 };
 
 void
diff -u xv6-public/syscall.h xv6-public-hybrid/syscall.h
--- xv6-public/syscall.h	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/syscall.h	2022-10-07 06:22:20.790834000 +0530
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_wolfie 22
+#define SYS_getNumProc  22
+#define SYS_getMaxPid  23
+#define SYS_getProcInfo  24
+#define SYS_get_burst_time 25
+#define SYS_set_burst_time 26
Binary files xv6-public/syscall.o and xv6-public-hybrid/syscall.o differ
Binary files xv6-public/sysfile.o and xv6-public-hybrid/sysfile.o differ
diff -u xv6-public/sysproc.c xv6-public-hybrid/sysproc.c
--- xv6-public/sysproc.c	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/sysproc.c	2022-10-07 08:12:03.514450000 +0530
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,63 @@
   release(&tickslock);
   return xticks;
 }
+
+int 
+sys_wolfie(void)
+{
+  char *buf;
+  uint size;
+
+  if (argptr(0,(void*)&buf,sizeof(buf))<0)
+     return -1;
+  if (argptr(0,(void*)&size,sizeof(size))<0)
+     return -1;
+
+  char wolf[] = "Wolfie Wolf - System Call\n\n";
+  uint wolfsize = sizeof(wolf);
+
+  if (size < wolfsize) 
+     return -1;
+
+  int i;
+  for (i=0; wolf[i]!='\0'; i++)
+     buf[i] = wolf[i];
+  buf[i] = '\0';
+
+  return i;
+}
+
+int 
+sys_getNumProc(void)
+{
+  return getNumProc();
+}
+
+int 
+sys_getMaxPid(void)
+{
+  return getMaxPid();
+}
+
+int 
+sys_getProcInfo(void)
+{
+  return getProcInfo();
+}
+
+
+int
+sys_get_burst_time(void)
+{
+  return get_burst_time();
+}
+
+
+int
+sys_set_burst_time(void)
+{
+  int n;
+  if (argptr(0,(void*)&n, sizeof(n))<0)
+    return -1;
+  return set_burst_time(n);
+}
diff -u xv6-public/sysproc.d xv6-public-hybrid/sysproc.d
--- xv6-public/sysproc.d	2022-10-07 20:00:54.509113663 +0530
+++ xv6-public-hybrid/sysproc.d	2022-10-07 18:39:42.226363000 +0530
@@ -1,2 +1,2 @@
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
+ date.h param.h memlayout.h mmu.h proc.h processInfo.h
Binary files xv6-public/sysproc.o and xv6-public-hybrid/sysproc.o differ
Only in xv6-public-hybrid: _testCase1
Only in xv6-public-hybrid: testCase1.asm
Only in xv6-public-hybrid: testCase1.c
Only in xv6-public-hybrid: testCase1.d
Only in xv6-public-hybrid: testCase1.o
Only in xv6-public-hybrid: testCase1.sym
Only in xv6-public-hybrid: _testCase2
Only in xv6-public-hybrid: testCase2.asm
Only in xv6-public-hybrid: testCase2.c
Only in xv6-public-hybrid: testCase2.d
Only in xv6-public-hybrid: testCase2.o
Only in xv6-public-hybrid: testCase2.sym
Binary files xv6-public/trapasm.o and xv6-public-hybrid/trapasm.o differ
diff -u xv6-public/trap.c xv6-public-hybrid/trap.c
--- xv6-public/trap.c	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/trap.c	2022-10-07 08:05:40.017069000 +0530
@@ -102,9 +102,41 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  
+  static int ticks_since_last_yield = 0;
+  static int time_slice = 0;
+  static int time_slice_initializing = 0;
+  static struct proc* last_proc = 0;
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+    if(myproc() == base_process){
+      // Don't give up on base_process
+      if(time_slice_initializing == 1) ++time_slice;
+      else {
+        time_slice_initializing = 1;
+        time_slice = 1;
+      }
+    }
+    else{
+      time_slice_initializing = 0;
+      if(last_proc == myproc()){
+        if(ticks_since_last_yield == time_slice){
+          ticks_since_last_yield = 0;
+          yield();
+        }
+        else{
+          ticks_since_last_yield++;
+        }
+      }
+      else{
+        last_proc = myproc();
+        ticks_since_last_yield = 0;
+        if(ticks_since_last_yield == time_slice){
+          ticks_since_last_yield = 0;
+          yield();
+        }
+      }
+    }
+  }
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
Binary files xv6-public/trap.o and xv6-public-hybrid/trap.o differ
Binary files xv6-public/uart.o and xv6-public-hybrid/uart.o differ
Binary files xv6-public/ulib.o and xv6-public-hybrid/ulib.o differ
Binary files xv6-public/umalloc.o and xv6-public-hybrid/umalloc.o differ
diff -u xv6-public/user.h xv6-public-hybrid/user.h
--- xv6-public/user.h	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/user.h	2022-10-07 06:30:30.703220000 +0530
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct processInfo;
 
 // system calls
 int fork(void);
@@ -23,6 +24,12 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int wolfie(void *buf, uint size);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int, struct processInfo*);
+int get_burst_time(void);
+int set_burst_time(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files xv6-public/_usertests and xv6-public-hybrid/_usertests differ
diff -u xv6-public/usertests.asm xv6-public-hybrid/usertests.asm
--- xv6-public/usertests.asm	2022-10-07 20:01:02.274176048 +0530
+++ xv6-public-hybrid/usertests.asm	2022-10-07 18:39:47.985066000 +0530
@@ -20,15 +20,15 @@
       11:	51                   	push   %ecx
       12:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "usertests starting\n");
-      15:	68 36 4e 00 00       	push   $0x4e36
+      15:	68 66 4e 00 00       	push   $0x4e66
       1a:	6a 01                	push   $0x1
-      1c:	e8 bf 3a 00 00       	call   3ae0 <printf>
+      1c:	e8 ef 3a 00 00       	call   3b10 <printf>
 
   if(open("usertests.ran", 0) >= 0){
       21:	59                   	pop    %ecx
       22:	58                   	pop    %eax
       23:	6a 00                	push   $0x0
-      25:	68 4a 4e 00 00       	push   $0x4e4a
+      25:	68 7a 4e 00 00       	push   $0x4e7a
       2a:	e8 94 39 00 00       	call   39c3 <open>
       2f:	83 c4 10             	add    $0x10,%esp
       32:	85 c0                	test   %eax,%eax
@@ -36,9 +36,9 @@
     printf(1, "already ran user tests -- rebuild fs.img\n");
       36:	52                   	push   %edx
       37:	52                   	push   %edx
-      38:	68 b4 55 00 00       	push   $0x55b4
+      38:	68 e4 55 00 00       	push   $0x55e4
       3d:	6a 01                	push   $0x1
-      3f:	e8 9c 3a 00 00       	call   3ae0 <printf>
+      3f:	e8 cc 3a 00 00       	call   3b10 <printf>
     exit();
       44:	e8 3a 39 00 00       	call   3983 <exit>
   }
@@ -46,7 +46,7 @@
       49:	50                   	push   %eax
       4a:	50                   	push   %eax
       4b:	68 00 02 00 00       	push   $0x200
-      50:	68 4a 4e 00 00       	push   $0x4e4a
+      50:	68 7a 4e 00 00       	push   $0x4e7a
       55:	e8 69 39 00 00       	call   39c3 <open>
       5a:	89 04 24             	mov    %eax,(%esp)
       5d:	e8 49 39 00 00       	call   39ab <close>
@@ -144,41 +144,41 @@
      125:	89 e5                	mov    %esp,%ebp
      127:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "iput test\n");
-     12a:	68 dc 3e 00 00       	push   $0x3edc
-     12f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     135:	e8 a6 39 00 00       	call   3ae0 <printf>
+     12a:	68 0c 3f 00 00       	push   $0x3f0c
+     12f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     135:	e8 d6 39 00 00       	call   3b10 <printf>
   if(mkdir("iputdir") < 0){
-     13a:	c7 04 24 6f 3e 00 00 	movl   $0x3e6f,(%esp)
+     13a:	c7 04 24 9f 3e 00 00 	movl   $0x3e9f,(%esp)
      141:	e8 a5 38 00 00       	call   39eb <mkdir>
      146:	83 c4 10             	add    $0x10,%esp
      149:	85 c0                	test   %eax,%eax
      14b:	78 58                	js     1a5 <iputtest+0x85>
   if(chdir("iputdir") < 0){
      14d:	83 ec 0c             	sub    $0xc,%esp
-     150:	68 6f 3e 00 00       	push   $0x3e6f
+     150:	68 9f 3e 00 00       	push   $0x3e9f
      155:	e8 99 38 00 00       	call   39f3 <chdir>
      15a:	83 c4 10             	add    $0x10,%esp
      15d:	85 c0                	test   %eax,%eax
      15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
   if(unlink("../iputdir") < 0){
      165:	83 ec 0c             	sub    $0xc,%esp
-     168:	68 6c 3e 00 00       	push   $0x3e6c
+     168:	68 9c 3e 00 00       	push   $0x3e9c
      16d:	e8 61 38 00 00       	call   39d3 <unlink>
      172:	83 c4 10             	add    $0x10,%esp
      175:	85 c0                	test   %eax,%eax
      177:	78 5a                	js     1d3 <iputtest+0xb3>
   if(chdir("/") < 0){
      179:	83 ec 0c             	sub    $0xc,%esp
-     17c:	68 91 3e 00 00       	push   $0x3e91
+     17c:	68 c1 3e 00 00       	push   $0x3ec1
      181:	e8 6d 38 00 00       	call   39f3 <chdir>
      186:	83 c4 10             	add    $0x10,%esp
      189:	85 c0                	test   %eax,%eax
      18b:	78 2f                	js     1bc <iputtest+0x9c>
   printf(stdout, "iput test ok\n");
      18d:	83 ec 08             	sub    $0x8,%esp
-     190:	68 14 3f 00 00       	push   $0x3f14
-     195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     19b:	e8 40 39 00 00       	call   3ae0 <printf>
+     190:	68 44 3f 00 00       	push   $0x3f44
+     195:	ff 35 10 5f 00 00    	pushl  0x5f10
+     19b:	e8 70 39 00 00       	call   3b10 <printf>
 }
      1a0:	83 c4 10             	add    $0x10,%esp
      1a3:	c9                   	leave  
@@ -186,33 +186,33 @@
     printf(stdout, "mkdir failed\n");
      1a5:	50                   	push   %eax
      1a6:	50                   	push   %eax
-     1a7:	68 48 3e 00 00       	push   $0x3e48
-     1ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1b2:	e8 29 39 00 00       	call   3ae0 <printf>
+     1a7:	68 78 3e 00 00       	push   $0x3e78
+     1ac:	ff 35 10 5f 00 00    	pushl  0x5f10
+     1b2:	e8 59 39 00 00       	call   3b10 <printf>
     exit();
      1b7:	e8 c7 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir / failed\n");
      1bc:	50                   	push   %eax
      1bd:	50                   	push   %eax
-     1be:	68 93 3e 00 00       	push   $0x3e93
-     1c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1c9:	e8 12 39 00 00       	call   3ae0 <printf>
+     1be:	68 c3 3e 00 00       	push   $0x3ec3
+     1c3:	ff 35 10 5f 00 00    	pushl  0x5f10
+     1c9:	e8 42 39 00 00       	call   3b10 <printf>
     exit();
      1ce:	e8 b0 37 00 00       	call   3983 <exit>
     printf(stdout, "unlink ../iputdir failed\n");
      1d3:	52                   	push   %edx
      1d4:	52                   	push   %edx
-     1d5:	68 77 3e 00 00       	push   $0x3e77
-     1da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1e0:	e8 fb 38 00 00       	call   3ae0 <printf>
+     1d5:	68 a7 3e 00 00       	push   $0x3ea7
+     1da:	ff 35 10 5f 00 00    	pushl  0x5f10
+     1e0:	e8 2b 39 00 00       	call   3b10 <printf>
     exit();
      1e5:	e8 99 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir iputdir failed\n");
      1ea:	51                   	push   %ecx
      1eb:	51                   	push   %ecx
-     1ec:	68 56 3e 00 00       	push   $0x3e56
-     1f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1f7:	e8 e4 38 00 00       	call   3ae0 <printf>
+     1ec:	68 86 3e 00 00       	push   $0x3e86
+     1f1:	ff 35 10 5f 00 00    	pushl  0x5f10
+     1f7:	e8 14 39 00 00       	call   3b10 <printf>
     exit();
      1fc:	e8 82 37 00 00       	call   3983 <exit>
      201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -226,9 +226,9 @@
      215:	89 e5                	mov    %esp,%ebp
      217:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exitiput test\n");
-     21a:	68 a3 3e 00 00       	push   $0x3ea3
-     21f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     225:	e8 b6 38 00 00       	call   3ae0 <printf>
+     21a:	68 d3 3e 00 00       	push   $0x3ed3
+     21f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     225:	e8 e6 38 00 00       	call   3b10 <printf>
   pid = fork();
      22a:	e8 4c 37 00 00       	call   397b <fork>
   if(pid < 0){
@@ -239,21 +239,21 @@
      23a:	75 4c                	jne    288 <exitiputtest+0x78>
     if(mkdir("iputdir") < 0){
      23c:	83 ec 0c             	sub    $0xc,%esp
-     23f:	68 6f 3e 00 00       	push   $0x3e6f
+     23f:	68 9f 3e 00 00       	push   $0x3e9f
      244:	e8 a2 37 00 00       	call   39eb <mkdir>
      249:	83 c4 10             	add    $0x10,%esp
      24c:	85 c0                	test   %eax,%eax
      24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
     if(chdir("iputdir") < 0){
      254:	83 ec 0c             	sub    $0xc,%esp
-     257:	68 6f 3e 00 00       	push   $0x3e6f
+     257:	68 9f 3e 00 00       	push   $0x3e9f
      25c:	e8 92 37 00 00       	call   39f3 <chdir>
      261:	83 c4 10             	add    $0x10,%esp
      264:	85 c0                	test   %eax,%eax
      266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
     if(unlink("../iputdir") < 0){
      26c:	83 ec 0c             	sub    $0xc,%esp
-     26f:	68 6c 3e 00 00       	push   $0x3e6c
+     26f:	68 9c 3e 00 00       	push   $0x3e9c
      274:	e8 5a 37 00 00       	call   39d3 <unlink>
      279:	83 c4 10             	add    $0x10,%esp
      27c:	85 c0                	test   %eax,%eax
@@ -265,9 +265,9 @@
      288:	e8 fe 36 00 00       	call   398b <wait>
   printf(stdout, "exitiput test ok\n");
      28d:	83 ec 08             	sub    $0x8,%esp
-     290:	68 c6 3e 00 00       	push   $0x3ec6
-     295:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     29b:	e8 40 38 00 00       	call   3ae0 <printf>
+     290:	68 f6 3e 00 00       	push   $0x3ef6
+     295:	ff 35 10 5f 00 00    	pushl  0x5f10
+     29b:	e8 70 38 00 00       	call   3b10 <printf>
 }
      2a0:	83 c4 10             	add    $0x10,%esp
      2a3:	c9                   	leave  
@@ -275,33 +275,33 @@
      2a5:	8d 76 00             	lea    0x0(%esi),%esi
       printf(stdout, "unlink ../iputdir failed\n");
      2a8:	83 ec 08             	sub    $0x8,%esp
-     2ab:	68 77 3e 00 00       	push   $0x3e77
-     2b0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2b6:	e8 25 38 00 00       	call   3ae0 <printf>
+     2ab:	68 a7 3e 00 00       	push   $0x3ea7
+     2b0:	ff 35 10 5f 00 00    	pushl  0x5f10
+     2b6:	e8 55 38 00 00       	call   3b10 <printf>
       exit();
      2bb:	e8 c3 36 00 00       	call   3983 <exit>
     printf(stdout, "fork failed\n");
      2c0:	51                   	push   %ecx
      2c1:	51                   	push   %ecx
-     2c2:	68 89 4d 00 00       	push   $0x4d89
-     2c7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2cd:	e8 0e 38 00 00       	call   3ae0 <printf>
+     2c2:	68 b9 4d 00 00       	push   $0x4db9
+     2c7:	ff 35 10 5f 00 00    	pushl  0x5f10
+     2cd:	e8 3e 38 00 00       	call   3b10 <printf>
     exit();
      2d2:	e8 ac 36 00 00       	call   3983 <exit>
       printf(stdout, "mkdir failed\n");
      2d7:	52                   	push   %edx
      2d8:	52                   	push   %edx
-     2d9:	68 48 3e 00 00       	push   $0x3e48
-     2de:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2e4:	e8 f7 37 00 00       	call   3ae0 <printf>
+     2d9:	68 78 3e 00 00       	push   $0x3e78
+     2de:	ff 35 10 5f 00 00    	pushl  0x5f10
+     2e4:	e8 27 38 00 00       	call   3b10 <printf>
       exit();
      2e9:	e8 95 36 00 00       	call   3983 <exit>
       printf(stdout, "child chdir failed\n");
      2ee:	50                   	push   %eax
      2ef:	50                   	push   %eax
-     2f0:	68 b2 3e 00 00       	push   $0x3eb2
-     2f5:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2fb:	e8 e0 37 00 00       	call   3ae0 <printf>
+     2f0:	68 e2 3e 00 00       	push   $0x3ee2
+     2f5:	ff 35 10 5f 00 00    	pushl  0x5f10
+     2fb:	e8 10 38 00 00       	call   3b10 <printf>
       exit();
      300:	e8 7e 36 00 00       	call   3983 <exit>
      305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -314,11 +314,11 @@
      315:	89 e5                	mov    %esp,%ebp
      317:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "openiput test\n");
-     31a:	68 d8 3e 00 00       	push   $0x3ed8
-     31f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     325:	e8 b6 37 00 00       	call   3ae0 <printf>
+     31a:	68 08 3f 00 00       	push   $0x3f08
+     31f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     325:	e8 e6 37 00 00       	call   3b10 <printf>
   if(mkdir("oidir") < 0){
-     32a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     32a:	c7 04 24 17 3f 00 00 	movl   $0x3f17,(%esp)
      331:	e8 b5 36 00 00       	call   39eb <mkdir>
      336:	83 c4 10             	add    $0x10,%esp
      339:	85 c0                	test   %eax,%eax
@@ -333,7 +333,7 @@
     int fd = open("oidir", O_RDWR);
      34c:	83 ec 08             	sub    $0x8,%esp
      34f:	6a 02                	push   $0x2
-     351:	68 e7 3e 00 00       	push   $0x3ee7
+     351:	68 17 3f 00 00       	push   $0x3f17
      356:	e8 68 36 00 00       	call   39c3 <open>
     if(fd >= 0){
      35b:	83 c4 10             	add    $0x10,%esp
@@ -341,9 +341,9 @@
      360:	78 5e                	js     3c0 <openiputtest+0xb0>
       printf(stdout, "open directory for write succeeded\n");
      362:	83 ec 08             	sub    $0x8,%esp
-     365:	68 6c 4e 00 00       	push   $0x4e6c
-     36a:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     370:	e8 6b 37 00 00       	call   3ae0 <printf>
+     365:	68 9c 4e 00 00       	push   $0x4e9c
+     36a:	ff 35 10 5f 00 00    	pushl  0x5f10
+     370:	e8 9b 37 00 00       	call   3b10 <printf>
       exit();
      375:	e8 09 36 00 00       	call   3983 <exit>
      37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -352,7 +352,7 @@
      383:	6a 01                	push   $0x1
      385:	e8 89 36 00 00       	call   3a13 <sleep>
   if(unlink("oidir") != 0){
-     38a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     38a:	c7 04 24 17 3f 00 00 	movl   $0x3f17,(%esp)
      391:	e8 3d 36 00 00       	call   39d3 <unlink>
      396:	83 c4 10             	add    $0x10,%esp
      399:	85 c0                	test   %eax,%eax
@@ -361,9 +361,9 @@
      39d:	e8 e9 35 00 00       	call   398b <wait>
   printf(stdout, "openiput test ok\n");
      3a2:	83 ec 08             	sub    $0x8,%esp
-     3a5:	68 10 3f 00 00       	push   $0x3f10
-     3aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3b0:	e8 2b 37 00 00       	call   3ae0 <printf>
+     3a5:	68 40 3f 00 00       	push   $0x3f40
+     3aa:	ff 35 10 5f 00 00    	pushl  0x5f10
+     3b0:	e8 5b 37 00 00       	call   3b10 <printf>
      3b5:	83 c4 10             	add    $0x10,%esp
 }
      3b8:	c9                   	leave  
@@ -374,25 +374,25 @@
     printf(stdout, "fork failed\n");
      3c5:	52                   	push   %edx
      3c6:	52                   	push   %edx
-     3c7:	68 89 4d 00 00       	push   $0x4d89
-     3cc:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3d2:	e8 09 37 00 00       	call   3ae0 <printf>
+     3c7:	68 b9 4d 00 00       	push   $0x4db9
+     3cc:	ff 35 10 5f 00 00    	pushl  0x5f10
+     3d2:	e8 39 37 00 00       	call   3b10 <printf>
     exit();
      3d7:	e8 a7 35 00 00       	call   3983 <exit>
     printf(stdout, "mkdir oidir failed\n");
      3dc:	51                   	push   %ecx
      3dd:	51                   	push   %ecx
-     3de:	68 ed 3e 00 00       	push   $0x3eed
-     3e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3e9:	e8 f2 36 00 00       	call   3ae0 <printf>
+     3de:	68 1d 3f 00 00       	push   $0x3f1d
+     3e3:	ff 35 10 5f 00 00    	pushl  0x5f10
+     3e9:	e8 22 37 00 00       	call   3b10 <printf>
     exit();
      3ee:	e8 90 35 00 00       	call   3983 <exit>
     printf(stdout, "unlink failed\n");
      3f3:	50                   	push   %eax
      3f4:	50                   	push   %eax
-     3f5:	68 01 3f 00 00       	push   $0x3f01
-     3fa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     400:	e8 db 36 00 00       	call   3ae0 <printf>
+     3f5:	68 31 3f 00 00       	push   $0x3f31
+     3fa:	ff 35 10 5f 00 00    	pushl  0x5f10
+     400:	e8 0b 37 00 00       	call   3b10 <printf>
     exit();
      405:	e8 79 35 00 00       	call   3983 <exit>
      40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -404,14 +404,14 @@
      415:	89 e5                	mov    %esp,%ebp
      417:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "open test\n");
-     41a:	68 22 3f 00 00       	push   $0x3f22
-     41f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     425:	e8 b6 36 00 00       	call   3ae0 <printf>
+     41a:	68 52 3f 00 00       	push   $0x3f52
+     41f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     425:	e8 e6 36 00 00       	call   3b10 <printf>
   fd = open("echo", 0);
      42a:	58                   	pop    %eax
      42b:	5a                   	pop    %edx
      42c:	6a 00                	push   $0x0
-     42e:	68 2d 3f 00 00       	push   $0x3f2d
+     42e:	68 5d 3f 00 00       	push   $0x3f5d
      433:	e8 8b 35 00 00       	call   39c3 <open>
   if(fd < 0){
      438:	83 c4 10             	add    $0x10,%esp
@@ -425,7 +425,7 @@
      448:	5a                   	pop    %edx
      449:	59                   	pop    %ecx
      44a:	6a 00                	push   $0x0
-     44c:	68 45 3f 00 00       	push   $0x3f45
+     44c:	68 75 3f 00 00       	push   $0x3f75
      451:	e8 6d 35 00 00       	call   39c3 <open>
   if(fd >= 0){
      456:	83 c4 10             	add    $0x10,%esp
@@ -433,9 +433,9 @@
      45b:	79 2f                	jns    48c <opentest+0x7c>
   printf(stdout, "open test ok\n");
      45d:	83 ec 08             	sub    $0x8,%esp
-     460:	68 70 3f 00 00       	push   $0x3f70
-     465:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     46b:	e8 70 36 00 00       	call   3ae0 <printf>
+     460:	68 a0 3f 00 00       	push   $0x3fa0
+     465:	ff 35 10 5f 00 00    	pushl  0x5f10
+     46b:	e8 a0 36 00 00       	call   3b10 <printf>
 }
      470:	83 c4 10             	add    $0x10,%esp
      473:	c9                   	leave  
@@ -443,17 +443,17 @@
     printf(stdout, "open echo failed!\n");
      475:	50                   	push   %eax
      476:	50                   	push   %eax
-     477:	68 32 3f 00 00       	push   $0x3f32
-     47c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     482:	e8 59 36 00 00       	call   3ae0 <printf>
+     477:	68 62 3f 00 00       	push   $0x3f62
+     47c:	ff 35 10 5f 00 00    	pushl  0x5f10
+     482:	e8 89 36 00 00       	call   3b10 <printf>
     exit();
      487:	e8 f7 34 00 00       	call   3983 <exit>
     printf(stdout, "open doesnotexist succeeded!\n");
      48c:	50                   	push   %eax
      48d:	50                   	push   %eax
-     48e:	68 52 3f 00 00       	push   $0x3f52
-     493:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     499:	e8 42 36 00 00       	call   3ae0 <printf>
+     48e:	68 82 3f 00 00       	push   $0x3f82
+     493:	ff 35 10 5f 00 00    	pushl  0x5f10
+     499:	e8 72 36 00 00       	call   3b10 <printf>
     exit();
      49e:	e8 e0 34 00 00       	call   3983 <exit>
      4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -468,14 +468,14 @@
      4b8:	53                   	push   %ebx
   printf(stdout, "small file test\n");
      4b9:	83 ec 08             	sub    $0x8,%esp
-     4bc:	68 7e 3f 00 00       	push   $0x3f7e
-     4c1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     4c7:	e8 14 36 00 00       	call   3ae0 <printf>
+     4bc:	68 ae 3f 00 00       	push   $0x3fae
+     4c1:	ff 35 10 5f 00 00    	pushl  0x5f10
+     4c7:	e8 44 36 00 00       	call   3b10 <printf>
   fd = open("small", O_CREATE|O_RDWR);
      4cc:	58                   	pop    %eax
      4cd:	5a                   	pop    %edx
      4ce:	68 02 02 00 00       	push   $0x202
-     4d3:	68 8f 3f 00 00       	push   $0x3f8f
+     4d3:	68 bf 3f 00 00       	push   $0x3fbf
      4d8:	e8 e6 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      4dd:	83 c4 10             	add    $0x10,%esp
@@ -487,15 +487,15 @@
   for(i = 0; i < 100; i++){
      4ed:	31 db                	xor    %ebx,%ebx
     printf(stdout, "creat small succeeded; ok\n");
-     4ef:	68 95 3f 00 00       	push   $0x3f95
-     4f4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     4fa:	e8 e1 35 00 00       	call   3ae0 <printf>
+     4ef:	68 c5 3f 00 00       	push   $0x3fc5
+     4f4:	ff 35 10 5f 00 00    	pushl  0x5f10
+     4fa:	e8 11 36 00 00       	call   3b10 <printf>
      4ff:	83 c4 10             	add    $0x10,%esp
      502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(write(fd, "aaaaaaaaaa", 10) != 10){
      508:	83 ec 04             	sub    $0x4,%esp
      50b:	6a 0a                	push   $0xa
-     50d:	68 cc 3f 00 00       	push   $0x3fcc
+     50d:	68 fc 3f 00 00       	push   $0x3ffc
      512:	56                   	push   %esi
      513:	e8 8b 34 00 00       	call   39a3 <write>
      518:	83 c4 10             	add    $0x10,%esp
@@ -504,7 +504,7 @@
     if(write(fd, "bbbbbbbbbb", 10) != 10){
      524:	83 ec 04             	sub    $0x4,%esp
      527:	6a 0a                	push   $0xa
-     529:	68 d7 3f 00 00       	push   $0x3fd7
+     529:	68 07 40 00 00       	push   $0x4007
      52e:	56                   	push   %esi
      52f:	e8 6f 34 00 00       	call   39a3 <write>
      534:	83 c4 10             	add    $0x10,%esp
@@ -516,9 +516,9 @@
      546:	75 c0                	jne    508 <writetest+0x58>
   printf(stdout, "writes ok\n");
      548:	83 ec 08             	sub    $0x8,%esp
-     54b:	68 e2 3f 00 00       	push   $0x3fe2
-     550:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     556:	e8 85 35 00 00       	call   3ae0 <printf>
+     54b:	68 12 40 00 00       	push   $0x4012
+     550:	ff 35 10 5f 00 00    	pushl  0x5f10
+     556:	e8 b5 35 00 00       	call   3b10 <printf>
   close(fd);
      55b:	89 34 24             	mov    %esi,(%esp)
      55e:	e8 48 34 00 00       	call   39ab <close>
@@ -526,7 +526,7 @@
      563:	5b                   	pop    %ebx
      564:	5e                   	pop    %esi
      565:	6a 00                	push   $0x0
-     567:	68 8f 3f 00 00       	push   $0x3f8f
+     567:	68 bf 3f 00 00       	push   $0x3fbf
      56c:	e8 52 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      571:	83 c4 10             	add    $0x10,%esp
@@ -537,13 +537,13 @@
      578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
     printf(stdout, "open small succeeded ok\n");
      57e:	83 ec 08             	sub    $0x8,%esp
-     581:	68 ed 3f 00 00       	push   $0x3fed
-     586:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     58c:	e8 4f 35 00 00       	call   3ae0 <printf>
+     581:	68 1d 40 00 00       	push   $0x401d
+     586:	ff 35 10 5f 00 00    	pushl  0x5f10
+     58c:	e8 7f 35 00 00       	call   3b10 <printf>
   i = read(fd, buf, 2000);
      591:	83 c4 0c             	add    $0xc,%esp
      594:	68 d0 07 00 00       	push   $0x7d0
-     599:	68 c0 86 00 00       	push   $0x86c0
+     599:	68 00 87 00 00       	push   $0x8700
      59e:	53                   	push   %ebx
      59f:	e8 f7 33 00 00       	call   399b <read>
   if(i == 2000){
@@ -552,23 +552,23 @@
      5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
     printf(stdout, "read succeeded ok\n");
      5b2:	83 ec 08             	sub    $0x8,%esp
-     5b5:	68 21 40 00 00       	push   $0x4021
-     5ba:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     5c0:	e8 1b 35 00 00       	call   3ae0 <printf>
+     5b5:	68 51 40 00 00       	push   $0x4051
+     5ba:	ff 35 10 5f 00 00    	pushl  0x5f10
+     5c0:	e8 4b 35 00 00       	call   3b10 <printf>
   close(fd);
      5c5:	89 1c 24             	mov    %ebx,(%esp)
      5c8:	e8 de 33 00 00       	call   39ab <close>
   if(unlink("small") < 0){
-     5cd:	c7 04 24 8f 3f 00 00 	movl   $0x3f8f,(%esp)
+     5cd:	c7 04 24 bf 3f 00 00 	movl   $0x3fbf,(%esp)
      5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
      5d9:	83 c4 10             	add    $0x10,%esp
      5dc:	85 c0                	test   %eax,%eax
      5de:	78 7d                	js     65d <writetest+0x1ad>
   printf(stdout, "small file test ok\n");
      5e0:	83 ec 08             	sub    $0x8,%esp
-     5e3:	68 49 40 00 00       	push   $0x4049
-     5e8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     5ee:	e8 ed 34 00 00       	call   3ae0 <printf>
+     5e3:	68 79 40 00 00       	push   $0x4079
+     5e8:	ff 35 10 5f 00 00    	pushl  0x5f10
+     5ee:	e8 1d 35 00 00       	call   3b10 <printf>
 }
      5f3:	83 c4 10             	add    $0x10,%esp
      5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -579,49 +579,49 @@
       printf(stdout, "error: write aa %d new file failed\n", i);
      5fd:	83 ec 04             	sub    $0x4,%esp
      600:	53                   	push   %ebx
-     601:	68 90 4e 00 00       	push   $0x4e90
-     606:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     60c:	e8 cf 34 00 00       	call   3ae0 <printf>
+     601:	68 c0 4e 00 00       	push   $0x4ec0
+     606:	ff 35 10 5f 00 00    	pushl  0x5f10
+     60c:	e8 ff 34 00 00       	call   3b10 <printf>
       exit();
      611:	e8 6d 33 00 00       	call   3983 <exit>
       printf(stdout, "error: write bb %d new file failed\n", i);
      616:	83 ec 04             	sub    $0x4,%esp
      619:	53                   	push   %ebx
-     61a:	68 b4 4e 00 00       	push   $0x4eb4
-     61f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     625:	e8 b6 34 00 00       	call   3ae0 <printf>
+     61a:	68 e4 4e 00 00       	push   $0x4ee4
+     61f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     625:	e8 e6 34 00 00       	call   3b10 <printf>
       exit();
      62a:	e8 54 33 00 00       	call   3983 <exit>
     printf(stdout, "error: open small failed!\n");
      62f:	51                   	push   %ecx
      630:	51                   	push   %ecx
-     631:	68 06 40 00 00       	push   $0x4006
-     636:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     63c:	e8 9f 34 00 00       	call   3ae0 <printf>
+     631:	68 36 40 00 00       	push   $0x4036
+     636:	ff 35 10 5f 00 00    	pushl  0x5f10
+     63c:	e8 cf 34 00 00       	call   3b10 <printf>
     exit();
      641:	e8 3d 33 00 00       	call   3983 <exit>
     printf(stdout, "read failed\n");
      646:	52                   	push   %edx
      647:	52                   	push   %edx
-     648:	68 4d 43 00 00       	push   $0x434d
-     64d:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     653:	e8 88 34 00 00       	call   3ae0 <printf>
+     648:	68 7d 43 00 00       	push   $0x437d
+     64d:	ff 35 10 5f 00 00    	pushl  0x5f10
+     653:	e8 b8 34 00 00       	call   3b10 <printf>
     exit();
      658:	e8 26 33 00 00       	call   3983 <exit>
     printf(stdout, "unlink small failed\n");
      65d:	50                   	push   %eax
      65e:	50                   	push   %eax
-     65f:	68 34 40 00 00       	push   $0x4034
-     664:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     66a:	e8 71 34 00 00       	call   3ae0 <printf>
+     65f:	68 64 40 00 00       	push   $0x4064
+     664:	ff 35 10 5f 00 00    	pushl  0x5f10
+     66a:	e8 a1 34 00 00       	call   3b10 <printf>
     exit();
      66f:	e8 0f 33 00 00       	call   3983 <exit>
     printf(stdout, "error: creat small failed!\n");
      674:	50                   	push   %eax
      675:	50                   	push   %eax
-     676:	68 b0 3f 00 00       	push   $0x3fb0
-     67b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     681:	e8 5a 34 00 00       	call   3ae0 <printf>
+     676:	68 e0 3f 00 00       	push   $0x3fe0
+     67b:	ff 35 10 5f 00 00    	pushl  0x5f10
+     681:	e8 8a 34 00 00       	call   3b10 <printf>
     exit();
      686:	e8 f8 32 00 00       	call   3983 <exit>
      68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -636,14 +636,14 @@
      698:	53                   	push   %ebx
   printf(stdout, "big files test\n");
      699:	83 ec 08             	sub    $0x8,%esp
-     69c:	68 5d 40 00 00       	push   $0x405d
-     6a1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     6a7:	e8 34 34 00 00       	call   3ae0 <printf>
+     69c:	68 8d 40 00 00       	push   $0x408d
+     6a1:	ff 35 10 5f 00 00    	pushl  0x5f10
+     6a7:	e8 64 34 00 00       	call   3b10 <printf>
   fd = open("big", O_CREATE|O_RDWR);
      6ac:	58                   	pop    %eax
      6ad:	5a                   	pop    %edx
      6ae:	68 02 02 00 00       	push   $0x202
-     6b3:	68 d7 40 00 00       	push   $0x40d7
+     6b3:	68 07 41 00 00       	push   $0x4107
      6b8:	e8 06 33 00 00       	call   39c3 <open>
   if(fd < 0){
      6bd:	83 c4 10             	add    $0x10,%esp
@@ -656,10 +656,10 @@
     if(write(fd, buf, 512) != 512){
      6d0:	83 ec 04             	sub    $0x4,%esp
     ((int*)buf)[0] = i;
-     6d3:	89 1d c0 86 00 00    	mov    %ebx,0x86c0
+     6d3:	89 1d 00 87 00 00    	mov    %ebx,0x8700
     if(write(fd, buf, 512) != 512){
      6d9:	68 00 02 00 00       	push   $0x200
-     6de:	68 c0 86 00 00       	push   $0x86c0
+     6de:	68 00 87 00 00       	push   $0x8700
      6e3:	56                   	push   %esi
      6e4:	e8 ba 32 00 00       	call   39a3 <write>
      6e9:	83 c4 10             	add    $0x10,%esp
@@ -677,7 +677,7 @@
      70b:	5b                   	pop    %ebx
      70c:	5e                   	pop    %esi
      70d:	6a 00                	push   $0x0
-     70f:	68 d7 40 00 00       	push   $0x40d7
+     70f:	68 07 41 00 00       	push   $0x4107
      714:	e8 aa 32 00 00       	call   39c3 <open>
   if(fd < 0){
      719:	83 c4 10             	add    $0x10,%esp
@@ -694,7 +694,7 @@
      730:	3d 00 02 00 00       	cmp    $0x200,%eax
      735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
     if(((int*)buf)[0] != n){
-     73b:	a1 c0 86 00 00       	mov    0x86c0,%eax
+     73b:	a1 00 87 00 00       	mov    0x8700,%eax
      740:	39 f0                	cmp    %esi,%eax
      742:	75 7f                	jne    7c3 <writetest1+0x133>
     n++;
@@ -702,7 +702,7 @@
     i = read(fd, buf, 512);
      747:	83 ec 04             	sub    $0x4,%esp
      74a:	68 00 02 00 00       	push   $0x200
-     74f:	68 c0 86 00 00       	push   $0x86c0
+     74f:	68 00 87 00 00       	push   $0x8700
      754:	53                   	push   %ebx
      755:	e8 41 32 00 00       	call   399b <read>
     if(i == 0){
@@ -717,16 +717,16 @@
      770:	53                   	push   %ebx
      771:	e8 35 32 00 00       	call   39ab <close>
   if(unlink("big") < 0){
-     776:	c7 04 24 d7 40 00 00 	movl   $0x40d7,(%esp)
+     776:	c7 04 24 07 41 00 00 	movl   $0x4107,(%esp)
      77d:	e8 51 32 00 00       	call   39d3 <unlink>
      782:	83 c4 10             	add    $0x10,%esp
      785:	85 c0                	test   %eax,%eax
      787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
   printf(stdout, "big files ok\n");
      78d:	83 ec 08             	sub    $0x8,%esp
-     790:	68 fe 40 00 00       	push   $0x40fe
-     795:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     79b:	e8 40 33 00 00       	call   3ae0 <printf>
+     790:	68 2e 41 00 00       	push   $0x412e
+     795:	ff 35 10 5f 00 00    	pushl  0x5f10
+     79b:	e8 70 33 00 00       	call   3b10 <printf>
 }
      7a0:	83 c4 10             	add    $0x10,%esp
      7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -737,57 +737,57 @@
       printf(stdout, "error: write big file failed\n", i);
      7aa:	83 ec 04             	sub    $0x4,%esp
      7ad:	53                   	push   %ebx
-     7ae:	68 87 40 00 00       	push   $0x4087
-     7b3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7b9:	e8 22 33 00 00       	call   3ae0 <printf>
+     7ae:	68 b7 40 00 00       	push   $0x40b7
+     7b3:	ff 35 10 5f 00 00    	pushl  0x5f10
+     7b9:	e8 52 33 00 00       	call   3b10 <printf>
       exit();
      7be:	e8 c0 31 00 00       	call   3983 <exit>
       printf(stdout, "read content of block %d is %d\n",
      7c3:	50                   	push   %eax
      7c4:	56                   	push   %esi
-     7c5:	68 d8 4e 00 00       	push   $0x4ed8
-     7ca:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7d0:	e8 0b 33 00 00       	call   3ae0 <printf>
+     7c5:	68 08 4f 00 00       	push   $0x4f08
+     7ca:	ff 35 10 5f 00 00    	pushl  0x5f10
+     7d0:	e8 3b 33 00 00       	call   3b10 <printf>
       exit();
      7d5:	e8 a9 31 00 00       	call   3983 <exit>
       printf(stdout, "read failed %d\n", i);
      7da:	83 ec 04             	sub    $0x4,%esp
      7dd:	50                   	push   %eax
-     7de:	68 db 40 00 00       	push   $0x40db
-     7e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7e9:	e8 f2 32 00 00       	call   3ae0 <printf>
+     7de:	68 0b 41 00 00       	push   $0x410b
+     7e3:	ff 35 10 5f 00 00    	pushl  0x5f10
+     7e9:	e8 22 33 00 00       	call   3b10 <printf>
       exit();
      7ee:	e8 90 31 00 00       	call   3983 <exit>
         printf(stdout, "read only %d blocks from big", n);
      7f3:	52                   	push   %edx
      7f4:	68 8b 00 00 00       	push   $0x8b
-     7f9:	68 be 40 00 00       	push   $0x40be
-     7fe:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     804:	e8 d7 32 00 00       	call   3ae0 <printf>
+     7f9:	68 ee 40 00 00       	push   $0x40ee
+     7fe:	ff 35 10 5f 00 00    	pushl  0x5f10
+     804:	e8 07 33 00 00       	call   3b10 <printf>
         exit();
      809:	e8 75 31 00 00       	call   3983 <exit>
     printf(stdout, "error: open big failed!\n");
      80e:	51                   	push   %ecx
      80f:	51                   	push   %ecx
-     810:	68 a5 40 00 00       	push   $0x40a5
-     815:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     81b:	e8 c0 32 00 00       	call   3ae0 <printf>
+     810:	68 d5 40 00 00       	push   $0x40d5
+     815:	ff 35 10 5f 00 00    	pushl  0x5f10
+     81b:	e8 f0 32 00 00       	call   3b10 <printf>
     exit();
      820:	e8 5e 31 00 00       	call   3983 <exit>
     printf(stdout, "error: creat big failed!\n");
      825:	50                   	push   %eax
      826:	50                   	push   %eax
-     827:	68 6d 40 00 00       	push   $0x406d
-     82c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     832:	e8 a9 32 00 00       	call   3ae0 <printf>
+     827:	68 9d 40 00 00       	push   $0x409d
+     82c:	ff 35 10 5f 00 00    	pushl  0x5f10
+     832:	e8 d9 32 00 00       	call   3b10 <printf>
     exit();
      837:	e8 47 31 00 00       	call   3983 <exit>
     printf(stdout, "unlink big failed\n");
      83c:	50                   	push   %eax
      83d:	50                   	push   %eax
-     83e:	68 eb 40 00 00       	push   $0x40eb
-     843:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     849:	e8 92 32 00 00       	call   3ae0 <printf>
+     83e:	68 1b 41 00 00       	push   $0x411b
+     843:	ff 35 10 5f 00 00    	pushl  0x5f10
+     849:	e8 c2 32 00 00       	call   3b10 <printf>
     exit();
      84e:	e8 30 31 00 00       	call   3983 <exit>
      853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -804,24 +804,24 @@
 {
      86d:	83 ec 0c             	sub    $0xc,%esp
   printf(stdout, "many creates, followed by unlink test\n");
-     870:	68 f8 4e 00 00       	push   $0x4ef8
-     875:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     87b:	e8 60 32 00 00       	call   3ae0 <printf>
+     870:	68 28 4f 00 00       	push   $0x4f28
+     875:	ff 35 10 5f 00 00    	pushl  0x5f10
+     87b:	e8 90 32 00 00       	call   3b10 <printf>
   name[0] = 'a';
-     880:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     880:	c6 05 00 a7 00 00 61 	movb   $0x61,0xa700
   name[2] = '\0';
      887:	83 c4 10             	add    $0x10,%esp
-     88a:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     88a:	c6 05 02 a7 00 00 00 	movb   $0x0,0xa702
   for(i = 0; i < 52; i++){
      891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fd = open(name, O_CREATE|O_RDWR);
      898:	83 ec 08             	sub    $0x8,%esp
     name[1] = '0' + i;
-     89b:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     89b:	88 1d 01 a7 00 00    	mov    %bl,0xa701
     fd = open(name, O_CREATE|O_RDWR);
      8a1:	83 c3 01             	add    $0x1,%ebx
      8a4:	68 02 02 00 00       	push   $0x202
-     8a9:	68 c0 a6 00 00       	push   $0xa6c0
+     8a9:	68 00 a7 00 00       	push   $0xa700
      8ae:	e8 10 31 00 00       	call   39c3 <open>
     close(fd);
      8b3:	89 04 24             	mov    %eax,(%esp)
@@ -831,20 +831,20 @@
      8be:	80 fb 64             	cmp    $0x64,%bl
      8c1:	75 d5                	jne    898 <createtest+0x38>
   name[0] = 'a';
-     8c3:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     8c3:	c6 05 00 a7 00 00 61 	movb   $0x61,0xa700
   name[2] = '\0';
      8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
-     8cf:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     8cf:	c6 05 02 a7 00 00 00 	movb   $0x0,0xa702
   for(i = 0; i < 52; i++){
      8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      8dd:	8d 76 00             	lea    0x0(%esi),%esi
     unlink(name);
      8e0:	83 ec 0c             	sub    $0xc,%esp
     name[1] = '0' + i;
-     8e3:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     8e3:	88 1d 01 a7 00 00    	mov    %bl,0xa701
     unlink(name);
      8e9:	83 c3 01             	add    $0x1,%ebx
-     8ec:	68 c0 a6 00 00       	push   $0xa6c0
+     8ec:	68 00 a7 00 00       	push   $0xa700
      8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
   for(i = 0; i < 52; i++){
      8f6:	83 c4 10             	add    $0x10,%esp
@@ -852,9 +852,9 @@
      8fc:	75 e2                	jne    8e0 <createtest+0x80>
   printf(stdout, "many creates, followed by unlink; ok\n");
      8fe:	83 ec 08             	sub    $0x8,%esp
-     901:	68 20 4f 00 00       	push   $0x4f20
-     906:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     90c:	e8 cf 31 00 00       	call   3ae0 <printf>
+     901:	68 50 4f 00 00       	push   $0x4f50
+     906:	ff 35 10 5f 00 00    	pushl  0x5f10
+     90c:	e8 ff 31 00 00       	call   3b10 <printf>
 }
      911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
      914:	83 c4 10             	add    $0x10,%esp
@@ -869,41 +869,41 @@
      925:	89 e5                	mov    %esp,%ebp
      927:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "mkdir test\n");
-     92a:	68 0c 41 00 00       	push   $0x410c
-     92f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     935:	e8 a6 31 00 00       	call   3ae0 <printf>
+     92a:	68 3c 41 00 00       	push   $0x413c
+     92f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     935:	e8 d6 31 00 00       	call   3b10 <printf>
   if(mkdir("dir0") < 0){
-     93a:	c7 04 24 18 41 00 00 	movl   $0x4118,(%esp)
+     93a:	c7 04 24 48 41 00 00 	movl   $0x4148,(%esp)
      941:	e8 a5 30 00 00       	call   39eb <mkdir>
      946:	83 c4 10             	add    $0x10,%esp
      949:	85 c0                	test   %eax,%eax
      94b:	78 58                	js     9a5 <dirtest+0x85>
   if(chdir("dir0") < 0){
      94d:	83 ec 0c             	sub    $0xc,%esp
-     950:	68 18 41 00 00       	push   $0x4118
+     950:	68 48 41 00 00       	push   $0x4148
      955:	e8 99 30 00 00       	call   39f3 <chdir>
      95a:	83 c4 10             	add    $0x10,%esp
      95d:	85 c0                	test   %eax,%eax
      95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
   if(chdir("..") < 0){
      965:	83 ec 0c             	sub    $0xc,%esp
-     968:	68 bd 46 00 00       	push   $0x46bd
+     968:	68 ed 46 00 00       	push   $0x46ed
      96d:	e8 81 30 00 00       	call   39f3 <chdir>
      972:	83 c4 10             	add    $0x10,%esp
      975:	85 c0                	test   %eax,%eax
      977:	78 5a                	js     9d3 <dirtest+0xb3>
   if(unlink("dir0") < 0){
      979:	83 ec 0c             	sub    $0xc,%esp
-     97c:	68 18 41 00 00       	push   $0x4118
+     97c:	68 48 41 00 00       	push   $0x4148
      981:	e8 4d 30 00 00       	call   39d3 <unlink>
      986:	83 c4 10             	add    $0x10,%esp
      989:	85 c0                	test   %eax,%eax
      98b:	78 2f                	js     9bc <dirtest+0x9c>
   printf(stdout, "mkdir test ok\n");
      98d:	83 ec 08             	sub    $0x8,%esp
-     990:	68 55 41 00 00       	push   $0x4155
-     995:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     99b:	e8 40 31 00 00       	call   3ae0 <printf>
+     990:	68 85 41 00 00       	push   $0x4185
+     995:	ff 35 10 5f 00 00    	pushl  0x5f10
+     99b:	e8 70 31 00 00       	call   3b10 <printf>
 }
      9a0:	83 c4 10             	add    $0x10,%esp
      9a3:	c9                   	leave  
@@ -911,33 +911,33 @@
     printf(stdout, "mkdir failed\n");
      9a5:	50                   	push   %eax
      9a6:	50                   	push   %eax
-     9a7:	68 48 3e 00 00       	push   $0x3e48
-     9ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9b2:	e8 29 31 00 00       	call   3ae0 <printf>
+     9a7:	68 78 3e 00 00       	push   $0x3e78
+     9ac:	ff 35 10 5f 00 00    	pushl  0x5f10
+     9b2:	e8 59 31 00 00       	call   3b10 <printf>
     exit();
      9b7:	e8 c7 2f 00 00       	call   3983 <exit>
     printf(stdout, "unlink dir0 failed\n");
      9bc:	50                   	push   %eax
      9bd:	50                   	push   %eax
-     9be:	68 41 41 00 00       	push   $0x4141
-     9c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9c9:	e8 12 31 00 00       	call   3ae0 <printf>
+     9be:	68 71 41 00 00       	push   $0x4171
+     9c3:	ff 35 10 5f 00 00    	pushl  0x5f10
+     9c9:	e8 42 31 00 00       	call   3b10 <printf>
     exit();
      9ce:	e8 b0 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir .. failed\n");
      9d3:	52                   	push   %edx
      9d4:	52                   	push   %edx
-     9d5:	68 30 41 00 00       	push   $0x4130
-     9da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9e0:	e8 fb 30 00 00       	call   3ae0 <printf>
+     9d5:	68 60 41 00 00       	push   $0x4160
+     9da:	ff 35 10 5f 00 00    	pushl  0x5f10
+     9e0:	e8 2b 31 00 00       	call   3b10 <printf>
     exit();
      9e5:	e8 99 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir dir0 failed\n");
      9ea:	51                   	push   %ecx
      9eb:	51                   	push   %ecx
-     9ec:	68 1d 41 00 00       	push   $0x411d
-     9f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9f7:	e8 e4 30 00 00       	call   3ae0 <printf>
+     9ec:	68 4d 41 00 00       	push   $0x414d
+     9f1:	ff 35 10 5f 00 00    	pushl  0x5f10
+     9f7:	e8 14 31 00 00       	call   3b10 <printf>
     exit();
      9fc:	e8 82 2f 00 00       	call   3983 <exit>
      a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -951,14 +951,14 @@
      a15:	89 e5                	mov    %esp,%ebp
      a17:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exec test\n");
-     a1a:	68 64 41 00 00       	push   $0x4164
-     a1f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     a25:	e8 b6 30 00 00       	call   3ae0 <printf>
+     a1a:	68 94 41 00 00       	push   $0x4194
+     a1f:	ff 35 10 5f 00 00    	pushl  0x5f10
+     a25:	e8 e6 30 00 00       	call   3b10 <printf>
   if(exec("echo", echoargv) < 0){
      a2a:	5a                   	pop    %edx
      a2b:	59                   	pop    %ecx
-     a2c:	68 e4 5e 00 00       	push   $0x5ee4
-     a31:	68 2d 3f 00 00       	push   $0x3f2d
+     a2c:	68 14 5f 00 00       	push   $0x5f14
+     a31:	68 5d 3f 00 00       	push   $0x3f5d
      a36:	e8 80 2f 00 00       	call   39bb <exec>
      a3b:	83 c4 10             	add    $0x10,%esp
      a3e:	85 c0                	test   %eax,%eax
@@ -969,9 +969,9 @@
     printf(stdout, "exec echo failed\n");
      a44:	50                   	push   %eax
      a45:	50                   	push   %eax
-     a46:	68 6f 41 00 00       	push   $0x416f
-     a4b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     a51:	e8 8a 30 00 00       	call   3ae0 <printf>
+     a46:	68 9f 41 00 00       	push   $0x419f
+     a4b:	ff 35 10 5f 00 00    	pushl  0x5f10
+     a51:	e8 ba 30 00 00       	call   3b10 <printf>
     exit();
      a56:	e8 28 2f 00 00       	call   3983 <exit>
      a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1017,7 +1017,7 @@
      aad:	83 c4 10             	add    $0x10,%esp
      ab0:	83 ec 04             	sub    $0x4,%esp
      ab3:	56                   	push   %esi
-     ab4:	68 c0 86 00 00       	push   $0x86c0
+     ab4:	68 00 87 00 00       	push   $0x8700
      ab9:	ff 75 e0             	pushl  -0x20(%ebp)
      abc:	e8 da 2e 00 00       	call   399b <read>
      ac1:	83 c4 10             	add    $0x10,%esp
@@ -1032,7 +1032,7 @@
         if((buf[i] & 0xff) != (seq++ & 0xff)){
      ad8:	89 da                	mov    %ebx,%edx
      ada:	83 c3 01             	add    $0x1,%ebx
-     add:	38 90 c0 86 00 00    	cmp    %dl,0x86c0(%eax)
+     add:	38 90 00 87 00 00    	cmp    %dl,0x8700(%eax)
      ae3:	75 1c                	jne    b01 <pipe1+0xa1>
       for(i = 0; i < n; i++){
      ae5:	83 c0 01             	add    $0x1,%eax
@@ -1048,9 +1048,9 @@
      aff:	eb af                	jmp    ab0 <pipe1+0x50>
           printf(1, "pipe1 oops 2\n");
      b01:	83 ec 08             	sub    $0x8,%esp
-     b04:	68 9e 41 00 00       	push   $0x419e
+     b04:	68 ce 41 00 00       	push   $0x41ce
      b09:	6a 01                	push   $0x1
-     b0b:	e8 d0 2f 00 00       	call   3ae0 <printf>
+     b0b:	e8 00 30 00 00       	call   3b10 <printf>
           return;
      b10:	83 c4 10             	add    $0x10,%esp
 }
@@ -1076,7 +1076,7 @@
       for(i = 0; i < 1033; i++)
      b33:	83 c0 01             	add    $0x1,%eax
         buf[i] = seq++;
-     b36:	88 90 bf 86 00 00    	mov    %dl,0x86bf(%eax)
+     b36:	88 90 ff 86 00 00    	mov    %dl,0x86ff(%eax)
       for(i = 0; i < 1033; i++)
      b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
      b41:	75 ed                	jne    b30 <pipe1+0xd0>
@@ -1084,7 +1084,7 @@
      b43:	83 ec 04             	sub    $0x4,%esp
      b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
      b4c:	68 09 04 00 00       	push   $0x409
-     b51:	68 c0 86 00 00       	push   $0x86c0
+     b51:	68 00 87 00 00       	push   $0x8700
      b56:	ff 75 e4             	pushl  -0x1c(%ebp)
      b59:	e8 45 2e 00 00       	call   39a3 <write>
      b5e:	83 c4 10             	add    $0x10,%esp
@@ -1107,41 +1107,41 @@
   printf(1, "pipe1 ok\n");
      b8e:	5a                   	pop    %edx
      b8f:	59                   	pop    %ecx
-     b90:	68 c3 41 00 00       	push   $0x41c3
+     b90:	68 f3 41 00 00       	push   $0x41f3
      b95:	6a 01                	push   $0x1
-     b97:	e8 44 2f 00 00       	call   3ae0 <printf>
+     b97:	e8 74 2f 00 00       	call   3b10 <printf>
      b9c:	83 c4 10             	add    $0x10,%esp
      b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
       printf(1, "pipe1 oops 3 total %d\n", total);
      ba4:	53                   	push   %ebx
      ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
-     ba8:	68 ac 41 00 00       	push   $0x41ac
+     ba8:	68 dc 41 00 00       	push   $0x41dc
      bad:	6a 01                	push   $0x1
-     baf:	e8 2c 2f 00 00       	call   3ae0 <printf>
+     baf:	e8 5c 2f 00 00       	call   3b10 <printf>
       exit();
      bb4:	e8 ca 2d 00 00       	call   3983 <exit>
     printf(1, "pipe() failed\n");
      bb9:	57                   	push   %edi
      bba:	57                   	push   %edi
-     bbb:	68 81 41 00 00       	push   $0x4181
+     bbb:	68 b1 41 00 00       	push   $0x41b1
      bc0:	6a 01                	push   $0x1
-     bc2:	e8 19 2f 00 00       	call   3ae0 <printf>
+     bc2:	e8 49 2f 00 00       	call   3b10 <printf>
     exit();
      bc7:	e8 b7 2d 00 00       	call   3983 <exit>
     printf(1, "fork() failed\n");
      bcc:	50                   	push   %eax
      bcd:	50                   	push   %eax
-     bce:	68 cd 41 00 00       	push   $0x41cd
+     bce:	68 fd 41 00 00       	push   $0x41fd
      bd3:	6a 01                	push   $0x1
-     bd5:	e8 06 2f 00 00       	call   3ae0 <printf>
+     bd5:	e8 36 2f 00 00       	call   3b10 <printf>
     exit();
      bda:	e8 a4 2d 00 00       	call   3983 <exit>
         printf(1, "pipe1 oops 1\n");
      bdf:	56                   	push   %esi
      be0:	56                   	push   %esi
-     be1:	68 90 41 00 00       	push   $0x4190
+     be1:	68 c0 41 00 00       	push   $0x41c0
      be6:	6a 01                	push   $0x1
-     be8:	e8 f3 2e 00 00       	call   3ae0 <printf>
+     be8:	e8 23 2f 00 00       	call   3b10 <printf>
         exit();
      bed:	e8 91 2d 00 00       	call   3983 <exit>
      bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1157,9 +1157,9 @@
      c09:	53                   	push   %ebx
      c0a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "preempt: ");
-     c0d:	68 dc 41 00 00       	push   $0x41dc
+     c0d:	68 0c 42 00 00       	push   $0x420c
      c12:	6a 01                	push   $0x1
-     c14:	e8 c7 2e 00 00       	call   3ae0 <printf>
+     c14:	e8 f7 2e 00 00       	call   3b10 <printf>
   pid1 = fork();
      c19:	e8 5d 2d 00 00       	call   397b <fork>
   if(pid1 == 0)
@@ -1201,7 +1201,7 @@
     if(write(pfds[1], "x", 1) != 1)
      c65:	83 c4 0c             	add    $0xc,%esp
      c68:	6a 01                	push   $0x1
-     c6a:	68 a1 47 00 00       	push   $0x47a1
+     c6a:	68 d1 47 00 00       	push   $0x47d1
      c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
      c72:	e8 2c 2d 00 00       	call   39a3 <write>
      c77:	83 c4 10             	add    $0x10,%esp
@@ -1223,7 +1223,7 @@
   if(read(pfds[0], buf, sizeof(buf)) != 1){
      ca3:	83 c4 0c             	add    $0xc,%esp
      ca6:	68 00 20 00 00       	push   $0x2000
-     cab:	68 c0 86 00 00       	push   $0x86c0
+     cab:	68 00 87 00 00       	push   $0x8700
      cb0:	ff 75 e0             	pushl  -0x20(%ebp)
      cb3:	e8 e3 2c 00 00       	call   399b <read>
      cb8:	83 c4 10             	add    $0x10,%esp
@@ -1236,9 +1236,9 @@
   printf(1, "kill... ");
      ccb:	58                   	pop    %eax
      ccc:	5a                   	pop    %edx
-     ccd:	68 0d 42 00 00       	push   $0x420d
+     ccd:	68 3d 42 00 00       	push   $0x423d
      cd2:	6a 01                	push   $0x1
-     cd4:	e8 07 2e 00 00       	call   3ae0 <printf>
+     cd4:	e8 37 2e 00 00       	call   3b10 <printf>
   kill(pid1);
      cd9:	89 3c 24             	mov    %edi,(%esp)
      cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
@@ -1251,9 +1251,9 @@
   printf(1, "wait... ");
      cf1:	59                   	pop    %ecx
      cf2:	5b                   	pop    %ebx
-     cf3:	68 16 42 00 00       	push   $0x4216
+     cf3:	68 46 42 00 00       	push   $0x4246
      cf8:	6a 01                	push   $0x1
-     cfa:	e8 e1 2d 00 00       	call   3ae0 <printf>
+     cfa:	e8 11 2e 00 00       	call   3b10 <printf>
   wait();
      cff:	e8 87 2c 00 00       	call   398b <wait>
   wait();
@@ -1263,9 +1263,9 @@
   printf(1, "preempt ok\n");
      d0e:	5e                   	pop    %esi
      d0f:	5f                   	pop    %edi
-     d10:	68 1f 42 00 00       	push   $0x421f
+     d10:	68 4f 42 00 00       	push   $0x424f
      d15:	6a 01                	push   $0x1
-     d17:	e8 c4 2d 00 00       	call   3ae0 <printf>
+     d17:	e8 f4 2d 00 00       	call   3b10 <printf>
      d1c:	83 c4 10             	add    $0x10,%esp
 }
      d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1276,16 +1276,16 @@
      d26:	c3                   	ret    
       printf(1, "preempt write error");
      d27:	83 ec 08             	sub    $0x8,%esp
-     d2a:	68 e6 41 00 00       	push   $0x41e6
+     d2a:	68 16 42 00 00       	push   $0x4216
      d2f:	6a 01                	push   $0x1
-     d31:	e8 aa 2d 00 00       	call   3ae0 <printf>
+     d31:	e8 da 2d 00 00       	call   3b10 <printf>
      d36:	83 c4 10             	add    $0x10,%esp
      d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
     printf(1, "preempt read error");
      d3e:	83 ec 08             	sub    $0x8,%esp
-     d41:	68 fa 41 00 00       	push   $0x41fa
+     d41:	68 2a 42 00 00       	push   $0x422a
      d46:	6a 01                	push   $0x1
-     d48:	e8 93 2d 00 00       	call   3ae0 <printf>
+     d48:	e8 c3 2d 00 00       	call   3b10 <printf>
     return;
      d4d:	83 c4 10             	add    $0x10,%esp
      d50:	eb cd                	jmp    d1f <preempt+0x11f>
@@ -1318,9 +1318,9 @@
      d89:	79 e5                	jns    d70 <exitwait+0x10>
       printf(1, "fork failed\n");
      d8b:	83 ec 08             	sub    $0x8,%esp
-     d8e:	68 89 4d 00 00       	push   $0x4d89
+     d8e:	68 b9 4d 00 00       	push   $0x4db9
      d93:	6a 01                	push   $0x1
-     d95:	e8 46 2d 00 00       	call   3ae0 <printf>
+     d95:	e8 76 2d 00 00       	call   3b10 <printf>
       return;
      d9a:	83 c4 10             	add    $0x10,%esp
 }
@@ -1332,9 +1332,9 @@
      da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         printf(1, "wait wrong pid\n");
      da8:	83 ec 08             	sub    $0x8,%esp
-     dab:	68 2b 42 00 00       	push   $0x422b
+     dab:	68 5b 42 00 00       	push   $0x425b
      db0:	6a 01                	push   $0x1
-     db2:	e8 29 2d 00 00       	call   3ae0 <printf>
+     db2:	e8 59 2d 00 00       	call   3b10 <printf>
         return;
      db7:	83 c4 10             	add    $0x10,%esp
 }
@@ -1345,9 +1345,9 @@
      dc0:	c3                   	ret    
   printf(1, "exitwait ok\n");
      dc1:	83 ec 08             	sub    $0x8,%esp
-     dc4:	68 3b 42 00 00       	push   $0x423b
+     dc4:	68 6b 42 00 00       	push   $0x426b
      dc9:	6a 01                	push   $0x1
-     dcb:	e8 10 2d 00 00       	call   3ae0 <printf>
+     dcb:	e8 40 2d 00 00       	call   3b10 <printf>
      dd0:	83 c4 10             	add    $0x10,%esp
 }
      dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -1369,9 +1369,9 @@
      dea:	53                   	push   %ebx
   printf(1, "mem test\n");
      deb:	83 ec 08             	sub    $0x8,%esp
-     dee:	68 48 42 00 00       	push   $0x4248
+     dee:	68 78 42 00 00       	push   $0x4278
      df3:	6a 01                	push   $0x1
-     df5:	e8 e6 2c 00 00       	call   3ae0 <printf>
+     df5:	e8 16 2d 00 00       	call   3b10 <printf>
   ppid = getpid();
      dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
      dff:	89 c3                	mov    %eax,%ebx
@@ -1388,7 +1388,7 @@
     while((m2 = malloc(10001)) != 0){
      e1c:	83 ec 0c             	sub    $0xc,%esp
      e1f:	68 11 27 00 00       	push   $0x2711
-     e24:	e8 17 2f 00 00       	call   3d40 <malloc>
+     e24:	e8 47 2f 00 00       	call   3d70 <malloc>
      e29:	83 c4 10             	add    $0x10,%esp
      e2c:	85 c0                	test   %eax,%eax
      e2e:	75 e8                	jne    e18 <mem+0x38>
@@ -1404,7 +1404,7 @@
      e3d:	8b 36                	mov    (%esi),%esi
       free(m1);
      e3f:	50                   	push   %eax
-     e40:	e8 6b 2e 00 00       	call   3cb0 <free>
+     e40:	e8 9b 2e 00 00       	call   3ce0 <free>
     while(m1){
      e45:	83 c4 10             	add    $0x10,%esp
      e48:	85 f6                	test   %esi,%esi
@@ -1412,7 +1412,7 @@
     m1 = malloc(1024*20);
      e4c:	83 ec 0c             	sub    $0xc,%esp
      e4f:	68 00 50 00 00       	push   $0x5000
-     e54:	e8 e7 2e 00 00       	call   3d40 <malloc>
+     e54:	e8 17 2f 00 00       	call   3d70 <malloc>
     if(m1 == 0){
      e59:	83 c4 10             	add    $0x10,%esp
      e5c:	85 c0                	test   %eax,%eax
@@ -1420,21 +1420,21 @@
     free(m1);
      e60:	83 ec 0c             	sub    $0xc,%esp
      e63:	50                   	push   %eax
-     e64:	e8 47 2e 00 00       	call   3cb0 <free>
+     e64:	e8 77 2e 00 00       	call   3ce0 <free>
     printf(1, "mem ok\n");
      e69:	58                   	pop    %eax
      e6a:	5a                   	pop    %edx
-     e6b:	68 6c 42 00 00       	push   $0x426c
+     e6b:	68 9c 42 00 00       	push   $0x429c
      e70:	6a 01                	push   $0x1
-     e72:	e8 69 2c 00 00       	call   3ae0 <printf>
+     e72:	e8 99 2c 00 00       	call   3b10 <printf>
     exit();
      e77:	e8 07 2b 00 00       	call   3983 <exit>
      e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(1, "couldn't allocate mem?!!\n");
      e80:	83 ec 08             	sub    $0x8,%esp
-     e83:	68 52 42 00 00       	push   $0x4252
+     e83:	68 82 42 00 00       	push   $0x4282
      e88:	6a 01                	push   $0x1
-     e8a:	e8 51 2c 00 00       	call   3ae0 <printf>
+     e8a:	e8 81 2c 00 00       	call   3b10 <printf>
       kill(ppid);
      e8f:	89 1c 24             	mov    %ebx,(%esp)
      e92:	e8 1c 2b 00 00       	call   39b3 <kill>
@@ -1461,17 +1461,17 @@
      eb9:	53                   	push   %ebx
      eba:	83 ec 34             	sub    $0x34,%esp
   printf(1, "sharedfd test\n");
-     ebd:	68 74 42 00 00       	push   $0x4274
+     ebd:	68 a4 42 00 00       	push   $0x42a4
      ec2:	6a 01                	push   $0x1
-     ec4:	e8 17 2c 00 00       	call   3ae0 <printf>
+     ec4:	e8 47 2c 00 00       	call   3b10 <printf>
   unlink("sharedfd");
-     ec9:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     ec9:	c7 04 24 b3 42 00 00 	movl   $0x42b3,(%esp)
      ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
   fd = open("sharedfd", O_CREATE|O_RDWR);
      ed5:	5b                   	pop    %ebx
      ed6:	5e                   	pop    %esi
      ed7:	68 02 02 00 00       	push   $0x202
-     edc:	68 83 42 00 00       	push   $0x4283
+     edc:	68 b3 42 00 00       	push   $0x42b3
      ee1:	e8 dd 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      ee6:	83 c4 10             	add    $0x10,%esp
@@ -1513,9 +1513,9 @@
      f37:	74 e7                	je     f20 <sharedfd+0x70>
       printf(1, "fstests: write sharedfd failed\n");
      f39:	83 ec 08             	sub    $0x8,%esp
-     f3c:	68 74 4f 00 00       	push   $0x4f74
+     f3c:	68 a4 4f 00 00       	push   $0x4fa4
      f41:	6a 01                	push   $0x1
-     f43:	e8 98 2b 00 00       	call   3ae0 <printf>
+     f43:	e8 c8 2b 00 00       	call   3b10 <printf>
       break;
      f48:	83 c4 10             	add    $0x10,%esp
   if(pid == 0)
@@ -1536,7 +1536,7 @@
      f69:	58                   	pop    %eax
      f6a:	5a                   	pop    %edx
      f6b:	6a 00                	push   $0x0
-     f6d:	68 83 42 00 00       	push   $0x4283
+     f6d:	68 b3 42 00 00       	push   $0x42b3
      f72:	e8 4c 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      f77:	83 c4 10             	add    $0x10,%esp
@@ -1587,7 +1587,7 @@
      fd3:	ff 75 d0             	pushl  -0x30(%ebp)
      fd6:	e8 d0 29 00 00       	call   39ab <close>
   unlink("sharedfd");
-     fdb:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     fdb:	c7 04 24 b3 42 00 00 	movl   $0x42b3,(%esp)
      fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
   if(nc == 10000 && np == 10000){
      fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
@@ -1598,9 +1598,9 @@
      ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
     printf(1, "sharedfd ok\n");
      ffd:	83 ec 08             	sub    $0x8,%esp
-    1000:	68 8c 42 00 00       	push   $0x428c
+    1000:	68 bc 42 00 00       	push   $0x42bc
     1005:	6a 01                	push   $0x1
-    1007:	e8 d4 2a 00 00       	call   3ae0 <printf>
+    1007:	e8 04 2b 00 00       	call   3b10 <printf>
     100c:	83 c4 10             	add    $0x10,%esp
 }
     100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1611,9 +1611,9 @@
     1016:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for writing");
     1017:	83 ec 08             	sub    $0x8,%esp
-    101a:	68 48 4f 00 00       	push   $0x4f48
+    101a:	68 78 4f 00 00       	push   $0x4f78
     101f:	6a 01                	push   $0x1
-    1021:	e8 ba 2a 00 00       	call   3ae0 <printf>
+    1021:	e8 ea 2a 00 00       	call   3b10 <printf>
     return;
     1026:	83 c4 10             	add    $0x10,%esp
 }
@@ -1625,9 +1625,9 @@
     1030:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for reading\n");
     1031:	83 ec 08             	sub    $0x8,%esp
-    1034:	68 94 4f 00 00       	push   $0x4f94
+    1034:	68 c4 4f 00 00       	push   $0x4fc4
     1039:	6a 01                	push   $0x1
-    103b:	e8 a0 2a 00 00       	call   3ae0 <printf>
+    103b:	e8 d0 2a 00 00       	call   3b10 <printf>
     return;
     1040:	83 c4 10             	add    $0x10,%esp
 }
@@ -1642,9 +1642,9 @@
     printf(1, "sharedfd oops %d %d\n", nc, np);
     1050:	53                   	push   %ebx
     1051:	52                   	push   %edx
-    1052:	68 99 42 00 00       	push   $0x4299
+    1052:	68 c9 42 00 00       	push   $0x42c9
     1057:	6a 01                	push   $0x1
-    1059:	e8 82 2a 00 00       	call   3ae0 <printf>
+    1059:	e8 b2 2a 00 00       	call   3b10 <printf>
     exit();
     105e:	e8 20 29 00 00       	call   3983 <exit>
     1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1658,7 +1658,7 @@
     1077:	57                   	push   %edi
     1078:	56                   	push   %esi
   printf(1, "fourfiles test\n");
-    1079:	be ae 42 00 00       	mov    $0x42ae,%esi
+    1079:	be de 42 00 00       	mov    $0x42de,%esi
 {
     107e:	53                   	push   %ebx
   for(pi = 0; pi < 4; pi++){
@@ -1666,16 +1666,16 @@
 {
     1081:	83 ec 34             	sub    $0x34,%esp
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1084:	c7 45 d8 ae 42 00 00 	movl   $0x42ae,-0x28(%ebp)
+    1084:	c7 45 d8 de 42 00 00 	movl   $0x42de,-0x28(%ebp)
   printf(1, "fourfiles test\n");
-    108b:	68 b4 42 00 00       	push   $0x42b4
+    108b:	68 e4 42 00 00       	push   $0x42e4
     1090:	6a 01                	push   $0x1
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1092:	c7 45 dc f7 43 00 00 	movl   $0x43f7,-0x24(%ebp)
-    1099:	c7 45 e0 fb 43 00 00 	movl   $0x43fb,-0x20(%ebp)
-    10a0:	c7 45 e4 b1 42 00 00 	movl   $0x42b1,-0x1c(%ebp)
+    1092:	c7 45 dc 27 44 00 00 	movl   $0x4427,-0x24(%ebp)
+    1099:	c7 45 e0 2b 44 00 00 	movl   $0x442b,-0x20(%ebp)
+    10a0:	c7 45 e4 e1 42 00 00 	movl   $0x42e1,-0x1c(%ebp)
   printf(1, "fourfiles test\n");
-    10a7:	e8 34 2a 00 00       	call   3ae0 <printf>
+    10a7:	e8 64 2a 00 00       	call   3b10 <printf>
     10ac:	83 c4 10             	add    $0x10,%esp
     unlink(fname);
     10af:	83 ec 0c             	sub    $0xc,%esp
@@ -1724,7 +1724,7 @@
     110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     1110:	83 ec 04             	sub    $0x4,%esp
     1113:	68 00 20 00 00       	push   $0x2000
-    1118:	68 c0 86 00 00       	push   $0x86c0
+    1118:	68 00 87 00 00       	push   $0x8700
     111d:	ff 75 d4             	pushl  -0x2c(%ebp)
     1120:	e8 76 28 00 00       	call   399b <read>
     1125:	83 c4 10             	add    $0x10,%esp
@@ -1735,7 +1735,7 @@
     112e:	66 90                	xchg   %ax,%ax
         if(buf[j] != '0'+i){
     1130:	83 fe 01             	cmp    $0x1,%esi
-    1133:	0f be ba c0 86 00 00 	movsbl 0x86c0(%edx),%edi
+    1133:	0f be ba 00 87 00 00 	movsbl 0x8700(%edx),%edi
     113a:	19 c9                	sbb    %ecx,%ecx
     113c:	83 c1 31             	add    $0x31,%ecx
     113f:	39 cf                	cmp    %ecx,%edi
@@ -1765,9 +1765,9 @@
     1179:	75 1a                	jne    1195 <fourfiles+0x125>
   printf(1, "fourfiles ok\n");
     117b:	83 ec 08             	sub    $0x8,%esp
-    117e:	68 f2 42 00 00       	push   $0x42f2
+    117e:	68 22 43 00 00       	push   $0x4322
     1183:	6a 01                	push   $0x1
-    1185:	e8 56 29 00 00       	call   3ae0 <printf>
+    1185:	e8 86 29 00 00       	call   3b10 <printf>
 }
     118a:	83 c4 10             	add    $0x10,%esp
     118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1780,9 +1780,9 @@
     119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
           printf(1, "wrong char\n");
     119f:	83 ec 08             	sub    $0x8,%esp
-    11a2:	68 d5 42 00 00       	push   $0x42d5
+    11a2:	68 05 43 00 00       	push   $0x4305
     11a7:	6a 01                	push   $0x1
-    11a9:	e8 32 29 00 00       	call   3ae0 <printf>
+    11a9:	e8 62 29 00 00       	call   3b10 <printf>
           exit();
     11ae:	e8 d0 27 00 00       	call   3983 <exit>
       fd = open(fname, O_CREATE | O_RDWR);
@@ -1803,13 +1803,13 @@
     11d0:	68 00 02 00 00       	push   $0x200
     11d5:	53                   	push   %ebx
     11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11db:	68 c0 86 00 00       	push   $0x86c0
+    11db:	68 00 87 00 00       	push   $0x8700
     11e0:	e8 fb 25 00 00       	call   37e0 <memset>
     11e5:	83 c4 10             	add    $0x10,%esp
         if((n = write(fd, buf, 500)) != 500){
     11e8:	83 ec 04             	sub    $0x4,%esp
     11eb:	68 f4 01 00 00       	push   $0x1f4
-    11f0:	68 c0 86 00 00       	push   $0x86c0
+    11f0:	68 00 87 00 00       	push   $0x8700
     11f5:	56                   	push   %esi
     11f6:	e8 a8 27 00 00       	call   39a3 <write>
     11fb:	83 c4 10             	add    $0x10,%esp
@@ -1823,33 +1823,33 @@
         printf(1, "create failed\n");
     120f:	51                   	push   %ecx
     1210:	51                   	push   %ecx
-    1211:	68 4f 45 00 00       	push   $0x454f
+    1211:	68 7f 45 00 00       	push   $0x457f
     1216:	6a 01                	push   $0x1
-    1218:	e8 c3 28 00 00       	call   3ae0 <printf>
+    1218:	e8 f3 28 00 00       	call   3b10 <printf>
         exit();
     121d:	e8 61 27 00 00       	call   3983 <exit>
     1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       printf(1, "fork failed\n");
     1228:	83 ec 08             	sub    $0x8,%esp
-    122b:	68 89 4d 00 00       	push   $0x4d89
+    122b:	68 b9 4d 00 00       	push   $0x4db9
     1230:	6a 01                	push   $0x1
-    1232:	e8 a9 28 00 00       	call   3ae0 <printf>
+    1232:	e8 d9 28 00 00       	call   3b10 <printf>
       exit();
     1237:	e8 47 27 00 00       	call   3983 <exit>
       printf(1, "wrong length %d\n", total);
     123c:	50                   	push   %eax
     123d:	53                   	push   %ebx
-    123e:	68 e1 42 00 00       	push   $0x42e1
+    123e:	68 11 43 00 00       	push   $0x4311
     1243:	6a 01                	push   $0x1
-    1245:	e8 96 28 00 00       	call   3ae0 <printf>
+    1245:	e8 c6 28 00 00       	call   3b10 <printf>
       exit();
     124a:	e8 34 27 00 00       	call   3983 <exit>
           printf(1, "write failed %d\n", n);
     124f:	52                   	push   %edx
     1250:	50                   	push   %eax
-    1251:	68 c4 42 00 00       	push   $0x42c4
+    1251:	68 f4 42 00 00       	push   $0x42f4
     1256:	6a 01                	push   $0x1
-    1258:	e8 83 28 00 00       	call   3ae0 <printf>
+    1258:	e8 b3 28 00 00       	call   3b10 <printf>
           exit();
     125d:	e8 21 27 00 00       	call   3983 <exit>
     1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1868,9 +1868,9 @@
 {
     127c:	83 ec 44             	sub    $0x44,%esp
   printf(1, "createdelete test\n");
-    127f:	68 00 43 00 00       	push   $0x4300
+    127f:	68 30 43 00 00       	push   $0x4330
     1284:	6a 01                	push   $0x1
-    1286:	e8 55 28 00 00       	call   3ae0 <printf>
+    1286:	e8 85 28 00 00       	call   3b10 <printf>
     128b:	83 c4 10             	add    $0x10,%esp
     pid = fork();
     128e:	e8 e8 26 00 00       	call   397b <fork>
@@ -1977,9 +1977,9 @@
     137f:	75 cf                	jne    1350 <createdelete+0xe0>
   printf(1, "createdelete ok\n");
     1381:	83 ec 08             	sub    $0x8,%esp
-    1384:	68 13 43 00 00       	push   $0x4313
+    1384:	68 43 43 00 00       	push   $0x4343
     1389:	6a 01                	push   $0x1
-    138b:	e8 50 27 00 00       	call   3ae0 <printf>
+    138b:	e8 80 27 00 00       	call   3b10 <printf>
 }
     1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1393:	5b                   	pop    %ebx
@@ -2055,9 +2055,9 @@
             printf(1, "unlink failed\n");
     1422:	52                   	push   %edx
     1423:	52                   	push   %edx
-    1424:	68 01 3f 00 00       	push   $0x3f01
+    1424:	68 31 3f 00 00       	push   $0x3f31
     1429:	6a 01                	push   $0x1
-    142b:	e8 b0 26 00 00       	call   3ae0 <printf>
+    142b:	e8 e0 26 00 00       	call   3b10 <printf>
             exit();
     1430:	e8 4e 25 00 00       	call   3983 <exit>
     1435:	8d 76 00             	lea    0x0(%esi),%esi
@@ -2067,23 +2067,23 @@
         printf(1, "oops createdelete %s didn't exist\n", name);
     1440:	83 ec 04             	sub    $0x4,%esp
     1443:	57                   	push   %edi
-    1444:	68 c0 4f 00 00       	push   $0x4fc0
+    1444:	68 f0 4f 00 00       	push   $0x4ff0
     1449:	6a 01                	push   $0x1
-    144b:	e8 90 26 00 00       	call   3ae0 <printf>
+    144b:	e8 c0 26 00 00       	call   3b10 <printf>
         exit();
     1450:	e8 2e 25 00 00       	call   3983 <exit>
           printf(1, "create failed\n");
     1455:	83 ec 08             	sub    $0x8,%esp
-    1458:	68 4f 45 00 00       	push   $0x454f
+    1458:	68 7f 45 00 00       	push   $0x457f
     145d:	6a 01                	push   $0x1
-    145f:	e8 7c 26 00 00       	call   3ae0 <printf>
+    145f:	e8 ac 26 00 00       	call   3b10 <printf>
           exit();
     1464:	e8 1a 25 00 00       	call   3983 <exit>
       printf(1, "fork failed\n");
     1469:	83 ec 08             	sub    $0x8,%esp
-    146c:	68 89 4d 00 00       	push   $0x4d89
+    146c:	68 b9 4d 00 00       	push   $0x4db9
     1471:	6a 01                	push   $0x1
-    1473:	e8 68 26 00 00       	call   3ae0 <printf>
+    1473:	e8 98 26 00 00       	call   3b10 <printf>
       exit();
     1478:	e8 06 25 00 00       	call   3983 <exit>
       } else if((i >= 1 && i < N/2) && fd >= 0){
@@ -2093,9 +2093,9 @@
         printf(1, "oops createdelete %s did exist\n", name);
     1488:	50                   	push   %eax
     1489:	57                   	push   %edi
-    148a:	68 e4 4f 00 00       	push   $0x4fe4
+    148a:	68 14 50 00 00       	push   $0x5014
     148f:	6a 01                	push   $0x1
-    1491:	e8 4a 26 00 00       	call   3ae0 <printf>
+    1491:	e8 7a 26 00 00       	call   3b10 <printf>
         exit();
     1496:	e8 e8 24 00 00       	call   3983 <exit>
     149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2110,14 +2110,14 @@
     14a8:	53                   	push   %ebx
   printf(1, "unlinkread test\n");
     14a9:	83 ec 08             	sub    $0x8,%esp
-    14ac:	68 24 43 00 00       	push   $0x4324
+    14ac:	68 54 43 00 00       	push   $0x4354
     14b1:	6a 01                	push   $0x1
-    14b3:	e8 28 26 00 00       	call   3ae0 <printf>
+    14b3:	e8 58 26 00 00       	call   3b10 <printf>
   fd = open("unlinkread", O_CREATE | O_RDWR);
     14b8:	5b                   	pop    %ebx
     14b9:	5e                   	pop    %esi
     14ba:	68 02 02 00 00       	push   $0x202
-    14bf:	68 35 43 00 00       	push   $0x4335
+    14bf:	68 65 43 00 00       	push   $0x4365
     14c4:	e8 fa 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14c9:	83 c4 10             	add    $0x10,%esp
@@ -2127,7 +2127,7 @@
     14d4:	83 ec 04             	sub    $0x4,%esp
     14d7:	89 c3                	mov    %eax,%ebx
     14d9:	6a 05                	push   $0x5
-    14db:	68 5a 43 00 00       	push   $0x435a
+    14db:	68 8a 43 00 00       	push   $0x438a
     14e0:	50                   	push   %eax
     14e1:	e8 bd 24 00 00       	call   39a3 <write>
   close(fd);
@@ -2137,7 +2137,7 @@
     14ee:	58                   	pop    %eax
     14ef:	5a                   	pop    %edx
     14f0:	6a 02                	push   $0x2
-    14f2:	68 35 43 00 00       	push   $0x4335
+    14f2:	68 65 43 00 00       	push   $0x4365
     14f7:	e8 c7 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14fc:	83 c4 10             	add    $0x10,%esp
@@ -2148,7 +2148,7 @@
     1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
   if(unlink("unlinkread") != 0){
     1509:	83 ec 0c             	sub    $0xc,%esp
-    150c:	68 35 43 00 00       	push   $0x4335
+    150c:	68 65 43 00 00       	push   $0x4365
     1511:	e8 bd 24 00 00       	call   39d3 <unlink>
     1516:	83 c4 10             	add    $0x10,%esp
     1519:	85 c0                	test   %eax,%eax
@@ -2156,7 +2156,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1521:	83 ec 08             	sub    $0x8,%esp
     1524:	68 02 02 00 00       	push   $0x202
-    1529:	68 35 43 00 00       	push   $0x4335
+    1529:	68 65 43 00 00       	push   $0x4365
     152e:	e8 90 24 00 00       	call   39c3 <open>
   write(fd1, "yyy", 3);
     1533:	83 c4 0c             	add    $0xc,%esp
@@ -2164,7 +2164,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1538:	89 c6                	mov    %eax,%esi
   write(fd1, "yyy", 3);
-    153a:	68 92 43 00 00       	push   $0x4392
+    153a:	68 c2 43 00 00       	push   $0x43c2
     153f:	50                   	push   %eax
     1540:	e8 5e 24 00 00       	call   39a3 <write>
   close(fd1);
@@ -2173,19 +2173,19 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     154d:	83 c4 0c             	add    $0xc,%esp
     1550:	68 00 20 00 00       	push   $0x2000
-    1555:	68 c0 86 00 00       	push   $0x86c0
+    1555:	68 00 87 00 00       	push   $0x8700
     155a:	53                   	push   %ebx
     155b:	e8 3b 24 00 00       	call   399b <read>
     1560:	83 c4 10             	add    $0x10,%esp
     1563:	83 f8 05             	cmp    $0x5,%eax
     1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
   if(buf[0] != 'h'){
-    156c:	80 3d c0 86 00 00 68 	cmpb   $0x68,0x86c0
+    156c:	80 3d 00 87 00 00 68 	cmpb   $0x68,0x8700
     1573:	75 6b                	jne    15e0 <unlinkread+0x140>
   if(write(fd, buf, 10) != 10){
     1575:	83 ec 04             	sub    $0x4,%esp
     1578:	6a 0a                	push   $0xa
-    157a:	68 c0 86 00 00       	push   $0x86c0
+    157a:	68 00 87 00 00       	push   $0x8700
     157f:	53                   	push   %ebx
     1580:	e8 1e 24 00 00       	call   39a3 <write>
     1585:	83 c4 10             	add    $0x10,%esp
@@ -2196,14 +2196,14 @@
     1590:	53                   	push   %ebx
     1591:	e8 15 24 00 00       	call   39ab <close>
   unlink("unlinkread");
-    1596:	c7 04 24 35 43 00 00 	movl   $0x4335,(%esp)
+    1596:	c7 04 24 65 43 00 00 	movl   $0x4365,(%esp)
     159d:	e8 31 24 00 00       	call   39d3 <unlink>
   printf(1, "unlinkread ok\n");
     15a2:	58                   	pop    %eax
     15a3:	5a                   	pop    %edx
-    15a4:	68 dd 43 00 00       	push   $0x43dd
+    15a4:	68 0d 44 00 00       	push   $0x440d
     15a9:	6a 01                	push   $0x1
-    15ab:	e8 30 25 00 00       	call   3ae0 <printf>
+    15ab:	e8 60 25 00 00       	call   3b10 <printf>
 }
     15b0:	83 c4 10             	add    $0x10,%esp
     15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -2214,49 +2214,49 @@
     printf(1, "create unlinkread failed\n");
     15ba:	51                   	push   %ecx
     15bb:	51                   	push   %ecx
-    15bc:	68 40 43 00 00       	push   $0x4340
+    15bc:	68 70 43 00 00       	push   $0x4370
     15c1:	6a 01                	push   $0x1
-    15c3:	e8 18 25 00 00       	call   3ae0 <printf>
+    15c3:	e8 48 25 00 00       	call   3b10 <printf>
     exit();
     15c8:	e8 b6 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread write failed\n");
     15cd:	51                   	push   %ecx
     15ce:	51                   	push   %ecx
-    15cf:	68 c4 43 00 00       	push   $0x43c4
+    15cf:	68 f4 43 00 00       	push   $0x43f4
     15d4:	6a 01                	push   $0x1
-    15d6:	e8 05 25 00 00       	call   3ae0 <printf>
+    15d6:	e8 35 25 00 00       	call   3b10 <printf>
     exit();
     15db:	e8 a3 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread wrong data\n");
     15e0:	53                   	push   %ebx
     15e1:	53                   	push   %ebx
-    15e2:	68 ad 43 00 00       	push   $0x43ad
+    15e2:	68 dd 43 00 00       	push   $0x43dd
     15e7:	6a 01                	push   $0x1
-    15e9:	e8 f2 24 00 00       	call   3ae0 <printf>
+    15e9:	e8 22 25 00 00       	call   3b10 <printf>
     exit();
     15ee:	e8 90 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread read failed");
     15f3:	56                   	push   %esi
     15f4:	56                   	push   %esi
-    15f5:	68 96 43 00 00       	push   $0x4396
+    15f5:	68 c6 43 00 00       	push   $0x43c6
     15fa:	6a 01                	push   $0x1
-    15fc:	e8 df 24 00 00       	call   3ae0 <printf>
+    15fc:	e8 0f 25 00 00       	call   3b10 <printf>
     exit();
     1601:	e8 7d 23 00 00       	call   3983 <exit>
     printf(1, "unlink unlinkread failed\n");
     1606:	50                   	push   %eax
     1607:	50                   	push   %eax
-    1608:	68 78 43 00 00       	push   $0x4378
+    1608:	68 a8 43 00 00       	push   $0x43a8
     160d:	6a 01                	push   $0x1
-    160f:	e8 cc 24 00 00       	call   3ae0 <printf>
+    160f:	e8 fc 24 00 00       	call   3b10 <printf>
     exit();
     1614:	e8 6a 23 00 00       	call   3983 <exit>
     printf(1, "open unlinkread failed\n");
     1619:	50                   	push   %eax
     161a:	50                   	push   %eax
-    161b:	68 60 43 00 00       	push   $0x4360
+    161b:	68 90 43 00 00       	push   $0x4390
     1620:	6a 01                	push   $0x1
-    1622:	e8 b9 24 00 00       	call   3ae0 <printf>
+    1622:	e8 e9 24 00 00       	call   3b10 <printf>
     exit();
     1627:	e8 57 23 00 00       	call   3983 <exit>
     162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2269,20 +2269,20 @@
     1637:	53                   	push   %ebx
     1638:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "linktest\n");
-    163b:	68 ec 43 00 00       	push   $0x43ec
+    163b:	68 1c 44 00 00       	push   $0x441c
     1640:	6a 01                	push   $0x1
-    1642:	e8 99 24 00 00       	call   3ae0 <printf>
+    1642:	e8 c9 24 00 00       	call   3b10 <printf>
   unlink("lf1");
-    1647:	c7 04 24 f6 43 00 00 	movl   $0x43f6,(%esp)
+    1647:	c7 04 24 26 44 00 00 	movl   $0x4426,(%esp)
     164e:	e8 80 23 00 00       	call   39d3 <unlink>
   unlink("lf2");
-    1653:	c7 04 24 fa 43 00 00 	movl   $0x43fa,(%esp)
+    1653:	c7 04 24 2a 44 00 00 	movl   $0x442a,(%esp)
     165a:	e8 74 23 00 00       	call   39d3 <unlink>
   fd = open("lf1", O_CREATE|O_RDWR);
     165f:	58                   	pop    %eax
     1660:	5a                   	pop    %edx
     1661:	68 02 02 00 00       	push   $0x202
-    1666:	68 f6 43 00 00       	push   $0x43f6
+    1666:	68 26 44 00 00       	push   $0x4426
     166b:	e8 53 23 00 00       	call   39c3 <open>
   if(fd < 0){
     1670:	83 c4 10             	add    $0x10,%esp
@@ -2292,7 +2292,7 @@
     167b:	83 ec 04             	sub    $0x4,%esp
     167e:	89 c3                	mov    %eax,%ebx
     1680:	6a 05                	push   $0x5
-    1682:	68 5a 43 00 00       	push   $0x435a
+    1682:	68 8a 43 00 00       	push   $0x438a
     1687:	50                   	push   %eax
     1688:	e8 16 23 00 00       	call   39a3 <write>
     168d:	83 c4 10             	add    $0x10,%esp
@@ -2305,21 +2305,21 @@
   if(link("lf1", "lf2") < 0){
     16a2:	5b                   	pop    %ebx
     16a3:	58                   	pop    %eax
-    16a4:	68 fa 43 00 00       	push   $0x43fa
-    16a9:	68 f6 43 00 00       	push   $0x43f6
+    16a4:	68 2a 44 00 00       	push   $0x442a
+    16a9:	68 26 44 00 00       	push   $0x4426
     16ae:	e8 30 23 00 00       	call   39e3 <link>
     16b3:	83 c4 10             	add    $0x10,%esp
     16b6:	85 c0                	test   %eax,%eax
     16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
   unlink("lf1");
     16be:	83 ec 0c             	sub    $0xc,%esp
-    16c1:	68 f6 43 00 00       	push   $0x43f6
+    16c1:	68 26 44 00 00       	push   $0x4426
     16c6:	e8 08 23 00 00       	call   39d3 <unlink>
   if(open("lf1", 0) >= 0){
     16cb:	58                   	pop    %eax
     16cc:	5a                   	pop    %edx
     16cd:	6a 00                	push   $0x0
-    16cf:	68 f6 43 00 00       	push   $0x43f6
+    16cf:	68 26 44 00 00       	push   $0x4426
     16d4:	e8 ea 22 00 00       	call   39c3 <open>
     16d9:	83 c4 10             	add    $0x10,%esp
     16dc:	85 c0                	test   %eax,%eax
@@ -2327,7 +2327,7 @@
   fd = open("lf2", 0);
     16e4:	83 ec 08             	sub    $0x8,%esp
     16e7:	6a 00                	push   $0x0
-    16e9:	68 fa 43 00 00       	push   $0x43fa
+    16e9:	68 2a 44 00 00       	push   $0x442a
     16ee:	e8 d0 22 00 00       	call   39c3 <open>
   if(fd < 0){
     16f3:	83 c4 10             	add    $0x10,%esp
@@ -2339,7 +2339,7 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     1700:	83 ec 04             	sub    $0x4,%esp
     1703:	68 00 20 00 00       	push   $0x2000
-    1708:	68 c0 86 00 00       	push   $0x86c0
+    1708:	68 00 87 00 00       	push   $0x8700
     170d:	50                   	push   %eax
     170e:	e8 88 22 00 00       	call   399b <read>
     1713:	83 c4 10             	add    $0x10,%esp
@@ -2352,38 +2352,38 @@
   if(link("lf2", "lf2") >= 0){
     1728:	58                   	pop    %eax
     1729:	5a                   	pop    %edx
-    172a:	68 fa 43 00 00       	push   $0x43fa
-    172f:	68 fa 43 00 00       	push   $0x43fa
+    172a:	68 2a 44 00 00       	push   $0x442a
+    172f:	68 2a 44 00 00       	push   $0x442a
     1734:	e8 aa 22 00 00       	call   39e3 <link>
     1739:	83 c4 10             	add    $0x10,%esp
     173c:	85 c0                	test   %eax,%eax
     173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
   unlink("lf2");
     1744:	83 ec 0c             	sub    $0xc,%esp
-    1747:	68 fa 43 00 00       	push   $0x43fa
+    1747:	68 2a 44 00 00       	push   $0x442a
     174c:	e8 82 22 00 00       	call   39d3 <unlink>
   if(link("lf2", "lf1") >= 0){
     1751:	59                   	pop    %ecx
     1752:	5b                   	pop    %ebx
-    1753:	68 f6 43 00 00       	push   $0x43f6
-    1758:	68 fa 43 00 00       	push   $0x43fa
+    1753:	68 26 44 00 00       	push   $0x4426
+    1758:	68 2a 44 00 00       	push   $0x442a
     175d:	e8 81 22 00 00       	call   39e3 <link>
     1762:	83 c4 10             	add    $0x10,%esp
     1765:	85 c0                	test   %eax,%eax
     1767:	79 56                	jns    17bf <linktest+0x18f>
   if(link(".", "lf1") >= 0){
     1769:	83 ec 08             	sub    $0x8,%esp
-    176c:	68 f6 43 00 00       	push   $0x43f6
-    1771:	68 be 46 00 00       	push   $0x46be
+    176c:	68 26 44 00 00       	push   $0x4426
+    1771:	68 ee 46 00 00       	push   $0x46ee
     1776:	e8 68 22 00 00       	call   39e3 <link>
     177b:	83 c4 10             	add    $0x10,%esp
     177e:	85 c0                	test   %eax,%eax
     1780:	79 2a                	jns    17ac <linktest+0x17c>
   printf(1, "linktest ok\n");
     1782:	83 ec 08             	sub    $0x8,%esp
-    1785:	68 94 44 00 00       	push   $0x4494
+    1785:	68 c4 44 00 00       	push   $0x44c4
     178a:	6a 01                	push   $0x1
-    178c:	e8 4f 23 00 00       	call   3ae0 <printf>
+    178c:	e8 7f 23 00 00       	call   3b10 <printf>
 }
     1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     1794:	83 c4 10             	add    $0x10,%esp
@@ -2392,73 +2392,73 @@
     printf(1, "create lf1 failed\n");
     1799:	50                   	push   %eax
     179a:	50                   	push   %eax
-    179b:	68 fe 43 00 00       	push   $0x43fe
+    179b:	68 2e 44 00 00       	push   $0x442e
     17a0:	6a 01                	push   $0x1
-    17a2:	e8 39 23 00 00       	call   3ae0 <printf>
+    17a2:	e8 69 23 00 00       	call   3b10 <printf>
     exit();
     17a7:	e8 d7 21 00 00       	call   3983 <exit>
     printf(1, "link . lf1 succeeded! oops\n");
     17ac:	50                   	push   %eax
     17ad:	50                   	push   %eax
-    17ae:	68 78 44 00 00       	push   $0x4478
+    17ae:	68 a8 44 00 00       	push   $0x44a8
     17b3:	6a 01                	push   $0x1
-    17b5:	e8 26 23 00 00       	call   3ae0 <printf>
+    17b5:	e8 56 23 00 00       	call   3b10 <printf>
     exit();
     17ba:	e8 c4 21 00 00       	call   3983 <exit>
     printf(1, "link non-existant succeeded! oops\n");
     17bf:	52                   	push   %edx
     17c0:	52                   	push   %edx
-    17c1:	68 2c 50 00 00       	push   $0x502c
+    17c1:	68 5c 50 00 00       	push   $0x505c
     17c6:	6a 01                	push   $0x1
-    17c8:	e8 13 23 00 00       	call   3ae0 <printf>
+    17c8:	e8 43 23 00 00       	call   3b10 <printf>
     exit();
     17cd:	e8 b1 21 00 00       	call   3983 <exit>
     printf(1, "link lf2 lf2 succeeded! oops\n");
     17d2:	50                   	push   %eax
     17d3:	50                   	push   %eax
-    17d4:	68 5a 44 00 00       	push   $0x445a
+    17d4:	68 8a 44 00 00       	push   $0x448a
     17d9:	6a 01                	push   $0x1
-    17db:	e8 00 23 00 00       	call   3ae0 <printf>
+    17db:	e8 30 23 00 00       	call   3b10 <printf>
     exit();
     17e0:	e8 9e 21 00 00       	call   3983 <exit>
     printf(1, "read lf2 failed\n");
     17e5:	51                   	push   %ecx
     17e6:	51                   	push   %ecx
-    17e7:	68 49 44 00 00       	push   $0x4449
+    17e7:	68 79 44 00 00       	push   $0x4479
     17ec:	6a 01                	push   $0x1
-    17ee:	e8 ed 22 00 00       	call   3ae0 <printf>
+    17ee:	e8 1d 23 00 00       	call   3b10 <printf>
     exit();
     17f3:	e8 8b 21 00 00       	call   3983 <exit>
     printf(1, "open lf2 failed\n");
     17f8:	53                   	push   %ebx
     17f9:	53                   	push   %ebx
-    17fa:	68 38 44 00 00       	push   $0x4438
+    17fa:	68 68 44 00 00       	push   $0x4468
     17ff:	6a 01                	push   $0x1
-    1801:	e8 da 22 00 00       	call   3ae0 <printf>
+    1801:	e8 0a 23 00 00       	call   3b10 <printf>
     exit();
     1806:	e8 78 21 00 00       	call   3983 <exit>
     printf(1, "unlinked lf1 but it is still there!\n");
     180b:	50                   	push   %eax
     180c:	50                   	push   %eax
-    180d:	68 04 50 00 00       	push   $0x5004
+    180d:	68 34 50 00 00       	push   $0x5034
     1812:	6a 01                	push   $0x1
-    1814:	e8 c7 22 00 00       	call   3ae0 <printf>
+    1814:	e8 f7 22 00 00       	call   3b10 <printf>
     exit();
     1819:	e8 65 21 00 00       	call   3983 <exit>
     printf(1, "link lf1 lf2 failed\n");
     181e:	51                   	push   %ecx
     181f:	51                   	push   %ecx
-    1820:	68 23 44 00 00       	push   $0x4423
+    1820:	68 53 44 00 00       	push   $0x4453
     1825:	6a 01                	push   $0x1
-    1827:	e8 b4 22 00 00       	call   3ae0 <printf>
+    1827:	e8 e4 22 00 00       	call   3b10 <printf>
     exit();
     182c:	e8 52 21 00 00       	call   3983 <exit>
     printf(1, "write lf1 failed\n");
     1831:	50                   	push   %eax
     1832:	50                   	push   %eax
-    1833:	68 11 44 00 00       	push   $0x4411
+    1833:	68 41 44 00 00       	push   $0x4441
     1838:	6a 01                	push   $0x1
-    183a:	e8 a1 22 00 00       	call   3ae0 <printf>
+    183a:	e8 d1 22 00 00       	call   3b10 <printf>
     exit();
     183f:	e8 3f 21 00 00       	call   3983 <exit>
     1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2479,9 +2479,9 @@
     185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
     185f:	83 ec 64             	sub    $0x64,%esp
   printf(1, "concreate test\n");
-    1862:	68 a1 44 00 00       	push   $0x44a1
+    1862:	68 d1 44 00 00       	push   $0x44d1
     1867:	6a 01                	push   $0x1
-    1869:	e8 72 22 00 00       	call   3ae0 <printf>
+    1869:	e8 a2 22 00 00       	call   3b10 <printf>
   file[0] = 'C';
     186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
   file[2] = '\0';
@@ -2550,16 +2550,16 @@
         printf(1, "concreate create %s failed\n", file);
     1905:	83 ec 04             	sub    $0x4,%esp
     1908:	53                   	push   %ebx
-    1909:	68 b4 44 00 00       	push   $0x44b4
+    1909:	68 e4 44 00 00       	push   $0x44e4
     190e:	6a 01                	push   $0x1
-    1910:	e8 cb 21 00 00       	call   3ae0 <printf>
+    1910:	e8 fb 21 00 00       	call   3b10 <printf>
         exit();
     1915:	e8 69 20 00 00       	call   3983 <exit>
     191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       link("C0", file);
     1920:	83 ec 08             	sub    $0x8,%esp
     1923:	53                   	push   %ebx
-    1924:	68 b1 44 00 00       	push   $0x44b1
+    1924:	68 e1 44 00 00       	push   $0x44e1
     1929:	e8 b5 20 00 00       	call   39e3 <link>
     192e:	83 c4 10             	add    $0x10,%esp
       exit();
@@ -2572,7 +2572,7 @@
     1943:	83 c6 01             	add    $0x1,%esi
       link("C0", file);
     1946:	53                   	push   %ebx
-    1947:	68 b1 44 00 00       	push   $0x44b1
+    1947:	68 e1 44 00 00       	push   $0x44e1
     194c:	e8 92 20 00 00       	call   39e3 <link>
     1951:	83 c4 10             	add    $0x10,%esp
       wait();
@@ -2591,7 +2591,7 @@
     1972:	5e                   	pop    %esi
     1973:	5f                   	pop    %edi
     1974:	6a 00                	push   $0x0
-    1976:	68 be 46 00 00       	push   $0x46be
+    1976:	68 ee 46 00 00       	push   $0x46ee
     197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
     197e:	e8 40 20 00 00       	call   39c3 <open>
   n = 0;
@@ -2732,9 +2732,9 @@
     1acd:	8d 76 00             	lea    0x0(%esi),%esi
   printf(1, "concreate ok\n");
     1ad0:	83 ec 08             	sub    $0x8,%esp
-    1ad3:	68 06 45 00 00       	push   $0x4506
+    1ad3:	68 36 45 00 00       	push   $0x4536
     1ad8:	6a 01                	push   $0x1
-    1ada:	e8 01 20 00 00       	call   3ae0 <printf>
+    1ada:	e8 31 20 00 00       	call   3b10 <printf>
 }
     1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1ae2:	5b                   	pop    %ebx
@@ -2744,35 +2744,35 @@
     1ae6:	c3                   	ret    
       printf(1, "fork failed\n");
     1ae7:	83 ec 08             	sub    $0x8,%esp
-    1aea:	68 89 4d 00 00       	push   $0x4d89
+    1aea:	68 b9 4d 00 00       	push   $0x4db9
     1aef:	6a 01                	push   $0x1
-    1af1:	e8 ea 1f 00 00       	call   3ae0 <printf>
+    1af1:	e8 1a 20 00 00       	call   3b10 <printf>
       exit();
     1af6:	e8 88 1e 00 00       	call   3983 <exit>
     printf(1, "concreate not enough files in directory listing\n");
     1afb:	51                   	push   %ecx
     1afc:	51                   	push   %ecx
-    1afd:	68 50 50 00 00       	push   $0x5050
+    1afd:	68 80 50 00 00       	push   $0x5080
     1b02:	6a 01                	push   $0x1
-    1b04:	e8 d7 1f 00 00       	call   3ae0 <printf>
+    1b04:	e8 07 20 00 00       	call   3b10 <printf>
     exit();
     1b09:	e8 75 1e 00 00       	call   3983 <exit>
         printf(1, "concreate duplicate file %s\n", de.name);
     1b0e:	83 ec 04             	sub    $0x4,%esp
     1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b14:	50                   	push   %eax
-    1b15:	68 e9 44 00 00       	push   $0x44e9
+    1b15:	68 19 45 00 00       	push   $0x4519
     1b1a:	6a 01                	push   $0x1
-    1b1c:	e8 bf 1f 00 00       	call   3ae0 <printf>
+    1b1c:	e8 ef 1f 00 00       	call   3b10 <printf>
         exit();
     1b21:	e8 5d 1e 00 00       	call   3983 <exit>
         printf(1, "concreate weird file %s\n", de.name);
     1b26:	83 ec 04             	sub    $0x4,%esp
     1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b2c:	50                   	push   %eax
-    1b2d:	68 d0 44 00 00       	push   $0x44d0
+    1b2d:	68 00 45 00 00       	push   $0x4500
     1b32:	6a 01                	push   $0x1
-    1b34:	e8 a7 1f 00 00       	call   3ae0 <printf>
+    1b34:	e8 d7 1f 00 00       	call   3b10 <printf>
         exit();
     1b39:	e8 45 1e 00 00       	call   3983 <exit>
       close(fd);
@@ -2793,11 +2793,11 @@
     1b59:	53                   	push   %ebx
     1b5a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "linkunlink test\n");
-    1b5d:	68 14 45 00 00       	push   $0x4514
+    1b5d:	68 44 45 00 00       	push   $0x4544
     1b62:	6a 01                	push   $0x1
-    1b64:	e8 77 1f 00 00       	call   3ae0 <printf>
+    1b64:	e8 a7 1f 00 00       	call   3b10 <printf>
   unlink("x");
-    1b69:	c7 04 24 a1 47 00 00 	movl   $0x47a1,(%esp)
+    1b69:	c7 04 24 d1 47 00 00 	movl   $0x47d1,(%esp)
     1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
   pid = fork();
     1b75:	e8 01 1e 00 00       	call   397b <fork>
@@ -2823,7 +2823,7 @@
     1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
       unlink("x");
     1ba5:	83 ec 0c             	sub    $0xc,%esp
-    1ba8:	68 a1 47 00 00       	push   $0x47a1
+    1ba8:	68 d1 47 00 00       	push   $0x47d1
     1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
     1bb2:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < 100; i++){
@@ -2845,7 +2845,7 @@
       close(open("x", O_RDWR | O_CREATE));
     1bd9:	83 ec 08             	sub    $0x8,%esp
     1bdc:	68 02 02 00 00       	push   $0x202
-    1be1:	68 a1 47 00 00       	push   $0x47a1
+    1be1:	68 d1 47 00 00       	push   $0x47d1
     1be6:	e8 d8 1d 00 00       	call   39c3 <open>
     1beb:	89 04 24             	mov    %eax,(%esp)
     1bee:	e8 b8 1d 00 00       	call   39ab <close>
@@ -2861,9 +2861,9 @@
     1c02:	e8 84 1d 00 00       	call   398b <wait>
   printf(1, "linkunlink ok\n");
     1c07:	83 ec 08             	sub    $0x8,%esp
-    1c0a:	68 29 45 00 00       	push   $0x4529
+    1c0a:	68 59 45 00 00       	push   $0x4559
     1c0f:	6a 01                	push   $0x1
-    1c11:	e8 ca 1e 00 00       	call   3ae0 <printf>
+    1c11:	e8 fa 1e 00 00       	call   3b10 <printf>
 }
     1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1c19:	5b                   	pop    %ebx
@@ -2874,17 +2874,17 @@
     1c1e:	66 90                	xchg   %ax,%ax
       link("cat", "x");
     1c20:	83 ec 08             	sub    $0x8,%esp
-    1c23:	68 a1 47 00 00       	push   $0x47a1
-    1c28:	68 25 45 00 00       	push   $0x4525
+    1c23:	68 d1 47 00 00       	push   $0x47d1
+    1c28:	68 55 45 00 00       	push   $0x4555
     1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
     1c32:	83 c4 10             	add    $0x10,%esp
     1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
     printf(1, "fork failed\n");
     1c3a:	52                   	push   %edx
     1c3b:	52                   	push   %edx
-    1c3c:	68 89 4d 00 00       	push   $0x4d89
+    1c3c:	68 b9 4d 00 00       	push   $0x4db9
     1c41:	6a 01                	push   $0x1
-    1c43:	e8 98 1e 00 00       	call   3ae0 <printf>
+    1c43:	e8 c8 1e 00 00       	call   3b10 <printf>
     exit();
     1c48:	e8 36 1d 00 00       	call   3983 <exit>
     exit();
@@ -2902,17 +2902,17 @@
     1c69:	53                   	push   %ebx
     1c6a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "bigdir test\n");
-    1c6d:	68 38 45 00 00       	push   $0x4538
+    1c6d:	68 68 45 00 00       	push   $0x4568
     1c72:	6a 01                	push   $0x1
-    1c74:	e8 67 1e 00 00       	call   3ae0 <printf>
+    1c74:	e8 97 1e 00 00       	call   3b10 <printf>
   unlink("bd");
-    1c79:	c7 04 24 45 45 00 00 	movl   $0x4545,(%esp)
+    1c79:	c7 04 24 75 45 00 00 	movl   $0x4575,(%esp)
     1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
   fd = open("bd", O_CREATE);
     1c85:	5a                   	pop    %edx
     1c86:	59                   	pop    %ecx
     1c87:	68 00 02 00 00       	push   $0x200
-    1c8c:	68 45 45 00 00       	push   $0x4545
+    1c8c:	68 75 45 00 00       	push   $0x4575
     1c91:	e8 2d 1d 00 00       	call   39c3 <open>
   if(fd < 0){
     1c96:	83 c4 10             	add    $0x10,%esp
@@ -2941,7 +2941,7 @@
     name[1] = '0' + (i / 64);
     1cc5:	83 c0 30             	add    $0x30,%eax
     if(link("bd", name) != 0){
-    1cc8:	68 45 45 00 00       	push   $0x4545
+    1cc8:	68 75 45 00 00       	push   $0x4575
     name[1] = '0' + (i / 64);
     1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
     name[2] = '0' + (i % 64);
@@ -2964,7 +2964,7 @@
     1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
   unlink("bd");
     1cf8:	83 ec 0c             	sub    $0xc,%esp
-    1cfb:	68 45 45 00 00       	push   $0x4545
+    1cfb:	68 75 45 00 00       	push   $0x4575
     1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
     1d05:	83 c4 10             	add    $0x10,%esp
     1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3001,9 +3001,9 @@
     1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
   printf(1, "bigdir ok\n");
     1d49:	83 ec 08             	sub    $0x8,%esp
-    1d4c:	68 87 45 00 00       	push   $0x4587
+    1d4c:	68 b7 45 00 00       	push   $0x45b7
     1d51:	6a 01                	push   $0x1
-    1d53:	e8 88 1d 00 00       	call   3ae0 <printf>
+    1d53:	e8 b8 1d 00 00       	call   3b10 <printf>
     1d58:	83 c4 10             	add    $0x10,%esp
 }
     1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -3014,24 +3014,24 @@
     1d62:	c3                   	ret    
       printf(1, "bigdir link failed\n");
     1d63:	83 ec 08             	sub    $0x8,%esp
-    1d66:	68 5e 45 00 00       	push   $0x455e
+    1d66:	68 8e 45 00 00       	push   $0x458e
     1d6b:	6a 01                	push   $0x1
-    1d6d:	e8 6e 1d 00 00       	call   3ae0 <printf>
+    1d6d:	e8 9e 1d 00 00       	call   3b10 <printf>
       exit();
     1d72:	e8 0c 1c 00 00       	call   3983 <exit>
       printf(1, "bigdir unlink failed");
     1d77:	83 ec 08             	sub    $0x8,%esp
-    1d7a:	68 72 45 00 00       	push   $0x4572
+    1d7a:	68 a2 45 00 00       	push   $0x45a2
     1d7f:	6a 01                	push   $0x1
-    1d81:	e8 5a 1d 00 00       	call   3ae0 <printf>
+    1d81:	e8 8a 1d 00 00       	call   3b10 <printf>
       exit();
     1d86:	e8 f8 1b 00 00       	call   3983 <exit>
     printf(1, "bigdir create failed\n");
     1d8b:	50                   	push   %eax
     1d8c:	50                   	push   %eax
-    1d8d:	68 48 45 00 00       	push   $0x4548
+    1d8d:	68 78 45 00 00       	push   $0x4578
     1d92:	6a 01                	push   $0x1
-    1d94:	e8 47 1d 00 00       	call   3ae0 <printf>
+    1d94:	e8 77 1d 00 00       	call   3b10 <printf>
     exit();
     1d99:	e8 e5 1b 00 00       	call   3983 <exit>
     1d9e:	66 90                	xchg   %ax,%ax
@@ -3044,14 +3044,14 @@
     1da7:	53                   	push   %ebx
     1da8:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "subdir test\n");
-    1dab:	68 92 45 00 00       	push   $0x4592
+    1dab:	68 c2 45 00 00       	push   $0x45c2
     1db0:	6a 01                	push   $0x1
-    1db2:	e8 29 1d 00 00       	call   3ae0 <printf>
+    1db2:	e8 59 1d 00 00       	call   3b10 <printf>
   unlink("ff");
-    1db7:	c7 04 24 1b 46 00 00 	movl   $0x461b,(%esp)
+    1db7:	c7 04 24 4b 46 00 00 	movl   $0x464b,(%esp)
     1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
   if(mkdir("dd") != 0){
-    1dc3:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1dc3:	c7 04 24 e8 46 00 00 	movl   $0x46e8,(%esp)
     1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
     1dcf:	83 c4 10             	add    $0x10,%esp
     1dd2:	85 c0                	test   %eax,%eax
@@ -3059,7 +3059,7 @@
   fd = open("dd/ff", O_CREATE | O_RDWR);
     1dda:	83 ec 08             	sub    $0x8,%esp
     1ddd:	68 02 02 00 00       	push   $0x202
-    1de2:	68 f1 45 00 00       	push   $0x45f1
+    1de2:	68 21 46 00 00       	push   $0x4621
     1de7:	e8 d7 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1dec:	83 c4 10             	add    $0x10,%esp
@@ -3071,21 +3071,21 @@
   write(fd, "ff", 2);
     1df9:	83 ec 04             	sub    $0x4,%esp
     1dfc:	6a 02                	push   $0x2
-    1dfe:	68 1b 46 00 00       	push   $0x461b
+    1dfe:	68 4b 46 00 00       	push   $0x464b
     1e03:	50                   	push   %eax
     1e04:	e8 9a 1b 00 00       	call   39a3 <write>
   close(fd);
     1e09:	89 1c 24             	mov    %ebx,(%esp)
     1e0c:	e8 9a 1b 00 00       	call   39ab <close>
   if(unlink("dd") >= 0){
-    1e11:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1e11:	c7 04 24 e8 46 00 00 	movl   $0x46e8,(%esp)
     1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
     1e1d:	83 c4 10             	add    $0x10,%esp
     1e20:	85 c0                	test   %eax,%eax
     1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
   if(mkdir("/dd/dd") != 0){
     1e28:	83 ec 0c             	sub    $0xc,%esp
-    1e2b:	68 cc 45 00 00       	push   $0x45cc
+    1e2b:	68 fc 45 00 00       	push   $0x45fc
     1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
     1e35:	83 c4 10             	add    $0x10,%esp
     1e38:	85 c0                	test   %eax,%eax
@@ -3093,7 +3093,7 @@
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
     1e40:	83 ec 08             	sub    $0x8,%esp
     1e43:	68 02 02 00 00       	push   $0x202
-    1e48:	68 ee 45 00 00       	push   $0x45ee
+    1e48:	68 1e 46 00 00       	push   $0x461e
     1e4d:	e8 71 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e52:	83 c4 10             	add    $0x10,%esp
@@ -3105,7 +3105,7 @@
   write(fd, "FF", 2);
     1e5f:	83 ec 04             	sub    $0x4,%esp
     1e62:	6a 02                	push   $0x2
-    1e64:	68 0f 46 00 00       	push   $0x460f
+    1e64:	68 3f 46 00 00       	push   $0x463f
     1e69:	50                   	push   %eax
     1e6a:	e8 34 1b 00 00       	call   39a3 <write>
   close(fd);
@@ -3115,7 +3115,7 @@
     1e77:	58                   	pop    %eax
     1e78:	5a                   	pop    %edx
     1e79:	6a 00                	push   $0x0
-    1e7b:	68 12 46 00 00       	push   $0x4612
+    1e7b:	68 42 46 00 00       	push   $0x4642
     1e80:	e8 3e 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e85:	83 c4 10             	add    $0x10,%esp
@@ -3127,14 +3127,14 @@
   cc = read(fd, buf, sizeof(buf));
     1e92:	83 ec 04             	sub    $0x4,%esp
     1e95:	68 00 20 00 00       	push   $0x2000
-    1e9a:	68 c0 86 00 00       	push   $0x86c0
+    1e9a:	68 00 87 00 00       	push   $0x8700
     1e9f:	50                   	push   %eax
     1ea0:	e8 f6 1a 00 00       	call   399b <read>
   if(cc != 2 || buf[0] != 'f'){
     1ea5:	83 c4 10             	add    $0x10,%esp
     1ea8:	83 f8 02             	cmp    $0x2,%eax
     1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
-    1eb1:	80 3d c0 86 00 00 66 	cmpb   $0x66,0x86c0
+    1eb1:	80 3d 00 87 00 00 66 	cmpb   $0x66,0x8700
     1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
   close(fd);
     1ebe:	83 ec 0c             	sub    $0xc,%esp
@@ -3143,15 +3143,15 @@
   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
     1ec7:	59                   	pop    %ecx
     1ec8:	5b                   	pop    %ebx
-    1ec9:	68 52 46 00 00       	push   $0x4652
-    1ece:	68 ee 45 00 00       	push   $0x45ee
+    1ec9:	68 82 46 00 00       	push   $0x4682
+    1ece:	68 1e 46 00 00       	push   $0x461e
     1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
     1ed8:	83 c4 10             	add    $0x10,%esp
     1edb:	85 c0                	test   %eax,%eax
     1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
   if(unlink("dd/dd/ff") != 0){
     1ee3:	83 ec 0c             	sub    $0xc,%esp
-    1ee6:	68 ee 45 00 00       	push   $0x45ee
+    1ee6:	68 1e 46 00 00       	push   $0x461e
     1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
     1ef0:	83 c4 10             	add    $0x10,%esp
     1ef3:	85 c0                	test   %eax,%eax
@@ -3159,35 +3159,35 @@
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     1efb:	83 ec 08             	sub    $0x8,%esp
     1efe:	6a 00                	push   $0x0
-    1f00:	68 ee 45 00 00       	push   $0x45ee
+    1f00:	68 1e 46 00 00       	push   $0x461e
     1f05:	e8 b9 1a 00 00       	call   39c3 <open>
     1f0a:	83 c4 10             	add    $0x10,%esp
     1f0d:	85 c0                	test   %eax,%eax
     1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
   if(chdir("dd") != 0){
     1f15:	83 ec 0c             	sub    $0xc,%esp
-    1f18:	68 b8 46 00 00       	push   $0x46b8
+    1f18:	68 e8 46 00 00       	push   $0x46e8
     1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
     1f22:	83 c4 10             	add    $0x10,%esp
     1f25:	85 c0                	test   %eax,%eax
     1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
   if(chdir("dd/../../dd") != 0){
     1f2d:	83 ec 0c             	sub    $0xc,%esp
-    1f30:	68 86 46 00 00       	push   $0x4686
+    1f30:	68 b6 46 00 00       	push   $0x46b6
     1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
     1f3a:	83 c4 10             	add    $0x10,%esp
     1f3d:	85 c0                	test   %eax,%eax
     1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("dd/../../../dd") != 0){
     1f45:	83 ec 0c             	sub    $0xc,%esp
-    1f48:	68 ac 46 00 00       	push   $0x46ac
+    1f48:	68 dc 46 00 00       	push   $0x46dc
     1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
     1f52:	83 c4 10             	add    $0x10,%esp
     1f55:	85 c0                	test   %eax,%eax
     1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("./..") != 0){
     1f5d:	83 ec 0c             	sub    $0xc,%esp
-    1f60:	68 bb 46 00 00       	push   $0x46bb
+    1f60:	68 eb 46 00 00       	push   $0x46eb
     1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
     1f6a:	83 c4 10             	add    $0x10,%esp
     1f6d:	85 c0                	test   %eax,%eax
@@ -3195,7 +3195,7 @@
   fd = open("dd/dd/ffff", 0);
     1f75:	83 ec 08             	sub    $0x8,%esp
     1f78:	6a 00                	push   $0x0
-    1f7a:	68 52 46 00 00       	push   $0x4652
+    1f7a:	68 82 46 00 00       	push   $0x4682
     1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
   if(fd < 0){
     1f84:	83 c4 10             	add    $0x10,%esp
@@ -3207,7 +3207,7 @@
   if(read(fd, buf, sizeof(buf)) != 2){
     1f91:	83 ec 04             	sub    $0x4,%esp
     1f94:	68 00 20 00 00       	push   $0x2000
-    1f99:	68 c0 86 00 00       	push   $0x86c0
+    1f99:	68 00 87 00 00       	push   $0x8700
     1f9e:	50                   	push   %eax
     1f9f:	e8 f7 19 00 00       	call   399b <read>
     1fa4:	83 c4 10             	add    $0x10,%esp
@@ -3221,7 +3221,7 @@
     1fb9:	58                   	pop    %eax
     1fba:	5a                   	pop    %edx
     1fbb:	6a 00                	push   $0x0
-    1fbd:	68 ee 45 00 00       	push   $0x45ee
+    1fbd:	68 1e 46 00 00       	push   $0x461e
     1fc2:	e8 fc 19 00 00       	call   39c3 <open>
     1fc7:	83 c4 10             	add    $0x10,%esp
     1fca:	85 c0                	test   %eax,%eax
@@ -3229,7 +3229,7 @@
   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
     1fd2:	83 ec 08             	sub    $0x8,%esp
     1fd5:	68 02 02 00 00       	push   $0x202
-    1fda:	68 06 47 00 00       	push   $0x4706
+    1fda:	68 36 47 00 00       	push   $0x4736
     1fdf:	e8 df 19 00 00       	call   39c3 <open>
     1fe4:	83 c4 10             	add    $0x10,%esp
     1fe7:	85 c0                	test   %eax,%eax
@@ -3237,7 +3237,7 @@
   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
     1fef:	83 ec 08             	sub    $0x8,%esp
     1ff2:	68 02 02 00 00       	push   $0x202
-    1ff7:	68 2b 47 00 00       	push   $0x472b
+    1ff7:	68 5b 47 00 00       	push   $0x475b
     1ffc:	e8 c2 19 00 00       	call   39c3 <open>
     2001:	83 c4 10             	add    $0x10,%esp
     2004:	85 c0                	test   %eax,%eax
@@ -3245,7 +3245,7 @@
   if(open("dd", O_CREATE) >= 0){
     200c:	83 ec 08             	sub    $0x8,%esp
     200f:	68 00 02 00 00       	push   $0x200
-    2014:	68 b8 46 00 00       	push   $0x46b8
+    2014:	68 e8 46 00 00       	push   $0x46e8
     2019:	e8 a5 19 00 00       	call   39c3 <open>
     201e:	83 c4 10             	add    $0x10,%esp
     2021:	85 c0                	test   %eax,%eax
@@ -3253,7 +3253,7 @@
   if(open("dd", O_RDWR) >= 0){
     2029:	83 ec 08             	sub    $0x8,%esp
     202c:	6a 02                	push   $0x2
-    202e:	68 b8 46 00 00       	push   $0x46b8
+    202e:	68 e8 46 00 00       	push   $0x46e8
     2033:	e8 8b 19 00 00       	call   39c3 <open>
     2038:	83 c4 10             	add    $0x10,%esp
     203b:	85 c0                	test   %eax,%eax
@@ -3261,124 +3261,124 @@
   if(open("dd", O_WRONLY) >= 0){
     2043:	83 ec 08             	sub    $0x8,%esp
     2046:	6a 01                	push   $0x1
-    2048:	68 b8 46 00 00       	push   $0x46b8
+    2048:	68 e8 46 00 00       	push   $0x46e8
     204d:	e8 71 19 00 00       	call   39c3 <open>
     2052:	83 c4 10             	add    $0x10,%esp
     2055:	85 c0                	test   %eax,%eax
     2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
   if(link("dd/ff/ff", "dd/dd/xx") == 0){
     205d:	83 ec 08             	sub    $0x8,%esp
-    2060:	68 9a 47 00 00       	push   $0x479a
-    2065:	68 06 47 00 00       	push   $0x4706
+    2060:	68 ca 47 00 00       	push   $0x47ca
+    2065:	68 36 47 00 00       	push   $0x4736
     206a:	e8 74 19 00 00       	call   39e3 <link>
     206f:	83 c4 10             	add    $0x10,%esp
     2072:	85 c0                	test   %eax,%eax
     2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
   if(link("dd/xx/ff", "dd/dd/xx") == 0){
     207a:	83 ec 08             	sub    $0x8,%esp
-    207d:	68 9a 47 00 00       	push   $0x479a
-    2082:	68 2b 47 00 00       	push   $0x472b
+    207d:	68 ca 47 00 00       	push   $0x47ca
+    2082:	68 5b 47 00 00       	push   $0x475b
     2087:	e8 57 19 00 00       	call   39e3 <link>
     208c:	83 c4 10             	add    $0x10,%esp
     208f:	85 c0                	test   %eax,%eax
     2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
   if(link("dd/ff", "dd/dd/ffff") == 0){
     2097:	83 ec 08             	sub    $0x8,%esp
-    209a:	68 52 46 00 00       	push   $0x4652
-    209f:	68 f1 45 00 00       	push   $0x45f1
+    209a:	68 82 46 00 00       	push   $0x4682
+    209f:	68 21 46 00 00       	push   $0x4621
     20a4:	e8 3a 19 00 00       	call   39e3 <link>
     20a9:	83 c4 10             	add    $0x10,%esp
     20ac:	85 c0                	test   %eax,%eax
     20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
   if(mkdir("dd/ff/ff") == 0){
     20b4:	83 ec 0c             	sub    $0xc,%esp
-    20b7:	68 06 47 00 00       	push   $0x4706
+    20b7:	68 36 47 00 00       	push   $0x4736
     20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
     20c1:	83 c4 10             	add    $0x10,%esp
     20c4:	85 c0                	test   %eax,%eax
     20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
   if(mkdir("dd/xx/ff") == 0){
     20cc:	83 ec 0c             	sub    $0xc,%esp
-    20cf:	68 2b 47 00 00       	push   $0x472b
+    20cf:	68 5b 47 00 00       	push   $0x475b
     20d4:	e8 12 19 00 00       	call   39eb <mkdir>
     20d9:	83 c4 10             	add    $0x10,%esp
     20dc:	85 c0                	test   %eax,%eax
     20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
   if(mkdir("dd/dd/ffff") == 0){
     20e4:	83 ec 0c             	sub    $0xc,%esp
-    20e7:	68 52 46 00 00       	push   $0x4652
+    20e7:	68 82 46 00 00       	push   $0x4682
     20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
     20f1:	83 c4 10             	add    $0x10,%esp
     20f4:	85 c0                	test   %eax,%eax
     20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
   if(unlink("dd/xx/ff") == 0){
     20fc:	83 ec 0c             	sub    $0xc,%esp
-    20ff:	68 2b 47 00 00       	push   $0x472b
+    20ff:	68 5b 47 00 00       	push   $0x475b
     2104:	e8 ca 18 00 00       	call   39d3 <unlink>
     2109:	83 c4 10             	add    $0x10,%esp
     210c:	85 c0                	test   %eax,%eax
     210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
   if(unlink("dd/ff/ff") == 0){
     2114:	83 ec 0c             	sub    $0xc,%esp
-    2117:	68 06 47 00 00       	push   $0x4706
+    2117:	68 36 47 00 00       	push   $0x4736
     211c:	e8 b2 18 00 00       	call   39d3 <unlink>
     2121:	83 c4 10             	add    $0x10,%esp
     2124:	85 c0                	test   %eax,%eax
     2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
   if(chdir("dd/ff") == 0){
     212c:	83 ec 0c             	sub    $0xc,%esp
-    212f:	68 f1 45 00 00       	push   $0x45f1
+    212f:	68 21 46 00 00       	push   $0x4621
     2134:	e8 ba 18 00 00       	call   39f3 <chdir>
     2139:	83 c4 10             	add    $0x10,%esp
     213c:	85 c0                	test   %eax,%eax
     213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
   if(chdir("dd/xx") == 0){
     2144:	83 ec 0c             	sub    $0xc,%esp
-    2147:	68 9d 47 00 00       	push   $0x479d
+    2147:	68 cd 47 00 00       	push   $0x47cd
     214c:	e8 a2 18 00 00       	call   39f3 <chdir>
     2151:	83 c4 10             	add    $0x10,%esp
     2154:	85 c0                	test   %eax,%eax
     2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
   if(unlink("dd/dd/ffff") != 0){
     215c:	83 ec 0c             	sub    $0xc,%esp
-    215f:	68 52 46 00 00       	push   $0x4652
+    215f:	68 82 46 00 00       	push   $0x4682
     2164:	e8 6a 18 00 00       	call   39d3 <unlink>
     2169:	83 c4 10             	add    $0x10,%esp
     216c:	85 c0                	test   %eax,%eax
     216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
   if(unlink("dd/ff") != 0){
     2174:	83 ec 0c             	sub    $0xc,%esp
-    2177:	68 f1 45 00 00       	push   $0x45f1
+    2177:	68 21 46 00 00       	push   $0x4621
     217c:	e8 52 18 00 00       	call   39d3 <unlink>
     2181:	83 c4 10             	add    $0x10,%esp
     2184:	85 c0                	test   %eax,%eax
     2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
   if(unlink("dd") == 0){
     218c:	83 ec 0c             	sub    $0xc,%esp
-    218f:	68 b8 46 00 00       	push   $0x46b8
+    218f:	68 e8 46 00 00       	push   $0x46e8
     2194:	e8 3a 18 00 00       	call   39d3 <unlink>
     2199:	83 c4 10             	add    $0x10,%esp
     219c:	85 c0                	test   %eax,%eax
     219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
   if(unlink("dd/dd") < 0){
     21a4:	83 ec 0c             	sub    $0xc,%esp
-    21a7:	68 cd 45 00 00       	push   $0x45cd
+    21a7:	68 fd 45 00 00       	push   $0x45fd
     21ac:	e8 22 18 00 00       	call   39d3 <unlink>
     21b1:	83 c4 10             	add    $0x10,%esp
     21b4:	85 c0                	test   %eax,%eax
     21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
   if(unlink("dd") < 0){
     21bc:	83 ec 0c             	sub    $0xc,%esp
-    21bf:	68 b8 46 00 00       	push   $0x46b8
+    21bf:	68 e8 46 00 00       	push   $0x46e8
     21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
     21c9:	83 c4 10             	add    $0x10,%esp
     21cc:	85 c0                	test   %eax,%eax
     21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
   printf(1, "subdir ok\n");
     21d4:	83 ec 08             	sub    $0x8,%esp
-    21d7:	68 9a 48 00 00       	push   $0x489a
+    21d7:	68 ca 48 00 00       	push   $0x48ca
     21dc:	6a 01                	push   $0x1
-    21de:	e8 fd 18 00 00       	call   3ae0 <printf>
+    21de:	e8 2d 19 00 00       	call   3b10 <printf>
 }
     21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     21e6:	83 c4 10             	add    $0x10,%esp
@@ -3387,281 +3387,281 @@
     printf(1, "dd/dd/../ff wrong content\n");
     21eb:	50                   	push   %eax
     21ec:	50                   	push   %eax
-    21ed:	68 37 46 00 00       	push   $0x4637
+    21ed:	68 67 46 00 00       	push   $0x4667
     21f2:	6a 01                	push   $0x1
-    21f4:	e8 e7 18 00 00       	call   3ae0 <printf>
+    21f4:	e8 17 19 00 00       	call   3b10 <printf>
     exit();
     21f9:	e8 85 17 00 00       	call   3983 <exit>
     printf(1, "chdir dd/../../dd failed\n");
     21fe:	50                   	push   %eax
     21ff:	50                   	push   %eax
-    2200:	68 92 46 00 00       	push   $0x4692
+    2200:	68 c2 46 00 00       	push   $0x46c2
     2205:	6a 01                	push   $0x1
-    2207:	e8 d4 18 00 00       	call   3ae0 <printf>
+    2207:	e8 04 19 00 00       	call   3b10 <printf>
     exit();
     220c:	e8 72 17 00 00       	call   3983 <exit>
     printf(1, "unlink dd/dd/ff failed\n");
     2211:	50                   	push   %eax
     2212:	50                   	push   %eax
-    2213:	68 5d 46 00 00       	push   $0x465d
+    2213:	68 8d 46 00 00       	push   $0x468d
     2218:	6a 01                	push   $0x1
-    221a:	e8 c1 18 00 00       	call   3ae0 <printf>
+    221a:	e8 f1 18 00 00       	call   3b10 <printf>
     exit();
     221f:	e8 5f 17 00 00       	call   3983 <exit>
     printf(1, "create dd/ff/ff succeeded!\n");
     2224:	51                   	push   %ecx
     2225:	51                   	push   %ecx
-    2226:	68 0f 47 00 00       	push   $0x470f
+    2226:	68 3f 47 00 00       	push   $0x473f
     222b:	6a 01                	push   $0x1
-    222d:	e8 ae 18 00 00       	call   3ae0 <printf>
+    222d:	e8 de 18 00 00       	call   3b10 <printf>
     exit();
     2232:	e8 4c 17 00 00       	call   3983 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
     2237:	53                   	push   %ebx
     2238:	53                   	push   %ebx
-    2239:	68 f4 50 00 00       	push   $0x50f4
+    2239:	68 24 51 00 00       	push   $0x5124
     223e:	6a 01                	push   $0x1
-    2240:	e8 9b 18 00 00       	call   3ae0 <printf>
+    2240:	e8 cb 18 00 00       	call   3b10 <printf>
     exit();
     2245:	e8 39 17 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/ff/ff succeeded!\n");
     224a:	51                   	push   %ecx
     224b:	51                   	push   %ecx
-    224c:	68 a3 47 00 00       	push   $0x47a3
+    224c:	68 d3 47 00 00       	push   $0x47d3
     2251:	6a 01                	push   $0x1
-    2253:	e8 88 18 00 00       	call   3ae0 <printf>
+    2253:	e8 b8 18 00 00       	call   3b10 <printf>
     exit();
     2258:	e8 26 17 00 00       	call   3983 <exit>
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
     225d:	53                   	push   %ebx
     225e:	53                   	push   %ebx
-    225f:	68 64 51 00 00       	push   $0x5164
+    225f:	68 94 51 00 00       	push   $0x5194
     2264:	6a 01                	push   $0x1
-    2266:	e8 75 18 00 00       	call   3ae0 <printf>
+    2266:	e8 a5 18 00 00       	call   3b10 <printf>
     exit();
     226b:	e8 13 17 00 00       	call   3983 <exit>
     printf(1, "open dd/dd/../ff failed\n");
     2270:	50                   	push   %eax
     2271:	50                   	push   %eax
-    2272:	68 1e 46 00 00       	push   $0x461e
+    2272:	68 4e 46 00 00       	push   $0x464e
     2277:	6a 01                	push   $0x1
-    2279:	e8 62 18 00 00       	call   3ae0 <printf>
+    2279:	e8 92 18 00 00       	call   3b10 <printf>
     exit();
     227e:	e8 00 17 00 00       	call   3983 <exit>
     printf(1, "create dd/dd/ff failed\n");
     2283:	51                   	push   %ecx
     2284:	51                   	push   %ecx
-    2285:	68 f7 45 00 00       	push   $0x45f7
+    2285:	68 27 46 00 00       	push   $0x4627
     228a:	6a 01                	push   $0x1
-    228c:	e8 4f 18 00 00       	call   3ae0 <printf>
+    228c:	e8 7f 18 00 00       	call   3b10 <printf>
     exit();
     2291:	e8 ed 16 00 00       	call   3983 <exit>
     printf(1, "chdir ./.. failed\n");
     2296:	50                   	push   %eax
     2297:	50                   	push   %eax
-    2298:	68 c0 46 00 00       	push   $0x46c0
+    2298:	68 f0 46 00 00       	push   $0x46f0
     229d:	6a 01                	push   $0x1
-    229f:	e8 3c 18 00 00       	call   3ae0 <printf>
+    229f:	e8 6c 18 00 00       	call   3b10 <printf>
     exit();
     22a4:	e8 da 16 00 00       	call   3983 <exit>
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
     22a9:	52                   	push   %edx
     22aa:	52                   	push   %edx
-    22ab:	68 ac 50 00 00       	push   $0x50ac
+    22ab:	68 dc 50 00 00       	push   $0x50dc
     22b0:	6a 01                	push   $0x1
-    22b2:	e8 29 18 00 00       	call   3ae0 <printf>
+    22b2:	e8 59 18 00 00       	call   3b10 <printf>
     exit();
     22b7:	e8 c7 16 00 00       	call   3983 <exit>
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
     22bc:	50                   	push   %eax
     22bd:	50                   	push   %eax
-    22be:	68 40 51 00 00       	push   $0x5140
+    22be:	68 70 51 00 00       	push   $0x5170
     22c3:	6a 01                	push   $0x1
-    22c5:	e8 16 18 00 00       	call   3ae0 <printf>
+    22c5:	e8 46 18 00 00       	call   3b10 <printf>
     exit();
     22ca:	e8 b4 16 00 00       	call   3983 <exit>
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
     22cf:	50                   	push   %eax
     22d0:	50                   	push   %eax
-    22d1:	68 1c 51 00 00       	push   $0x511c
+    22d1:	68 4c 51 00 00       	push   $0x514c
     22d6:	6a 01                	push   $0x1
-    22d8:	e8 03 18 00 00       	call   3ae0 <printf>
+    22d8:	e8 33 18 00 00       	call   3b10 <printf>
     exit();
     22dd:	e8 a1 16 00 00       	call   3983 <exit>
     printf(1, "open dd wronly succeeded!\n");
     22e2:	50                   	push   %eax
     22e3:	50                   	push   %eax
-    22e4:	68 7f 47 00 00       	push   $0x477f
+    22e4:	68 af 47 00 00       	push   $0x47af
     22e9:	6a 01                	push   $0x1
-    22eb:	e8 f0 17 00 00       	call   3ae0 <printf>
+    22eb:	e8 20 18 00 00       	call   3b10 <printf>
     exit();
     22f0:	e8 8e 16 00 00       	call   3983 <exit>
     printf(1, "open dd rdwr succeeded!\n");
     22f5:	50                   	push   %eax
     22f6:	50                   	push   %eax
-    22f7:	68 66 47 00 00       	push   $0x4766
+    22f7:	68 96 47 00 00       	push   $0x4796
     22fc:	6a 01                	push   $0x1
-    22fe:	e8 dd 17 00 00       	call   3ae0 <printf>
+    22fe:	e8 0d 18 00 00       	call   3b10 <printf>
     exit();
     2303:	e8 7b 16 00 00       	call   3983 <exit>
     printf(1, "create dd succeeded!\n");
     2308:	50                   	push   %eax
     2309:	50                   	push   %eax
-    230a:	68 50 47 00 00       	push   $0x4750
+    230a:	68 80 47 00 00       	push   $0x4780
     230f:	6a 01                	push   $0x1
-    2311:	e8 ca 17 00 00       	call   3ae0 <printf>
+    2311:	e8 fa 17 00 00       	call   3b10 <printf>
     exit();
     2316:	e8 68 16 00 00       	call   3983 <exit>
     printf(1, "create dd/xx/ff succeeded!\n");
     231b:	52                   	push   %edx
     231c:	52                   	push   %edx
-    231d:	68 34 47 00 00       	push   $0x4734
+    231d:	68 64 47 00 00       	push   $0x4764
     2322:	6a 01                	push   $0x1
-    2324:	e8 b7 17 00 00       	call   3ae0 <printf>
+    2324:	e8 e7 17 00 00       	call   3b10 <printf>
     exit();
     2329:	e8 55 16 00 00       	call   3983 <exit>
     printf(1, "chdir dd failed\n");
     232e:	50                   	push   %eax
     232f:	50                   	push   %eax
-    2330:	68 75 46 00 00       	push   $0x4675
+    2330:	68 a5 46 00 00       	push   $0x46a5
     2335:	6a 01                	push   $0x1
-    2337:	e8 a4 17 00 00       	call   3ae0 <printf>
+    2337:	e8 d4 17 00 00       	call   3b10 <printf>
     exit();
     233c:	e8 42 16 00 00       	call   3983 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
     2341:	50                   	push   %eax
     2342:	50                   	push   %eax
-    2343:	68 d0 50 00 00       	push   $0x50d0
+    2343:	68 00 51 00 00       	push   $0x5100
     2348:	6a 01                	push   $0x1
-    234a:	e8 91 17 00 00       	call   3ae0 <printf>
+    234a:	e8 c1 17 00 00       	call   3b10 <printf>
     exit();
     234f:	e8 2f 16 00 00       	call   3983 <exit>
     printf(1, "subdir mkdir dd/dd failed\n");
     2354:	53                   	push   %ebx
     2355:	53                   	push   %ebx
-    2356:	68 d3 45 00 00       	push   $0x45d3
+    2356:	68 03 46 00 00       	push   $0x4603
     235b:	6a 01                	push   $0x1
-    235d:	e8 7e 17 00 00       	call   3ae0 <printf>
+    235d:	e8 ae 17 00 00       	call   3b10 <printf>
     exit();
     2362:	e8 1c 16 00 00       	call   3983 <exit>
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
     2367:	50                   	push   %eax
     2368:	50                   	push   %eax
-    2369:	68 84 50 00 00       	push   $0x5084
+    2369:	68 b4 50 00 00       	push   $0x50b4
     236e:	6a 01                	push   $0x1
-    2370:	e8 6b 17 00 00       	call   3ae0 <printf>
+    2370:	e8 9b 17 00 00       	call   3b10 <printf>
     exit();
     2375:	e8 09 16 00 00       	call   3983 <exit>
     printf(1, "create dd/ff failed\n");
     237a:	50                   	push   %eax
     237b:	50                   	push   %eax
-    237c:	68 b7 45 00 00       	push   $0x45b7
+    237c:	68 e7 45 00 00       	push   $0x45e7
     2381:	6a 01                	push   $0x1
-    2383:	e8 58 17 00 00       	call   3ae0 <printf>
+    2383:	e8 88 17 00 00       	call   3b10 <printf>
     exit();
     2388:	e8 f6 15 00 00       	call   3983 <exit>
     printf(1, "subdir mkdir dd failed\n");
     238d:	50                   	push   %eax
     238e:	50                   	push   %eax
-    238f:	68 9f 45 00 00       	push   $0x459f
+    238f:	68 cf 45 00 00       	push   $0x45cf
     2394:	6a 01                	push   $0x1
-    2396:	e8 45 17 00 00       	call   3ae0 <printf>
+    2396:	e8 75 17 00 00       	call   3b10 <printf>
     exit();
     239b:	e8 e3 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd failed\n");
     23a0:	50                   	push   %eax
     23a1:	50                   	push   %eax
-    23a2:	68 88 48 00 00       	push   $0x4888
+    23a2:	68 b8 48 00 00       	push   $0x48b8
     23a7:	6a 01                	push   $0x1
-    23a9:	e8 32 17 00 00       	call   3ae0 <printf>
+    23a9:	e8 62 17 00 00       	call   3b10 <printf>
     exit();
     23ae:	e8 d0 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/dd failed\n");
     23b3:	52                   	push   %edx
     23b4:	52                   	push   %edx
-    23b5:	68 73 48 00 00       	push   $0x4873
+    23b5:	68 a3 48 00 00       	push   $0x48a3
     23ba:	6a 01                	push   $0x1
-    23bc:	e8 1f 17 00 00       	call   3ae0 <printf>
+    23bc:	e8 4f 17 00 00       	call   3b10 <printf>
     exit();
     23c1:	e8 bd 15 00 00       	call   3983 <exit>
     printf(1, "unlink non-empty dd succeeded!\n");
     23c6:	51                   	push   %ecx
     23c7:	51                   	push   %ecx
-    23c8:	68 88 51 00 00       	push   $0x5188
+    23c8:	68 b8 51 00 00       	push   $0x51b8
     23cd:	6a 01                	push   $0x1
-    23cf:	e8 0c 17 00 00       	call   3ae0 <printf>
+    23cf:	e8 3c 17 00 00       	call   3b10 <printf>
     exit();
     23d4:	e8 aa 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/ff failed\n");
     23d9:	53                   	push   %ebx
     23da:	53                   	push   %ebx
-    23db:	68 5e 48 00 00       	push   $0x485e
+    23db:	68 8e 48 00 00       	push   $0x488e
     23e0:	6a 01                	push   $0x1
-    23e2:	e8 f9 16 00 00       	call   3ae0 <printf>
+    23e2:	e8 29 17 00 00       	call   3b10 <printf>
     exit();
     23e7:	e8 97 15 00 00       	call   3983 <exit>
     printf(1, "chdir dd/xx succeeded!\n");
     23ec:	50                   	push   %eax
     23ed:	50                   	push   %eax
-    23ee:	68 46 48 00 00       	push   $0x4846
+    23ee:	68 76 48 00 00       	push   $0x4876
     23f3:	6a 01                	push   $0x1
-    23f5:	e8 e6 16 00 00       	call   3ae0 <printf>
+    23f5:	e8 16 17 00 00       	call   3b10 <printf>
     exit();
     23fa:	e8 84 15 00 00       	call   3983 <exit>
     printf(1, "chdir dd/ff succeeded!\n");
     23ff:	50                   	push   %eax
     2400:	50                   	push   %eax
-    2401:	68 2e 48 00 00       	push   $0x482e
+    2401:	68 5e 48 00 00       	push   $0x485e
     2406:	6a 01                	push   $0x1
-    2408:	e8 d3 16 00 00       	call   3ae0 <printf>
+    2408:	e8 03 17 00 00       	call   3b10 <printf>
     exit();
     240d:	e8 71 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/ff/ff succeeded!\n");
     2412:	50                   	push   %eax
     2413:	50                   	push   %eax
-    2414:	68 12 48 00 00       	push   $0x4812
+    2414:	68 42 48 00 00       	push   $0x4842
     2419:	6a 01                	push   $0x1
-    241b:	e8 c0 16 00 00       	call   3ae0 <printf>
+    241b:	e8 f0 16 00 00       	call   3b10 <printf>
     exit();
     2420:	e8 5e 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/xx/ff succeeded!\n");
     2425:	50                   	push   %eax
     2426:	50                   	push   %eax
-    2427:	68 f6 47 00 00       	push   $0x47f6
+    2427:	68 26 48 00 00       	push   $0x4826
     242c:	6a 01                	push   $0x1
-    242e:	e8 ad 16 00 00       	call   3ae0 <printf>
+    242e:	e8 dd 16 00 00       	call   3b10 <printf>
     exit();
     2433:	e8 4b 15 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
     2438:	50                   	push   %eax
     2439:	50                   	push   %eax
-    243a:	68 d9 47 00 00       	push   $0x47d9
+    243a:	68 09 48 00 00       	push   $0x4809
     243f:	6a 01                	push   $0x1
-    2441:	e8 9a 16 00 00       	call   3ae0 <printf>
+    2441:	e8 ca 16 00 00       	call   3b10 <printf>
     exit();
     2446:	e8 38 15 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/xx/ff succeeded!\n");
     244b:	52                   	push   %edx
     244c:	52                   	push   %edx
-    244d:	68 be 47 00 00       	push   $0x47be
+    244d:	68 ee 47 00 00       	push   $0x47ee
     2452:	6a 01                	push   $0x1
-    2454:	e8 87 16 00 00       	call   3ae0 <printf>
+    2454:	e8 b7 16 00 00       	call   3b10 <printf>
     exit();
     2459:	e8 25 15 00 00       	call   3983 <exit>
     printf(1, "read dd/dd/ffff wrong len\n");
     245e:	51                   	push   %ecx
     245f:	51                   	push   %ecx
-    2460:	68 eb 46 00 00       	push   $0x46eb
+    2460:	68 1b 47 00 00       	push   $0x471b
     2465:	6a 01                	push   $0x1
-    2467:	e8 74 16 00 00       	call   3ae0 <printf>
+    2467:	e8 a4 16 00 00       	call   3b10 <printf>
     exit();
     246c:	e8 12 15 00 00       	call   3983 <exit>
     printf(1, "open dd/dd/ffff failed\n");
     2471:	53                   	push   %ebx
     2472:	53                   	push   %ebx
-    2473:	68 d3 46 00 00       	push   $0x46d3
+    2473:	68 03 47 00 00       	push   $0x4703
     2478:	6a 01                	push   $0x1
-    247a:	e8 61 16 00 00       	call   3ae0 <printf>
+    247a:	e8 91 16 00 00       	call   3b10 <printf>
     exit();
     247f:	e8 ff 14 00 00       	call   3983 <exit>
     2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3679,18 +3679,18 @@
     2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
   printf(1, "bigwrite test\n");
     249e:	83 ec 08             	sub    $0x8,%esp
-    24a1:	68 a5 48 00 00       	push   $0x48a5
+    24a1:	68 d5 48 00 00       	push   $0x48d5
     24a6:	6a 01                	push   $0x1
-    24a8:	e8 33 16 00 00       	call   3ae0 <printf>
+    24a8:	e8 63 16 00 00       	call   3b10 <printf>
   unlink("bigwrite");
-    24ad:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    24ad:	c7 04 24 e4 48 00 00 	movl   $0x48e4,(%esp)
     24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
     24b9:	83 c4 10             	add    $0x10,%esp
     24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     fd = open("bigwrite", O_CREATE | O_RDWR);
     24c0:	83 ec 08             	sub    $0x8,%esp
     24c3:	68 02 02 00 00       	push   $0x202
-    24c8:	68 b4 48 00 00       	push   $0x48b4
+    24c8:	68 e4 48 00 00       	push   $0x48e4
     24cd:	e8 f1 14 00 00       	call   39c3 <open>
     if(fd < 0){
     24d2:	83 c4 10             	add    $0x10,%esp
@@ -3702,7 +3702,7 @@
       int cc = write(fd, buf, sz);
     24db:	83 ec 04             	sub    $0x4,%esp
     24de:	53                   	push   %ebx
-    24df:	68 c0 86 00 00       	push   $0x86c0
+    24df:	68 00 87 00 00       	push   $0x8700
     24e4:	50                   	push   %eax
     24e5:	e8 b9 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3712,7 +3712,7 @@
       int cc = write(fd, buf, sz);
     24f1:	83 ec 04             	sub    $0x4,%esp
     24f4:	53                   	push   %ebx
-    24f5:	68 c0 86 00 00       	push   $0x86c0
+    24f5:	68 00 87 00 00       	push   $0x8700
     24fa:	56                   	push   %esi
     24fb:	e8 a3 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3727,7 +3727,7 @@
     2510:	56                   	push   %esi
     2511:	e8 95 14 00 00       	call   39ab <close>
     unlink("bigwrite");
-    2516:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    2516:	c7 04 24 e4 48 00 00 	movl   $0x48e4,(%esp)
     251d:	e8 b1 14 00 00       	call   39d3 <unlink>
   for(sz = 499; sz < 12*512; sz += 471){
     2522:	83 c4 10             	add    $0x10,%esp
@@ -3735,9 +3735,9 @@
     252b:	75 93                	jne    24c0 <bigwrite+0x30>
   printf(1, "bigwrite ok\n");
     252d:	83 ec 08             	sub    $0x8,%esp
-    2530:	68 e7 48 00 00       	push   $0x48e7
+    2530:	68 17 49 00 00       	push   $0x4917
     2535:	6a 01                	push   $0x1
-    2537:	e8 a4 15 00 00       	call   3ae0 <printf>
+    2537:	e8 d4 15 00 00       	call   3b10 <printf>
 }
     253c:	83 c4 10             	add    $0x10,%esp
     253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -3748,16 +3748,16 @@
         printf(1, "write(%d) ret %d\n", sz, cc);
     2546:	50                   	push   %eax
     2547:	53                   	push   %ebx
-    2548:	68 d5 48 00 00       	push   $0x48d5
+    2548:	68 05 49 00 00       	push   $0x4905
     254d:	6a 01                	push   $0x1
-    254f:	e8 8c 15 00 00       	call   3ae0 <printf>
+    254f:	e8 bc 15 00 00       	call   3b10 <printf>
         exit();
     2554:	e8 2a 14 00 00       	call   3983 <exit>
       printf(1, "cannot create bigwrite\n");
     2559:	83 ec 08             	sub    $0x8,%esp
-    255c:	68 bd 48 00 00       	push   $0x48bd
+    255c:	68 ed 48 00 00       	push   $0x48ed
     2561:	6a 01                	push   $0x1
-    2563:	e8 78 15 00 00       	call   3ae0 <printf>
+    2563:	e8 a8 15 00 00       	call   3b10 <printf>
       exit();
     2568:	e8 16 14 00 00       	call   3983 <exit>
     256d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -3772,17 +3772,17 @@
     2579:	53                   	push   %ebx
     257a:	83 ec 14             	sub    $0x14,%esp
   printf(1, "bigfile test\n");
-    257d:	68 f4 48 00 00       	push   $0x48f4
+    257d:	68 24 49 00 00       	push   $0x4924
     2582:	6a 01                	push   $0x1
-    2584:	e8 57 15 00 00       	call   3ae0 <printf>
+    2584:	e8 87 15 00 00       	call   3b10 <printf>
   unlink("bigfile");
-    2589:	c7 04 24 10 49 00 00 	movl   $0x4910,(%esp)
+    2589:	c7 04 24 40 49 00 00 	movl   $0x4940,(%esp)
     2590:	e8 3e 14 00 00       	call   39d3 <unlink>
   fd = open("bigfile", O_CREATE | O_RDWR);
     2595:	58                   	pop    %eax
     2596:	5a                   	pop    %edx
     2597:	68 02 02 00 00       	push   $0x202
-    259c:	68 10 49 00 00       	push   $0x4910
+    259c:	68 40 49 00 00       	push   $0x4940
     25a1:	e8 1d 14 00 00       	call   39c3 <open>
   if(fd < 0){
     25a6:	83 c4 10             	add    $0x10,%esp
@@ -3796,12 +3796,12 @@
     25b8:	83 ec 04             	sub    $0x4,%esp
     25bb:	68 58 02 00 00       	push   $0x258
     25c0:	53                   	push   %ebx
-    25c1:	68 c0 86 00 00       	push   $0x86c0
+    25c1:	68 00 87 00 00       	push   $0x8700
     25c6:	e8 15 12 00 00       	call   37e0 <memset>
     if(write(fd, buf, 600) != 600){
     25cb:	83 c4 0c             	add    $0xc,%esp
     25ce:	68 58 02 00 00       	push   $0x258
-    25d3:	68 c0 86 00 00       	push   $0x86c0
+    25d3:	68 00 87 00 00       	push   $0x8700
     25d8:	56                   	push   %esi
     25d9:	e8 c5 13 00 00       	call   39a3 <write>
     25de:	83 c4 10             	add    $0x10,%esp
@@ -3819,7 +3819,7 @@
     25fd:	5e                   	pop    %esi
     25fe:	5f                   	pop    %edi
     25ff:	6a 00                	push   $0x0
-    2601:	68 10 49 00 00       	push   $0x4910
+    2601:	68 40 49 00 00       	push   $0x4940
     2606:	e8 b8 13 00 00       	call   39c3 <open>
   if(fd < 0){
     260b:	83 c4 10             	add    $0x10,%esp
@@ -3839,11 +3839,11 @@
     2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
     if(buf[0] != i/2 || buf[299] != i/2){
     262b:	89 fa                	mov    %edi,%edx
-    262d:	0f be 05 c0 86 00 00 	movsbl 0x86c0,%eax
+    262d:	0f be 05 00 87 00 00 	movsbl 0x8700,%eax
     2634:	d1 fa                	sar    %edx
     2636:	39 d0                	cmp    %edx,%eax
     2638:	75 6e                	jne    26a8 <bigfile+0x138>
-    263a:	0f be 15 eb 87 00 00 	movsbl 0x87eb,%edx
+    263a:	0f be 15 2b 88 00 00 	movsbl 0x882b,%edx
     2641:	39 d0                	cmp    %edx,%eax
     2643:	75 63                	jne    26a8 <bigfile+0x138>
     total += cc;
@@ -3853,7 +3853,7 @@
     cc = read(fd, buf, 300);
     264e:	83 ec 04             	sub    $0x4,%esp
     2651:	68 2c 01 00 00       	push   $0x12c
-    2656:	68 c0 86 00 00       	push   $0x86c0
+    2656:	68 00 87 00 00       	push   $0x8700
     265b:	56                   	push   %esi
     265c:	e8 3a 13 00 00       	call   399b <read>
     if(cc < 0){
@@ -3872,14 +3872,14 @@
     267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
   unlink("bigfile");
     2682:	83 ec 0c             	sub    $0xc,%esp
-    2685:	68 10 49 00 00       	push   $0x4910
+    2685:	68 40 49 00 00       	push   $0x4940
     268a:	e8 44 13 00 00       	call   39d3 <unlink>
   printf(1, "bigfile test ok\n");
     268f:	58                   	pop    %eax
     2690:	5a                   	pop    %edx
-    2691:	68 9f 49 00 00       	push   $0x499f
+    2691:	68 cf 49 00 00       	push   $0x49cf
     2696:	6a 01                	push   $0x1
-    2698:	e8 43 14 00 00       	call   3ae0 <printf>
+    2698:	e8 73 14 00 00       	call   3b10 <printf>
 }
     269d:	83 c4 10             	add    $0x10,%esp
     26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -3890,54 +3890,54 @@
     26a7:	c3                   	ret    
       printf(1, "read bigfile wrong data\n");
     26a8:	83 ec 08             	sub    $0x8,%esp
-    26ab:	68 6c 49 00 00       	push   $0x496c
+    26ab:	68 9c 49 00 00       	push   $0x499c
     26b0:	6a 01                	push   $0x1
-    26b2:	e8 29 14 00 00       	call   3ae0 <printf>
+    26b2:	e8 59 14 00 00       	call   3b10 <printf>
       exit();
     26b7:	e8 c7 12 00 00       	call   3983 <exit>
       printf(1, "short read bigfile\n");
     26bc:	83 ec 08             	sub    $0x8,%esp
-    26bf:	68 58 49 00 00       	push   $0x4958
+    26bf:	68 88 49 00 00       	push   $0x4988
     26c4:	6a 01                	push   $0x1
-    26c6:	e8 15 14 00 00       	call   3ae0 <printf>
+    26c6:	e8 45 14 00 00       	call   3b10 <printf>
       exit();
     26cb:	e8 b3 12 00 00       	call   3983 <exit>
       printf(1, "read bigfile failed\n");
     26d0:	83 ec 08             	sub    $0x8,%esp
-    26d3:	68 43 49 00 00       	push   $0x4943
+    26d3:	68 73 49 00 00       	push   $0x4973
     26d8:	6a 01                	push   $0x1
-    26da:	e8 01 14 00 00       	call   3ae0 <printf>
+    26da:	e8 31 14 00 00       	call   3b10 <printf>
       exit();
     26df:	e8 9f 12 00 00       	call   3983 <exit>
       printf(1, "write bigfile failed\n");
     26e4:	83 ec 08             	sub    $0x8,%esp
-    26e7:	68 18 49 00 00       	push   $0x4918
+    26e7:	68 48 49 00 00       	push   $0x4948
     26ec:	6a 01                	push   $0x1
-    26ee:	e8 ed 13 00 00       	call   3ae0 <printf>
+    26ee:	e8 1d 14 00 00       	call   3b10 <printf>
       exit();
     26f3:	e8 8b 12 00 00       	call   3983 <exit>
     printf(1, "cannot open bigfile\n");
     26f8:	53                   	push   %ebx
     26f9:	53                   	push   %ebx
-    26fa:	68 2e 49 00 00       	push   $0x492e
+    26fa:	68 5e 49 00 00       	push   $0x495e
     26ff:	6a 01                	push   $0x1
-    2701:	e8 da 13 00 00       	call   3ae0 <printf>
+    2701:	e8 0a 14 00 00       	call   3b10 <printf>
     exit();
     2706:	e8 78 12 00 00       	call   3983 <exit>
     printf(1, "cannot create bigfile");
     270b:	50                   	push   %eax
     270c:	50                   	push   %eax
-    270d:	68 02 49 00 00       	push   $0x4902
+    270d:	68 32 49 00 00       	push   $0x4932
     2712:	6a 01                	push   $0x1
-    2714:	e8 c7 13 00 00       	call   3ae0 <printf>
+    2714:	e8 f7 13 00 00       	call   3b10 <printf>
     exit();
     2719:	e8 65 12 00 00       	call   3983 <exit>
     printf(1, "read bigfile wrong total\n");
     271e:	51                   	push   %ecx
     271f:	51                   	push   %ecx
-    2720:	68 85 49 00 00       	push   $0x4985
+    2720:	68 b5 49 00 00       	push   $0x49b5
     2725:	6a 01                	push   $0x1
-    2727:	e8 b4 13 00 00       	call   3ae0 <printf>
+    2727:	e8 e4 13 00 00       	call   3b10 <printf>
     exit();
     272c:	e8 52 12 00 00       	call   3983 <exit>
     2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3951,18 +3951,18 @@
     2745:	89 e5                	mov    %esp,%ebp
     2747:	83 ec 10             	sub    $0x10,%esp
   printf(1, "fourteen test\n");
-    274a:	68 b0 49 00 00       	push   $0x49b0
+    274a:	68 e0 49 00 00       	push   $0x49e0
     274f:	6a 01                	push   $0x1
-    2751:	e8 8a 13 00 00       	call   3ae0 <printf>
+    2751:	e8 ba 13 00 00       	call   3b10 <printf>
   if(mkdir("12345678901234") != 0){
-    2756:	c7 04 24 eb 49 00 00 	movl   $0x49eb,(%esp)
+    2756:	c7 04 24 1b 4a 00 00 	movl   $0x4a1b,(%esp)
     275d:	e8 89 12 00 00       	call   39eb <mkdir>
     2762:	83 c4 10             	add    $0x10,%esp
     2765:	85 c0                	test   %eax,%eax
     2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
   if(mkdir("12345678901234/123456789012345") != 0){
     276d:	83 ec 0c             	sub    $0xc,%esp
-    2770:	68 a8 51 00 00       	push   $0x51a8
+    2770:	68 d8 51 00 00       	push   $0x51d8
     2775:	e8 71 12 00 00       	call   39eb <mkdir>
     277a:	83 c4 10             	add    $0x10,%esp
     277d:	85 c0                	test   %eax,%eax
@@ -3970,7 +3970,7 @@
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
     2785:	83 ec 08             	sub    $0x8,%esp
     2788:	68 00 02 00 00       	push   $0x200
-    278d:	68 f8 51 00 00       	push   $0x51f8
+    278d:	68 28 52 00 00       	push   $0x5228
     2792:	e8 2c 12 00 00       	call   39c3 <open>
   if(fd < 0){
     2797:	83 c4 10             	add    $0x10,%esp
@@ -3984,7 +3984,7 @@
     27ab:	58                   	pop    %eax
     27ac:	5a                   	pop    %edx
     27ad:	6a 00                	push   $0x0
-    27af:	68 68 52 00 00       	push   $0x5268
+    27af:	68 98 52 00 00       	push   $0x5298
     27b4:	e8 0a 12 00 00       	call   39c3 <open>
   if(fd < 0){
     27b9:	83 c4 10             	add    $0x10,%esp
@@ -3995,23 +3995,23 @@
     27c3:	50                   	push   %eax
     27c4:	e8 e2 11 00 00       	call   39ab <close>
   if(mkdir("12345678901234/12345678901234") == 0){
-    27c9:	c7 04 24 dc 49 00 00 	movl   $0x49dc,(%esp)
+    27c9:	c7 04 24 0c 4a 00 00 	movl   $0x4a0c,(%esp)
     27d0:	e8 16 12 00 00       	call   39eb <mkdir>
     27d5:	83 c4 10             	add    $0x10,%esp
     27d8:	85 c0                	test   %eax,%eax
     27da:	74 4e                	je     282a <fourteen+0xea>
   if(mkdir("123456789012345/12345678901234") == 0){
     27dc:	83 ec 0c             	sub    $0xc,%esp
-    27df:	68 04 53 00 00       	push   $0x5304
+    27df:	68 34 53 00 00       	push   $0x5334
     27e4:	e8 02 12 00 00       	call   39eb <mkdir>
     27e9:	83 c4 10             	add    $0x10,%esp
     27ec:	85 c0                	test   %eax,%eax
     27ee:	74 27                	je     2817 <fourteen+0xd7>
   printf(1, "fourteen ok\n");
     27f0:	83 ec 08             	sub    $0x8,%esp
-    27f3:	68 fa 49 00 00       	push   $0x49fa
+    27f3:	68 2a 4a 00 00       	push   $0x4a2a
     27f8:	6a 01                	push   $0x1
-    27fa:	e8 e1 12 00 00       	call   3ae0 <printf>
+    27fa:	e8 11 13 00 00       	call   3b10 <printf>
 }
     27ff:	83 c4 10             	add    $0x10,%esp
     2802:	c9                   	leave  
@@ -4019,49 +4019,49 @@
     printf(1, "mkdir 12345678901234 failed\n");
     2804:	50                   	push   %eax
     2805:	50                   	push   %eax
-    2806:	68 bf 49 00 00       	push   $0x49bf
+    2806:	68 ef 49 00 00       	push   $0x49ef
     280b:	6a 01                	push   $0x1
-    280d:	e8 ce 12 00 00       	call   3ae0 <printf>
+    280d:	e8 fe 12 00 00       	call   3b10 <printf>
     exit();
     2812:	e8 6c 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
     2817:	50                   	push   %eax
     2818:	50                   	push   %eax
-    2819:	68 24 53 00 00       	push   $0x5324
+    2819:	68 54 53 00 00       	push   $0x5354
     281e:	6a 01                	push   $0x1
-    2820:	e8 bb 12 00 00       	call   3ae0 <printf>
+    2820:	e8 eb 12 00 00       	call   3b10 <printf>
     exit();
     2825:	e8 59 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
     282a:	52                   	push   %edx
     282b:	52                   	push   %edx
-    282c:	68 d4 52 00 00       	push   $0x52d4
+    282c:	68 04 53 00 00       	push   $0x5304
     2831:	6a 01                	push   $0x1
-    2833:	e8 a8 12 00 00       	call   3ae0 <printf>
+    2833:	e8 d8 12 00 00       	call   3b10 <printf>
     exit();
     2838:	e8 46 11 00 00       	call   3983 <exit>
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
     283d:	51                   	push   %ecx
     283e:	51                   	push   %ecx
-    283f:	68 98 52 00 00       	push   $0x5298
+    283f:	68 c8 52 00 00       	push   $0x52c8
     2844:	6a 01                	push   $0x1
-    2846:	e8 95 12 00 00       	call   3ae0 <printf>
+    2846:	e8 c5 12 00 00       	call   3b10 <printf>
     exit();
     284b:	e8 33 11 00 00       	call   3983 <exit>
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
     2850:	51                   	push   %ecx
     2851:	51                   	push   %ecx
-    2852:	68 28 52 00 00       	push   $0x5228
+    2852:	68 58 52 00 00       	push   $0x5258
     2857:	6a 01                	push   $0x1
-    2859:	e8 82 12 00 00       	call   3ae0 <printf>
+    2859:	e8 b2 12 00 00       	call   3b10 <printf>
     exit();
     285e:	e8 20 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
     2863:	50                   	push   %eax
     2864:	50                   	push   %eax
-    2865:	68 c8 51 00 00       	push   $0x51c8
+    2865:	68 f8 51 00 00       	push   $0x51f8
     286a:	6a 01                	push   $0x1
-    286c:	e8 6f 12 00 00       	call   3ae0 <printf>
+    286c:	e8 9f 12 00 00       	call   3b10 <printf>
     exit();
     2871:	e8 0d 11 00 00       	call   3983 <exit>
     2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4074,69 +4074,69 @@
     2885:	89 e5                	mov    %esp,%ebp
     2887:	83 ec 10             	sub    $0x10,%esp
   printf(1, "rmdot test\n");
-    288a:	68 07 4a 00 00       	push   $0x4a07
+    288a:	68 37 4a 00 00       	push   $0x4a37
     288f:	6a 01                	push   $0x1
-    2891:	e8 4a 12 00 00       	call   3ae0 <printf>
+    2891:	e8 7a 12 00 00       	call   3b10 <printf>
   if(mkdir("dots") != 0){
-    2896:	c7 04 24 13 4a 00 00 	movl   $0x4a13,(%esp)
+    2896:	c7 04 24 43 4a 00 00 	movl   $0x4a43,(%esp)
     289d:	e8 49 11 00 00       	call   39eb <mkdir>
     28a2:	83 c4 10             	add    $0x10,%esp
     28a5:	85 c0                	test   %eax,%eax
     28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
   if(chdir("dots") != 0){
     28ad:	83 ec 0c             	sub    $0xc,%esp
-    28b0:	68 13 4a 00 00       	push   $0x4a13
+    28b0:	68 43 4a 00 00       	push   $0x4a43
     28b5:	e8 39 11 00 00       	call   39f3 <chdir>
     28ba:	83 c4 10             	add    $0x10,%esp
     28bd:	85 c0                	test   %eax,%eax
     28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
   if(unlink(".") == 0){
     28c5:	83 ec 0c             	sub    $0xc,%esp
-    28c8:	68 be 46 00 00       	push   $0x46be
+    28c8:	68 ee 46 00 00       	push   $0x46ee
     28cd:	e8 01 11 00 00       	call   39d3 <unlink>
     28d2:	83 c4 10             	add    $0x10,%esp
     28d5:	85 c0                	test   %eax,%eax
     28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
   if(unlink("..") == 0){
     28dd:	83 ec 0c             	sub    $0xc,%esp
-    28e0:	68 bd 46 00 00       	push   $0x46bd
+    28e0:	68 ed 46 00 00       	push   $0x46ed
     28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
     28ea:	83 c4 10             	add    $0x10,%esp
     28ed:	85 c0                	test   %eax,%eax
     28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
   if(chdir("/") != 0){
     28f5:	83 ec 0c             	sub    $0xc,%esp
-    28f8:	68 91 3e 00 00       	push   $0x3e91
+    28f8:	68 c1 3e 00 00       	push   $0x3ec1
     28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
     2902:	83 c4 10             	add    $0x10,%esp
     2905:	85 c0                	test   %eax,%eax
     2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
   if(unlink("dots/.") == 0){
     290d:	83 ec 0c             	sub    $0xc,%esp
-    2910:	68 5b 4a 00 00       	push   $0x4a5b
+    2910:	68 8b 4a 00 00       	push   $0x4a8b
     2915:	e8 b9 10 00 00       	call   39d3 <unlink>
     291a:	83 c4 10             	add    $0x10,%esp
     291d:	85 c0                	test   %eax,%eax
     291f:	74 75                	je     2996 <rmdot+0x116>
   if(unlink("dots/..") == 0){
     2921:	83 ec 0c             	sub    $0xc,%esp
-    2924:	68 79 4a 00 00       	push   $0x4a79
+    2924:	68 a9 4a 00 00       	push   $0x4aa9
     2929:	e8 a5 10 00 00       	call   39d3 <unlink>
     292e:	83 c4 10             	add    $0x10,%esp
     2931:	85 c0                	test   %eax,%eax
     2933:	74 4e                	je     2983 <rmdot+0x103>
   if(unlink("dots") != 0){
     2935:	83 ec 0c             	sub    $0xc,%esp
-    2938:	68 13 4a 00 00       	push   $0x4a13
+    2938:	68 43 4a 00 00       	push   $0x4a43
     293d:	e8 91 10 00 00       	call   39d3 <unlink>
     2942:	83 c4 10             	add    $0x10,%esp
     2945:	85 c0                	test   %eax,%eax
     2947:	75 27                	jne    2970 <rmdot+0xf0>
   printf(1, "rmdot ok\n");
     2949:	83 ec 08             	sub    $0x8,%esp
-    294c:	68 ae 4a 00 00       	push   $0x4aae
+    294c:	68 de 4a 00 00       	push   $0x4ade
     2951:	6a 01                	push   $0x1
-    2953:	e8 88 11 00 00       	call   3ae0 <printf>
+    2953:	e8 b8 11 00 00       	call   3b10 <printf>
 }
     2958:	83 c4 10             	add    $0x10,%esp
     295b:	c9                   	leave  
@@ -4144,65 +4144,65 @@
     printf(1, "mkdir dots failed\n");
     295d:	50                   	push   %eax
     295e:	50                   	push   %eax
-    295f:	68 18 4a 00 00       	push   $0x4a18
+    295f:	68 48 4a 00 00       	push   $0x4a48
     2964:	6a 01                	push   $0x1
-    2966:	e8 75 11 00 00       	call   3ae0 <printf>
+    2966:	e8 a5 11 00 00       	call   3b10 <printf>
     exit();
     296b:	e8 13 10 00 00       	call   3983 <exit>
     printf(1, "unlink dots failed!\n");
     2970:	50                   	push   %eax
     2971:	50                   	push   %eax
-    2972:	68 99 4a 00 00       	push   $0x4a99
+    2972:	68 c9 4a 00 00       	push   $0x4ac9
     2977:	6a 01                	push   $0x1
-    2979:	e8 62 11 00 00       	call   3ae0 <printf>
+    2979:	e8 92 11 00 00       	call   3b10 <printf>
     exit();
     297e:	e8 00 10 00 00       	call   3983 <exit>
     printf(1, "unlink dots/.. worked!\n");
     2983:	52                   	push   %edx
     2984:	52                   	push   %edx
-    2985:	68 81 4a 00 00       	push   $0x4a81
+    2985:	68 b1 4a 00 00       	push   $0x4ab1
     298a:	6a 01                	push   $0x1
-    298c:	e8 4f 11 00 00       	call   3ae0 <printf>
+    298c:	e8 7f 11 00 00       	call   3b10 <printf>
     exit();
     2991:	e8 ed 0f 00 00       	call   3983 <exit>
     printf(1, "unlink dots/. worked!\n");
     2996:	51                   	push   %ecx
     2997:	51                   	push   %ecx
-    2998:	68 62 4a 00 00       	push   $0x4a62
+    2998:	68 92 4a 00 00       	push   $0x4a92
     299d:	6a 01                	push   $0x1
-    299f:	e8 3c 11 00 00       	call   3ae0 <printf>
+    299f:	e8 6c 11 00 00       	call   3b10 <printf>
     exit();
     29a4:	e8 da 0f 00 00       	call   3983 <exit>
     printf(1, "chdir / failed\n");
     29a9:	50                   	push   %eax
     29aa:	50                   	push   %eax
-    29ab:	68 93 3e 00 00       	push   $0x3e93
+    29ab:	68 c3 3e 00 00       	push   $0x3ec3
     29b0:	6a 01                	push   $0x1
-    29b2:	e8 29 11 00 00       	call   3ae0 <printf>
+    29b2:	e8 59 11 00 00       	call   3b10 <printf>
     exit();
     29b7:	e8 c7 0f 00 00       	call   3983 <exit>
     printf(1, "rm .. worked!\n");
     29bc:	50                   	push   %eax
     29bd:	50                   	push   %eax
-    29be:	68 4c 4a 00 00       	push   $0x4a4c
+    29be:	68 7c 4a 00 00       	push   $0x4a7c
     29c3:	6a 01                	push   $0x1
-    29c5:	e8 16 11 00 00       	call   3ae0 <printf>
+    29c5:	e8 46 11 00 00       	call   3b10 <printf>
     exit();
     29ca:	e8 b4 0f 00 00       	call   3983 <exit>
     printf(1, "rm . worked!\n");
     29cf:	50                   	push   %eax
     29d0:	50                   	push   %eax
-    29d1:	68 3e 4a 00 00       	push   $0x4a3e
+    29d1:	68 6e 4a 00 00       	push   $0x4a6e
     29d6:	6a 01                	push   $0x1
-    29d8:	e8 03 11 00 00       	call   3ae0 <printf>
+    29d8:	e8 33 11 00 00       	call   3b10 <printf>
     exit();
     29dd:	e8 a1 0f 00 00       	call   3983 <exit>
     printf(1, "chdir dots failed\n");
     29e2:	50                   	push   %eax
     29e3:	50                   	push   %eax
-    29e4:	68 2b 4a 00 00       	push   $0x4a2b
+    29e4:	68 5b 4a 00 00       	push   $0x4a5b
     29e9:	6a 01                	push   $0x1
-    29eb:	e8 f0 10 00 00       	call   3ae0 <printf>
+    29eb:	e8 20 11 00 00       	call   3b10 <printf>
     exit();
     29f0:	e8 8e 0f 00 00       	call   3983 <exit>
     29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4216,14 +4216,14 @@
     2a07:	53                   	push   %ebx
     2a08:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "dir vs file\n");
-    2a0b:	68 b8 4a 00 00       	push   $0x4ab8
+    2a0b:	68 e8 4a 00 00       	push   $0x4ae8
     2a10:	6a 01                	push   $0x1
-    2a12:	e8 c9 10 00 00       	call   3ae0 <printf>
+    2a12:	e8 f9 10 00 00       	call   3b10 <printf>
   fd = open("dirfile", O_CREATE);
     2a17:	5b                   	pop    %ebx
     2a18:	58                   	pop    %eax
     2a19:	68 00 02 00 00       	push   $0x200
-    2a1e:	68 c5 4a 00 00       	push   $0x4ac5
+    2a1e:	68 f5 4a 00 00       	push   $0x4af5
     2a23:	e8 9b 0f 00 00       	call   39c3 <open>
   if(fd < 0){
     2a28:	83 c4 10             	add    $0x10,%esp
@@ -4234,7 +4234,7 @@
     2a36:	50                   	push   %eax
     2a37:	e8 6f 0f 00 00       	call   39ab <close>
   if(chdir("dirfile") == 0){
-    2a3c:	c7 04 24 c5 4a 00 00 	movl   $0x4ac5,(%esp)
+    2a3c:	c7 04 24 f5 4a 00 00 	movl   $0x4af5,(%esp)
     2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
     2a48:	83 c4 10             	add    $0x10,%esp
     2a4b:	85 c0                	test   %eax,%eax
@@ -4242,7 +4242,7 @@
   fd = open("dirfile/xx", 0);
     2a53:	83 ec 08             	sub    $0x8,%esp
     2a56:	6a 00                	push   $0x0
-    2a58:	68 fe 4a 00 00       	push   $0x4afe
+    2a58:	68 2e 4b 00 00       	push   $0x4b2e
     2a5d:	e8 61 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a62:	83 c4 10             	add    $0x10,%esp
@@ -4251,7 +4251,7 @@
   fd = open("dirfile/xx", O_CREATE);
     2a6d:	83 ec 08             	sub    $0x8,%esp
     2a70:	68 00 02 00 00       	push   $0x200
-    2a75:	68 fe 4a 00 00       	push   $0x4afe
+    2a75:	68 2e 4b 00 00       	push   $0x4b2e
     2a7a:	e8 44 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a7f:	83 c4 10             	add    $0x10,%esp
@@ -4259,29 +4259,29 @@
     2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
   if(mkdir("dirfile/xx") == 0){
     2a8a:	83 ec 0c             	sub    $0xc,%esp
-    2a8d:	68 fe 4a 00 00       	push   $0x4afe
+    2a8d:	68 2e 4b 00 00       	push   $0x4b2e
     2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
     2a97:	83 c4 10             	add    $0x10,%esp
     2a9a:	85 c0                	test   %eax,%eax
     2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
   if(unlink("dirfile/xx") == 0){
     2aa2:	83 ec 0c             	sub    $0xc,%esp
-    2aa5:	68 fe 4a 00 00       	push   $0x4afe
+    2aa5:	68 2e 4b 00 00       	push   $0x4b2e
     2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
     2aaf:	83 c4 10             	add    $0x10,%esp
     2ab2:	85 c0                	test   %eax,%eax
     2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
   if(link("README", "dirfile/xx") == 0){
     2aba:	83 ec 08             	sub    $0x8,%esp
-    2abd:	68 fe 4a 00 00       	push   $0x4afe
-    2ac2:	68 62 4b 00 00       	push   $0x4b62
+    2abd:	68 2e 4b 00 00       	push   $0x4b2e
+    2ac2:	68 92 4b 00 00       	push   $0x4b92
     2ac7:	e8 17 0f 00 00       	call   39e3 <link>
     2acc:	83 c4 10             	add    $0x10,%esp
     2acf:	85 c0                	test   %eax,%eax
     2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
   if(unlink("dirfile") != 0){
     2ad7:	83 ec 0c             	sub    $0xc,%esp
-    2ada:	68 c5 4a 00 00       	push   $0x4ac5
+    2ada:	68 f5 4a 00 00       	push   $0x4af5
     2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
     2ae4:	83 c4 10             	add    $0x10,%esp
     2ae7:	85 c0                	test   %eax,%eax
@@ -4289,7 +4289,7 @@
   fd = open(".", O_RDWR);
     2aef:	83 ec 08             	sub    $0x8,%esp
     2af2:	6a 02                	push   $0x2
-    2af4:	68 be 46 00 00       	push   $0x46be
+    2af4:	68 ee 46 00 00       	push   $0x46ee
     2af9:	e8 c5 0e 00 00       	call   39c3 <open>
   if(fd >= 0){
     2afe:	83 c4 10             	add    $0x10,%esp
@@ -4298,7 +4298,7 @@
   fd = open(".", 0);
     2b09:	83 ec 08             	sub    $0x8,%esp
     2b0c:	6a 00                	push   $0x0
-    2b0e:	68 be 46 00 00       	push   $0x46be
+    2b0e:	68 ee 46 00 00       	push   $0x46ee
     2b13:	e8 ab 0e 00 00       	call   39c3 <open>
   if(write(fd, "x", 1) > 0){
     2b18:	83 c4 0c             	add    $0xc,%esp
@@ -4306,7 +4306,7 @@
   fd = open(".", 0);
     2b1d:	89 c3                	mov    %eax,%ebx
   if(write(fd, "x", 1) > 0){
-    2b1f:	68 a1 47 00 00       	push   $0x47a1
+    2b1f:	68 d1 47 00 00       	push   $0x47d1
     2b24:	50                   	push   %eax
     2b25:	e8 79 0e 00 00       	call   39a3 <write>
     2b2a:	83 c4 10             	add    $0x10,%esp
@@ -4319,9 +4319,9 @@
   printf(1, "dir vs file OK\n");
     2b3a:	58                   	pop    %eax
     2b3b:	5a                   	pop    %edx
-    2b3c:	68 95 4b 00 00       	push   $0x4b95
+    2b3c:	68 c5 4b 00 00       	push   $0x4bc5
     2b41:	6a 01                	push   $0x1
-    2b43:	e8 98 0f 00 00       	call   3ae0 <printf>
+    2b43:	e8 c8 0f 00 00       	call   3b10 <printf>
 }
     2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2b4b:	83 c4 10             	add    $0x10,%esp
@@ -4330,73 +4330,73 @@
     printf(1, "create dirfile/xx succeeded!\n");
     2b50:	50                   	push   %eax
     2b51:	50                   	push   %eax
-    2b52:	68 09 4b 00 00       	push   $0x4b09
+    2b52:	68 39 4b 00 00       	push   $0x4b39
     2b57:	6a 01                	push   $0x1
-    2b59:	e8 82 0f 00 00       	call   3ae0 <printf>
+    2b59:	e8 b2 0f 00 00       	call   3b10 <printf>
     exit();
     2b5e:	e8 20 0e 00 00       	call   3983 <exit>
     printf(1, "chdir dirfile succeeded!\n");
     2b63:	52                   	push   %edx
     2b64:	52                   	push   %edx
-    2b65:	68 e4 4a 00 00       	push   $0x4ae4
+    2b65:	68 14 4b 00 00       	push   $0x4b14
     2b6a:	6a 01                	push   $0x1
-    2b6c:	e8 6f 0f 00 00       	call   3ae0 <printf>
+    2b6c:	e8 9f 0f 00 00       	call   3b10 <printf>
     exit();
     2b71:	e8 0d 0e 00 00       	call   3983 <exit>
     printf(1, "create dirfile failed\n");
     2b76:	51                   	push   %ecx
     2b77:	51                   	push   %ecx
-    2b78:	68 cd 4a 00 00       	push   $0x4acd
+    2b78:	68 fd 4a 00 00       	push   $0x4afd
     2b7d:	6a 01                	push   $0x1
-    2b7f:	e8 5c 0f 00 00       	call   3ae0 <printf>
+    2b7f:	e8 8c 0f 00 00       	call   3b10 <printf>
     exit();
     2b84:	e8 fa 0d 00 00       	call   3983 <exit>
     printf(1, "write . succeeded!\n");
     2b89:	51                   	push   %ecx
     2b8a:	51                   	push   %ecx
-    2b8b:	68 81 4b 00 00       	push   $0x4b81
+    2b8b:	68 b1 4b 00 00       	push   $0x4bb1
     2b90:	6a 01                	push   $0x1
-    2b92:	e8 49 0f 00 00       	call   3ae0 <printf>
+    2b92:	e8 79 0f 00 00       	call   3b10 <printf>
     exit();
     2b97:	e8 e7 0d 00 00       	call   3983 <exit>
     printf(1, "open . for writing succeeded!\n");
     2b9c:	53                   	push   %ebx
     2b9d:	53                   	push   %ebx
-    2b9e:	68 78 53 00 00       	push   $0x5378
+    2b9e:	68 a8 53 00 00       	push   $0x53a8
     2ba3:	6a 01                	push   $0x1
-    2ba5:	e8 36 0f 00 00       	call   3ae0 <printf>
+    2ba5:	e8 66 0f 00 00       	call   3b10 <printf>
     exit();
     2baa:	e8 d4 0d 00 00       	call   3983 <exit>
     printf(1, "unlink dirfile failed!\n");
     2baf:	50                   	push   %eax
     2bb0:	50                   	push   %eax
-    2bb1:	68 69 4b 00 00       	push   $0x4b69
+    2bb1:	68 99 4b 00 00       	push   $0x4b99
     2bb6:	6a 01                	push   $0x1
-    2bb8:	e8 23 0f 00 00       	call   3ae0 <printf>
+    2bb8:	e8 53 0f 00 00       	call   3b10 <printf>
     exit();
     2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
     printf(1, "link to dirfile/xx succeeded!\n");
     2bc2:	50                   	push   %eax
     2bc3:	50                   	push   %eax
-    2bc4:	68 58 53 00 00       	push   $0x5358
+    2bc4:	68 88 53 00 00       	push   $0x5388
     2bc9:	6a 01                	push   $0x1
-    2bcb:	e8 10 0f 00 00       	call   3ae0 <printf>
+    2bcb:	e8 40 0f 00 00       	call   3b10 <printf>
     exit();
     2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
     printf(1, "unlink dirfile/xx succeeded!\n");
     2bd5:	50                   	push   %eax
     2bd6:	50                   	push   %eax
-    2bd7:	68 44 4b 00 00       	push   $0x4b44
+    2bd7:	68 74 4b 00 00       	push   $0x4b74
     2bdc:	6a 01                	push   $0x1
-    2bde:	e8 fd 0e 00 00       	call   3ae0 <printf>
+    2bde:	e8 2d 0f 00 00       	call   3b10 <printf>
     exit();
     2be3:	e8 9b 0d 00 00       	call   3983 <exit>
     printf(1, "mkdir dirfile/xx succeeded!\n");
     2be8:	50                   	push   %eax
     2be9:	50                   	push   %eax
-    2bea:	68 27 4b 00 00       	push   $0x4b27
+    2bea:	68 57 4b 00 00       	push   $0x4b57
     2bef:	6a 01                	push   $0x1
-    2bf1:	e8 ea 0e 00 00       	call   3ae0 <printf>
+    2bf1:	e8 1a 0f 00 00       	call   3b10 <printf>
     exit();
     2bf6:	e8 88 0d 00 00       	call   3983 <exit>
     2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4413,40 +4413,40 @@
 {
     2c0d:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "empty file name\n");
-    2c10:	68 a5 4b 00 00       	push   $0x4ba5
+    2c10:	68 d5 4b 00 00       	push   $0x4bd5
     2c15:	6a 01                	push   $0x1
-    2c17:	e8 c4 0e 00 00       	call   3ae0 <printf>
+    2c17:	e8 f4 0e 00 00       	call   3b10 <printf>
     2c1c:	83 c4 10             	add    $0x10,%esp
     2c1f:	90                   	nop
     if(mkdir("irefd") != 0){
     2c20:	83 ec 0c             	sub    $0xc,%esp
-    2c23:	68 b6 4b 00 00       	push   $0x4bb6
+    2c23:	68 e6 4b 00 00       	push   $0x4be6
     2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
     2c2d:	83 c4 10             	add    $0x10,%esp
     2c30:	85 c0                	test   %eax,%eax
     2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
     if(chdir("irefd") != 0){
     2c38:	83 ec 0c             	sub    $0xc,%esp
-    2c3b:	68 b6 4b 00 00       	push   $0x4bb6
+    2c3b:	68 e6 4b 00 00       	push   $0x4be6
     2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
     2c45:	83 c4 10             	add    $0x10,%esp
     2c48:	85 c0                	test   %eax,%eax
     2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
     mkdir("");
     2c50:	83 ec 0c             	sub    $0xc,%esp
-    2c53:	68 6b 42 00 00       	push   $0x426b
+    2c53:	68 9b 42 00 00       	push   $0x429b
     2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
     link("README", "");
     2c5d:	59                   	pop    %ecx
     2c5e:	58                   	pop    %eax
-    2c5f:	68 6b 42 00 00       	push   $0x426b
-    2c64:	68 62 4b 00 00       	push   $0x4b62
+    2c5f:	68 9b 42 00 00       	push   $0x429b
+    2c64:	68 92 4b 00 00       	push   $0x4b92
     2c69:	e8 75 0d 00 00       	call   39e3 <link>
     fd = open("", O_CREATE);
     2c6e:	58                   	pop    %eax
     2c6f:	5a                   	pop    %edx
     2c70:	68 00 02 00 00       	push   $0x200
-    2c75:	68 6b 42 00 00       	push   $0x426b
+    2c75:	68 9b 42 00 00       	push   $0x429b
     2c7a:	e8 44 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2c7f:	83 c4 10             	add    $0x10,%esp
@@ -4460,7 +4460,7 @@
     fd = open("xx", O_CREATE);
     2c92:	83 ec 08             	sub    $0x8,%esp
     2c95:	68 00 02 00 00       	push   $0x200
-    2c9a:	68 a0 47 00 00       	push   $0x47a0
+    2c9a:	68 d0 47 00 00       	push   $0x47d0
     2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2ca4:	83 c4 10             	add    $0x10,%esp
@@ -4473,7 +4473,7 @@
     2cb4:	83 c4 10             	add    $0x10,%esp
     unlink("xx");
     2cb7:	83 ec 0c             	sub    $0xc,%esp
-    2cba:	68 a0 47 00 00       	push   $0x47a0
+    2cba:	68 d0 47 00 00       	push   $0x47d0
     2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
   for(i = 0; i < 50 + 1; i++){
     2cc4:	83 c4 10             	add    $0x10,%esp
@@ -4481,14 +4481,14 @@
     2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
   chdir("/");
     2cd0:	83 ec 0c             	sub    $0xc,%esp
-    2cd3:	68 91 3e 00 00       	push   $0x3e91
+    2cd3:	68 c1 3e 00 00       	push   $0x3ec1
     2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
   printf(1, "empty file name OK\n");
     2cdd:	58                   	pop    %eax
     2cde:	5a                   	pop    %edx
-    2cdf:	68 e4 4b 00 00       	push   $0x4be4
+    2cdf:	68 14 4c 00 00       	push   $0x4c14
     2ce4:	6a 01                	push   $0x1
-    2ce6:	e8 f5 0d 00 00       	call   3ae0 <printf>
+    2ce6:	e8 25 0e 00 00       	call   3b10 <printf>
 }
     2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2cee:	83 c4 10             	add    $0x10,%esp
@@ -4496,16 +4496,16 @@
     2cf2:	c3                   	ret    
       printf(1, "mkdir irefd failed\n");
     2cf3:	83 ec 08             	sub    $0x8,%esp
-    2cf6:	68 bc 4b 00 00       	push   $0x4bbc
+    2cf6:	68 ec 4b 00 00       	push   $0x4bec
     2cfb:	6a 01                	push   $0x1
-    2cfd:	e8 de 0d 00 00       	call   3ae0 <printf>
+    2cfd:	e8 0e 0e 00 00       	call   3b10 <printf>
       exit();
     2d02:	e8 7c 0c 00 00       	call   3983 <exit>
       printf(1, "chdir irefd failed\n");
     2d07:	83 ec 08             	sub    $0x8,%esp
-    2d0a:	68 d0 4b 00 00       	push   $0x4bd0
+    2d0a:	68 00 4c 00 00       	push   $0x4c00
     2d0f:	6a 01                	push   $0x1
-    2d11:	e8 ca 0d 00 00       	call   3ae0 <printf>
+    2d11:	e8 fa 0d 00 00       	call   3b10 <printf>
       exit();
     2d16:	e8 68 0c 00 00       	call   3983 <exit>
     2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4522,9 +4522,9 @@
 {
     2d2a:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "fork test\n");
-    2d2d:	68 f8 4b 00 00       	push   $0x4bf8
+    2d2d:	68 28 4c 00 00       	push   $0x4c28
     2d32:	6a 01                	push   $0x1
-    2d34:	e8 a7 0d 00 00       	call   3ae0 <printf>
+    2d34:	e8 d7 0d 00 00       	call   3b10 <printf>
     2d39:	83 c4 10             	add    $0x10,%esp
     2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
     2d3e:	66 90                	xchg   %ax,%ax
@@ -4556,9 +4556,9 @@
     2d76:	75 2d                	jne    2da5 <forktest+0x85>
   printf(1, "fork test OK\n");
     2d78:	83 ec 08             	sub    $0x8,%esp
-    2d7b:	68 2a 4c 00 00       	push   $0x4c2a
+    2d7b:	68 5a 4c 00 00       	push   $0x4c5a
     2d80:	6a 01                	push   $0x1
-    2d82:	e8 59 0d 00 00       	call   3ae0 <printf>
+    2d82:	e8 89 0d 00 00       	call   3b10 <printf>
 }
     2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2d8a:	c9                   	leave  
@@ -4567,25 +4567,25 @@
     2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
       printf(1, "wait stopped early\n");
     2d91:	83 ec 08             	sub    $0x8,%esp
-    2d94:	68 03 4c 00 00       	push   $0x4c03
+    2d94:	68 33 4c 00 00       	push   $0x4c33
     2d99:	6a 01                	push   $0x1
-    2d9b:	e8 40 0d 00 00       	call   3ae0 <printf>
+    2d9b:	e8 70 0d 00 00       	call   3b10 <printf>
       exit();
     2da0:	e8 de 0b 00 00       	call   3983 <exit>
     printf(1, "wait got too many\n");
     2da5:	52                   	push   %edx
     2da6:	52                   	push   %edx
-    2da7:	68 17 4c 00 00       	push   $0x4c17
+    2da7:	68 47 4c 00 00       	push   $0x4c47
     2dac:	6a 01                	push   $0x1
-    2dae:	e8 2d 0d 00 00       	call   3ae0 <printf>
+    2dae:	e8 5d 0d 00 00       	call   3b10 <printf>
     exit();
     2db3:	e8 cb 0b 00 00       	call   3983 <exit>
     printf(1, "fork claimed to work 1000 times!\n");
     2db8:	50                   	push   %eax
     2db9:	50                   	push   %eax
-    2dba:	68 98 53 00 00       	push   $0x5398
+    2dba:	68 c8 53 00 00       	push   $0x53c8
     2dbf:	6a 01                	push   $0x1
-    2dc1:	e8 1a 0d 00 00       	call   3ae0 <printf>
+    2dc1:	e8 4a 0d 00 00       	call   3b10 <printf>
     exit();
     2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
     2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4604,9 +4604,9 @@
     2ddb:	53                   	push   %ebx
     2ddc:	83 ec 54             	sub    $0x54,%esp
   printf(stdout, "sbrk test\n");
-    2ddf:	68 38 4c 00 00       	push   $0x4c38
-    2de4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    2dea:	e8 f1 0c 00 00       	call   3ae0 <printf>
+    2ddf:	68 68 4c 00 00       	push   $0x4c68
+    2de4:	ff 35 10 5f 00 00    	pushl  0x5f10
+    2dea:	e8 21 0d 00 00       	call   3b10 <printf>
   oldbrk = sbrk(0);
     2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
     2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
@@ -4834,9 +4834,9 @@
     302f:	72 61                	jb     3092 <sbrktest+0x2c2>
   printf(stdout, "sbrk test OK\n");
     3031:	83 ec 08             	sub    $0x8,%esp
-    3034:	68 e0 4c 00 00       	push   $0x4ce0
-    3039:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    303f:	e8 9c 0a 00 00       	call   3ae0 <printf>
+    3034:	68 10 4d 00 00       	push   $0x4d10
+    3039:	ff 35 10 5f 00 00    	pushl  0x5f10
+    303f:	e8 cc 0a 00 00       	call   3b10 <printf>
 }
     3044:	83 c4 10             	add    $0x10,%esp
     3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -4857,7 +4857,7 @@
       write(fds[1], "x", 1);
     306a:	83 c4 0c             	add    $0xc,%esp
     306d:	6a 01                	push   $0x1
-    306f:	68 a1 47 00 00       	push   $0x47a1
+    306f:	68 d1 47 00 00       	push   $0x47d1
     3074:	ff 75 bc             	pushl  -0x44(%ebp)
     3077:	e8 27 09 00 00       	call   39a3 <write>
     307c:	83 c4 10             	add    $0x10,%esp
@@ -4882,26 +4882,26 @@
     30ae:	50                   	push   %eax
     30af:	56                   	push   %esi
     30b0:	57                   	push   %edi
-    30b1:	68 43 4c 00 00       	push   $0x4c43
-    30b6:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    30bc:	e8 1f 0a 00 00       	call   3ae0 <printf>
+    30b1:	68 73 4c 00 00       	push   $0x4c73
+    30b6:	ff 35 10 5f 00 00    	pushl  0x5f10
+    30bc:	e8 4f 0a 00 00       	call   3b10 <printf>
       exit();
     30c1:	83 c4 20             	add    $0x20,%esp
     30c4:	e8 ba 08 00 00       	call   3983 <exit>
     printf(stdout, "failed sbrk leaked memory\n");
     30c9:	50                   	push   %eax
     30ca:	50                   	push   %eax
-    30cb:	68 c5 4c 00 00       	push   $0x4cc5
-    30d0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    30d6:	e8 05 0a 00 00       	call   3ae0 <printf>
+    30cb:	68 f5 4c 00 00       	push   $0x4cf5
+    30d0:	ff 35 10 5f 00 00    	pushl  0x5f10
+    30d6:	e8 35 0a 00 00       	call   3b10 <printf>
     exit();
     30db:	e8 a3 08 00 00       	call   3983 <exit>
     printf(1, "pipe() failed\n");
     30e0:	52                   	push   %edx
     30e1:	52                   	push   %edx
-    30e2:	68 81 41 00 00       	push   $0x4181
+    30e2:	68 b1 41 00 00       	push   $0x41b1
     30e7:	6a 01                	push   $0x1
-    30e9:	e8 f2 09 00 00       	call   3ae0 <printf>
+    30e9:	e8 22 0a 00 00       	call   3b10 <printf>
     exit();
     30ee:	e8 90 08 00 00       	call   3983 <exit>
     30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4910,9 +4910,9 @@
     30f8:	0f be 06             	movsbl (%esi),%eax
     30fb:	50                   	push   %eax
     30fc:	56                   	push   %esi
-    30fd:	68 ac 4c 00 00       	push   $0x4cac
-    3102:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3108:	e8 d3 09 00 00       	call   3ae0 <printf>
+    30fd:	68 dc 4c 00 00       	push   $0x4cdc
+    3102:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3108:	e8 03 0a 00 00       	call   3b10 <printf>
       kill(ppid);
     310d:	89 3c 24             	mov    %edi,(%esp)
     3110:	e8 9e 08 00 00       	call   39b3 <kill>
@@ -4920,57 +4920,57 @@
     3115:	e8 69 08 00 00       	call   3983 <exit>
       printf(stdout, "fork failed\n");
     311a:	83 ec 08             	sub    $0x8,%esp
-    311d:	68 89 4d 00 00       	push   $0x4d89
-    3122:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3128:	e8 b3 09 00 00       	call   3ae0 <printf>
+    311d:	68 b9 4d 00 00       	push   $0x4db9
+    3122:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3128:	e8 e3 09 00 00       	call   3b10 <printf>
       exit();
     312d:	e8 51 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
     3132:	50                   	push   %eax
     3133:	56                   	push   %esi
-    3134:	68 8c 54 00 00       	push   $0x548c
-    3139:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    313f:	e8 9c 09 00 00       	call   3ae0 <printf>
+    3134:	68 bc 54 00 00       	push   $0x54bc
+    3139:	ff 35 10 5f 00 00    	pushl  0x5f10
+    313f:	e8 cc 09 00 00       	call   3b10 <printf>
     exit();
     3144:	e8 3a 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     3149:	51                   	push   %ecx
     314a:	51                   	push   %ecx
-    314b:	68 5c 54 00 00       	push   $0x545c
-    3150:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3156:	e8 85 09 00 00       	call   3ae0 <printf>
+    314b:	68 8c 54 00 00       	push   $0x548c
+    3150:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3156:	e8 b5 09 00 00       	call   3b10 <printf>
     exit();
     315b:	e8 23 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     3160:	57                   	push   %edi
     3161:	56                   	push   %esi
-    3162:	68 34 54 00 00       	push   $0x5434
-    3167:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    316d:	e8 6e 09 00 00       	call   3ae0 <printf>
+    3162:	68 64 54 00 00       	push   $0x5464
+    3167:	ff 35 10 5f 00 00    	pushl  0x5f10
+    316d:	e8 9e 09 00 00       	call   3b10 <printf>
     exit();
     3172:	e8 0c 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
     3177:	50                   	push   %eax
     3178:	56                   	push   %esi
-    3179:	68 fc 53 00 00       	push   $0x53fc
-    317e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3184:	e8 57 09 00 00       	call   3ae0 <printf>
+    3179:	68 2c 54 00 00       	push   $0x542c
+    317e:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3184:	e8 87 09 00 00       	call   3b10 <printf>
     exit();
     3189:	e8 f5 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk could not deallocate\n");
     318e:	53                   	push   %ebx
     318f:	53                   	push   %ebx
-    3190:	68 91 4c 00 00       	push   $0x4c91
-    3195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    319b:	e8 40 09 00 00       	call   3ae0 <printf>
+    3190:	68 c1 4c 00 00       	push   $0x4cc1
+    3195:	ff 35 10 5f 00 00    	pushl  0x5f10
+    319b:	e8 70 09 00 00       	call   3b10 <printf>
     exit();
     31a0:	e8 de 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     31a5:	56                   	push   %esi
     31a6:	56                   	push   %esi
-    31a7:	68 bc 53 00 00       	push   $0x53bc
-    31ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31b2:	e8 29 09 00 00       	call   3ae0 <printf>
+    31a7:	68 ec 53 00 00       	push   $0x53ec
+    31ac:	ff 35 10 5f 00 00    	pushl  0x5f10
+    31b2:	e8 59 09 00 00       	call   3b10 <printf>
     exit();
     31b7:	e8 c7 07 00 00       	call   3983 <exit>
     exit();
@@ -4978,17 +4978,17 @@
     printf(stdout, "sbrk test failed post-fork\n");
     31c1:	57                   	push   %edi
     31c2:	57                   	push   %edi
-    31c3:	68 75 4c 00 00       	push   $0x4c75
-    31c8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31ce:	e8 0d 09 00 00       	call   3ae0 <printf>
+    31c3:	68 a5 4c 00 00       	push   $0x4ca5
+    31c8:	ff 35 10 5f 00 00    	pushl  0x5f10
+    31ce:	e8 3d 09 00 00       	call   3b10 <printf>
     exit();
     31d3:	e8 ab 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test fork failed\n");
     31d8:	50                   	push   %eax
     31d9:	50                   	push   %eax
-    31da:	68 5e 4c 00 00       	push   $0x4c5e
-    31df:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31e5:	e8 f6 08 00 00       	call   3ae0 <printf>
+    31da:	68 8e 4c 00 00       	push   $0x4c8e
+    31df:	ff 35 10 5f 00 00    	pushl  0x5f10
+    31e5:	e8 26 09 00 00       	call   3b10 <printf>
     exit();
     31ea:	e8 94 07 00 00       	call   3983 <exit>
     31ef:	90                   	nop
@@ -5013,9 +5013,9 @@
     320a:	53                   	push   %ebx
   printf(stdout, "validate test\n");
     320b:	83 ec 08             	sub    $0x8,%esp
-    320e:	68 ee 4c 00 00       	push   $0x4cee
-    3213:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3219:	e8 c2 08 00 00       	call   3ae0 <printf>
+    320e:	68 1e 4d 00 00       	push   $0x4d1e
+    3213:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3219:	e8 f2 08 00 00       	call   3b10 <printf>
     321e:	83 c4 10             	add    $0x10,%esp
     3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if((pid = fork()) == 0){
@@ -5039,7 +5039,7 @@
     3256:	58                   	pop    %eax
     3257:	5a                   	pop    %edx
     3258:	56                   	push   %esi
-    3259:	68 fd 4c 00 00       	push   $0x4cfd
+    3259:	68 2d 4d 00 00       	push   $0x4d2d
     325e:	e8 80 07 00 00       	call   39e3 <link>
     3263:	83 c4 10             	add    $0x10,%esp
     3266:	83 f8 ff             	cmp    $0xffffffff,%eax
@@ -5050,9 +5050,9 @@
     3277:	75 af                	jne    3228 <validatetest+0x28>
   printf(stdout, "validate ok\n");
     3279:	83 ec 08             	sub    $0x8,%esp
-    327c:	68 21 4d 00 00       	push   $0x4d21
-    3281:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3287:	e8 54 08 00 00       	call   3ae0 <printf>
+    327c:	68 51 4d 00 00       	push   $0x4d51
+    3281:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3287:	e8 84 08 00 00       	call   3b10 <printf>
 }
     328c:	83 c4 10             	add    $0x10,%esp
     328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -5064,9 +5064,9 @@
     3296:	e8 e8 06 00 00       	call   3983 <exit>
       printf(stdout, "link should not succeed\n");
     329b:	83 ec 08             	sub    $0x8,%esp
-    329e:	68 08 4d 00 00       	push   $0x4d08
-    32a3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    32a9:	e8 32 08 00 00       	call   3ae0 <printf>
+    329e:	68 38 4d 00 00       	push   $0x4d38
+    32a3:	ff 35 10 5f 00 00    	pushl  0x5f10
+    32a9:	e8 62 08 00 00       	call   3b10 <printf>
       exit();
     32ae:	e8 d0 06 00 00       	call   3983 <exit>
     32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5079,15 +5079,15 @@
     32c5:	89 e5                	mov    %esp,%ebp
     32c7:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "bss test\n");
-    32ca:	68 2e 4d 00 00       	push   $0x4d2e
-    32cf:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    32d5:	e8 06 08 00 00       	call   3ae0 <printf>
+    32ca:	68 5e 4d 00 00       	push   $0x4d5e
+    32cf:	ff 35 10 5f 00 00    	pushl  0x5f10
+    32d5:	e8 36 08 00 00       	call   3b10 <printf>
     32da:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < sizeof(uninit); i++){
     32dd:	31 c0                	xor    %eax,%eax
     32df:	90                   	nop
     if(uninit[i] != '\0'){
-    32e0:	80 b8 a0 5f 00 00 00 	cmpb   $0x0,0x5fa0(%eax)
+    32e0:	80 b8 e0 5f 00 00 00 	cmpb   $0x0,0x5fe0(%eax)
     32e7:	75 22                	jne    330b <bsstest+0x4b>
   for(i = 0; i < sizeof(uninit); i++){
     32e9:	83 c0 01             	add    $0x1,%eax
@@ -5095,18 +5095,18 @@
     32f1:	75 ed                	jne    32e0 <bsstest+0x20>
   printf(stdout, "bss test ok\n");
     32f3:	83 ec 08             	sub    $0x8,%esp
-    32f6:	68 49 4d 00 00       	push   $0x4d49
-    32fb:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3301:	e8 da 07 00 00       	call   3ae0 <printf>
+    32f6:	68 79 4d 00 00       	push   $0x4d79
+    32fb:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3301:	e8 0a 08 00 00       	call   3b10 <printf>
 }
     3306:	83 c4 10             	add    $0x10,%esp
     3309:	c9                   	leave  
     330a:	c3                   	ret    
       printf(stdout, "bss test failed\n");
     330b:	83 ec 08             	sub    $0x8,%esp
-    330e:	68 38 4d 00 00       	push   $0x4d38
-    3313:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3319:	e8 c2 07 00 00       	call   3ae0 <printf>
+    330e:	68 68 4d 00 00       	push   $0x4d68
+    3313:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3319:	e8 f2 07 00 00       	call   3b10 <printf>
       exit();
     331e:	e8 60 06 00 00       	call   3983 <exit>
     3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5119,7 +5119,7 @@
     3335:	89 e5                	mov    %esp,%ebp
     3337:	83 ec 14             	sub    $0x14,%esp
   unlink("bigarg-ok");
-    333a:	68 56 4d 00 00       	push   $0x4d56
+    333a:	68 86 4d 00 00       	push   $0x4d86
     333f:	e8 8f 06 00 00       	call   39d3 <unlink>
   pid = fork();
     3344:	e8 32 06 00 00       	call   397b <fork>
@@ -5134,7 +5134,7 @@
   fd = open("bigarg-ok", 0);
     335b:	83 ec 08             	sub    $0x8,%esp
     335e:	6a 00                	push   $0x0
-    3360:	68 56 4d 00 00       	push   $0x4d56
+    3360:	68 86 4d 00 00       	push   $0x4d86
     3365:	e8 59 06 00 00       	call   39c3 <open>
   if(fd < 0){
     336a:	83 c4 10             	add    $0x10,%esp
@@ -5145,7 +5145,7 @@
     3378:	50                   	push   %eax
     3379:	e8 2d 06 00 00       	call   39ab <close>
   unlink("bigarg-ok");
-    337e:	c7 04 24 56 4d 00 00 	movl   $0x4d56,(%esp)
+    337e:	c7 04 24 86 4d 00 00 	movl   $0x4d86,(%esp)
     3385:	e8 49 06 00 00       	call   39d3 <unlink>
 }
     338a:	83 c4 10             	add    $0x10,%esp
@@ -5153,8 +5153,8 @@
     338e:	c3                   	ret    
     338f:	90                   	nop
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3390:	c7 04 85 00 5f 00 00 	movl   $0x54b0,0x5f00(,%eax,4)
-    3397:	b0 54 00 00 
+    3390:	c7 04 85 40 5f 00 00 	movl   $0x54e0,0x5f40(,%eax,4)
+    3397:	e0 54 00 00 
     for(i = 0; i < MAXARG-1; i++)
     339b:	83 c0 01             	add    $0x1,%eax
     339e:	83 f8 1f             	cmp    $0x1f,%eax
@@ -5162,30 +5162,30 @@
     printf(stdout, "bigarg test\n");
     33a3:	51                   	push   %ecx
     33a4:	51                   	push   %ecx
-    33a5:	68 60 4d 00 00       	push   $0x4d60
-    33aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    33a5:	68 90 4d 00 00       	push   $0x4d90
+    33aa:	ff 35 10 5f 00 00    	pushl  0x5f10
     args[MAXARG-1] = 0;
-    33b0:	c7 05 7c 5f 00 00 00 	movl   $0x0,0x5f7c
+    33b0:	c7 05 bc 5f 00 00 00 	movl   $0x0,0x5fbc
     33b7:	00 00 00 
     printf(stdout, "bigarg test\n");
-    33ba:	e8 21 07 00 00       	call   3ae0 <printf>
+    33ba:	e8 51 07 00 00       	call   3b10 <printf>
     exec("echo", args);
     33bf:	58                   	pop    %eax
     33c0:	5a                   	pop    %edx
-    33c1:	68 00 5f 00 00       	push   $0x5f00
-    33c6:	68 2d 3f 00 00       	push   $0x3f2d
+    33c1:	68 40 5f 00 00       	push   $0x5f40
+    33c6:	68 5d 3f 00 00       	push   $0x3f5d
     33cb:	e8 eb 05 00 00       	call   39bb <exec>
     printf(stdout, "bigarg test ok\n");
     33d0:	59                   	pop    %ecx
     33d1:	58                   	pop    %eax
-    33d2:	68 6d 4d 00 00       	push   $0x4d6d
-    33d7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    33dd:	e8 fe 06 00 00       	call   3ae0 <printf>
+    33d2:	68 9d 4d 00 00       	push   $0x4d9d
+    33d7:	ff 35 10 5f 00 00    	pushl  0x5f10
+    33dd:	e8 2e 07 00 00       	call   3b10 <printf>
     fd = open("bigarg-ok", O_CREATE);
     33e2:	58                   	pop    %eax
     33e3:	5a                   	pop    %edx
     33e4:	68 00 02 00 00       	push   $0x200
-    33e9:	68 56 4d 00 00       	push   $0x4d56
+    33e9:	68 86 4d 00 00       	push   $0x4d86
     33ee:	e8 d0 05 00 00       	call   39c3 <open>
     close(fd);
     33f3:	89 04 24             	mov    %eax,(%esp)
@@ -5195,17 +5195,17 @@
     printf(stdout, "bigarg test failed!\n");
     3400:	50                   	push   %eax
     3401:	50                   	push   %eax
-    3402:	68 96 4d 00 00       	push   $0x4d96
-    3407:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    340d:	e8 ce 06 00 00       	call   3ae0 <printf>
+    3402:	68 c6 4d 00 00       	push   $0x4dc6
+    3407:	ff 35 10 5f 00 00    	pushl  0x5f10
+    340d:	e8 fe 06 00 00       	call   3b10 <printf>
     exit();
     3412:	e8 6c 05 00 00       	call   3983 <exit>
     printf(stdout, "bigargtest: fork failed\n");
     3417:	52                   	push   %edx
     3418:	52                   	push   %edx
-    3419:	68 7d 4d 00 00       	push   $0x4d7d
-    341e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3424:	e8 b7 06 00 00       	call   3ae0 <printf>
+    3419:	68 ad 4d 00 00       	push   $0x4dad
+    341e:	ff 35 10 5f 00 00    	pushl  0x5f10
+    3424:	e8 e7 06 00 00       	call   3b10 <printf>
     exit();
     3429:	e8 55 05 00 00       	call   3983 <exit>
     342e:	66 90                	xchg   %ax,%ax
@@ -5223,9 +5223,9 @@
     343b:	53                   	push   %ebx
     343c:	83 ec 54             	sub    $0x54,%esp
   printf(1, "fsfull test\n");
-    343f:	68 ab 4d 00 00       	push   $0x4dab
+    343f:	68 db 4d 00 00       	push   $0x4ddb
     3444:	6a 01                	push   $0x1
-    3446:	e8 95 06 00 00       	call   3ae0 <printf>
+    3446:	e8 c5 06 00 00       	call   3b10 <printf>
     344b:	83 c4 10             	add    $0x10,%esp
     344e:	66 90                	xchg   %ax,%ax
     name[1] = '0' + nfiles / 1000;
@@ -5285,9 +5285,9 @@
     printf(1, "writing %s\n", name);
     34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
     34c3:	50                   	push   %eax
-    34c4:	68 b8 4d 00 00       	push   $0x4db8
+    34c4:	68 e8 4d 00 00       	push   $0x4de8
     34c9:	6a 01                	push   $0x1
-    34cb:	e8 10 06 00 00       	call   3ae0 <printf>
+    34cb:	e8 40 06 00 00       	call   3b10 <printf>
     int fd = open(name, O_CREATE|O_RDWR);
     34d0:	58                   	pop    %eax
     34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
@@ -5311,7 +5311,7 @@
       int cc = write(fd, buf, 512);
     34f2:	83 ec 04             	sub    $0x4,%esp
     34f5:	68 00 02 00 00       	push   $0x200
-    34fa:	68 c0 86 00 00       	push   $0x86c0
+    34fa:	68 00 87 00 00       	push   $0x8700
     34ff:	57                   	push   %edi
     3500:	e8 9e 04 00 00       	call   39a3 <write>
       if(cc < 512)
@@ -5321,9 +5321,9 @@
     printf(1, "wrote %d bytes\n", total);
     350f:	83 ec 04             	sub    $0x4,%esp
     3512:	53                   	push   %ebx
-    3513:	68 d4 4d 00 00       	push   $0x4dd4
+    3513:	68 04 4e 00 00       	push   $0x4e04
     3518:	6a 01                	push   $0x1
-    351a:	e8 c1 05 00 00       	call   3ae0 <printf>
+    351a:	e8 f1 05 00 00       	call   3b10 <printf>
     close(fd);
     351f:	89 3c 24             	mov    %edi,(%esp)
     3522:	e8 84 04 00 00       	call   39ab <close>
@@ -5338,9 +5338,9 @@
     3536:	83 ec 04             	sub    $0x4,%esp
     3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
     353c:	50                   	push   %eax
-    353d:	68 c4 4d 00 00       	push   $0x4dc4
+    353d:	68 f4 4d 00 00       	push   $0x4df4
     3542:	6a 01                	push   $0x1
-    3544:	e8 97 05 00 00       	call   3ae0 <printf>
+    3544:	e8 c7 05 00 00       	call   3b10 <printf>
       break;
     3549:	83 c4 10             	add    $0x10,%esp
     name[1] = '0' + nfiles / 1000;
@@ -5419,9 +5419,9 @@
     35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
   printf(1, "fsfull test finished\n");
     35eb:	83 ec 08             	sub    $0x8,%esp
-    35ee:	68 e4 4d 00 00       	push   $0x4de4
+    35ee:	68 14 4e 00 00       	push   $0x4e14
     35f3:	6a 01                	push   $0x1
-    35f5:	e8 e6 04 00 00       	call   3ae0 <printf>
+    35f5:	e8 16 05 00 00       	call   3b10 <printf>
 }
     35fa:	83 c4 10             	add    $0x10,%esp
     35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5440,9 +5440,9 @@
     3615:	89 e5                	mov    %esp,%ebp
     3617:	83 ec 10             	sub    $0x10,%esp
   printf(1, "uio test\n");
-    361a:	68 fa 4d 00 00       	push   $0x4dfa
+    361a:	68 2a 4e 00 00       	push   $0x4e2a
     361f:	6a 01                	push   $0x1
-    3621:	e8 ba 04 00 00       	call   3ae0 <printf>
+    3621:	e8 ea 04 00 00       	call   3b10 <printf>
   pid = fork();
     3626:	e8 50 03 00 00       	call   397b <fork>
   if(pid == 0){
@@ -5455,9 +5455,9 @@
     3634:	e8 52 03 00 00       	call   398b <wait>
   printf(1, "uio test done\n");
     3639:	83 ec 08             	sub    $0x8,%esp
-    363c:	68 04 4e 00 00       	push   $0x4e04
+    363c:	68 34 4e 00 00       	push   $0x4e34
     3641:	6a 01                	push   $0x1
-    3643:	e8 98 04 00 00       	call   3ae0 <printf>
+    3643:	e8 c8 04 00 00       	call   3b10 <printf>
 }
     3648:	83 c4 10             	add    $0x10,%esp
     364b:	c9                   	leave  
@@ -5472,17 +5472,17 @@
     printf(1, "uio: uio succeeded; test FAILED\n");
     365e:	52                   	push   %edx
     365f:	52                   	push   %edx
-    3660:	68 90 55 00 00       	push   $0x5590
+    3660:	68 c0 55 00 00       	push   $0x55c0
     3665:	6a 01                	push   $0x1
-    3667:	e8 74 04 00 00       	call   3ae0 <printf>
+    3667:	e8 a4 04 00 00       	call   3b10 <printf>
     exit();
     366c:	e8 12 03 00 00       	call   3983 <exit>
     printf (1, "fork failed\n");
     3671:	50                   	push   %eax
     3672:	50                   	push   %eax
-    3673:	68 89 4d 00 00       	push   $0x4d89
+    3673:	68 b9 4d 00 00       	push   $0x4db9
     3678:	6a 01                	push   $0x1
-    367a:	e8 61 04 00 00       	call   3ae0 <printf>
+    367a:	e8 91 04 00 00       	call   3b10 <printf>
     exit();
     367f:	e8 ff 02 00 00       	call   3983 <exit>
     3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5498,7 +5498,7 @@
     3698:	83 ec 0c             	sub    $0xc,%esp
   fd = open("init", O_RDONLY);
     369b:	6a 00                	push   $0x0
-    369d:	68 13 4e 00 00       	push   $0x4e13
+    369d:	68 43 4e 00 00       	push   $0x4e43
     36a2:	e8 1c 03 00 00       	call   39c3 <open>
   if (fd < 0) {
     36a7:	83 c4 10             	add    $0x10,%esp
@@ -5521,9 +5521,9 @@
   printf(1, "arg test passed\n");
     36d1:	58                   	pop    %eax
     36d2:	5a                   	pop    %edx
-    36d3:	68 25 4e 00 00       	push   $0x4e25
+    36d3:	68 55 4e 00 00       	push   $0x4e55
     36d8:	6a 01                	push   $0x1
-    36da:	e8 01 04 00 00       	call   3ae0 <printf>
+    36da:	e8 31 04 00 00       	call   3b10 <printf>
 }
     36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     36e2:	83 c4 10             	add    $0x10,%esp
@@ -5532,9 +5532,9 @@
     printf(2, "open failed\n");
     36e7:	51                   	push   %ecx
     36e8:	51                   	push   %ecx
-    36e9:	68 18 4e 00 00       	push   $0x4e18
+    36e9:	68 48 4e 00 00       	push   $0x4e48
     36ee:	6a 02                	push   $0x2
-    36f0:	e8 eb 03 00 00       	call   3ae0 <printf>
+    36f0:	e8 1b 04 00 00       	call   3b10 <printf>
     exit();
     36f5:	e8 89 02 00 00       	call   3983 <exit>
     36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -5543,10 +5543,10 @@
 {
     3700:	f3 0f 1e fb          	endbr32 
   randstate = randstate * 1664525 + 1013904223;
-    3704:	69 05 dc 5e 00 00 0d 	imul   $0x19660d,0x5edc,%eax
+    3704:	69 05 0c 5f 00 00 0d 	imul   $0x19660d,0x5f0c,%eax
     370b:	66 19 00 
     370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    3713:	a3 dc 5e 00 00       	mov    %eax,0x5edc
+    3713:	a3 0c 5f 00 00       	mov    %eax,0x5f0c
 }
     3718:	c3                   	ret    
     3719:	66 90                	xchg   %ax,%ax
@@ -6080,609 +6080,645 @@
     3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
     3a20:	cd 40                	int    $0x40
     3a22:	c3                   	ret    
-    3a23:	66 90                	xchg   %ax,%ax
-    3a25:	66 90                	xchg   %ax,%ax
-    3a27:	66 90                	xchg   %ax,%ax
-    3a29:	66 90                	xchg   %ax,%ax
-    3a2b:	66 90                	xchg   %ax,%ax
-    3a2d:	66 90                	xchg   %ax,%ax
-    3a2f:	90                   	nop
 
-00003a30 <printint>:
+00003a23 <wolfie>:
+SYSCALL(wolfie)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <getNumProc>:
+SYSCALL(getNumProc)
+    3a2b:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+
+00003a33 <getMaxPid>:
+SYSCALL(getMaxPid)
+    3a33:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a38:	cd 40                	int    $0x40
+    3a3a:	c3                   	ret    
+
+00003a3b <getProcInfo>:
+SYSCALL(getProcInfo)
+    3a3b:	b8 18 00 00 00       	mov    $0x18,%eax
+    3a40:	cd 40                	int    $0x40
+    3a42:	c3                   	ret    
+
+00003a43 <get_burst_time>:
+SYSCALL(get_burst_time)
+    3a43:	b8 19 00 00 00       	mov    $0x19,%eax
+    3a48:	cd 40                	int    $0x40
+    3a4a:	c3                   	ret    
+
+00003a4b <set_burst_time>:
+SYSCALL(set_burst_time)
+    3a4b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3a50:	cd 40                	int    $0x40
+    3a52:	c3                   	ret    
+    3a53:	66 90                	xchg   %ax,%ax
+    3a55:	66 90                	xchg   %ax,%ax
+    3a57:	66 90                	xchg   %ax,%ax
+    3a59:	66 90                	xchg   %ax,%ax
+    3a5b:	66 90                	xchg   %ax,%ax
+    3a5d:	66 90                	xchg   %ax,%ax
+    3a5f:	90                   	nop
+
+00003a60 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-    3a30:	55                   	push   %ebp
-    3a31:	89 e5                	mov    %esp,%ebp
-    3a33:	57                   	push   %edi
-    3a34:	56                   	push   %esi
-    3a35:	53                   	push   %ebx
-    3a36:	83 ec 3c             	sub    $0x3c,%esp
-    3a39:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+    3a60:	55                   	push   %ebp
+    3a61:	89 e5                	mov    %esp,%ebp
+    3a63:	57                   	push   %edi
+    3a64:	56                   	push   %esi
+    3a65:	53                   	push   %ebx
+    3a66:	83 ec 3c             	sub    $0x3c,%esp
+    3a69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-    3a3c:	89 d1                	mov    %edx,%ecx
+    3a6c:	89 d1                	mov    %edx,%ecx
 {
-    3a3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    3a6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-    3a41:	85 d2                	test   %edx,%edx
-    3a43:	0f 89 7f 00 00 00    	jns    3ac8 <printint+0x98>
-    3a49:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-    3a4d:	74 79                	je     3ac8 <printint+0x98>
+    3a71:	85 d2                	test   %edx,%edx
+    3a73:	0f 89 7f 00 00 00    	jns    3af8 <printint+0x98>
+    3a79:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a7d:	74 79                	je     3af8 <printint+0x98>
     neg = 1;
-    3a4f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    3a7f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-    3a56:	f7 d9                	neg    %ecx
+    3a86:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-    3a58:	31 db                	xor    %ebx,%ebx
-    3a5a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-    3a5d:	8d 76 00             	lea    0x0(%esi),%esi
+    3a88:	31 db                	xor    %ebx,%ebx
+    3a8a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a8d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-    3a60:	89 c8                	mov    %ecx,%eax
-    3a62:	31 d2                	xor    %edx,%edx
-    3a64:	89 cf                	mov    %ecx,%edi
-    3a66:	f7 75 c4             	divl   -0x3c(%ebp)
-    3a69:	0f b6 92 e8 55 00 00 	movzbl 0x55e8(%edx),%edx
-    3a70:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    3a73:	89 d8                	mov    %ebx,%eax
-    3a75:	8d 5b 01             	lea    0x1(%ebx),%ebx
+    3a90:	89 c8                	mov    %ecx,%eax
+    3a92:	31 d2                	xor    %edx,%edx
+    3a94:	89 cf                	mov    %ecx,%edi
+    3a96:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a99:	0f b6 92 18 56 00 00 	movzbl 0x5618(%edx),%edx
+    3aa0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3aa3:	89 d8                	mov    %ebx,%eax
+    3aa5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-    3a78:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    3aa8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-    3a7b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+    3aab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-    3a7e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-    3a81:	76 dd                	jbe    3a60 <printint+0x30>
+    3aae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3ab1:	76 dd                	jbe    3a90 <printint+0x30>
   if(neg)
-    3a83:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-    3a86:	85 c9                	test   %ecx,%ecx
-    3a88:	74 0c                	je     3a96 <printint+0x66>
+    3ab3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3ab6:	85 c9                	test   %ecx,%ecx
+    3ab8:	74 0c                	je     3ac6 <printint+0x66>
     buf[i++] = '-';
-    3a8a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    3aba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-    3a8f:	89 d8                	mov    %ebx,%eax
+    3abf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-    3a91:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    3ac1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-    3a96:	8b 7d b8             	mov    -0x48(%ebp),%edi
-    3a99:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-    3a9d:	eb 07                	jmp    3aa6 <printint+0x76>
-    3a9f:	90                   	nop
-    3aa0:	0f b6 13             	movzbl (%ebx),%edx
-    3aa3:	83 eb 01             	sub    $0x1,%ebx
+    3ac6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3ac9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3acd:	eb 07                	jmp    3ad6 <printint+0x76>
+    3acf:	90                   	nop
+    3ad0:	0f b6 13             	movzbl (%ebx),%edx
+    3ad3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-    3aa6:	83 ec 04             	sub    $0x4,%esp
-    3aa9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-    3aac:	6a 01                	push   $0x1
-    3aae:	56                   	push   %esi
-    3aaf:	57                   	push   %edi
-    3ab0:	e8 ee fe ff ff       	call   39a3 <write>
+    3ad6:	83 ec 04             	sub    $0x4,%esp
+    3ad9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3adc:	6a 01                	push   $0x1
+    3ade:	56                   	push   %esi
+    3adf:	57                   	push   %edi
+    3ae0:	e8 be fe ff ff       	call   39a3 <write>
   while(--i >= 0)
-    3ab5:	83 c4 10             	add    $0x10,%esp
-    3ab8:	39 de                	cmp    %ebx,%esi
-    3aba:	75 e4                	jne    3aa0 <printint+0x70>
+    3ae5:	83 c4 10             	add    $0x10,%esp
+    3ae8:	39 de                	cmp    %ebx,%esi
+    3aea:	75 e4                	jne    3ad0 <printint+0x70>
     putc(fd, buf[i]);
 }
-    3abc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3abf:	5b                   	pop    %ebx
-    3ac0:	5e                   	pop    %esi
-    3ac1:	5f                   	pop    %edi
-    3ac2:	5d                   	pop    %ebp
-    3ac3:	c3                   	ret    
-    3ac4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3aec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3aef:	5b                   	pop    %ebx
+    3af0:	5e                   	pop    %esi
+    3af1:	5f                   	pop    %edi
+    3af2:	5d                   	pop    %ebp
+    3af3:	c3                   	ret    
+    3af4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-    3ac8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-    3acf:	eb 87                	jmp    3a58 <printint+0x28>
-    3ad1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3ad8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3adf:	90                   	nop
+    3af8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3aff:	eb 87                	jmp    3a88 <printint+0x28>
+    3b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b0f:	90                   	nop
 
-00003ae0 <printf>:
+00003b10 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-    3ae0:	f3 0f 1e fb          	endbr32 
-    3ae4:	55                   	push   %ebp
-    3ae5:	89 e5                	mov    %esp,%ebp
-    3ae7:	57                   	push   %edi
-    3ae8:	56                   	push   %esi
-    3ae9:	53                   	push   %ebx
-    3aea:	83 ec 2c             	sub    $0x2c,%esp
+    3b10:	f3 0f 1e fb          	endbr32 
+    3b14:	55                   	push   %ebp
+    3b15:	89 e5                	mov    %esp,%ebp
+    3b17:	57                   	push   %edi
+    3b18:	56                   	push   %esi
+    3b19:	53                   	push   %ebx
+    3b1a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-    3aed:	8b 75 0c             	mov    0xc(%ebp),%esi
-    3af0:	0f b6 1e             	movzbl (%esi),%ebx
-    3af3:	84 db                	test   %bl,%bl
-    3af5:	0f 84 b4 00 00 00    	je     3baf <printf+0xcf>
+    3b1d:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b20:	0f b6 1e             	movzbl (%esi),%ebx
+    3b23:	84 db                	test   %bl,%bl
+    3b25:	0f 84 b4 00 00 00    	je     3bdf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
-    3afb:	8d 45 10             	lea    0x10(%ebp),%eax
-    3afe:	83 c6 01             	add    $0x1,%esi
+    3b2b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b2e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
-    3b01:	8d 7d e7             	lea    -0x19(%ebp),%edi
+    3b31:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-    3b04:	31 d2                	xor    %edx,%edx
+    3b34:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
-    3b06:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3b09:	eb 33                	jmp    3b3e <printf+0x5e>
-    3b0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3b0f:	90                   	nop
-    3b10:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    3b36:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b39:	eb 33                	jmp    3b6e <printf+0x5e>
+    3b3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b3f:	90                   	nop
+    3b40:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-    3b13:	ba 25 00 00 00       	mov    $0x25,%edx
+    3b43:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
-    3b18:	83 f8 25             	cmp    $0x25,%eax
-    3b1b:	74 17                	je     3b34 <printf+0x54>
+    3b48:	83 f8 25             	cmp    $0x25,%eax
+    3b4b:	74 17                	je     3b64 <printf+0x54>
   write(fd, &c, 1);
-    3b1d:	83 ec 04             	sub    $0x4,%esp
-    3b20:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3b23:	6a 01                	push   $0x1
-    3b25:	57                   	push   %edi
-    3b26:	ff 75 08             	pushl  0x8(%ebp)
-    3b29:	e8 75 fe ff ff       	call   39a3 <write>
-    3b2e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+    3b4d:	83 ec 04             	sub    $0x4,%esp
+    3b50:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b53:	6a 01                	push   $0x1
+    3b55:	57                   	push   %edi
+    3b56:	ff 75 08             	pushl  0x8(%ebp)
+    3b59:	e8 45 fe ff ff       	call   39a3 <write>
+    3b5e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
-    3b31:	83 c4 10             	add    $0x10,%esp
+    3b61:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-    3b34:	0f b6 1e             	movzbl (%esi),%ebx
-    3b37:	83 c6 01             	add    $0x1,%esi
-    3b3a:	84 db                	test   %bl,%bl
-    3b3c:	74 71                	je     3baf <printf+0xcf>
+    3b64:	0f b6 1e             	movzbl (%esi),%ebx
+    3b67:	83 c6 01             	add    $0x1,%esi
+    3b6a:	84 db                	test   %bl,%bl
+    3b6c:	74 71                	je     3bdf <printf+0xcf>
     c = fmt[i] & 0xff;
-    3b3e:	0f be cb             	movsbl %bl,%ecx
-    3b41:	0f b6 c3             	movzbl %bl,%eax
+    3b6e:	0f be cb             	movsbl %bl,%ecx
+    3b71:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-    3b44:	85 d2                	test   %edx,%edx
-    3b46:	74 c8                	je     3b10 <printf+0x30>
+    3b74:	85 d2                	test   %edx,%edx
+    3b76:	74 c8                	je     3b40 <printf+0x30>
       }
     } else if(state == '%'){
-    3b48:	83 fa 25             	cmp    $0x25,%edx
-    3b4b:	75 e7                	jne    3b34 <printf+0x54>
+    3b78:	83 fa 25             	cmp    $0x25,%edx
+    3b7b:	75 e7                	jne    3b64 <printf+0x54>
       if(c == 'd'){
-    3b4d:	83 f8 64             	cmp    $0x64,%eax
-    3b50:	0f 84 9a 00 00 00    	je     3bf0 <printf+0x110>
+    3b7d:	83 f8 64             	cmp    $0x64,%eax
+    3b80:	0f 84 9a 00 00 00    	je     3c20 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-    3b56:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-    3b5c:	83 f9 70             	cmp    $0x70,%ecx
-    3b5f:	74 5f                	je     3bc0 <printf+0xe0>
+    3b86:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b8c:	83 f9 70             	cmp    $0x70,%ecx
+    3b8f:	74 5f                	je     3bf0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-    3b61:	83 f8 73             	cmp    $0x73,%eax
-    3b64:	0f 84 d6 00 00 00    	je     3c40 <printf+0x160>
+    3b91:	83 f8 73             	cmp    $0x73,%eax
+    3b94:	0f 84 d6 00 00 00    	je     3c70 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    3b6a:	83 f8 63             	cmp    $0x63,%eax
-    3b6d:	0f 84 8d 00 00 00    	je     3c00 <printf+0x120>
+    3b9a:	83 f8 63             	cmp    $0x63,%eax
+    3b9d:	0f 84 8d 00 00 00    	je     3c30 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-    3b73:	83 f8 25             	cmp    $0x25,%eax
-    3b76:	0f 84 b4 00 00 00    	je     3c30 <printf+0x150>
+    3ba3:	83 f8 25             	cmp    $0x25,%eax
+    3ba6:	0f 84 b4 00 00 00    	je     3c60 <printf+0x150>
   write(fd, &c, 1);
-    3b7c:	83 ec 04             	sub    $0x4,%esp
-    3b7f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    3b83:	6a 01                	push   $0x1
-    3b85:	57                   	push   %edi
-    3b86:	ff 75 08             	pushl  0x8(%ebp)
-    3b89:	e8 15 fe ff ff       	call   39a3 <write>
+    3bac:	83 ec 04             	sub    $0x4,%esp
+    3baf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3bb3:	6a 01                	push   $0x1
+    3bb5:	57                   	push   %edi
+    3bb6:	ff 75 08             	pushl  0x8(%ebp)
+    3bb9:	e8 e5 fd ff ff       	call   39a3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
-    3b8e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3bbe:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    3b91:	83 c4 0c             	add    $0xc,%esp
-    3b94:	6a 01                	push   $0x1
-    3b96:	83 c6 01             	add    $0x1,%esi
-    3b99:	57                   	push   %edi
-    3b9a:	ff 75 08             	pushl  0x8(%ebp)
-    3b9d:	e8 01 fe ff ff       	call   39a3 <write>
+    3bc1:	83 c4 0c             	add    $0xc,%esp
+    3bc4:	6a 01                	push   $0x1
+    3bc6:	83 c6 01             	add    $0x1,%esi
+    3bc9:	57                   	push   %edi
+    3bca:	ff 75 08             	pushl  0x8(%ebp)
+    3bcd:	e8 d1 fd ff ff       	call   39a3 <write>
   for(i = 0; fmt[i]; i++){
-    3ba2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3bd2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
-    3ba6:	83 c4 10             	add    $0x10,%esp
+    3bd6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
-    3ba9:	31 d2                	xor    %edx,%edx
+    3bd9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
-    3bab:	84 db                	test   %bl,%bl
-    3bad:	75 8f                	jne    3b3e <printf+0x5e>
+    3bdb:	84 db                	test   %bl,%bl
+    3bdd:	75 8f                	jne    3b6e <printf+0x5e>
     }
   }
 }
-    3baf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3bb2:	5b                   	pop    %ebx
-    3bb3:	5e                   	pop    %esi
-    3bb4:	5f                   	pop    %edi
-    3bb5:	5d                   	pop    %ebp
-    3bb6:	c3                   	ret    
-    3bb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3bbe:	66 90                	xchg   %ax,%ax
+    3bdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3be2:	5b                   	pop    %ebx
+    3be3:	5e                   	pop    %esi
+    3be4:	5f                   	pop    %edi
+    3be5:	5d                   	pop    %ebp
+    3be6:	c3                   	ret    
+    3be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bee:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
-    3bc0:	83 ec 0c             	sub    $0xc,%esp
-    3bc3:	b9 10 00 00 00       	mov    $0x10,%ecx
-    3bc8:	6a 00                	push   $0x0
-    3bca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    3bcd:	8b 45 08             	mov    0x8(%ebp),%eax
-    3bd0:	8b 13                	mov    (%ebx),%edx
-    3bd2:	e8 59 fe ff ff       	call   3a30 <printint>
+    3bf0:	83 ec 0c             	sub    $0xc,%esp
+    3bf3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3bf8:	6a 00                	push   $0x0
+    3bfa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bfd:	8b 45 08             	mov    0x8(%ebp),%eax
+    3c00:	8b 13                	mov    (%ebx),%edx
+    3c02:	e8 59 fe ff ff       	call   3a60 <printint>
         ap++;
-    3bd7:	89 d8                	mov    %ebx,%eax
-    3bd9:	83 c4 10             	add    $0x10,%esp
+    3c07:	89 d8                	mov    %ebx,%eax
+    3c09:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    3bdc:	31 d2                	xor    %edx,%edx
+    3c0c:	31 d2                	xor    %edx,%edx
         ap++;
-    3bde:	83 c0 04             	add    $0x4,%eax
-    3be1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3be4:	e9 4b ff ff ff       	jmp    3b34 <printf+0x54>
-    3be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c0e:	83 c0 04             	add    $0x4,%eax
+    3c11:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c14:	e9 4b ff ff ff       	jmp    3b64 <printf+0x54>
+    3c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
-    3bf0:	83 ec 0c             	sub    $0xc,%esp
-    3bf3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    3bf8:	6a 01                	push   $0x1
-    3bfa:	eb ce                	jmp    3bca <printf+0xea>
-    3bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c20:	83 ec 0c             	sub    $0xc,%esp
+    3c23:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c28:	6a 01                	push   $0x1
+    3c2a:	eb ce                	jmp    3bfa <printf+0xea>
+    3c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
-    3c00:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3c30:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
-    3c03:	83 ec 04             	sub    $0x4,%esp
+    3c33:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    3c06:	8b 03                	mov    (%ebx),%eax
+    3c36:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
-    3c08:	6a 01                	push   $0x1
+    3c38:	6a 01                	push   $0x1
         ap++;
-    3c0a:	83 c3 04             	add    $0x4,%ebx
+    3c3a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
-    3c0d:	57                   	push   %edi
-    3c0e:	ff 75 08             	pushl  0x8(%ebp)
+    3c3d:	57                   	push   %edi
+    3c3e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
-    3c11:	88 45 e7             	mov    %al,-0x19(%ebp)
+    3c41:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    3c14:	e8 8a fd ff ff       	call   39a3 <write>
+    3c44:	e8 5a fd ff ff       	call   39a3 <write>
         ap++;
-    3c19:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    3c1c:	83 c4 10             	add    $0x10,%esp
+    3c49:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c4c:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    3c1f:	31 d2                	xor    %edx,%edx
-    3c21:	e9 0e ff ff ff       	jmp    3b34 <printf+0x54>
-    3c26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c2d:	8d 76 00             	lea    0x0(%esi),%esi
+    3c4f:	31 d2                	xor    %edx,%edx
+    3c51:	e9 0e ff ff ff       	jmp    3b64 <printf+0x54>
+    3c56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c5d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
-    3c30:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3c60:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    3c33:	83 ec 04             	sub    $0x4,%esp
-    3c36:	e9 59 ff ff ff       	jmp    3b94 <printf+0xb4>
-    3c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3c3f:	90                   	nop
+    3c63:	83 ec 04             	sub    $0x4,%esp
+    3c66:	e9 59 ff ff ff       	jmp    3bc4 <printf+0xb4>
+    3c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c6f:	90                   	nop
         s = (char*)*ap;
-    3c40:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    3c43:	8b 18                	mov    (%eax),%ebx
+    3c70:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c73:	8b 18                	mov    (%eax),%ebx
         ap++;
-    3c45:	83 c0 04             	add    $0x4,%eax
-    3c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c75:	83 c0 04             	add    $0x4,%eax
+    3c78:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    3c4b:	85 db                	test   %ebx,%ebx
-    3c4d:	74 17                	je     3c66 <printf+0x186>
+    3c7b:	85 db                	test   %ebx,%ebx
+    3c7d:	74 17                	je     3c96 <printf+0x186>
         while(*s != 0){
-    3c4f:	0f b6 03             	movzbl (%ebx),%eax
+    3c7f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
-    3c52:	31 d2                	xor    %edx,%edx
+    3c82:	31 d2                	xor    %edx,%edx
         while(*s != 0){
-    3c54:	84 c0                	test   %al,%al
-    3c56:	0f 84 d8 fe ff ff    	je     3b34 <printf+0x54>
-    3c5c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c5f:	89 de                	mov    %ebx,%esi
-    3c61:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c64:	eb 1a                	jmp    3c80 <printf+0x1a0>
+    3c84:	84 c0                	test   %al,%al
+    3c86:	0f 84 d8 fe ff ff    	je     3b64 <printf+0x54>
+    3c8c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c8f:	89 de                	mov    %ebx,%esi
+    3c91:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c94:	eb 1a                	jmp    3cb0 <printf+0x1a0>
           s = "(null)";
-    3c66:	bb de 55 00 00       	mov    $0x55de,%ebx
+    3c96:	bb 0e 56 00 00       	mov    $0x560e,%ebx
         while(*s != 0){
-    3c6b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c6e:	b8 28 00 00 00       	mov    $0x28,%eax
-    3c73:	89 de                	mov    %ebx,%esi
-    3c75:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c7f:	90                   	nop
+    3c9b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c9e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3ca3:	89 de                	mov    %ebx,%esi
+    3ca5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3ca8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3caf:	90                   	nop
   write(fd, &c, 1);
-    3c80:	83 ec 04             	sub    $0x4,%esp
+    3cb0:	83 ec 04             	sub    $0x4,%esp
           s++;
-    3c83:	83 c6 01             	add    $0x1,%esi
-    3c86:	88 45 e7             	mov    %al,-0x19(%ebp)
+    3cb3:	83 c6 01             	add    $0x1,%esi
+    3cb6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    3c89:	6a 01                	push   $0x1
-    3c8b:	57                   	push   %edi
-    3c8c:	53                   	push   %ebx
-    3c8d:	e8 11 fd ff ff       	call   39a3 <write>
+    3cb9:	6a 01                	push   $0x1
+    3cbb:	57                   	push   %edi
+    3cbc:	53                   	push   %ebx
+    3cbd:	e8 e1 fc ff ff       	call   39a3 <write>
         while(*s != 0){
-    3c92:	0f b6 06             	movzbl (%esi),%eax
-    3c95:	83 c4 10             	add    $0x10,%esp
-    3c98:	84 c0                	test   %al,%al
-    3c9a:	75 e4                	jne    3c80 <printf+0x1a0>
-    3c9c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    3cc2:	0f b6 06             	movzbl (%esi),%eax
+    3cc5:	83 c4 10             	add    $0x10,%esp
+    3cc8:	84 c0                	test   %al,%al
+    3cca:	75 e4                	jne    3cb0 <printf+0x1a0>
+    3ccc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
-    3c9f:	31 d2                	xor    %edx,%edx
-    3ca1:	e9 8e fe ff ff       	jmp    3b34 <printf+0x54>
-    3ca6:	66 90                	xchg   %ax,%ax
-    3ca8:	66 90                	xchg   %ax,%ax
-    3caa:	66 90                	xchg   %ax,%ax
-    3cac:	66 90                	xchg   %ax,%ax
-    3cae:	66 90                	xchg   %ax,%ax
+    3ccf:	31 d2                	xor    %edx,%edx
+    3cd1:	e9 8e fe ff ff       	jmp    3b64 <printf+0x54>
+    3cd6:	66 90                	xchg   %ax,%ax
+    3cd8:	66 90                	xchg   %ax,%ax
+    3cda:	66 90                	xchg   %ax,%ax
+    3cdc:	66 90                	xchg   %ax,%ax
+    3cde:	66 90                	xchg   %ax,%ax
 
-00003cb0 <free>:
+00003ce0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    3cb0:	f3 0f 1e fb          	endbr32 
-    3cb4:	55                   	push   %ebp
+    3ce0:	f3 0f 1e fb          	endbr32 
+    3ce4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cb5:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3ce5:	a1 c0 5f 00 00       	mov    0x5fc0,%eax
 {
-    3cba:	89 e5                	mov    %esp,%ebp
-    3cbc:	57                   	push   %edi
-    3cbd:	56                   	push   %esi
-    3cbe:	53                   	push   %ebx
-    3cbf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3cc2:	8b 10                	mov    (%eax),%edx
+    3cea:	89 e5                	mov    %esp,%ebp
+    3cec:	57                   	push   %edi
+    3ced:	56                   	push   %esi
+    3cee:	53                   	push   %ebx
+    3cef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3cf2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
-    3cc4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    3cf4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cc7:	39 c8                	cmp    %ecx,%eax
-    3cc9:	73 15                	jae    3ce0 <free+0x30>
-    3ccb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3ccf:	90                   	nop
-    3cd0:	39 d1                	cmp    %edx,%ecx
-    3cd2:	72 14                	jb     3ce8 <free+0x38>
+    3cf7:	39 c8                	cmp    %ecx,%eax
+    3cf9:	73 15                	jae    3d10 <free+0x30>
+    3cfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cff:	90                   	nop
+    3d00:	39 d1                	cmp    %edx,%ecx
+    3d02:	72 14                	jb     3d18 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3cd4:	39 d0                	cmp    %edx,%eax
-    3cd6:	73 10                	jae    3ce8 <free+0x38>
+    3d04:	39 d0                	cmp    %edx,%eax
+    3d06:	73 10                	jae    3d18 <free+0x38>
 {
-    3cd8:	89 d0                	mov    %edx,%eax
+    3d08:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cda:	8b 10                	mov    (%eax),%edx
-    3cdc:	39 c8                	cmp    %ecx,%eax
-    3cde:	72 f0                	jb     3cd0 <free+0x20>
+    3d0a:	8b 10                	mov    (%eax),%edx
+    3d0c:	39 c8                	cmp    %ecx,%eax
+    3d0e:	72 f0                	jb     3d00 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3ce0:	39 d0                	cmp    %edx,%eax
-    3ce2:	72 f4                	jb     3cd8 <free+0x28>
-    3ce4:	39 d1                	cmp    %edx,%ecx
-    3ce6:	73 f0                	jae    3cd8 <free+0x28>
+    3d10:	39 d0                	cmp    %edx,%eax
+    3d12:	72 f4                	jb     3d08 <free+0x28>
+    3d14:	39 d1                	cmp    %edx,%ecx
+    3d16:	73 f0                	jae    3d08 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    3ce8:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    3ceb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    3cee:	39 fa                	cmp    %edi,%edx
-    3cf0:	74 1e                	je     3d10 <free+0x60>
+    3d18:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3d1b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3d1e:	39 fa                	cmp    %edi,%edx
+    3d20:	74 1e                	je     3d40 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    3cf2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    3d22:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    3cf5:	8b 50 04             	mov    0x4(%eax),%edx
-    3cf8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3cfb:	39 f1                	cmp    %esi,%ecx
-    3cfd:	74 28                	je     3d27 <free+0x77>
+    3d25:	8b 50 04             	mov    0x4(%eax),%edx
+    3d28:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d2b:	39 f1                	cmp    %esi,%ecx
+    3d2d:	74 28                	je     3d57 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    3cff:	89 08                	mov    %ecx,(%eax)
+    3d2f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
-    3d01:	5b                   	pop    %ebx
+    3d31:	5b                   	pop    %ebx
   freep = p;
-    3d02:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d32:	a3 c0 5f 00 00       	mov    %eax,0x5fc0
 }
-    3d07:	5e                   	pop    %esi
-    3d08:	5f                   	pop    %edi
-    3d09:	5d                   	pop    %ebp
-    3d0a:	c3                   	ret    
-    3d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3d0f:	90                   	nop
+    3d37:	5e                   	pop    %esi
+    3d38:	5f                   	pop    %edi
+    3d39:	5d                   	pop    %ebp
+    3d3a:	c3                   	ret    
+    3d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d3f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
-    3d10:	03 72 04             	add    0x4(%edx),%esi
-    3d13:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    3d40:	03 72 04             	add    0x4(%edx),%esi
+    3d43:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    3d16:	8b 10                	mov    (%eax),%edx
-    3d18:	8b 12                	mov    (%edx),%edx
-    3d1a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    3d46:	8b 10                	mov    (%eax),%edx
+    3d48:	8b 12                	mov    (%edx),%edx
+    3d4a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    3d1d:	8b 50 04             	mov    0x4(%eax),%edx
-    3d20:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3d23:	39 f1                	cmp    %esi,%ecx
-    3d25:	75 d8                	jne    3cff <free+0x4f>
+    3d4d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d50:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d53:	39 f1                	cmp    %esi,%ecx
+    3d55:	75 d8                	jne    3d2f <free+0x4f>
     p->s.size += bp->s.size;
-    3d27:	03 53 fc             	add    -0x4(%ebx),%edx
+    3d57:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    3d2a:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d5a:	a3 c0 5f 00 00       	mov    %eax,0x5fc0
     p->s.size += bp->s.size;
-    3d2f:	89 50 04             	mov    %edx,0x4(%eax)
+    3d5f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    3d32:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    3d35:	89 10                	mov    %edx,(%eax)
+    3d62:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d65:	89 10                	mov    %edx,(%eax)
 }
-    3d37:	5b                   	pop    %ebx
-    3d38:	5e                   	pop    %esi
-    3d39:	5f                   	pop    %edi
-    3d3a:	5d                   	pop    %ebp
-    3d3b:	c3                   	ret    
-    3d3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d67:	5b                   	pop    %ebx
+    3d68:	5e                   	pop    %esi
+    3d69:	5f                   	pop    %edi
+    3d6a:	5d                   	pop    %ebp
+    3d6b:	c3                   	ret    
+    3d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00003d40 <malloc>:
+00003d70 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    3d40:	f3 0f 1e fb          	endbr32 
-    3d44:	55                   	push   %ebp
-    3d45:	89 e5                	mov    %esp,%ebp
-    3d47:	57                   	push   %edi
-    3d48:	56                   	push   %esi
-    3d49:	53                   	push   %ebx
-    3d4a:	83 ec 1c             	sub    $0x1c,%esp
+    3d70:	f3 0f 1e fb          	endbr32 
+    3d74:	55                   	push   %ebp
+    3d75:	89 e5                	mov    %esp,%ebp
+    3d77:	57                   	push   %edi
+    3d78:	56                   	push   %esi
+    3d79:	53                   	push   %ebx
+    3d7a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d4d:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d7d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    3d50:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
+    3d80:	8b 3d c0 5f 00 00    	mov    0x5fc0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d56:	8d 70 07             	lea    0x7(%eax),%esi
-    3d59:	c1 ee 03             	shr    $0x3,%esi
-    3d5c:	83 c6 01             	add    $0x1,%esi
+    3d86:	8d 70 07             	lea    0x7(%eax),%esi
+    3d89:	c1 ee 03             	shr    $0x3,%esi
+    3d8c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    3d5f:	85 ff                	test   %edi,%edi
-    3d61:	0f 84 a9 00 00 00    	je     3e10 <malloc+0xd0>
+    3d8f:	85 ff                	test   %edi,%edi
+    3d91:	0f 84 a9 00 00 00    	je     3e40 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3d67:	8b 07                	mov    (%edi),%eax
+    3d97:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
-    3d69:	8b 48 04             	mov    0x4(%eax),%ecx
-    3d6c:	39 f1                	cmp    %esi,%ecx
-    3d6e:	73 6d                	jae    3ddd <malloc+0x9d>
-    3d70:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    3d76:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    3d7b:	0f 43 de             	cmovae %esi,%ebx
+    3d99:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d9c:	39 f1                	cmp    %esi,%ecx
+    3d9e:	73 6d                	jae    3e0d <malloc+0x9d>
+    3da0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3da6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3dab:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    3d7e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    3d85:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    3d88:	eb 17                	jmp    3da1 <malloc+0x61>
-    3d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3dae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3db5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3db8:	eb 17                	jmp    3dd1 <malloc+0x61>
+    3dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3d90:	8b 10                	mov    (%eax),%edx
+    3dc0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
-    3d92:	8b 4a 04             	mov    0x4(%edx),%ecx
-    3d95:	39 f1                	cmp    %esi,%ecx
-    3d97:	73 4f                	jae    3de8 <malloc+0xa8>
-    3d99:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
-    3d9f:	89 d0                	mov    %edx,%eax
+    3dc2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3dc5:	39 f1                	cmp    %esi,%ecx
+    3dc7:	73 4f                	jae    3e18 <malloc+0xa8>
+    3dc9:	8b 3d c0 5f 00 00    	mov    0x5fc0,%edi
+    3dcf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    3da1:	39 c7                	cmp    %eax,%edi
-    3da3:	75 eb                	jne    3d90 <malloc+0x50>
+    3dd1:	39 c7                	cmp    %eax,%edi
+    3dd3:	75 eb                	jne    3dc0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
-    3da5:	83 ec 0c             	sub    $0xc,%esp
-    3da8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    3dab:	e8 5b fc ff ff       	call   3a0b <sbrk>
+    3dd5:	83 ec 0c             	sub    $0xc,%esp
+    3dd8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3ddb:	e8 2b fc ff ff       	call   3a0b <sbrk>
   if(p == (char*)-1)
-    3db0:	83 c4 10             	add    $0x10,%esp
-    3db3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3db6:	74 1b                	je     3dd3 <malloc+0x93>
+    3de0:	83 c4 10             	add    $0x10,%esp
+    3de3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3de6:	74 1b                	je     3e03 <malloc+0x93>
   hp->s.size = nu;
-    3db8:	89 58 04             	mov    %ebx,0x4(%eax)
+    3de8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    3dbb:	83 ec 0c             	sub    $0xc,%esp
-    3dbe:	83 c0 08             	add    $0x8,%eax
-    3dc1:	50                   	push   %eax
-    3dc2:	e8 e9 fe ff ff       	call   3cb0 <free>
+    3deb:	83 ec 0c             	sub    $0xc,%esp
+    3dee:	83 c0 08             	add    $0x8,%eax
+    3df1:	50                   	push   %eax
+    3df2:	e8 e9 fe ff ff       	call   3ce0 <free>
   return freep;
-    3dc7:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3df7:	a1 c0 5f 00 00       	mov    0x5fc0,%eax
       if((p = morecore(nunits)) == 0)
-    3dcc:	83 c4 10             	add    $0x10,%esp
-    3dcf:	85 c0                	test   %eax,%eax
-    3dd1:	75 bd                	jne    3d90 <malloc+0x50>
+    3dfc:	83 c4 10             	add    $0x10,%esp
+    3dff:	85 c0                	test   %eax,%eax
+    3e01:	75 bd                	jne    3dc0 <malloc+0x50>
         return 0;
   }
 }
-    3dd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3e03:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    3dd6:	31 c0                	xor    %eax,%eax
+    3e06:	31 c0                	xor    %eax,%eax
 }
-    3dd8:	5b                   	pop    %ebx
-    3dd9:	5e                   	pop    %esi
-    3dda:	5f                   	pop    %edi
-    3ddb:	5d                   	pop    %ebp
-    3ddc:	c3                   	ret    
+    3e08:	5b                   	pop    %ebx
+    3e09:	5e                   	pop    %esi
+    3e0a:	5f                   	pop    %edi
+    3e0b:	5d                   	pop    %ebp
+    3e0c:	c3                   	ret    
     if(p->s.size >= nunits){
-    3ddd:	89 c2                	mov    %eax,%edx
-    3ddf:	89 f8                	mov    %edi,%eax
-    3de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e0d:	89 c2                	mov    %eax,%edx
+    3e0f:	89 f8                	mov    %edi,%eax
+    3e11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    3de8:	39 ce                	cmp    %ecx,%esi
-    3dea:	74 54                	je     3e40 <malloc+0x100>
+    3e18:	39 ce                	cmp    %ecx,%esi
+    3e1a:	74 54                	je     3e70 <malloc+0x100>
         p->s.size -= nunits;
-    3dec:	29 f1                	sub    %esi,%ecx
-    3dee:	89 4a 04             	mov    %ecx,0x4(%edx)
+    3e1c:	29 f1                	sub    %esi,%ecx
+    3e1e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
-    3df1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+    3e21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
-    3df4:	89 72 04             	mov    %esi,0x4(%edx)
+    3e24:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    3df7:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3e27:	a3 c0 5f 00 00       	mov    %eax,0x5fc0
 }
-    3dfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3e2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    3dff:	8d 42 08             	lea    0x8(%edx),%eax
+    3e2f:	8d 42 08             	lea    0x8(%edx),%eax
 }
-    3e02:	5b                   	pop    %ebx
-    3e03:	5e                   	pop    %esi
-    3e04:	5f                   	pop    %edi
-    3e05:	5d                   	pop    %ebp
-    3e06:	c3                   	ret    
-    3e07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3e0e:	66 90                	xchg   %ax,%ax
+    3e32:	5b                   	pop    %ebx
+    3e33:	5e                   	pop    %esi
+    3e34:	5f                   	pop    %edi
+    3e35:	5d                   	pop    %ebp
+    3e36:	c3                   	ret    
+    3e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e3e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    3e10:	c7 05 80 5f 00 00 84 	movl   $0x5f84,0x5f80
-    3e17:	5f 00 00 
+    3e40:	c7 05 c0 5f 00 00 c4 	movl   $0x5fc4,0x5fc0
+    3e47:	5f 00 00 
     base.s.size = 0;
-    3e1a:	bf 84 5f 00 00       	mov    $0x5f84,%edi
+    3e4a:	bf c4 5f 00 00       	mov    $0x5fc4,%edi
     base.s.ptr = freep = prevp = &base;
-    3e1f:	c7 05 84 5f 00 00 84 	movl   $0x5f84,0x5f84
-    3e26:	5f 00 00 
+    3e4f:	c7 05 c4 5f 00 00 c4 	movl   $0x5fc4,0x5fc4
+    3e56:	5f 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3e29:	89 f8                	mov    %edi,%eax
+    3e59:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    3e2b:	c7 05 88 5f 00 00 00 	movl   $0x0,0x5f88
-    3e32:	00 00 00 
+    3e5b:	c7 05 c8 5f 00 00 00 	movl   $0x0,0x5fc8
+    3e62:	00 00 00 
     if(p->s.size >= nunits){
-    3e35:	e9 36 ff ff ff       	jmp    3d70 <malloc+0x30>
-    3e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3e65:	e9 36 ff ff ff       	jmp    3da0 <malloc+0x30>
+    3e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    3e40:	8b 0a                	mov    (%edx),%ecx
-    3e42:	89 08                	mov    %ecx,(%eax)
-    3e44:	eb b1                	jmp    3df7 <malloc+0xb7>
+    3e70:	8b 0a                	mov    (%edx),%ecx
+    3e72:	89 08                	mov    %ecx,(%eax)
+    3e74:	eb b1                	jmp    3e27 <malloc+0xb7>
Binary files xv6-public/usertests.o and xv6-public-hybrid/usertests.o differ
diff -u xv6-public/usertests.sym xv6-public-hybrid/usertests.sym
--- xv6-public/usertests.sym	2022-10-07 20:01:02.286177655 +0530
+++ xv6-public-hybrid/usertests.sym	2022-10-07 18:39:47.993070000 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00003e48 .rodata
-000055fc .eh_frame
-00005edc .data
-00005f00 .bss
+00003e78 .rodata
+0000562c .eh_frame
+00005f0c .data
+00005f40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,28 +12,30 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 usertests.c
-00005f00 args.1449
+00005f40 args.1464
 00000000 ulib.c
 00000000 printf.c
-00003a30 printint
-000055e8 digits.1085
+00003a60 printint
+00005618 digits.1100
 00000000 umalloc.c
-00005f80 freep
-00005f84 base
+00005fc0 freep
+00005fc4 base
 00003720 strcpy
 00000d60 exitwait
-00003ae0 printf
-00005ee0 stdout
+00003b10 printf
+00005f10 stdout
 00003330 bigargtest
 00003950 memmove
 00000310 openiputtest
 000039cb mknod
+00003a23 wolfie
 00003840 gets
 00003a03 getpid
 00000a60 pipe1
 00002c00 iref
-00003d40 malloc
+00003d70 malloc
 00003a13 sleep
+00003a43 get_burst_time
 00000210 exitiputtest
 00003430 fsfull
 00001c60 bigdir
@@ -41,13 +43,13 @@
 00000690 writetest1
 00002490 bigwrite
 00000eb0 sharedfd
-00005edc randstate
+00005f0c randstate
 00003993 pipe
-00005fa0 uninit
+00005fe0 uninit
 00002a00 dirfile
 000039a3 write
 000032c0 bsstest
-00005ee4 echoargv
+00005f14 echoargv
 000039db fstat
 000039b3 kill
 00003200 validatetest
@@ -65,10 +67,11 @@
 0000397b fork
 00003a0b sbrk
 00003a1b uptime
-00005ef8 __bss_start
+00005f28 __bss_start
 000037e0 memset
 00000860 createtest
 00000000 main
+00003a4b set_burst_time
 00001270 createdelete
 00003750 strcmp
 000004b0 writetest
@@ -76,21 +79,24 @@
 00002dd0 sbrktest
 00000410 opentest
 00001da0 subdir
+00003a33 getMaxPid
 00003610 uio
 00001630 linktest
-000086c0 buf
+00008700 buf
 00000920 dirtest
 00000120 iputtest
+00003a2b getNumProc
+00003a3b getProcInfo
 000038c0 stat
 00002570 bigfile
-00005ef8 _edata
-0000a6c4 _end
+00005f28 _edata
+0000a704 _end
 000014a0 unlinkread
 000039e3 link
 00003983 exit
 00003910 atoi
 00001b50 linkunlink
-0000a6c0 name
+0000a700 name
 000037a0 strlen
 000039c3 open
 00003800 strchr
@@ -100,4 +106,4 @@
 00001070 fourfiles
 000039eb mkdir
 000039ab close
-00003cb0 free
+00003ce0 free
Binary files xv6-public/usys.o and xv6-public-hybrid/usys.o differ
diff -u xv6-public/usys.S xv6-public-hybrid/usys.S
--- xv6-public/usys.S	2022-10-07 20:00:17.167375312 +0530
+++ xv6-public-hybrid/usys.S	2022-10-07 06:31:25.481201000 +0530
@@ -29,3 +29,9 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(wolfie)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(get_burst_time)
+SYSCALL(set_burst_time)
Binary files xv6-public/vectors.o and xv6-public-hybrid/vectors.o differ
Binary files xv6-public/vm.o and xv6-public-hybrid/vm.o differ
Binary files xv6-public/_wc and xv6-public-hybrid/_wc differ
diff -u xv6-public/wc.asm xv6-public-hybrid/wc.asm
--- xv6-public/wc.asm	2022-10-07 20:01:02.374189441 +0530
+++ xv6-public-hybrid/wc.asm	2022-10-07 18:39:48.061101000 +0530
@@ -72,15 +72,15 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	pushl  (%ebx)
-  6e:	68 db 08 00 00       	push   $0x8db
+  6e:	68 0b 09 00 00       	push   $0x90b
   73:	6a 01                	push   $0x1
-  75:	e8 d6 04 00 00       	call   550 <printf>
+  75:	e8 06 05 00 00       	call   580 <printf>
       exit();
   7a:	e8 74 03 00 00       	call   3f3 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 cd 08 00 00       	push   $0x8cd
+  81:	68 fd 08 00 00       	push   $0x8fd
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -114,7 +114,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c8:	83 ec 04             	sub    $0x4,%esp
   cb:	68 00 02 00 00       	push   $0x200
-  d0:	68 00 0c 00 00       	push   $0xc00
+  d0:	68 40 0c 00 00       	push   $0xc40
   d5:	ff 75 08             	pushl  0x8(%ebp)
   d8:	e8 2e 03 00 00       	call   40b <read>
   dd:	83 c4 10             	add    $0x10,%esp
@@ -132,7 +132,7 @@
   fa:	39 fe                	cmp    %edi,%esi
   fc:	74 42                	je     140 <wc+0xa0>
       if(buf[i] == '\n')
-  fe:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+  fe:	0f be 87 40 0c 00 00 	movsbl 0xc40(%edi),%eax
         l++;
  105:	31 c9                	xor    %ecx,%ecx
  107:	3c 0a                	cmp    $0xa,%al
@@ -143,7 +143,7 @@
         l++;
  110:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 112:	68 b8 08 00 00       	push   $0x8b8
+ 112:	68 e8 08 00 00       	push   $0x8e8
  117:	e8 54 01 00 00       	call   270 <strchr>
  11c:	83 c4 10             	add    $0x10,%esp
  11f:	85 c0                	test   %eax,%eax
@@ -173,9 +173,9 @@
  150:	ff 75 dc             	pushl  -0x24(%ebp)
  153:	ff 75 e0             	pushl  -0x20(%ebp)
  156:	53                   	push   %ebx
- 157:	68 ce 08 00 00       	push   $0x8ce
+ 157:	68 fe 08 00 00       	push   $0x8fe
  15c:	6a 01                	push   $0x1
- 15e:	e8 ed 03 00 00       	call   550 <printf>
+ 15e:	e8 1d 04 00 00       	call   580 <printf>
 }
  163:	83 c4 20             	add    $0x20,%esp
  166:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -187,9 +187,9 @@
     printf(1, "wc: read error\n");
  16e:	50                   	push   %eax
  16f:	50                   	push   %eax
- 170:	68 be 08 00 00       	push   $0x8be
+ 170:	68 ee 08 00 00       	push   $0x8ee
  175:	6a 01                	push   $0x1
- 177:	e8 d4 03 00 00       	call   550 <printf>
+ 177:	e8 04 04 00 00       	call   580 <printf>
     exit();
  17c:	e8 72 02 00 00       	call   3f3 <exit>
  181:	66 90                	xchg   %ax,%ax
@@ -727,609 +727,645 @@
  48b:	b8 0e 00 00 00       	mov    $0xe,%eax
  490:	cd 40                	int    $0x40
  492:	c3                   	ret    
- 493:	66 90                	xchg   %ax,%ax
- 495:	66 90                	xchg   %ax,%ax
- 497:	66 90                	xchg   %ax,%ax
- 499:	66 90                	xchg   %ax,%ax
- 49b:	66 90                	xchg   %ax,%ax
- 49d:	66 90                	xchg   %ax,%ax
- 49f:	90                   	nop
 
-000004a0 <printint>:
+00000493 <wolfie>:
+SYSCALL(wolfie)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <getNumProc>:
+SYSCALL(getNumProc)
+ 49b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 4a3:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4ab:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4b3:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4bb:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+ 4c3:	66 90                	xchg   %ax,%ax
+ 4c5:	66 90                	xchg   %ax,%ax
+ 4c7:	66 90                	xchg   %ax,%ax
+ 4c9:	66 90                	xchg   %ax,%ax
+ 4cb:	66 90                	xchg   %ax,%ax
+ 4cd:	66 90                	xchg   %ax,%ax
+ 4cf:	90                   	nop
+
+000004d0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 3c             	sub    $0x3c,%esp
- 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 3c             	sub    $0x3c,%esp
+ 4d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 4ac:	89 d1                	mov    %edx,%ecx
+ 4dc:	89 d1                	mov    %edx,%ecx
 {
- 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 4de:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 4b1:	85 d2                	test   %edx,%edx
- 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
- 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4bd:	74 79                	je     538 <printint+0x98>
+ 4e1:	85 d2                	test   %edx,%edx
+ 4e3:	0f 89 7f 00 00 00    	jns    568 <printint+0x98>
+ 4e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4ed:	74 79                	je     568 <printint+0x98>
     neg = 1;
- 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 4c6:	f7 d9                	neg    %ecx
+ 4f6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 4c8:	31 db                	xor    %ebx,%ebx
- 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f8:	31 db                	xor    %ebx,%ebx
+ 4fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 4d0:	89 c8                	mov    %ecx,%eax
- 4d2:	31 d2                	xor    %edx,%edx
- 4d4:	89 cf                	mov    %ecx,%edi
- 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4d9:	0f b6 92 f8 08 00 00 	movzbl 0x8f8(%edx),%edx
- 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4e3:	89 d8                	mov    %ebx,%eax
- 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 500:	89 c8                	mov    %ecx,%eax
+ 502:	31 d2                	xor    %edx,%edx
+ 504:	89 cf                	mov    %ecx,%edi
+ 506:	f7 75 c4             	divl   -0x3c(%ebp)
+ 509:	0f b6 92 28 09 00 00 	movzbl 0x928(%edx),%edx
+ 510:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 513:	89 d8                	mov    %ebx,%eax
+ 515:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 518:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 51b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4f1:	76 dd                	jbe    4d0 <printint+0x30>
+ 51e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 521:	76 dd                	jbe    500 <printint+0x30>
   if(neg)
- 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4f6:	85 c9                	test   %ecx,%ecx
- 4f8:	74 0c                	je     506 <printint+0x66>
+ 523:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 526:	85 c9                	test   %ecx,%ecx
+ 528:	74 0c                	je     536 <printint+0x66>
     buf[i++] = '-';
- 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 52a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4ff:	89 d8                	mov    %ebx,%eax
+ 52f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 531:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 50d:	eb 07                	jmp    516 <printint+0x76>
- 50f:	90                   	nop
- 510:	0f b6 13             	movzbl (%ebx),%edx
- 513:	83 eb 01             	sub    $0x1,%ebx
+ 536:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 539:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 53d:	eb 07                	jmp    546 <printint+0x76>
+ 53f:	90                   	nop
+ 540:	0f b6 13             	movzbl (%ebx),%edx
+ 543:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 516:	83 ec 04             	sub    $0x4,%esp
- 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 51c:	6a 01                	push   $0x1
- 51e:	56                   	push   %esi
- 51f:	57                   	push   %edi
- 520:	e8 ee fe ff ff       	call   413 <write>
+ 546:	83 ec 04             	sub    $0x4,%esp
+ 549:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 54c:	6a 01                	push   $0x1
+ 54e:	56                   	push   %esi
+ 54f:	57                   	push   %edi
+ 550:	e8 be fe ff ff       	call   413 <write>
   while(--i >= 0)
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	39 de                	cmp    %ebx,%esi
- 52a:	75 e4                	jne    510 <printint+0x70>
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	39 de                	cmp    %ebx,%esi
+ 55a:	75 e4                	jne    540 <printint+0x70>
     putc(fd, buf[i]);
 }
- 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 52f:	5b                   	pop    %ebx
- 530:	5e                   	pop    %esi
- 531:	5f                   	pop    %edi
- 532:	5d                   	pop    %ebp
- 533:	c3                   	ret    
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 55f:	5b                   	pop    %ebx
+ 560:	5e                   	pop    %esi
+ 561:	5f                   	pop    %edi
+ 562:	5d                   	pop    %ebp
+ 563:	c3                   	ret    
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 53f:	eb 87                	jmp    4c8 <printint+0x28>
- 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 568:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 56f:	eb 87                	jmp    4f8 <printint+0x28>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
 
-00000550 <printf>:
+00000580 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 550:	f3 0f 1e fb          	endbr32 
- 554:	55                   	push   %ebp
- 555:	89 e5                	mov    %esp,%ebp
- 557:	57                   	push   %edi
- 558:	56                   	push   %esi
- 559:	53                   	push   %ebx
- 55a:	83 ec 2c             	sub    $0x2c,%esp
+ 580:	f3 0f 1e fb          	endbr32 
+ 584:	55                   	push   %ebp
+ 585:	89 e5                	mov    %esp,%ebp
+ 587:	57                   	push   %edi
+ 588:	56                   	push   %esi
+ 589:	53                   	push   %ebx
+ 58a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 55d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 560:	0f b6 1e             	movzbl (%esi),%ebx
- 563:	84 db                	test   %bl,%bl
- 565:	0f 84 b4 00 00 00    	je     61f <printf+0xcf>
+ 58d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 590:	0f b6 1e             	movzbl (%esi),%ebx
+ 593:	84 db                	test   %bl,%bl
+ 595:	0f 84 b4 00 00 00    	je     64f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 56b:	8d 45 10             	lea    0x10(%ebp),%eax
- 56e:	83 c6 01             	add    $0x1,%esi
+ 59b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 59e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 571:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 5a1:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 574:	31 d2                	xor    %edx,%edx
+ 5a4:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 576:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 579:	eb 33                	jmp    5ae <printf+0x5e>
- 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
- 580:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 5a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5a9:	eb 33                	jmp    5de <printf+0x5e>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+ 5b0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 583:	ba 25 00 00 00       	mov    $0x25,%edx
+ 5b3:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 588:	83 f8 25             	cmp    $0x25,%eax
- 58b:	74 17                	je     5a4 <printf+0x54>
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	74 17                	je     5d4 <printf+0x54>
   write(fd, &c, 1);
- 58d:	83 ec 04             	sub    $0x4,%esp
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 593:	6a 01                	push   $0x1
- 595:	57                   	push   %edi
- 596:	ff 75 08             	pushl  0x8(%ebp)
- 599:	e8 75 fe ff ff       	call   413 <write>
- 59e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 5bd:	83 ec 04             	sub    $0x4,%esp
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5c3:	6a 01                	push   $0x1
+ 5c5:	57                   	push   %edi
+ 5c6:	ff 75 08             	pushl  0x8(%ebp)
+ 5c9:	e8 45 fe ff ff       	call   413 <write>
+ 5ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 5a1:	83 c4 10             	add    $0x10,%esp
+ 5d1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 5a4:	0f b6 1e             	movzbl (%esi),%ebx
- 5a7:	83 c6 01             	add    $0x1,%esi
- 5aa:	84 db                	test   %bl,%bl
- 5ac:	74 71                	je     61f <printf+0xcf>
+ 5d4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5d7:	83 c6 01             	add    $0x1,%esi
+ 5da:	84 db                	test   %bl,%bl
+ 5dc:	74 71                	je     64f <printf+0xcf>
     c = fmt[i] & 0xff;
- 5ae:	0f be cb             	movsbl %bl,%ecx
- 5b1:	0f b6 c3             	movzbl %bl,%eax
+ 5de:	0f be cb             	movsbl %bl,%ecx
+ 5e1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 5b4:	85 d2                	test   %edx,%edx
- 5b6:	74 c8                	je     580 <printf+0x30>
+ 5e4:	85 d2                	test   %edx,%edx
+ 5e6:	74 c8                	je     5b0 <printf+0x30>
       }
     } else if(state == '%'){
- 5b8:	83 fa 25             	cmp    $0x25,%edx
- 5bb:	75 e7                	jne    5a4 <printf+0x54>
+ 5e8:	83 fa 25             	cmp    $0x25,%edx
+ 5eb:	75 e7                	jne    5d4 <printf+0x54>
       if(c == 'd'){
- 5bd:	83 f8 64             	cmp    $0x64,%eax
- 5c0:	0f 84 9a 00 00 00    	je     660 <printf+0x110>
+ 5ed:	83 f8 64             	cmp    $0x64,%eax
+ 5f0:	0f 84 9a 00 00 00    	je     690 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 5c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 5cc:	83 f9 70             	cmp    $0x70,%ecx
- 5cf:	74 5f                	je     630 <printf+0xe0>
+ 5f6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5fc:	83 f9 70             	cmp    $0x70,%ecx
+ 5ff:	74 5f                	je     660 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 5d1:	83 f8 73             	cmp    $0x73,%eax
- 5d4:	0f 84 d6 00 00 00    	je     6b0 <printf+0x160>
+ 601:	83 f8 73             	cmp    $0x73,%eax
+ 604:	0f 84 d6 00 00 00    	je     6e0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 5da:	83 f8 63             	cmp    $0x63,%eax
- 5dd:	0f 84 8d 00 00 00    	je     670 <printf+0x120>
+ 60a:	83 f8 63             	cmp    $0x63,%eax
+ 60d:	0f 84 8d 00 00 00    	je     6a0 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 5e3:	83 f8 25             	cmp    $0x25,%eax
- 5e6:	0f 84 b4 00 00 00    	je     6a0 <printf+0x150>
+ 613:	83 f8 25             	cmp    $0x25,%eax
+ 616:	0f 84 b4 00 00 00    	je     6d0 <printf+0x150>
   write(fd, &c, 1);
- 5ec:	83 ec 04             	sub    $0x4,%esp
- 5ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5f3:	6a 01                	push   $0x1
- 5f5:	57                   	push   %edi
- 5f6:	ff 75 08             	pushl  0x8(%ebp)
- 5f9:	e8 15 fe ff ff       	call   413 <write>
+ 61c:	83 ec 04             	sub    $0x4,%esp
+ 61f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 623:	6a 01                	push   $0x1
+ 625:	57                   	push   %edi
+ 626:	ff 75 08             	pushl  0x8(%ebp)
+ 629:	e8 e5 fd ff ff       	call   413 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 5fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 62e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 601:	83 c4 0c             	add    $0xc,%esp
- 604:	6a 01                	push   $0x1
- 606:	83 c6 01             	add    $0x1,%esi
- 609:	57                   	push   %edi
- 60a:	ff 75 08             	pushl  0x8(%ebp)
- 60d:	e8 01 fe ff ff       	call   413 <write>
+ 631:	83 c4 0c             	add    $0xc,%esp
+ 634:	6a 01                	push   $0x1
+ 636:	83 c6 01             	add    $0x1,%esi
+ 639:	57                   	push   %edi
+ 63a:	ff 75 08             	pushl  0x8(%ebp)
+ 63d:	e8 d1 fd ff ff       	call   413 <write>
   for(i = 0; fmt[i]; i++){
- 612:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 642:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 616:	83 c4 10             	add    $0x10,%esp
+ 646:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 619:	31 d2                	xor    %edx,%edx
+ 649:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 61b:	84 db                	test   %bl,%bl
- 61d:	75 8f                	jne    5ae <printf+0x5e>
+ 64b:	84 db                	test   %bl,%bl
+ 64d:	75 8f                	jne    5de <printf+0x5e>
     }
   }
 }
- 61f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 622:	5b                   	pop    %ebx
- 623:	5e                   	pop    %esi
- 624:	5f                   	pop    %edi
- 625:	5d                   	pop    %ebp
- 626:	c3                   	ret    
- 627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 62e:	66 90                	xchg   %ax,%ax
+ 64f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 652:	5b                   	pop    %ebx
+ 653:	5e                   	pop    %esi
+ 654:	5f                   	pop    %edi
+ 655:	5d                   	pop    %ebp
+ 656:	c3                   	ret    
+ 657:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 630:	83 ec 0c             	sub    $0xc,%esp
- 633:	b9 10 00 00 00       	mov    $0x10,%ecx
- 638:	6a 00                	push   $0x0
- 63a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 63d:	8b 45 08             	mov    0x8(%ebp),%eax
- 640:	8b 13                	mov    (%ebx),%edx
- 642:	e8 59 fe ff ff       	call   4a0 <printint>
+ 660:	83 ec 0c             	sub    $0xc,%esp
+ 663:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 668:	6a 00                	push   $0x0
+ 66a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 66d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 670:	8b 13                	mov    (%ebx),%edx
+ 672:	e8 59 fe ff ff       	call   4d0 <printint>
         ap++;
- 647:	89 d8                	mov    %ebx,%eax
- 649:	83 c4 10             	add    $0x10,%esp
+ 677:	89 d8                	mov    %ebx,%eax
+ 679:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 64c:	31 d2                	xor    %edx,%edx
+ 67c:	31 d2                	xor    %edx,%edx
         ap++;
- 64e:	83 c0 04             	add    $0x4,%eax
- 651:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 654:	e9 4b ff ff ff       	jmp    5a4 <printf+0x54>
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67e:	83 c0 04             	add    $0x4,%eax
+ 681:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 684:	e9 4b ff ff ff       	jmp    5d4 <printf+0x54>
+ 689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 660:	83 ec 0c             	sub    $0xc,%esp
- 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 668:	6a 01                	push   $0x1
- 66a:	eb ce                	jmp    63a <printf+0xea>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	eb ce                	jmp    66a <printf+0xea>
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 670:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 6a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 673:	83 ec 04             	sub    $0x4,%esp
+ 6a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 676:	8b 03                	mov    (%ebx),%eax
+ 6a6:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 678:	6a 01                	push   $0x1
+ 6a8:	6a 01                	push   $0x1
         ap++;
- 67a:	83 c3 04             	add    $0x4,%ebx
+ 6aa:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 67d:	57                   	push   %edi
- 67e:	ff 75 08             	pushl  0x8(%ebp)
+ 6ad:	57                   	push   %edi
+ 6ae:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 681:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6b1:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 684:	e8 8a fd ff ff       	call   413 <write>
+ 6b4:	e8 5a fd ff ff       	call   413 <write>
         ap++;
- 689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 68c:	83 c4 10             	add    $0x10,%esp
+ 6b9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6bc:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 0e ff ff ff       	jmp    5a4 <printf+0x54>
- 696:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6bf:	31 d2                	xor    %edx,%edx
+ 6c1:	e9 0e ff ff ff       	jmp    5d4 <printf+0x54>
+ 6c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 6a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6d0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 6a3:	83 ec 04             	sub    $0x4,%esp
- 6a6:	e9 59 ff ff ff       	jmp    604 <printf+0xb4>
- 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6af:	90                   	nop
+ 6d3:	83 ec 04             	sub    $0x4,%esp
+ 6d6:	e9 59 ff ff ff       	jmp    634 <printf+0xb4>
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
         s = (char*)*ap;
- 6b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 6b3:	8b 18                	mov    (%eax),%ebx
+ 6e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6e3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 6b5:	83 c0 04             	add    $0x4,%eax
- 6b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6e5:	83 c0 04             	add    $0x4,%eax
+ 6e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 6bb:	85 db                	test   %ebx,%ebx
- 6bd:	74 17                	je     6d6 <printf+0x186>
+ 6eb:	85 db                	test   %ebx,%ebx
+ 6ed:	74 17                	je     706 <printf+0x186>
         while(*s != 0){
- 6bf:	0f b6 03             	movzbl (%ebx),%eax
+ 6ef:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 6c2:	31 d2                	xor    %edx,%edx
+ 6f2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 6c4:	84 c0                	test   %al,%al
- 6c6:	0f 84 d8 fe ff ff    	je     5a4 <printf+0x54>
- 6cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6cf:	89 de                	mov    %ebx,%esi
- 6d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6d4:	eb 1a                	jmp    6f0 <printf+0x1a0>
+ 6f4:	84 c0                	test   %al,%al
+ 6f6:	0f 84 d8 fe ff ff    	je     5d4 <printf+0x54>
+ 6fc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ff:	89 de                	mov    %ebx,%esi
+ 701:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 704:	eb 1a                	jmp    720 <printf+0x1a0>
           s = "(null)";
- 6d6:	bb ef 08 00 00       	mov    $0x8ef,%ebx
+ 706:	bb 1f 09 00 00       	mov    $0x91f,%ebx
         while(*s != 0){
- 6db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6de:	b8 28 00 00 00       	mov    $0x28,%eax
- 6e3:	89 de                	mov    %ebx,%esi
- 6e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
+ 70b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 70e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 713:	89 de                	mov    %ebx,%esi
+ 715:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
   write(fd, &c, 1);
- 6f0:	83 ec 04             	sub    $0x4,%esp
+ 720:	83 ec 04             	sub    $0x4,%esp
           s++;
- 6f3:	83 c6 01             	add    $0x1,%esi
- 6f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 723:	83 c6 01             	add    $0x1,%esi
+ 726:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 6f9:	6a 01                	push   $0x1
- 6fb:	57                   	push   %edi
- 6fc:	53                   	push   %ebx
- 6fd:	e8 11 fd ff ff       	call   413 <write>
+ 729:	6a 01                	push   $0x1
+ 72b:	57                   	push   %edi
+ 72c:	53                   	push   %ebx
+ 72d:	e8 e1 fc ff ff       	call   413 <write>
         while(*s != 0){
- 702:	0f b6 06             	movzbl (%esi),%eax
- 705:	83 c4 10             	add    $0x10,%esp
- 708:	84 c0                	test   %al,%al
- 70a:	75 e4                	jne    6f0 <printf+0x1a0>
- 70c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 732:	0f b6 06             	movzbl (%esi),%eax
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	84 c0                	test   %al,%al
+ 73a:	75 e4                	jne    720 <printf+0x1a0>
+ 73c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 70f:	31 d2                	xor    %edx,%edx
- 711:	e9 8e fe ff ff       	jmp    5a4 <printf+0x54>
- 716:	66 90                	xchg   %ax,%ax
- 718:	66 90                	xchg   %ax,%ax
- 71a:	66 90                	xchg   %ax,%ax
- 71c:	66 90                	xchg   %ax,%ax
- 71e:	66 90                	xchg   %ax,%ax
+ 73f:	31 d2                	xor    %edx,%edx
+ 741:	e9 8e fe ff ff       	jmp    5d4 <printf+0x54>
+ 746:	66 90                	xchg   %ax,%ax
+ 748:	66 90                	xchg   %ax,%ax
+ 74a:	66 90                	xchg   %ax,%ax
+ 74c:	66 90                	xchg   %ax,%ax
+ 74e:	66 90                	xchg   %ax,%ax
 
-00000720 <free>:
+00000750 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 720:	f3 0f 1e fb          	endbr32 
- 724:	55                   	push   %ebp
+ 750:	f3 0f 1e fb          	endbr32 
+ 754:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 725:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 755:	a1 20 0c 00 00       	mov    0xc20,%eax
 {
- 72a:	89 e5                	mov    %esp,%ebp
- 72c:	57                   	push   %edi
- 72d:	56                   	push   %esi
- 72e:	53                   	push   %ebx
- 72f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 732:	8b 10                	mov    (%eax),%edx
+ 75a:	89 e5                	mov    %esp,%ebp
+ 75c:	57                   	push   %edi
+ 75d:	56                   	push   %esi
+ 75e:	53                   	push   %ebx
+ 75f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 762:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 734:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 764:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 737:	39 c8                	cmp    %ecx,%eax
- 739:	73 15                	jae    750 <free+0x30>
- 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 73f:	90                   	nop
- 740:	39 d1                	cmp    %edx,%ecx
- 742:	72 14                	jb     758 <free+0x38>
+ 767:	39 c8                	cmp    %ecx,%eax
+ 769:	73 15                	jae    780 <free+0x30>
+ 76b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+ 770:	39 d1                	cmp    %edx,%ecx
+ 772:	72 14                	jb     788 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 744:	39 d0                	cmp    %edx,%eax
- 746:	73 10                	jae    758 <free+0x38>
+ 774:	39 d0                	cmp    %edx,%eax
+ 776:	73 10                	jae    788 <free+0x38>
 {
- 748:	89 d0                	mov    %edx,%eax
+ 778:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 74a:	8b 10                	mov    (%eax),%edx
- 74c:	39 c8                	cmp    %ecx,%eax
- 74e:	72 f0                	jb     740 <free+0x20>
+ 77a:	8b 10                	mov    (%eax),%edx
+ 77c:	39 c8                	cmp    %ecx,%eax
+ 77e:	72 f0                	jb     770 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 750:	39 d0                	cmp    %edx,%eax
- 752:	72 f4                	jb     748 <free+0x28>
- 754:	39 d1                	cmp    %edx,%ecx
- 756:	73 f0                	jae    748 <free+0x28>
+ 780:	39 d0                	cmp    %edx,%eax
+ 782:	72 f4                	jb     778 <free+0x28>
+ 784:	39 d1                	cmp    %edx,%ecx
+ 786:	73 f0                	jae    778 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 758:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 75b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 75e:	39 fa                	cmp    %edi,%edx
- 760:	74 1e                	je     780 <free+0x60>
+ 788:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 78b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 78e:	39 fa                	cmp    %edi,%edx
+ 790:	74 1e                	je     7b0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 762:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 792:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 765:	8b 50 04             	mov    0x4(%eax),%edx
- 768:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 76b:	39 f1                	cmp    %esi,%ecx
- 76d:	74 28                	je     797 <free+0x77>
+ 795:	8b 50 04             	mov    0x4(%eax),%edx
+ 798:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 79b:	39 f1                	cmp    %esi,%ecx
+ 79d:	74 28                	je     7c7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 76f:	89 08                	mov    %ecx,(%eax)
+ 79f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 771:	5b                   	pop    %ebx
+ 7a1:	5b                   	pop    %ebx
   freep = p;
- 772:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 7a2:	a3 20 0c 00 00       	mov    %eax,0xc20
 }
- 777:	5e                   	pop    %esi
- 778:	5f                   	pop    %edi
- 779:	5d                   	pop    %ebp
- 77a:	c3                   	ret    
- 77b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 77f:	90                   	nop
+ 7a7:	5e                   	pop    %esi
+ 7a8:	5f                   	pop    %edi
+ 7a9:	5d                   	pop    %ebp
+ 7aa:	c3                   	ret    
+ 7ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7af:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 780:	03 72 04             	add    0x4(%edx),%esi
- 783:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 7b0:	03 72 04             	add    0x4(%edx),%esi
+ 7b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 786:	8b 10                	mov    (%eax),%edx
- 788:	8b 12                	mov    (%edx),%edx
- 78a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 7b6:	8b 10                	mov    (%eax),%edx
+ 7b8:	8b 12                	mov    (%edx),%edx
+ 7ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 78d:	8b 50 04             	mov    0x4(%eax),%edx
- 790:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 793:	39 f1                	cmp    %esi,%ecx
- 795:	75 d8                	jne    76f <free+0x4f>
+ 7bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 7c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7c3:	39 f1                	cmp    %esi,%ecx
+ 7c5:	75 d8                	jne    79f <free+0x4f>
     p->s.size += bp->s.size;
- 797:	03 53 fc             	add    -0x4(%ebx),%edx
+ 7c7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 79a:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 7ca:	a3 20 0c 00 00       	mov    %eax,0xc20
     p->s.size += bp->s.size;
- 79f:	89 50 04             	mov    %edx,0x4(%eax)
+ 7cf:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 7a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 7a5:	89 10                	mov    %edx,(%eax)
+ 7d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7d5:	89 10                	mov    %edx,(%eax)
 }
- 7a7:	5b                   	pop    %ebx
- 7a8:	5e                   	pop    %esi
- 7a9:	5f                   	pop    %edi
- 7aa:	5d                   	pop    %ebp
- 7ab:	c3                   	ret    
- 7ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7d7:	5b                   	pop    %ebx
+ 7d8:	5e                   	pop    %esi
+ 7d9:	5f                   	pop    %edi
+ 7da:	5d                   	pop    %ebp
+ 7db:	c3                   	ret    
+ 7dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000007b0 <malloc>:
+000007e0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7b0:	f3 0f 1e fb          	endbr32 
- 7b4:	55                   	push   %ebp
- 7b5:	89 e5                	mov    %esp,%ebp
- 7b7:	57                   	push   %edi
- 7b8:	56                   	push   %esi
- 7b9:	53                   	push   %ebx
- 7ba:	83 ec 1c             	sub    $0x1c,%esp
+ 7e0:	f3 0f 1e fb          	endbr32 
+ 7e4:	55                   	push   %ebp
+ 7e5:	89 e5                	mov    %esp,%ebp
+ 7e7:	57                   	push   %edi
+ 7e8:	56                   	push   %esi
+ 7e9:	53                   	push   %ebx
+ 7ea:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 7c0:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 7f0:	8b 3d 20 0c 00 00    	mov    0xc20,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7c6:	8d 70 07             	lea    0x7(%eax),%esi
- 7c9:	c1 ee 03             	shr    $0x3,%esi
- 7cc:	83 c6 01             	add    $0x1,%esi
+ 7f6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7f9:	c1 ee 03             	shr    $0x3,%esi
+ 7fc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 7cf:	85 ff                	test   %edi,%edi
- 7d1:	0f 84 a9 00 00 00    	je     880 <malloc+0xd0>
+ 7ff:	85 ff                	test   %edi,%edi
+ 801:	0f 84 a9 00 00 00    	je     8b0 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d7:	8b 07                	mov    (%edi),%eax
+ 807:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 7d9:	8b 48 04             	mov    0x4(%eax),%ecx
- 7dc:	39 f1                	cmp    %esi,%ecx
- 7de:	73 6d                	jae    84d <malloc+0x9d>
- 7e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 7e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7eb:	0f 43 de             	cmovae %esi,%ebx
+ 809:	8b 48 04             	mov    0x4(%eax),%ecx
+ 80c:	39 f1                	cmp    %esi,%ecx
+ 80e:	73 6d                	jae    87d <malloc+0x9d>
+ 810:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 816:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 81b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 7ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7f8:	eb 17                	jmp    811 <malloc+0x61>
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 81e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 825:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 828:	eb 17                	jmp    841 <malloc+0x61>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 800:	8b 10                	mov    (%eax),%edx
+ 830:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 802:	8b 4a 04             	mov    0x4(%edx),%ecx
- 805:	39 f1                	cmp    %esi,%ecx
- 807:	73 4f                	jae    858 <malloc+0xa8>
- 809:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
- 80f:	89 d0                	mov    %edx,%eax
+ 832:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 835:	39 f1                	cmp    %esi,%ecx
+ 837:	73 4f                	jae    888 <malloc+0xa8>
+ 839:	8b 3d 20 0c 00 00    	mov    0xc20,%edi
+ 83f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 811:	39 c7                	cmp    %eax,%edi
- 813:	75 eb                	jne    800 <malloc+0x50>
+ 841:	39 c7                	cmp    %eax,%edi
+ 843:	75 eb                	jne    830 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 815:	83 ec 0c             	sub    $0xc,%esp
- 818:	ff 75 e4             	pushl  -0x1c(%ebp)
- 81b:	e8 5b fc ff ff       	call   47b <sbrk>
+ 845:	83 ec 0c             	sub    $0xc,%esp
+ 848:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 84b:	e8 2b fc ff ff       	call   47b <sbrk>
   if(p == (char*)-1)
- 820:	83 c4 10             	add    $0x10,%esp
- 823:	83 f8 ff             	cmp    $0xffffffff,%eax
- 826:	74 1b                	je     843 <malloc+0x93>
+ 850:	83 c4 10             	add    $0x10,%esp
+ 853:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 856:	74 1b                	je     873 <malloc+0x93>
   hp->s.size = nu;
- 828:	89 58 04             	mov    %ebx,0x4(%eax)
+ 858:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 82b:	83 ec 0c             	sub    $0xc,%esp
- 82e:	83 c0 08             	add    $0x8,%eax
- 831:	50                   	push   %eax
- 832:	e8 e9 fe ff ff       	call   720 <free>
+ 85b:	83 ec 0c             	sub    $0xc,%esp
+ 85e:	83 c0 08             	add    $0x8,%eax
+ 861:	50                   	push   %eax
+ 862:	e8 e9 fe ff ff       	call   750 <free>
   return freep;
- 837:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 867:	a1 20 0c 00 00       	mov    0xc20,%eax
       if((p = morecore(nunits)) == 0)
- 83c:	83 c4 10             	add    $0x10,%esp
- 83f:	85 c0                	test   %eax,%eax
- 841:	75 bd                	jne    800 <malloc+0x50>
+ 86c:	83 c4 10             	add    $0x10,%esp
+ 86f:	85 c0                	test   %eax,%eax
+ 871:	75 bd                	jne    830 <malloc+0x50>
         return 0;
   }
 }
- 843:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 873:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 846:	31 c0                	xor    %eax,%eax
+ 876:	31 c0                	xor    %eax,%eax
 }
- 848:	5b                   	pop    %ebx
- 849:	5e                   	pop    %esi
- 84a:	5f                   	pop    %edi
- 84b:	5d                   	pop    %ebp
- 84c:	c3                   	ret    
+ 878:	5b                   	pop    %ebx
+ 879:	5e                   	pop    %esi
+ 87a:	5f                   	pop    %edi
+ 87b:	5d                   	pop    %ebp
+ 87c:	c3                   	ret    
     if(p->s.size >= nunits){
- 84d:	89 c2                	mov    %eax,%edx
- 84f:	89 f8                	mov    %edi,%eax
- 851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	89 c2                	mov    %eax,%edx
+ 87f:	89 f8                	mov    %edi,%eax
+ 881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 858:	39 ce                	cmp    %ecx,%esi
- 85a:	74 54                	je     8b0 <malloc+0x100>
+ 888:	39 ce                	cmp    %ecx,%esi
+ 88a:	74 54                	je     8e0 <malloc+0x100>
         p->s.size -= nunits;
- 85c:	29 f1                	sub    %esi,%ecx
- 85e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 88c:	29 f1                	sub    %esi,%ecx
+ 88e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 861:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 891:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 864:	89 72 04             	mov    %esi,0x4(%edx)
+ 894:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 867:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 897:	a3 20 0c 00 00       	mov    %eax,0xc20
 }
- 86c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 89c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 86f:	8d 42 08             	lea    0x8(%edx),%eax
+ 89f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 872:	5b                   	pop    %ebx
- 873:	5e                   	pop    %esi
- 874:	5f                   	pop    %edi
- 875:	5d                   	pop    %ebp
- 876:	c3                   	ret    
- 877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 87e:	66 90                	xchg   %ax,%ax
+ 8a2:	5b                   	pop    %ebx
+ 8a3:	5e                   	pop    %esi
+ 8a4:	5f                   	pop    %edi
+ 8a5:	5d                   	pop    %ebp
+ 8a6:	c3                   	ret    
+ 8a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ae:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 880:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
- 887:	0b 00 00 
+ 8b0:	c7 05 20 0c 00 00 24 	movl   $0xc24,0xc20
+ 8b7:	0c 00 00 
     base.s.size = 0;
- 88a:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+ 8ba:	bf 24 0c 00 00       	mov    $0xc24,%edi
     base.s.ptr = freep = prevp = &base;
- 88f:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
- 896:	0b 00 00 
+ 8bf:	c7 05 24 0c 00 00 24 	movl   $0xc24,0xc24
+ 8c6:	0c 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 899:	89 f8                	mov    %edi,%eax
+ 8c9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 89b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
- 8a2:	00 00 00 
+ 8cb:	c7 05 28 0c 00 00 00 	movl   $0x0,0xc28
+ 8d2:	00 00 00 
     if(p->s.size >= nunits){
- 8a5:	e9 36 ff ff ff       	jmp    7e0 <malloc+0x30>
- 8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8d5:	e9 36 ff ff ff       	jmp    810 <malloc+0x30>
+ 8da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 8b0:	8b 0a                	mov    (%edx),%ecx
- 8b2:	89 08                	mov    %ecx,(%eax)
- 8b4:	eb b1                	jmp    867 <malloc+0xb7>
+ 8e0:	8b 0a                	mov    (%edx),%ecx
+ 8e2:	89 08                	mov    %ecx,(%eax)
+ 8e4:	eb b1                	jmp    897 <malloc+0xb7>
Binary files xv6-public/wc.o and xv6-public-hybrid/wc.o differ
diff -u xv6-public/wc.sym xv6-public-hybrid/wc.sym
--- xv6-public/wc.sym	2022-10-07 20:01:02.378189977 +0530
+++ xv6-public-hybrid/wc.sym	2022-10-07 18:39:48.065103000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000008b8 .rodata
-0000090c .eh_frame
-00000be0 .bss
+000008e8 .rodata
+0000093c .eh_frame
+00000c20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-000004a0 printint
-000008f8 digits.1085
+000004d0 printint
+00000928 digits.1100
 00000000 umalloc.c
-00000be0 freep
-00000be4 base
+00000c20 freep
+00000c24 base
 00000190 strcpy
-00000550 printf
+00000580 printf
 000003c0 memmove
 0000043b mknod
+00000493 wolfie
 000002b0 gets
 00000473 getpid
-000007b0 malloc
+000007e0 malloc
 00000483 sleep
+000004b3 get_burst_time
 00000403 pipe
 00000413 write
 0000044b fstat
@@ -39,15 +41,19 @@
 000003eb fork
 0000047b sbrk
 0000048b uptime
-00000be0 __bss_start
+00000c10 __bss_start
 00000250 memset
 00000000 main
+000004bb set_burst_time
 000001c0 strcmp
 0000046b dup
-00000c00 buf
+000004a3 getMaxPid
+00000c40 buf
+0000049b getNumProc
+000004ab getProcInfo
 00000330 stat
-00000be0 _edata
-00000e00 _end
+00000c10 _edata
+00000e40 _end
 00000453 link
 000003f3 exit
 00000380 atoi
@@ -56,4 +62,4 @@
 00000270 strchr
 0000045b mkdir
 0000041b close
-00000720 free
+00000750 free
Binary files xv6-public/xv6.img and xv6-public-hybrid/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-hybrid/_zombie differ
diff -u xv6-public/zombie.asm xv6-public-hybrid/zombie.asm
--- xv6-public/zombie.asm	2022-10-07 20:01:02.450199620 +0530
+++ xv6-public-hybrid/zombie.asm	2022-10-07 18:39:48.105121000 +0530
@@ -557,609 +557,645 @@
  32b:	b8 0e 00 00 00       	mov    $0xe,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
- 333:	66 90                	xchg   %ax,%ax
- 335:	66 90                	xchg   %ax,%ax
- 337:	66 90                	xchg   %ax,%ax
- 339:	66 90                	xchg   %ax,%ax
- 33b:	66 90                	xchg   %ax,%ax
- 33d:	66 90                	xchg   %ax,%ax
- 33f:	90                   	nop
 
-00000340 <printint>:
+00000333 <wolfie>:
+SYSCALL(wolfie)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getNumProc>:
+SYSCALL(getNumProc)
+ 33b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getMaxPid>:
+SYSCALL(getMaxPid)
+ 343:	b8 17 00 00 00       	mov    $0x17,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <getProcInfo>:
+SYSCALL(getProcInfo)
+ 34b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 353:	b8 19 00 00 00       	mov    $0x19,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 35b:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 340:	55                   	push   %ebp
- 341:	89 e5                	mov    %esp,%ebp
- 343:	57                   	push   %edi
- 344:	56                   	push   %esi
- 345:	53                   	push   %ebx
- 346:	83 ec 3c             	sub    $0x3c,%esp
- 349:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+ 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 34c:	89 d1                	mov    %edx,%ecx
+ 37c:	89 d1                	mov    %edx,%ecx
 {
- 34e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 351:	85 d2                	test   %edx,%edx
- 353:	0f 89 7f 00 00 00    	jns    3d8 <printint+0x98>
- 359:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 35d:	74 79                	je     3d8 <printint+0x98>
+ 381:	85 d2                	test   %edx,%edx
+ 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
+ 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38d:	74 79                	je     408 <printint+0x98>
     neg = 1;
- 35f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 366:	f7 d9                	neg    %ecx
+ 396:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 368:	31 db                	xor    %ebx,%ebx
- 36a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 36d:	8d 76 00             	lea    0x0(%esi),%esi
+ 398:	31 db                	xor    %ebx,%ebx
+ 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 370:	89 c8                	mov    %ecx,%eax
- 372:	31 d2                	xor    %edx,%edx
- 374:	89 cf                	mov    %ecx,%edi
- 376:	f7 75 c4             	divl   -0x3c(%ebp)
- 379:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
- 380:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 383:	89 d8                	mov    %ebx,%eax
- 385:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3a0:	89 c8                	mov    %ecx,%eax
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	89 cf                	mov    %ecx,%edi
+ 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3a9:	0f b6 92 90 07 00 00 	movzbl 0x790(%edx),%edx
+ 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3b3:	89 d8                	mov    %ebx,%eax
+ 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 388:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 38b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 38e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 391:	76 dd                	jbe    370 <printint+0x30>
+ 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3c1:	76 dd                	jbe    3a0 <printint+0x30>
   if(neg)
- 393:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 396:	85 c9                	test   %ecx,%ecx
- 398:	74 0c                	je     3a6 <printint+0x66>
+ 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3c6:	85 c9                	test   %ecx,%ecx
+ 3c8:	74 0c                	je     3d6 <printint+0x66>
     buf[i++] = '-';
- 39a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 39f:	89 d8                	mov    %ebx,%eax
+ 3cf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ad:	eb 07                	jmp    3b6 <printint+0x76>
- 3af:	90                   	nop
- 3b0:	0f b6 13             	movzbl (%ebx),%edx
- 3b3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 3b6:	83 ec 04             	sub    $0x4,%esp
- 3b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3bc:	6a 01                	push   $0x1
- 3be:	56                   	push   %esi
- 3bf:	57                   	push   %edi
- 3c0:	e8 ee fe ff ff       	call   2b3 <write>
+ 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3dd:	eb 07                	jmp    3e6 <printint+0x76>
+ 3df:	90                   	nop
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 be fe ff ff       	call   2b3 <write>
   while(--i >= 0)
- 3c5:	83 c4 10             	add    $0x10,%esp
- 3c8:	39 de                	cmp    %ebx,%esi
- 3ca:	75 e4                	jne    3b0 <printint+0x70>
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3cf:	5b                   	pop    %ebx
- 3d0:	5e                   	pop    %esi
- 3d1:	5f                   	pop    %edi
- 3d2:	5d                   	pop    %ebp
- 3d3:	c3                   	ret    
- 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3df:	eb 87                	jmp    368 <printint+0x28>
- 3e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ef:	90                   	nop
+ 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 40f:	eb 87                	jmp    398 <printint+0x28>
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
 
-000003f0 <printf>:
+00000420 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	f3 0f 1e fb          	endbr32 
- 3f4:	55                   	push   %ebp
- 3f5:	89 e5                	mov    %esp,%ebp
- 3f7:	57                   	push   %edi
- 3f8:	56                   	push   %esi
- 3f9:	53                   	push   %ebx
- 3fa:	83 ec 2c             	sub    $0x2c,%esp
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	56                   	push   %esi
+ 429:	53                   	push   %ebx
+ 42a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 400:	0f b6 1e             	movzbl (%esi),%ebx
- 403:	84 db                	test   %bl,%bl
- 405:	0f 84 b4 00 00 00    	je     4bf <printf+0xcf>
+ 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 430:	0f b6 1e             	movzbl (%esi),%ebx
+ 433:	84 db                	test   %bl,%bl
+ 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 40b:	8d 45 10             	lea    0x10(%ebp),%eax
- 40e:	83 c6 01             	add    $0x1,%esi
+ 43b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 411:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 414:	31 d2                	xor    %edx,%edx
+ 444:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 416:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 419:	eb 33                	jmp    44e <printf+0x5e>
- 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
- 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 449:	eb 33                	jmp    47e <printf+0x5e>
+ 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 423:	ba 25 00 00 00       	mov    $0x25,%edx
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 428:	83 f8 25             	cmp    $0x25,%eax
- 42b:	74 17                	je     444 <printf+0x54>
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
   write(fd, &c, 1);
- 42d:	83 ec 04             	sub    $0x4,%esp
- 430:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 433:	6a 01                	push   $0x1
- 435:	57                   	push   %edi
- 436:	ff 75 08             	pushl  0x8(%ebp)
- 439:	e8 75 fe ff ff       	call   2b3 <write>
- 43e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 45 fe ff ff       	call   2b3 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 441:	83 c4 10             	add    $0x10,%esp
+ 471:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 444:	0f b6 1e             	movzbl (%esi),%ebx
- 447:	83 c6 01             	add    $0x1,%esi
- 44a:	84 db                	test   %bl,%bl
- 44c:	74 71                	je     4bf <printf+0xcf>
+ 474:	0f b6 1e             	movzbl (%esi),%ebx
+ 477:	83 c6 01             	add    $0x1,%esi
+ 47a:	84 db                	test   %bl,%bl
+ 47c:	74 71                	je     4ef <printf+0xcf>
     c = fmt[i] & 0xff;
- 44e:	0f be cb             	movsbl %bl,%ecx
- 451:	0f b6 c3             	movzbl %bl,%eax
+ 47e:	0f be cb             	movsbl %bl,%ecx
+ 481:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 454:	85 d2                	test   %edx,%edx
- 456:	74 c8                	je     420 <printf+0x30>
+ 484:	85 d2                	test   %edx,%edx
+ 486:	74 c8                	je     450 <printf+0x30>
       }
     } else if(state == '%'){
- 458:	83 fa 25             	cmp    $0x25,%edx
- 45b:	75 e7                	jne    444 <printf+0x54>
+ 488:	83 fa 25             	cmp    $0x25,%edx
+ 48b:	75 e7                	jne    474 <printf+0x54>
       if(c == 'd'){
- 45d:	83 f8 64             	cmp    $0x64,%eax
- 460:	0f 84 9a 00 00 00    	je     500 <printf+0x110>
+ 48d:	83 f8 64             	cmp    $0x64,%eax
+ 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 466:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 46c:	83 f9 70             	cmp    $0x70,%ecx
- 46f:	74 5f                	je     4d0 <printf+0xe0>
+ 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49c:	83 f9 70             	cmp    $0x70,%ecx
+ 49f:	74 5f                	je     500 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 471:	83 f8 73             	cmp    $0x73,%eax
- 474:	0f 84 d6 00 00 00    	je     550 <printf+0x160>
+ 4a1:	83 f8 73             	cmp    $0x73,%eax
+ 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 47a:	83 f8 63             	cmp    $0x63,%eax
- 47d:	0f 84 8d 00 00 00    	je     510 <printf+0x120>
+ 4aa:	83 f8 63             	cmp    $0x63,%eax
+ 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 483:	83 f8 25             	cmp    $0x25,%eax
- 486:	0f 84 b4 00 00 00    	je     540 <printf+0x150>
+ 4b3:	83 f8 25             	cmp    $0x25,%eax
+ 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
   write(fd, &c, 1);
- 48c:	83 ec 04             	sub    $0x4,%esp
- 48f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	ff 75 08             	pushl  0x8(%ebp)
- 499:	e8 15 fe ff ff       	call   2b3 <write>
+ 4bc:	83 ec 04             	sub    $0x4,%esp
+ 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	ff 75 08             	pushl  0x8(%ebp)
+ 4c9:	e8 e5 fd ff ff       	call   2b3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 49e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4a1:	83 c4 0c             	add    $0xc,%esp
- 4a4:	6a 01                	push   $0x1
- 4a6:	83 c6 01             	add    $0x1,%esi
- 4a9:	57                   	push   %edi
- 4aa:	ff 75 08             	pushl  0x8(%ebp)
- 4ad:	e8 01 fe ff ff       	call   2b3 <write>
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	83 c6 01             	add    $0x1,%esi
+ 4d9:	57                   	push   %edi
+ 4da:	ff 75 08             	pushl  0x8(%ebp)
+ 4dd:	e8 d1 fd ff ff       	call   2b3 <write>
   for(i = 0; fmt[i]; i++){
- 4b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4b6:	83 c4 10             	add    $0x10,%esp
+ 4e6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4b9:	31 d2                	xor    %edx,%edx
+ 4e9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4bb:	84 db                	test   %bl,%bl
- 4bd:	75 8f                	jne    44e <printf+0x5e>
+ 4eb:	84 db                	test   %bl,%bl
+ 4ed:	75 8f                	jne    47e <printf+0x5e>
     }
   }
 }
- 4bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4c2:	5b                   	pop    %ebx
- 4c3:	5e                   	pop    %esi
- 4c4:	5f                   	pop    %edi
- 4c5:	5d                   	pop    %ebp
- 4c6:	c3                   	ret    
- 4c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ce:	66 90                	xchg   %ax,%ax
+ 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f2:	5b                   	pop    %ebx
+ 4f3:	5e                   	pop    %esi
+ 4f4:	5f                   	pop    %edi
+ 4f5:	5d                   	pop    %ebp
+ 4f6:	c3                   	ret    
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 4d0:	83 ec 0c             	sub    $0xc,%esp
- 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4d8:	6a 00                	push   $0x0
- 4da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4dd:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e0:	8b 13                	mov    (%ebx),%edx
- 4e2:	e8 59 fe ff ff       	call   340 <printint>
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 59 fe ff ff       	call   370 <printint>
         ap++;
- 4e7:	89 d8                	mov    %ebx,%eax
- 4e9:	83 c4 10             	add    $0x10,%esp
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4ec:	31 d2                	xor    %edx,%edx
+ 51c:	31 d2                	xor    %edx,%edx
         ap++;
- 4ee:	83 c0 04             	add    $0x4,%eax
- 4f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f4:	e9 4b ff ff ff       	jmp    444 <printf+0x54>
- 4f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 508:	6a 01                	push   $0x1
- 50a:	eb ce                	jmp    4da <printf+0xea>
- 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 510:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 513:	83 ec 04             	sub    $0x4,%esp
+ 543:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 516:	8b 03                	mov    (%ebx),%eax
+ 546:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 518:	6a 01                	push   $0x1
+ 548:	6a 01                	push   $0x1
         ap++;
- 51a:	83 c3 04             	add    $0x4,%ebx
+ 54a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 51d:	57                   	push   %edi
- 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 521:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 524:	e8 8a fd ff ff       	call   2b3 <write>
+ 554:	e8 5a fd ff ff       	call   2b3 <write>
         ap++;
- 529:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 52c:	83 c4 10             	add    $0x10,%esp
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52f:	31 d2                	xor    %edx,%edx
- 531:	e9 0e ff ff ff       	jmp    444 <printf+0x54>
- 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 543:	83 ec 04             	sub    $0x4,%esp
- 546:	e9 59 ff ff ff       	jmp    4a4 <printf+0xb4>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
         s = (char*)*ap;
- 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 553:	8b 18                	mov    (%eax),%ebx
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
         ap++;
- 555:	83 c0 04             	add    $0x4,%eax
- 558:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 55b:	85 db                	test   %ebx,%ebx
- 55d:	74 17                	je     576 <printf+0x186>
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
         while(*s != 0){
- 55f:	0f b6 03             	movzbl (%ebx),%eax
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 562:	31 d2                	xor    %edx,%edx
+ 592:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 564:	84 c0                	test   %al,%al
- 566:	0f 84 d8 fe ff ff    	je     444 <printf+0x54>
- 56c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 56f:	89 de                	mov    %ebx,%esi
- 571:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 574:	eb 1a                	jmp    590 <printf+0x1a0>
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
           s = "(null)";
- 576:	bb 58 07 00 00       	mov    $0x758,%ebx
+ 5a6:	bb 88 07 00 00       	mov    $0x788,%ebx
         while(*s != 0){
- 57b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 57e:	b8 28 00 00 00       	mov    $0x28,%eax
- 583:	89 de                	mov    %ebx,%esi
- 585:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58f:	90                   	nop
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
   write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
+ 5c0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 593:	83 c6 01             	add    $0x1,%esi
- 596:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 599:	6a 01                	push   $0x1
- 59b:	57                   	push   %edi
- 59c:	53                   	push   %ebx
- 59d:	e8 11 fd ff ff       	call   2b3 <write>
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 e1 fc ff ff       	call   2b3 <write>
         while(*s != 0){
- 5a2:	0f b6 06             	movzbl (%esi),%eax
- 5a5:	83 c4 10             	add    $0x10,%esp
- 5a8:	84 c0                	test   %al,%al
- 5aa:	75 e4                	jne    590 <printf+0x1a0>
- 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 8e fe ff ff       	jmp    444 <printf+0x54>
- 5b6:	66 90                	xchg   %ax,%ax
- 5b8:	66 90                	xchg   %ax,%ax
- 5ba:	66 90                	xchg   %ax,%ax
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	f3 0f 1e fb          	endbr32 
- 5c4:	55                   	push   %ebp
+ 5f0:	f3 0f 1e fb          	endbr32 
+ 5f4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c5:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 5f5:	a1 38 0a 00 00       	mov    0xa38,%eax
 {
- 5ca:	89 e5                	mov    %esp,%ebp
- 5cc:	57                   	push   %edi
- 5cd:	56                   	push   %esi
- 5ce:	53                   	push   %ebx
- 5cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d2:	8b 10                	mov    (%eax),%edx
+ 5fa:	89 e5                	mov    %esp,%ebp
+ 5fc:	57                   	push   %edi
+ 5fd:	56                   	push   %esi
+ 5fe:	53                   	push   %ebx
+ 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 602:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 5d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d7:	39 c8                	cmp    %ecx,%eax
- 5d9:	73 15                	jae    5f0 <free+0x30>
- 5db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
- 5e0:	39 d1                	cmp    %edx,%ecx
- 5e2:	72 14                	jb     5f8 <free+0x38>
+ 607:	39 c8                	cmp    %ecx,%eax
+ 609:	73 15                	jae    620 <free+0x30>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e4:	39 d0                	cmp    %edx,%eax
- 5e6:	73 10                	jae    5f8 <free+0x38>
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
 {
- 5e8:	89 d0                	mov    %edx,%eax
+ 618:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5ea:	8b 10                	mov    (%eax),%edx
- 5ec:	39 c8                	cmp    %ecx,%eax
- 5ee:	72 f0                	jb     5e0 <free+0x20>
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 d0                	cmp    %edx,%eax
- 5f2:	72 f4                	jb     5e8 <free+0x28>
- 5f4:	39 d1                	cmp    %edx,%ecx
- 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 fa                	cmp    %edi,%edx
- 600:	74 1e                	je     620 <free+0x60>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 602:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 605:	8b 50 04             	mov    0x4(%eax),%edx
- 608:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 28                	je     637 <free+0x77>
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 60f:	89 08                	mov    %ecx,(%eax)
+ 63f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 641:	5b                   	pop    %ebx
   freep = p;
- 612:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 642:	a3 38 0a 00 00       	mov    %eax,0xa38
 }
- 617:	5e                   	pop    %esi
- 618:	5f                   	pop    %edi
- 619:	5d                   	pop    %ebp
- 61a:	c3                   	ret    
- 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 61f:	90                   	nop
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 620:	03 72 04             	add    0x4(%edx),%esi
- 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 626:	8b 10                	mov    (%eax),%edx
- 628:	8b 12                	mov    (%edx),%edx
- 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62d:	8b 50 04             	mov    0x4(%eax),%edx
- 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 633:	39 f1                	cmp    %esi,%ecx
- 635:	75 d8                	jne    60f <free+0x4f>
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
     p->s.size += bp->s.size;
- 637:	03 53 fc             	add    -0x4(%ebx),%edx
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 63a:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 66a:	a3 38 0a 00 00       	mov    %eax,0xa38
     p->s.size += bp->s.size;
- 63f:	89 50 04             	mov    %edx,0x4(%eax)
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 645:	89 10                	mov    %edx,(%eax)
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
 }
- 647:	5b                   	pop    %ebx
- 648:	5e                   	pop    %esi
- 649:	5f                   	pop    %edi
- 64a:	5d                   	pop    %ebp
- 64b:	c3                   	ret    
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000650 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	f3 0f 1e fb          	endbr32 
- 654:	55                   	push   %ebp
- 655:	89 e5                	mov    %esp,%ebp
- 657:	57                   	push   %edi
- 658:	56                   	push   %esi
- 659:	53                   	push   %ebx
- 65a:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+ 685:	89 e5                	mov    %esp,%ebp
+ 687:	57                   	push   %edi
+ 688:	56                   	push   %esi
+ 689:	53                   	push   %ebx
+ 68a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 65d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 68d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 660:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 690:	8b 3d 38 0a 00 00    	mov    0xa38,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 666:	8d 70 07             	lea    0x7(%eax),%esi
- 669:	c1 ee 03             	shr    $0x3,%esi
- 66c:	83 c6 01             	add    $0x1,%esi
+ 696:	8d 70 07             	lea    0x7(%eax),%esi
+ 699:	c1 ee 03             	shr    $0x3,%esi
+ 69c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 66f:	85 ff                	test   %edi,%edi
- 671:	0f 84 a9 00 00 00    	je     720 <malloc+0xd0>
+ 69f:	85 ff                	test   %edi,%edi
+ 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 677:	8b 07                	mov    (%edi),%eax
+ 6a7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 679:	8b 48 04             	mov    0x4(%eax),%ecx
- 67c:	39 f1                	cmp    %esi,%ecx
- 67e:	73 6d                	jae    6ed <malloc+0x9d>
- 680:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 686:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 68b:	0f 43 de             	cmovae %esi,%ebx
+ 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ac:	39 f1                	cmp    %esi,%ecx
+ 6ae:	73 6d                	jae    71d <malloc+0x9d>
+ 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6bb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 68e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 695:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 698:	eb 17                	jmp    6b1 <malloc+0x61>
- 69a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a0:	8b 10                	mov    (%eax),%edx
+ 6d0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6a2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6a5:	39 f1                	cmp    %esi,%ecx
- 6a7:	73 4f                	jae    6f8 <malloc+0xa8>
- 6a9:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
- 6af:	89 d0                	mov    %edx,%eax
+ 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 38 0a 00 00    	mov    0xa38,%edi
+ 6df:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	39 c7                	cmp    %eax,%edi
- 6b3:	75 eb                	jne    6a0 <malloc+0x50>
+ 6e1:	39 c7                	cmp    %eax,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6b5:	83 ec 0c             	sub    $0xc,%esp
- 6b8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6bb:	e8 5b fc ff ff       	call   31b <sbrk>
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 2b fc ff ff       	call   31b <sbrk>
   if(p == (char*)-1)
- 6c0:	83 c4 10             	add    $0x10,%esp
- 6c3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6c6:	74 1b                	je     6e3 <malloc+0x93>
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1b                	je     713 <malloc+0x93>
   hp->s.size = nu;
- 6c8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6cb:	83 ec 0c             	sub    $0xc,%esp
- 6ce:	83 c0 08             	add    $0x8,%eax
- 6d1:	50                   	push   %eax
- 6d2:	e8 e9 fe ff ff       	call   5c0 <free>
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
   return freep;
- 6d7:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 707:	a1 38 0a 00 00       	mov    0xa38,%eax
       if((p = morecore(nunits)) == 0)
- 6dc:	83 c4 10             	add    $0x10,%esp
- 6df:	85 c0                	test   %eax,%eax
- 6e1:	75 bd                	jne    6a0 <malloc+0x50>
+ 70c:	83 c4 10             	add    $0x10,%esp
+ 70f:	85 c0                	test   %eax,%eax
+ 711:	75 bd                	jne    6d0 <malloc+0x50>
         return 0;
   }
 }
- 6e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6e6:	31 c0                	xor    %eax,%eax
+ 716:	31 c0                	xor    %eax,%eax
 }
- 6e8:	5b                   	pop    %ebx
- 6e9:	5e                   	pop    %esi
- 6ea:	5f                   	pop    %edi
- 6eb:	5d                   	pop    %ebp
- 6ec:	c3                   	ret    
+ 718:	5b                   	pop    %ebx
+ 719:	5e                   	pop    %esi
+ 71a:	5f                   	pop    %edi
+ 71b:	5d                   	pop    %ebp
+ 71c:	c3                   	ret    
     if(p->s.size >= nunits){
- 6ed:	89 c2                	mov    %eax,%edx
- 6ef:	89 f8                	mov    %edi,%eax
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71d:	89 c2                	mov    %eax,%edx
+ 71f:	89 f8                	mov    %edi,%eax
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 6f8:	39 ce                	cmp    %ecx,%esi
- 6fa:	74 54                	je     750 <malloc+0x100>
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
         p->s.size -= nunits;
- 6fc:	29 f1                	sub    %esi,%ecx
- 6fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 701:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 704:	89 72 04             	mov    %esi,0x4(%edx)
+ 734:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 707:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 737:	a3 38 0a 00 00       	mov    %eax,0xa38
 }
- 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 70f:	8d 42 08             	lea    0x8(%edx),%eax
+ 73f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 712:	5b                   	pop    %ebx
- 713:	5e                   	pop    %esi
- 714:	5f                   	pop    %edi
- 715:	5d                   	pop    %ebp
- 716:	c3                   	ret    
- 717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71e:	66 90                	xchg   %ax,%ax
+ 742:	5b                   	pop    %ebx
+ 743:	5e                   	pop    %esi
+ 744:	5f                   	pop    %edi
+ 745:	5d                   	pop    %ebp
+ 746:	c3                   	ret    
+ 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
- 727:	0a 00 00 
+ 750:	c7 05 38 0a 00 00 3c 	movl   $0xa3c,0xa38
+ 757:	0a 00 00 
     base.s.size = 0;
- 72a:	bf 0c 0a 00 00       	mov    $0xa0c,%edi
+ 75a:	bf 3c 0a 00 00       	mov    $0xa3c,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
- 736:	0a 00 00 
+ 75f:	c7 05 3c 0a 00 00 3c 	movl   $0xa3c,0xa3c
+ 766:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 f8                	mov    %edi,%eax
+ 769:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 73b:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
- 742:	00 00 00 
+ 76b:	c7 05 40 0a 00 00 00 	movl   $0x0,0xa40
+ 772:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 36 ff ff ff       	jmp    680 <malloc+0x30>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 0a                	mov    (%edx),%ecx
- 752:	89 08                	mov    %ecx,(%eax)
- 754:	eb b1                	jmp    707 <malloc+0xb7>
+ 780:	8b 0a                	mov    (%edx),%ecx
+ 782:	89 08                	mov    %ecx,(%eax)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
Binary files xv6-public/zombie.o and xv6-public-hybrid/zombie.o differ
diff -u xv6-public/zombie.sym xv6-public-hybrid/zombie.sym
--- xv6-public/zombie.sym	2022-10-07 20:01:02.462201227 +0530
+++ xv6-public-hybrid/zombie.sym	2022-10-07 18:39:48.109123000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000758 .rodata
-00000774 .eh_frame
-00000a08 .bss
+00000788 .rodata
+000007a4 .eh_frame
+00000a38 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,21 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000340 printint
-00000760 digits.1085
+00000370 printint
+00000790 digits.1100
 00000000 umalloc.c
-00000a08 freep
-00000a0c base
+00000a38 freep
+00000a3c base
 00000030 strcpy
-000003f0 printf
+00000420 printf
 00000260 memmove
 000002db mknod
+00000333 wolfie
 00000150 gets
 00000313 getpid
-00000650 malloc
+00000680 malloc
 00000323 sleep
+00000353 get_burst_time
 000002a3 pipe
 000002b3 write
 000002eb fstat
@@ -38,14 +40,18 @@
 0000028b fork
 0000031b sbrk
 0000032b uptime
-00000a08 __bss_start
+00000a38 __bss_start
 000000f0 memset
 00000000 main
+0000035b set_burst_time
 00000060 strcmp
 0000030b dup
+00000343 getMaxPid
+0000033b getNumProc
+0000034b getProcInfo
 000001d0 stat
-00000a08 _edata
-00000a14 _end
+00000a38 _edata
+00000a44 _end
 000002f3 link
 00000293 exit
 00000220 atoi
@@ -54,4 +60,4 @@
 00000110 strchr
 000002fb mkdir
 000002bb close
-000005c0 free
+000005f0 free
